[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 2 projects.
[info] Excluded 2 projects, run ++ 2.12.6 -v for more details.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jun 2, 2018 8:35:27 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.27.3-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.27.3-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d6(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d6(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d8(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d10(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d14(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d7(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e6(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e10(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e14(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e6(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e7(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = new mutable.ListBuffer[Boolean]();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.toList
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:12:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:33:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:42:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:48:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:60:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:6:14: Unused import
[warn] import ujson.BytesRenderer
[warn]              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 64 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.3-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53173.926 ops/s
[info] # Warmup Iteration   2: 633483.750 ops/s
[info] # Warmup Iteration   3: 821963.992 ops/s
[info] # Warmup Iteration   4: 827221.761 ops/s
[info] # Warmup Iteration   5: 842355.581 ops/s
[info] Iteration   1: 850456.869 ops/s
[info]                  ·gc.alloc.rate:                   2445.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              4525.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3720.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 849815.578 ops/s
[info]                  ·gc.alloc.rate:                   2459.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              4554.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4950.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 830419.151 ops/s
[info]                  ·gc.alloc.rate:                   2391.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              4532.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3798.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 843602.063 ops/s
[info]                  ·gc.alloc.rate:               2468.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          4605.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4994.894 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 851066.634 ops/s
[info]                  ·gc.alloc.rate:               2463.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          4556.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3723.378 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   845072.059 ±(99.9%) 33585.732 ops/s [Average]
[info]   (min, avg, max) = (830419.151, 845072.059, 851066.634), stdev = 8722.108
[info]   CI (99.9%): [811486.327, 878657.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2445.836 ±(99.9%) 121.220 MB/sec [Average]
[info]   (min, avg, max) = (2391.693, 2445.836, 2468.824), stdev = 31.481
[info]   CI (99.9%): [2324.616, 2567.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4555.011 ±(99.9%) 120.452 B/op [Average]
[info]   (min, avg, max) = (4525.881, 4555.011, 4605.693), stdev = 31.281
[info]   CI (99.9%): [4434.559, 4675.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2275.774 ±(99.9%) 1404.439 MB/sec [Average]
[info]   (min, avg, max) = (2004.496, 2275.774, 2677.450), stdev = 364.728
[info]   CI (99.9%): [871.335, 3680.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4237.639 ±(99.9%) 2587.480 B/op [Average]
[info]   (min, avg, max) = (3720.427, 4237.639, 4994.894), stdev = 671.960
[info]   CI (99.9%): [1650.159, 6825.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.830), stdev = 1.699
[info]   CI (99.9%): [≈ 0, 7.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.464 ±(99.9%) 12.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.464, 7.088), stdev = 3.145
[info]   CI (99.9%): [≈ 0, 13.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.20% complete, ETA 02:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70121.638 ops/s
[info] # Warmup Iteration   2: 1806315.191 ops/s
[info] # Warmup Iteration   3: 1928898.528 ops/s
[info] # Warmup Iteration   4: 2001333.554 ops/s
[info] # Warmup Iteration   5: 1972269.092 ops/s
[info] Iteration   1: 1990311.044 ops/s
[info]                  ·gc.alloc.rate:                   1370.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              1083.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1055.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1910339.328 ops/s
[info]                  ·gc.alloc.rate:                   1312.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1080.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1100.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1992957.527 ops/s
[info]                  ·gc.alloc.rate:                   1387.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              1095.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1055.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1947242.906 ops/s
[info]                  ·gc.alloc.rate:                   1345.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              1087.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1081.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2007799.636 ops/s
[info]                  ·gc.alloc.rate:                   1385.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              1085.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1045.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1969730.088 ±(99.9%) 154570.094 ops/s [Average]
[info]   (min, avg, max) = (1910339.328, 1969730.088, 2007799.636), stdev = 40141.362
[info]   CI (99.9%): [1815159.994, 2124300.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1360.325 ±(99.9%) 122.121 MB/sec [Average]
[info]   (min, avg, max) = (1312.089, 1360.325, 1387.956), stdev = 31.714
[info]   CI (99.9%): [1238.204, 1482.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1086.790 ±(99.9%) 21.606 B/op [Average]
[info]   (min, avg, max) = (1080.982, 1086.790, 1095.799), stdev = 5.611
[info]   CI (99.9%): [1065.184, 1108.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1335.884 ±(99.9%) 6.389 MB/sec [Average]
[info]   (min, avg, max) = (1333.568, 1335.884, 1337.625), stdev = 1.659
[info]   CI (99.9%): [1329.495, 1342.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1067.675 ±(99.9%) 86.863 B/op [Average]
[info]   (min, avg, max) = (1045.379, 1067.675, 1100.415), stdev = 22.558
[info]   CI (99.9%): [980.812, 1154.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 7.381 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.891, 4.320), stdev = 1.917
[info]   CI (99.9%): [≈ 0, 8.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.720 ±(99.9%) 5.966 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.720, 3.491), stdev = 1.549
[info]   CI (99.9%): [≈ 0, 6.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.40% complete, ETA 02:11:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1686599.367 ops/s
[info] # Warmup Iteration   2: 5897612.431 ops/s
[info] # Warmup Iteration   3: 6048633.837 ops/s
[info] # Warmup Iteration   4: 6051536.189 ops/s
[info] # Warmup Iteration   5: 6059003.881 ops/s
[info] Iteration   1: 5805728.745 ops/s
[info]                  ·gc.alloc.rate:               400.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138.695 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 5727500.752 ops/s
[info]                  ·gc.alloc.rate:               398.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          109.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140.590 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6068839.389 ops/s
[info]                  ·gc.alloc.rate:      401.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.103 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6033308.283 ops/s
[info]                  ·gc.alloc.rate:               416.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.250 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6048353.814 ops/s
[info]                  ·gc.alloc.rate:                   413.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              107.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5936746.197 ±(99.9%) 609382.916 ops/s [Average]
[info]   (min, avg, max) = (5727500.752, 5936746.197, 6068839.389), stdev = 158254.808
[info]   CI (99.9%): [5327363.281, 6546129.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   406.321 ±(99.9%) 31.696 MB/sec [Average]
[info]   (min, avg, max) = (398.827, 406.321, 416.640), stdev = 8.231
[info]   CI (99.9%): [374.625, 438.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.729 ±(99.9%) 8.227 B/op [Average]
[info]   (min, avg, max) = (104.103, 107.729, 109.564), stdev = 2.137
[info]   CI (99.9%): [99.502, 115.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.440 ±(99.9%) 1064.721 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.440, 671.903), stdev = 276.505
[info]   CI (99.9%): [≈ 0, 1538.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   125.871 ±(99.9%) 279.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 125.871, 175.250), stdev = 72.558
[info]   CI (99.9%): [≈ 0, 405.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.60% complete, ETA 02:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434.789 ops/s
[info] # Warmup Iteration   2: 180760.131 ops/s
[info] # Warmup Iteration   3: 305780.739 ops/s
[info] # Warmup Iteration   4: 310227.893 ops/s
[info] # Warmup Iteration   5: 311694.269 ops/s
[info] Iteration   1: 312709.945 ops/s
[info]                  ·gc.alloc.rate:                   2757.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              13878.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13501.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.849 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 313227.498 ops/s
[info]                  ·gc.alloc.rate:                   2736.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              13744.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13485.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 313150.590 ops/s
[info]                  ·gc.alloc.rate:               2776.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          13952.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13512.733 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 308337.692 ops/s
[info]                  ·gc.alloc.rate:               2735.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          13962.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13755.624 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 313426.630 ops/s
[info]                  ·gc.alloc.rate:                   2779.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              13956.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13562.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   312170.471 ±(99.9%) 8311.752 ops/s [Average]
[info]   (min, avg, max) = (308337.692, 312170.471, 313426.630), stdev = 2158.535
[info]   CI (99.9%): [303858.719, 320482.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2756.997 ±(99.9%) 80.289 MB/sec [Average]
[info]   (min, avg, max) = (2735.474, 2756.997, 2779.348), stdev = 20.851
[info]   CI (99.9%): [2676.708, 2837.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13898.905 ±(99.9%) 356.920 B/op [Average]
[info]   (min, avg, max) = (13744.971, 13898.905, 13962.668), stdev = 92.691
[info]   CI (99.9%): [13541.985, 14255.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2690.411 ±(99.9%) 28.847 MB/sec [Average]
[info]   (min, avg, max) = (2682.418, 2690.411, 2700.898), stdev = 7.492
[info]   CI (99.9%): [2661.564, 2719.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13563.613 ±(99.9%) 427.758 B/op [Average]
[info]   (min, avg, max) = (13485.981, 13563.613, 13755.624), stdev = 111.087
[info]   CI (99.9%): [13135.855, 13991.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.404 ±(99.9%) 3.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 1.957), stdev = 0.868
[info]   CI (99.9%): [≈ 0, 3.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.032 ±(99.9%) 16.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.032, 9.849), stdev = 4.370
[info]   CI (99.9%): [≈ 0, 18.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.80% complete, ETA 02:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37021.908 ops/s
[info] # Warmup Iteration   2: 834857.326 ops/s
[info] # Warmup Iteration   3: 922257.957 ops/s
[info] # Warmup Iteration   4: 918669.813 ops/s
[info] # Warmup Iteration   5: 920245.469 ops/s
[info] Iteration   1: 926662.960 ops/s
[info]                  ·gc.alloc.rate:                   2455.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              4169.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3413.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 908334.404 ops/s
[info]                  ·gc.alloc.rate:                   2444.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              4234.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4630.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 894781.359 ops/s
[info]                  ·gc.alloc.rate:               2398.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          4219.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3530.334 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 918851.230 ops/s
[info]                  ·gc.alloc.rate:                   2489.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              4262.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4593.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 900196.459 ops/s
[info]                  ·gc.alloc.rate:               2414.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          4219.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3524.793 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   909765.282 ±(99.9%) 50435.120 ops/s [Average]
[info]   (min, avg, max) = (894781.359, 909765.282, 926662.960), stdev = 13097.841
[info]   CI (99.9%): [859330.162, 960200.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2440.354 ±(99.9%) 135.999 MB/sec [Average]
[info]   (min, avg, max) = (2398.854, 2440.354, 2489.028), stdev = 35.318
[info]   CI (99.9%): [2304.356, 2576.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4221.299 ±(99.9%) 130.349 B/op [Average]
[info]   (min, avg, max) = (4169.675, 4221.299, 4262.867), stdev = 33.851
[info]   CI (99.9%): [4090.951, 4351.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2277.697 ±(99.9%) 1404.785 MB/sec [Average]
[info]   (min, avg, max) = (2007.117, 2277.697, 2681.874), stdev = 364.818
[info]   CI (99.9%): [872.912, 3682.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3938.505 ±(99.9%) 2374.699 B/op [Average]
[info]   (min, avg, max) = (3413.445, 3938.505, 4630.805), stdev = 616.702
[info]   CI (99.9%): [1563.806, 6313.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.208), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.354), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.00% complete, ETA 02:10:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177214.911 ops/s
[info] # Warmup Iteration   2: 2476406.603 ops/s
[info] # Warmup Iteration   3: 2664014.565 ops/s
[info] # Warmup Iteration   4: 2720170.211 ops/s
[info] # Warmup Iteration   5: 2682835.710 ops/s
[info] Iteration   1: 2734761.823 ops/s
[info]                  ·gc.alloc.rate:                   1175.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              676.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2660546.216 ops/s
[info]                  ·gc.alloc.rate:               1124.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          664.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 395.250 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2659754.654 ops/s
[info]                  ·gc.alloc.rate:                   1160.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              686.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2699658.488 ops/s
[info]                  ·gc.alloc.rate:                   1152.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              671.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2769053.849 ops/s
[info]                  ·gc.alloc.rate:                   1167.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              663.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     380.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2704755.006 ±(99.9%) 183059.280 ops/s [Average]
[info]   (min, avg, max) = (2659754.654, 2704755.006, 2769053.849), stdev = 47539.914
[info]   CI (99.9%): [2521695.726, 2887814.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1156.082 ±(99.9%) 76.129 MB/sec [Average]
[info]   (min, avg, max) = (1124.229, 1156.082, 1175.760), stdev = 19.771
[info]   CI (99.9%): [1079.953, 1232.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   672.715 ±(99.9%) 35.832 B/op [Average]
[info]   (min, avg, max) = (663.626, 672.715, 686.421), stdev = 9.305
[info]   CI (99.9%): [636.883, 708.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.177 ±(99.9%) 1410.073 MB/sec [Average]
[info]   (min, avg, max) = (668.218, 1070.177, 1339.148), stdev = 366.192
[info]   CI (99.9%): [≈ 0, 2480.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   623.384 ±(99.9%) 828.316 B/op [Average]
[info]   (min, avg, max) = (380.695, 623.384, 791.511), stdev = 215.111
[info]   CI (99.9%): [≈ 0, 1451.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 6.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.612), stdev = 1.610
[info]   CI (99.9%): [≈ 0, 6.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.417 ±(99.9%) 3.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.417, 2.053), stdev = 0.915
[info]   CI (99.9%): [≈ 0, 3.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.20% complete, ETA 02:10:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1938435.470 ops/s
[info] # Warmup Iteration   2: 13270326.585 ops/s
[info] # Warmup Iteration   3: 15029677.708 ops/s
[info] # Warmup Iteration   4: 14664304.271 ops/s
[info] # Warmup Iteration   5: 15032973.693 ops/s
[info] Iteration   1: 14977732.913 ops/s
[info]                  ·gc.alloc.rate:               788.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15140222.016 ops/s
[info]                  ·gc.alloc.rate:               790.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15085956.567 ops/s
[info]                  ·gc.alloc.rate:               786.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.056 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 15148599.969 ops/s
[info]                  ·gc.alloc.rate:               786.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69.833 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 14873883.960 ops/s
[info]                  ·gc.alloc.rate:                   771.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              81.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   15045279.085 ±(99.9%) 452687.361 ops/s [Average]
[info]   (min, avg, max) = (14873883.960, 15045279.085, 15148599.969), stdev = 117561.470
[info]   CI (99.9%): [14592591.724, 15497966.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   784.575 ±(99.9%) 29.314 MB/sec [Average]
[info]   (min, avg, max) = (771.275, 784.575, 790.442), stdev = 7.613
[info]   CI (99.9%): [755.261, 813.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.064 ±(99.9%) 1.840 B/op [Average]
[info]   (min, avg, max) = (81.609, 82.064, 82.804), stdev = 0.478
[info]   CI (99.9%): [80.223, 83.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.642 ±(99.9%) 2.406 MB/sec [Average]
[info]   (min, avg, max) = (670.642, 671.642, 672.170), stdev = 0.625
[info]   CI (99.9%): [669.236, 674.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   70.255 ±(99.9%) 2.122 B/op [Average]
[info]   (min, avg, max) = (69.804, 70.255, 71.123), stdev = 0.551
[info]   CI (99.9%): [68.133, 72.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.41% complete, ETA 02:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1675567.348 ops/s
[info] # Warmup Iteration   2: 16295868.398 ops/s
[info] # Warmup Iteration   3: 17264184.521 ops/s
[info] # Warmup Iteration   4: 17319856.376 ops/s
[info] # Warmup Iteration   5: 17315265.867 ops/s
[info] Iteration   1: 17322292.319 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17312103.368 ops/s
[info]                  ·gc.alloc.rate:      0.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17266178.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17268768.410 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17264695.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   17286807.527 ±(99.9%) 107869.204 ops/s [Average]
[info]   (min, avg, max) = (17264695.428, 17286807.527, 17322292.319), stdev = 28013.290
[info]   CI (99.9%): [17178938.323, 17394676.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.028 ±(99.9%) 0.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.028, 0.141), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.61% complete, ETA 02:09:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8692.082 ops/s
[info] # Warmup Iteration   2: 250709.399 ops/s
[info] # Warmup Iteration   3: 718645.505 ops/s
[info] # Warmup Iteration   4: 720522.457 ops/s
[info] # Warmup Iteration   5: 716714.712 ops/s
[info] Iteration   1: 714318.615 ops/s
[info]                  ·gc.alloc.rate:                   2118.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              4665.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5887.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 706445.452 ops/s
[info]                  ·gc.alloc.rate:                   2098.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              4673.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4482.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 699380.708 ops/s
[info]                  ·gc.alloc.rate:               2054.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          4624.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4537.087 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 700082.440 ops/s
[info]                  ·gc.alloc.rate:               2043.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          4594.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3025.767 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 709947.181 ops/s
[info]                  ·gc.alloc.rate:                   2137.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              4738.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5978.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   706034.879 ±(99.9%) 24641.450 ops/s [Average]
[info]   (min, avg, max) = (699380.708, 706034.879, 714318.615), stdev = 6399.306
[info]   CI (99.9%): [681393.429, 730676.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2090.544 ±(99.9%) 155.179 MB/sec [Average]
[info]   (min, avg, max) = (2043.782, 2090.544, 2137.602), stdev = 40.300
[info]   CI (99.9%): [1935.365, 2245.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4659.129 ±(99.9%) 210.713 B/op [Average]
[info]   (min, avg, max) = (4594.185, 4659.129, 4738.362), stdev = 54.722
[info]   CI (99.9%): [4448.416, 4869.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.026 ±(99.9%) 2157.933 MB/sec [Average]
[info]   (min, avg, max) = (1346.051, 2149.026, 2697.130), stdev = 560.408
[info]   CI (99.9%): [≈ 0, 4306.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4782.388 ±(99.9%) 4671.950 B/op [Average]
[info]   (min, avg, max) = (3025.767, 4782.388, 5978.652), stdev = 1213.291
[info]   CI (99.9%): [110.438, 9454.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.200 ±(99.9%) 1.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.916), stdev = 0.401
[info]   CI (99.9%): [≈ 0, 1.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.445 ±(99.9%) 3.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 2.041), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1.81% complete, ETA 02:09:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175794.067 ops/s
[info] # Warmup Iteration   2: 1814317.572 ops/s
[info] # Warmup Iteration   3: 2048162.598 ops/s
[info] # Warmup Iteration   4: 2102258.270 ops/s
[info] # Warmup Iteration   5: 2120313.612 ops/s
[info] Iteration   1: 2137452.252 ops/s
[info]                  ·gc.alloc.rate:                   2960.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              2179.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1971.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2136853.143 ops/s
[info]                  ·gc.alloc.rate:                   2987.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              2199.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2465.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2090335.228 ops/s
[info]                  ·gc.alloc.rate:                   2911.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              2191.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2020.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2138336.416 ops/s
[info]                  ·gc.alloc.rate:               2976.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          2191.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1981.322 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 2139261.829 ops/s
[info]                  ·gc.alloc.rate:               2978.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          2190.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1985.815 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2128447.773 ±(99.9%) 82115.062 ops/s [Average]
[info]   (min, avg, max) = (2090335.228, 2128447.773, 2139261.829), stdev = 21325.021
[info]   CI (99.9%): [2046332.711, 2210562.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2962.735 ±(99.9%) 116.465 MB/sec [Average]
[info]   (min, avg, max) = (2911.485, 2962.735, 2987.200), stdev = 30.246
[info]   CI (99.9%): [2846.269, 3079.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2190.684 ±(99.9%) 27.698 B/op [Average]
[info]   (min, avg, max) = (2179.709, 2190.684, 2199.895), stdev = 7.193
[info]   CI (99.9%): [2162.986, 2218.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2820.198 ±(99.9%) 1136.395 MB/sec [Average]
[info]   (min, avg, max) = (2677.856, 2820.198, 3347.925), stdev = 295.118
[info]   CI (99.9%): [1683.804, 3956.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2085.039 ±(99.9%) 822.171 B/op [Average]
[info]   (min, avg, max) = (1971.752, 2085.039, 2465.547), stdev = 213.515
[info]   CI (99.9%): [1262.868, 2907.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.092), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.01% complete, ETA 02:09:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.634 ops/s
[info] # Warmup Iteration   2: 8919168.435 ops/s
[info] # Warmup Iteration   3: 9936016.969 ops/s
[info] # Warmup Iteration   4: 10162837.144 ops/s
[info] # Warmup Iteration   5: 9877748.997 ops/s
[info] Iteration   1: 9813754.109 ops/s
[info]                  ·gc.alloc.rate:                   1234.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10355455.072 ops/s
[info]                  ·gc.alloc.rate:                   1294.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10387361.997 ops/s
[info]                  ·gc.alloc.rate:               1296.949 MB/sec
[info]                  ·gc.alloc.rate.norm:          196.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 202.380 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 10394359.966 ops/s
[info]                  ·gc.alloc.rate:                   1306.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10423373.038 ops/s
[info]                  ·gc.alloc.rate:                   1323.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              199.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10274860.837 ±(99.9%) 996913.924 ops/s [Average]
[info]   (min, avg, max) = (9813754.109, 10274860.837, 10423373.038), stdev = 258895.380
[info]   CI (99.9%): [9277946.912, 11271774.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1291.224 ±(99.9%) 129.011 MB/sec [Average]
[info]   (min, avg, max) = (1234.754, 1291.224, 1323.191), stdev = 33.504
[info]   CI (99.9%): [1162.213, 1420.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.772 ±(99.9%) 4.971 B/op [Average]
[info]   (min, avg, max) = (196.500, 197.772, 199.768), stdev = 1.291
[info]   CI (99.9%): [192.801, 202.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1335.054 ±(99.9%) 5.807 MB/sec [Average]
[info]   (min, avg, max) = (1333.065, 1335.054, 1337.078), stdev = 1.508
[info]   CI (99.9%): [1329.246, 1340.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   204.589 ±(99.9%) 19.839 B/op [Average]
[info]   (min, avg, max) = (201.559, 204.589, 213.770), stdev = 5.152
[info]   CI (99.9%): [184.750, 224.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.819 ±(99.9%) 6.656 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.819, 3.909), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 7.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.124 ±(99.9%) 1.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.592), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.21% complete, ETA 02:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108216.352 ops/s
[info] # Warmup Iteration   2: 2938219.174 ops/s
[info] # Warmup Iteration   3: 3160758.788 ops/s
[info] # Warmup Iteration   4: 3188253.026 ops/s
[info] # Warmup Iteration   5: 3171159.364 ops/s
[info] Iteration   1: 3173523.436 ops/s
[info]                  ·gc.alloc.rate:               1959.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          971.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 663.380 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 3202137.982 ops/s
[info]                  ·gc.alloc.rate:                   1970.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              968.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     657.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3144159.942 ops/s
[info]                  ·gc.alloc.rate:               1957.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          979.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1001.682 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3197826.781 ops/s
[info]                  ·gc.alloc.rate:                   1987.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              978.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     984.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3131174.003 ops/s
[info]                  ·gc.alloc.rate:               1961.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          985.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1006.669 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3169764.429 ±(99.9%) 121684.056 ops/s [Average]
[info]   (min, avg, max) = (3131174.003, 3169764.429, 3202137.982), stdev = 31600.963
[info]   CI (99.9%): [3048080.373, 3291448.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1967.202 ±(99.9%) 48.286 MB/sec [Average]
[info]   (min, avg, max) = (1957.469, 1967.202, 1987.902), stdev = 12.540
[info]   CI (99.9%): [1918.916, 2015.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   976.557 ±(99.9%) 26.291 B/op [Average]
[info]   (min, avg, max) = (968.213, 976.557, 985.417), stdev = 6.828
[info]   CI (99.9%): [950.266, 1002.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.308 ±(99.9%) 1401.784 MB/sec [Average]
[info]   (min, avg, max) = (1337.076, 1736.308, 2003.744), stdev = 364.039
[info]   CI (99.9%): [334.524, 3138.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   862.714 ±(99.9%) 712.405 B/op [Average]
[info]   (min, avg, max) = (657.133, 862.714, 1006.669), stdev = 185.009
[info]   CI (99.9%): [150.309, 1575.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.41% complete, ETA 02:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3838286.383 ops/s
[info] # Warmup Iteration   2: 13188538.839 ops/s
[info] # Warmup Iteration   3: 13277319.199 ops/s
[info] # Warmup Iteration   4: 13594503.147 ops/s
[info] # Warmup Iteration   5: 13463031.625 ops/s
[info] Iteration   1: 13633668.909 ops/s
[info]                  ·gc.alloc.rate:               1787.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          206.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 233.318 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 13405122.702 ops/s
[info]                  ·gc.alloc.rate:                   1743.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13333309.336 ops/s
[info]                  ·gc.alloc.rate:                   1774.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              209.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13600556.852 ops/s
[info]                  ·gc.alloc.rate:               1766.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.564 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 13664599.272 ops/s
[info]                  ·gc.alloc.rate:                   1816.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              209.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13527451.414 ±(99.9%) 571439.828 ops/s [Average]
[info]   (min, avg, max) = (13333309.336, 13527451.414, 13664599.272), stdev = 148401.109
[info]   CI (99.9%): [12956011.586, 14098891.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1777.806 ±(99.9%) 103.829 MB/sec [Average]
[info]   (min, avg, max) = (1743.573, 1777.806, 1816.754), stdev = 26.964
[info]   CI (99.9%): [1673.977, 1881.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.814 ±(99.9%) 9.321 B/op [Average]
[info]   (min, avg, max) = (204.469, 206.814, 209.444), stdev = 2.421
[info]   CI (99.9%): [197.493, 216.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1749.949 ±(99.9%) 1417.937 MB/sec [Average]
[info]   (min, avg, max) = (1344.341, 1749.949, 2021.633), stdev = 368.234
[info]   CI (99.9%): [332.012, 3167.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   203.538 ±(99.9%) 164.094 B/op [Average]
[info]   (min, avg, max) = (155.564, 203.538, 238.182), stdev = 42.615
[info]   CI (99.9%): [39.444, 367.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.546 ±(99.9%) 4.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.666), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.313), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2.61% complete, ETA 02:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18029.007 ops/s
[info] # Warmup Iteration   2: 275962.970 ops/s
[info] # Warmup Iteration   3: 399167.189 ops/s
[info] # Warmup Iteration   4: 1198524.360 ops/s
[info] # Warmup Iteration   5: 1164563.421 ops/s
[info] Iteration   1: 1216488.310 ops/s
[info]                  ·gc.alloc.rate:                   2643.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              3419.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3458.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1219975.196 ops/s
[info]                  ·gc.alloc.rate:                   2630.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              3393.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2579.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1222670.000 ops/s
[info]                  ·gc.alloc.rate:                   2671.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              3438.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3426.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1221098.268 ops/s
[info]                  ·gc.alloc.rate:                   2642.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              3405.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3436.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 1217065.755 ops/s
[info]                  ·gc.alloc.rate:                   2673.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              3457.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3458.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1219459.506 ±(99.9%) 10154.462 ops/s [Average]
[info]   (min, avg, max) = (1216488.310, 1219459.506, 1222670.000), stdev = 2637.082
[info]   CI (99.9%): [1209305.043, 1229613.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2652.189 ±(99.9%) 74.866 MB/sec [Average]
[info]   (min, avg, max) = (2630.073, 2652.189, 2673.901), stdev = 19.443
[info]   CI (99.9%): [2577.323, 2727.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3422.821 ±(99.9%) 99.471 B/op [Average]
[info]   (min, avg, max) = (3393.029, 3422.821, 3457.756), stdev = 25.832
[info]   CI (99.9%): [3323.350, 3522.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2535.134 ±(99.9%) 1153.931 MB/sec [Average]
[info]   (min, avg, max) = (1999.132, 2535.134, 2674.205), stdev = 299.672
[info]   CI (99.9%): [1381.203, 3689.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3271.830 ±(99.9%) 1492.185 B/op [Average]
[info]   (min, avg, max) = (2579.059, 3271.830, 3458.596), stdev = 387.516
[info]   CI (99.9%): [1779.646, 4764.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 6.663 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.933, 4.018), stdev = 1.730
[info]   CI (99.9%): [≈ 0, 7.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.206 ±(99.9%) 8.622 B/op [Average]
[info]   (min, avg, max) = (0.027, 1.206, 5.198), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 9.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 14.000), stdev = 3.912
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2.81% complete, ETA 02:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263138.211 ops/s
[info] # Warmup Iteration   2: 2184449.424 ops/s
[info] # Warmup Iteration   3: 2405618.187 ops/s
[info] # Warmup Iteration   4: 2350572.903 ops/s
[info] # Warmup Iteration   5: 2351651.145 ops/s
[info] Iteration   1: 2334369.447 ops/s
[info]                  ·gc.alloc.rate:                   2046.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              1378.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1355.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2422950.091 ops/s
[info]                  ·gc.alloc.rate:                   2147.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              1394.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1305.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2433592.070 ops/s
[info]                  ·gc.alloc.rate:               2131.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          1378.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1297.633 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2386094.535 ops/s
[info]                  ·gc.alloc.rate:               2117.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          1396.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1324.983 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2408089.270 ops/s
[info]                  ·gc.alloc.rate:                   2136.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              1396.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1314.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2397019.083 ±(99.9%) 151316.983 ops/s [Average]
[info]   (min, avg, max) = (2334369.447, 2397019.083, 2433592.070), stdev = 39296.540
[info]   CI (99.9%): [2245702.099, 2548336.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2115.843 ±(99.9%) 155.311 MB/sec [Average]
[info]   (min, avg, max) = (2046.255, 2115.843, 2147.394), stdev = 40.334
[info]   CI (99.9%): [1960.531, 2271.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1388.962 ±(99.9%) 36.847 B/op [Average]
[info]   (min, avg, max) = (1378.266, 1388.962, 1396.765), stdev = 9.569
[info]   CI (99.9%): [1352.115, 1425.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2009.493 ±(99.9%) 6.996 MB/sec [Average]
[info]   (min, avg, max) = (2007.005, 2009.493, 2011.339), stdev = 1.817
[info]   CI (99.9%): [2002.497, 2016.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1319.468 ±(99.9%) 86.380 B/op [Average]
[info]   (min, avg, max) = (1297.633, 1319.468, 1355.144), stdev = 22.433
[info]   CI (99.9%): [1233.089, 1405.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.732 ±(99.9%) 6.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.732, 3.576), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 6.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.493 ±(99.9%) 4.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.493, 2.409), stdev = 1.072
[info]   CI (99.9%): [≈ 0, 4.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.01% complete, ETA 02:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.683 ops/s
[info] # Warmup Iteration   2: 17377210.966 ops/s
[info] # Warmup Iteration   3: 18889453.130 ops/s
[info] # Warmup Iteration   4: 18012228.201 ops/s
[info] # Warmup Iteration   5: 18976290.165 ops/s
[info] Iteration   1: 19011297.634 ops/s
[info]                  ·gc.alloc.rate:               600.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 18958549.930 ops/s
[info]                  ·gc.alloc.rate:               596.110 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 19094552.307 ops/s
[info]                  ·gc.alloc.rate:                   599.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18911812.217 ops/s
[info]                  ·gc.alloc.rate:               600.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.437 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 18888861.449 ops/s
[info]                  ·gc.alloc.rate:               618.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          51.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.561 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   18973014.707 ±(99.9%) 317962.221 ops/s [Average]
[info]   (min, avg, max) = (18888861.449, 18973014.707, 19094552.307), stdev = 82573.779
[info]   CI (99.9%): [18655052.486, 19290976.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   603.014 ±(99.9%) 33.393 MB/sec [Average]
[info]   (min, avg, max) = (596.110, 603.014, 618.177), stdev = 8.672
[info]   CI (99.9%): [569.621, 636.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   50.022 ±(99.9%) 3.308 B/op [Average]
[info]   (min, avg, max) = (49.430, 50.022, 51.509), stdev = 0.859
[info]   CI (99.9%): [46.715, 53.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.032 ±(99.9%) 2.180 MB/sec [Average]
[info]   (min, avg, max) = (665.464, 666.032, 666.808), stdev = 0.566
[info]   CI (99.9%): [663.852, 668.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   55.249 ±(99.9%) 1.009 B/op [Average]
[info]   (min, avg, max) = (54.907, 55.249, 55.561), stdev = 0.262
[info]   CI (99.9%): [54.239, 56.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.21% complete, ETA 02:08:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 809135.658 ops/s
[info] # Warmup Iteration   2: 6048535.239 ops/s
[info] # Warmup Iteration   3: 6346010.849 ops/s
[info] # Warmup Iteration   4: 6417348.648 ops/s
[info] # Warmup Iteration   5: 6382572.028 ops/s
[info] Iteration   1: 6369739.461 ops/s
[info]                  ·gc.alloc.rate:                   1816.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              448.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 6309880.647 ops/s
[info]                  ·gc.alloc.rate:                   1769.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     333.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6247932.422 ops/s
[info]                  ·gc.alloc.rate:                   1780.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              448.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     504.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6280562.143 ops/s
[info]                  ·gc.alloc.rate:               1763.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 334.175 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6277909.312 ops/s
[info]                  ·gc.alloc.rate:               1803.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 501.849 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6297204.797 ±(99.9%) 177495.632 ops/s [Average]
[info]   (min, avg, max) = (6247932.422, 6297204.797, 6369739.461), stdev = 46095.052
[info]   CI (99.9%): [6119709.165, 6474700.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1786.394 ±(99.9%) 86.624 MB/sec [Average]
[info]   (min, avg, max) = (1763.508, 1786.394, 1816.110), stdev = 22.496
[info]   CI (99.9%): [1699.770, 1873.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   446.398 ±(99.9%) 18.169 B/op [Average]
[info]   (min, avg, max) = (441.227, 446.398, 451.991), stdev = 4.718
[info]   CI (99.9%): [428.229, 464.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.549 ±(99.9%) 1407.080 MB/sec [Average]
[info]   (min, avg, max) = (1334.162, 1736.549, 2006.332), stdev = 365.414
[info]   CI (99.9%): [329.469, 3143.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   433.944 ±(99.9%) 351.540 B/op [Average]
[info]   (min, avg, max) = (333.817, 433.944, 504.259), stdev = 91.294
[info]   CI (99.9%): [82.403, 785.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.781 ±(99.9%) 6.368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.781, 3.737), stdev = 1.654
[info]   CI (99.9%): [≈ 0, 7.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.195 ±(99.9%) 1.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.195, 0.932), stdev = 0.412
[info]   CI (99.9%): [≈ 0, 1.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3.41% complete, ETA 02:07:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6961157.802 ops/s
[info] # Warmup Iteration   2: 24766814.361 ops/s
[info] # Warmup Iteration   3: 28448617.489 ops/s
[info] # Warmup Iteration   4: 27810831.046 ops/s
[info] # Warmup Iteration   5: 28550388.739 ops/s
[info] Iteration   1: 28479774.349 ops/s
[info]                  ·gc.alloc.rate:               912.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.142 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 28148812.883 ops/s
[info]                  ·gc.alloc.rate:               887.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 28598689.776 ops/s
[info]                  ·gc.alloc.rate:               889.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.953 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 28466217.752 ops/s
[info]                  ·gc.alloc.rate:                   899.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27583812.470 ops/s
[info]                  ·gc.alloc.rate:               870.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.352 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   28255461.446 ±(99.9%) 1581844.396 ops/s [Average]
[info]   (min, avg, max) = (27583812.470, 28255461.446, 28598689.776), stdev = 410799.966
[info]   CI (99.9%): [26673617.050, 29837305.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   891.797 ±(99.9%) 60.134 MB/sec [Average]
[info]   (min, avg, max) = (870.297, 891.797, 912.253), stdev = 15.617
[info]   CI (99.9%): [831.663, 951.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.674 ±(99.9%) 2.019 B/op [Average]
[info]   (min, avg, max) = (48.935, 49.674, 50.410), stdev = 0.524
[info]   CI (99.9%): [47.655, 51.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.016 ±(99.9%) 1415.350 MB/sec [Average]
[info]   (min, avg, max) = (671.148, 940.016, 1343.592), stdev = 367.562
[info]   CI (99.9%): [≈ 0, 2355.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   52.252 ±(99.9%) 77.228 B/op [Average]
[info]   (min, avg, max) = (36.953, 52.252, 74.288), stdev = 20.056
[info]   CI (99.9%): [≈ 0, 129.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3.61% complete, ETA 02:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9641471.215 ops/s
[info] # Warmup Iteration   2: 32602238.132 ops/s
[info] # Warmup Iteration   3: 34906254.516 ops/s
[info] # Warmup Iteration   4: 34451750.602 ops/s
[info] # Warmup Iteration   5: 33529699.557 ops/s
[info] Iteration   1: 33079893.578 ops/s
[info]                  ·gc.alloc.rate:      0.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34836257.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34895843.678 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34902359.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34907973.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   34524465.652 ±(99.9%) 3111529.186 ops/s [Average]
[info]   (min, avg, max) = (33079893.578, 34524465.652, 34907973.567), stdev = 808054.249
[info]   CI (99.9%): [31412936.466, 37635994.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.171), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3.82% complete, ETA 02:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51831.171 ops/s
[info] # Warmup Iteration   2: 1619931.831 ops/s
[info] # Warmup Iteration   3: 1827542.394 ops/s
[info] # Warmup Iteration   4: 1904591.136 ops/s
[info] # Warmup Iteration   5: 1914201.681 ops/s
[info] Iteration   1: 1913326.157 ops/s
[info]                  ·gc.alloc.rate:                   2975.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              2447.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2192.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1942770.522 ops/s
[info]                  ·gc.alloc.rate:                   3061.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3333.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2700.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1944808.409 ops/s
[info]                  ·gc.alloc.rate:               3052.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          2469.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2164.493 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1938062.922 ops/s
[info]                  ·gc.alloc.rate:               3069.949 MB/sec
[info]                  ·gc.alloc.rate.norm:          2492.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3358.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2726.180 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 1944020.958 ops/s
[info]                  ·gc.alloc.rate:                   3052.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              2470.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2181.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1936597.794 ±(99.9%) 51096.747 ops/s [Average]
[info]   (min, avg, max) = (1913326.157, 1936597.794, 1944808.409), stdev = 13269.663
[info]   CI (99.9%): [1885501.047, 1987694.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3042.369 ±(99.9%) 145.884 MB/sec [Average]
[info]   (min, avg, max) = (2975.907, 3042.369, 3069.949), stdev = 37.886
[info]   CI (99.9%): [2896.485, 3188.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2472.180 ±(99.9%) 62.612 B/op [Average]
[info]   (min, avg, max) = (2447.899, 2472.180, 2492.064), stdev = 16.260
[info]   CI (99.9%): [2409.568, 2534.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2945.558 ±(99.9%) 1408.307 MB/sec [Average]
[info]   (min, avg, max) = (2665.960, 2945.558, 3358.353), stdev = 365.733
[info]   CI (99.9%): [1537.251, 4353.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2393.185 ±(99.9%) 1126.612 B/op [Average]
[info]   (min, avg, max) = (2164.493, 2393.185, 2726.180), stdev = 292.578
[info]   CI (99.9%): [1266.573, 3519.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.137), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.02% complete, ETA 02:07:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83939.235 ops/s
[info] # Warmup Iteration   2: 297268.838 ops/s
[info] # Warmup Iteration   3: 314909.843 ops/s
[info] # Warmup Iteration   4: 312817.884 ops/s
[info] # Warmup Iteration   5: 313970.829 ops/s
[info] Iteration   1: 313489.419 ops/s
[info]                  ·gc.alloc.rate:                   1916.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              9621.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10116.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 315203.143 ops/s
[info]                  ·gc.alloc.rate:                   1927.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              9619.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10048.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 312737.000 ops/s
[info]                  ·gc.alloc.rate:               1908.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          9604.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6738.403 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 314534.303 ops/s
[info]                  ·gc.alloc.rate:                   1922.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              9618.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10051.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 314694.575 ops/s
[info]                  ·gc.alloc.rate:                   1950.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              9753.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10056.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   314131.688 ±(99.9%) 3843.234 ops/s [Average]
[info]   (min, avg, max) = (312737.000, 314131.688, 315203.143), stdev = 998.076
[info]   CI (99.9%): [310288.454, 317974.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1924.889 ±(99.9%) 60.474 MB/sec [Average]
[info]   (min, avg, max) = (1908.506, 1924.889, 1950.129), stdev = 15.705
[info]   CI (99.9%): [1864.415, 1985.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9643.667 ±(99.9%) 237.300 B/op [Average]
[info]   (min, avg, max) = (9604.921, 9643.667, 9753.260), stdev = 61.626
[info]   CI (99.9%): [9406.367, 9880.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.269 ±(99.9%) 1158.860 MB/sec [Average]
[info]   (min, avg, max) = (1338.926, 1877.269, 2015.090), stdev = 300.952
[info]   CI (99.9%): [718.409, 3036.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9402.190 ±(99.9%) 5735.027 B/op [Average]
[info]   (min, avg, max) = (6738.403, 9402.190, 10116.677), stdev = 1489.368
[info]   CI (99.9%): [3667.163, 15137.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.018), stdev = 1.301
[info]   CI (99.9%): [≈ 0, 5.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.613 ±(99.9%) 25.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.613, 15.154), stdev = 6.533
[info]   CI (99.9%): [≈ 0, 28.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.22% complete, ETA 02:06:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88745.725 ops/s
[info] # Warmup Iteration   2: 479984.520 ops/s
[info] # Warmup Iteration   3: 473538.270 ops/s
[info] # Warmup Iteration   4: 486751.709 ops/s
[info] # Warmup Iteration   5: 484631.927 ops/s
[info] Iteration   1: 486697.442 ops/s
[info]                  ·gc.alloc.rate:               629.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          2034.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2151.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 502011.857 ops/s
[info]                  ·gc.alloc.rate:               650.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          2039.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2085.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 501251.621 ops/s
[info]                  ·gc.alloc.rate:                   643.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              2020.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2090.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 501623.624 ops/s
[info]                  ·gc.alloc.rate:               652.208 MB/sec
[info]                  ·gc.alloc.rate.norm:          2046.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2088.988 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 500783.890 ops/s
[info]                  ·gc.alloc.rate:                   647.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              2036.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2095.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   498473.687 ±(99.9%) 25409.483 ops/s [Average]
[info]   (min, avg, max) = (486697.442, 498473.687, 502011.857), stdev = 6598.762
[info]   CI (99.9%): [473064.203, 523883.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   644.708 ±(99.9%) 35.931 MB/sec [Average]
[info]   (min, avg, max) = (629.044, 644.708, 652.208), stdev = 9.331
[info]   CI (99.9%): [608.778, 680.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2035.449 ±(99.9%) 35.811 B/op [Average]
[info]   (min, avg, max) = (2020.928, 2035.449, 2046.325), stdev = 9.300
[info]   CI (99.9%): [1999.638, 2071.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.784 ±(99.9%) 2.446 MB/sec [Average]
[info]   (min, avg, max) = (665.150, 665.784, 666.778), stdev = 0.635
[info]   CI (99.9%): [663.338, 668.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2102.289 ±(99.9%) 105.830 B/op [Average]
[info]   (min, avg, max) = (2085.311, 2102.289, 2151.008), stdev = 27.484
[info]   CI (99.9%): [1996.459, 2208.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.131), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.42% complete, ETA 02:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 642352.796 ops/s
[info] # Warmup Iteration   2: 1258449.967 ops/s
[info] # Warmup Iteration   3: 1336522.570 ops/s
[info] # Warmup Iteration   4: 1302866.981 ops/s
[info] # Warmup Iteration   5: 1342169.049 ops/s
[info] Iteration   1: 1342117.864 ops/s
[info]                  ·gc.alloc.rate:                   916.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1074.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     787.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1329136.475 ops/s
[info]                  ·gc.alloc.rate:                   922.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              1091.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1590.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1338491.047 ops/s
[info]                  ·gc.alloc.rate:               906.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          1065.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 789.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1332626.476 ops/s
[info]                  ·gc.alloc.rate:               923.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          1090.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 793.800 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1337442.998 ops/s
[info]                  ·gc.alloc.rate:                   919.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              1081.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1582.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1335962.972 ±(99.9%) 19653.151 ops/s [Average]
[info]   (min, avg, max) = (1329136.475, 1335962.972, 1342117.864), stdev = 5103.861
[info]   CI (99.9%): [1316309.821, 1355616.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   917.621 ±(99.9%) 26.994 MB/sec [Average]
[info]   (min, avg, max) = (906.006, 917.621, 923.520), stdev = 7.010
[info]   CI (99.9%): [890.627, 944.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1080.855 ±(99.9%) 43.123 B/op [Average]
[info]   (min, avg, max) = (1065.243, 1080.855, 1091.912), stdev = 11.199
[info]   CI (99.9%): [1037.732, 1123.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.897 ±(99.9%) 1418.226 MB/sec [Average]
[info]   (min, avg, max) = (671.722, 940.897, 1345.053), stdev = 368.309
[info]   CI (99.9%): [≈ 0, 2359.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1108.893 ±(99.9%) 1679.486 B/op [Average]
[info]   (min, avg, max) = (787.397, 1108.893, 1590.664), stdev = 436.157
[info]   CI (99.9%): [≈ 0, 2788.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.073), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4.62% complete, ETA 02:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16021.701 ops/s
[info] # Warmup Iteration   2: 99420.476 ops/s
[info] # Warmup Iteration   3: 113847.720 ops/s
[info] # Warmup Iteration   4: 115569.312 ops/s
[info] # Warmup Iteration   5: 115718.359 ops/s
[info] Iteration   1: 117084.619 ops/s
[info]                  ·gc.alloc.rate:                   3721.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              50024.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44918.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.560 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 115694.287 ops/s
[info]                  ·gc.alloc.rate:                   3686.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              50135.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3353.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45603.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 116946.928 ops/s
[info]                  ·gc.alloc.rate:                   3741.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              50331.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4039.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54337.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 113845.238 ops/s
[info]                  ·gc.alloc.rate:               3624.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          50107.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46717.365 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 114328.119 ops/s
[info]                  ·gc.alloc.rate:                   3640.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              50109.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46639.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   115579.838 ±(99.9%) 5686.072 ops/s [Average]
[info]   (min, avg, max) = (113845.238, 115579.838, 117084.619), stdev = 1476.655
[info]   CI (99.9%): [109893.766, 121265.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3682.958 ±(99.9%) 192.934 MB/sec [Average]
[info]   (min, avg, max) = (3624.990, 3682.958, 3741.243), stdev = 50.104
[info]   CI (99.9%): [3490.024, 3875.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50141.634 ±(99.9%) 438.189 B/op [Average]
[info]   (min, avg, max) = (50024.614, 50141.634, 50331.010), stdev = 113.796
[info]   CI (99.9%): [49703.445, 50579.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3500.438 ±(99.9%) 1161.697 MB/sec [Average]
[info]   (min, avg, max) = (3341.640, 3500.438, 4039.036), stdev = 301.689
[info]   CI (99.9%): [2338.741, 4662.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47643.398 ±(99.9%) 14695.032 B/op [Average]
[info]   (min, avg, max) = (44918.888, 47643.398, 54337.232), stdev = 3816.253
[info]   CI (99.9%): [32948.366, 62338.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.339 ±(99.9%) 0.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 0.566), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4.82% complete, ETA 02:06:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175957.859 ops/s
[info] # Warmup Iteration   2: 506032.371 ops/s
[info] # Warmup Iteration   3: 541032.701 ops/s
[info] # Warmup Iteration   4: 546330.248 ops/s
[info] # Warmup Iteration   5: 547565.088 ops/s
[info] Iteration   1: 548511.133 ops/s
[info]                  ·gc.alloc.rate:               1701.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          4881.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3860.140 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 534735.323 ops/s
[info]                  ·gc.alloc.rate:                   1683.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              4956.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5942.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 537486.860 ops/s
[info]                  ·gc.alloc.rate:                   1692.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              4955.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3932.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 537180.250 ops/s
[info]                  ·gc.alloc.rate:               1690.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          4954.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3930.782 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 549966.034 ops/s
[info]                  ·gc.alloc.rate:               1730.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          4953.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5759.175 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   541575.920 ±(99.9%) 27318.364 ops/s [Average]
[info]   (min, avg, max) = (534735.323, 541575.920, 549966.034), stdev = 7094.492
[info]   CI (99.9%): [514257.556, 568894.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1699.938 ±(99.9%) 70.783 MB/sec [Average]
[info]   (min, avg, max) = (1683.992, 1699.938, 1730.920), stdev = 18.382
[info]   CI (99.9%): [1629.155, 1770.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4940.360 ±(99.9%) 125.967 B/op [Average]
[info]   (min, avg, max) = (4881.876, 4940.360, 4956.631), stdev = 32.713
[info]   CI (99.9%): [4814.393, 5066.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1612.278 ±(99.9%) 1418.163 MB/sec [Average]
[info]   (min, avg, max) = (1341.604, 1612.278, 2019.008), stdev = 368.292
[info]   CI (99.9%): [194.115, 3030.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4685.045 ±(99.9%) 4107.446 B/op [Average]
[info]   (min, avg, max) = (3860.140, 4685.045, 5942.712), stdev = 1066.691
[info]   CI (99.9%): [577.599, 8792.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 5.602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.268), stdev = 1.455
[info]   CI (99.9%): [≈ 0, 6.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.960 ±(99.9%) 16.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.960, 9.619), stdev = 4.282
[info]   CI (99.9%): [≈ 0, 18.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.02% complete, ETA 02:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137913.443 ops/s
[info] # Warmup Iteration   2: 345954.289 ops/s
[info] # Warmup Iteration   3: 351591.865 ops/s
[info] # Warmup Iteration   4: 329481.835 ops/s
[info] # Warmup Iteration   5: 352338.768 ops/s
[info] Iteration   1: 353962.942 ops/s
[info]                  ·gc.alloc.rate:               1221.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          5430.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5962.547 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 354013.054 ops/s
[info]                  ·gc.alloc.rate:               1203.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          5349.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2982.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 353935.972 ops/s
[info]                  ·gc.alloc.rate:                   1240.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              5515.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5968.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 345704.024 ops/s
[info]                  ·gc.alloc.rate:                   1199.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              5460.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6113.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 347373.193 ops/s
[info]                  ·gc.alloc.rate:                   1205.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              5459.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6078.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   350997.837 ±(99.9%) 15839.038 ops/s [Average]
[info]   (min, avg, max) = (345704.024, 350997.837, 354013.054), stdev = 4113.348
[info]   CI (99.9%): [335158.799, 366836.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1213.906 ±(99.9%) 65.677 MB/sec [Average]
[info]   (min, avg, max) = (1199.427, 1213.906, 1240.460), stdev = 17.056
[info]   CI (99.9%): [1148.229, 1279.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5443.203 ±(99.9%) 234.194 B/op [Average]
[info]   (min, avg, max) = (5349.329, 5443.203, 5515.790), stdev = 60.819
[info]   CI (99.9%): [5209.009, 5677.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.751 ±(99.9%) 1155.771 MB/sec [Average]
[info]   (min, avg, max) = (670.828, 1207.751, 1342.914), stdev = 300.150
[info]   CI (99.9%): [51.981, 2363.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5421.262 ±(99.9%) 5256.230 B/op [Average]
[info]   (min, avg, max) = (2982.333, 5421.262, 6113.987), stdev = 1365.026
[info]   CI (99.9%): [165.032, 10677.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 5.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.039), stdev = 1.314
[info]   CI (99.9%): [≈ 0, 5.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.295 ±(99.9%) 23.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.295, 13.837), stdev = 5.984
[info]   CI (99.9%): [≈ 0, 26.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.22% complete, ETA 02:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151510.841 ops/s
[info] # Warmup Iteration   2: 827037.629 ops/s
[info] # Warmup Iteration   3: 897509.010 ops/s
[info] # Warmup Iteration   4: 897121.473 ops/s
[info] # Warmup Iteration   5: 896701.198 ops/s
[info] Iteration   1: 876714.580 ops/s
[info]                  ·gc.alloc.rate:               652.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          1171.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1195.885 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 884668.958 ops/s
[info]                  ·gc.alloc.rate:               664.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          1181.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1185.098 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 895562.394 ops/s
[info]                  ·gc.alloc.rate:                   669.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              1176.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1172.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 901024.064 ops/s
[info]                  ·gc.alloc.rate:               664.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1165.374 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 900709.807 ops/s
[info]                  ·gc.alloc.rate:               667.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          1166.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1166.939 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   891735.961 ±(99.9%) 41159.798 ops/s [Average]
[info]   (min, avg, max) = (876714.580, 891735.961, 901024.064), stdev = 10689.069
[info]   CI (99.9%): [850576.163, 932895.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   663.655 ±(99.9%) 25.033 MB/sec [Average]
[info]   (min, avg, max) = (652.647, 663.655, 669.340), stdev = 6.501
[info]   CI (99.9%): [638.622, 688.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1171.185 ±(99.9%) 31.733 B/op [Average]
[info]   (min, avg, max) = (1160.541, 1171.185, 1181.519), stdev = 8.241
[info]   CI (99.9%): [1139.452, 1202.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.992 ±(99.9%) 2.577 MB/sec [Average]
[info]   (min, avg, max) = (666.241, 666.992, 667.916), stdev = 0.669
[info]   CI (99.9%): [664.415, 669.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1177.153 ±(99.9%) 50.171 B/op [Average]
[info]   (min, avg, max) = (1165.374, 1177.153, 1195.885), stdev = 13.029
[info]   CI (99.9%): [1126.981, 1227.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.110), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.42% complete, ETA 02:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1543302.973 ops/s
[info] # Warmup Iteration   2: 2274364.897 ops/s
[info] # Warmup Iteration   3: 2507885.441 ops/s
[info] # Warmup Iteration   4: 2493439.876 ops/s
[info] # Warmup Iteration   5: 2566738.359 ops/s
[info] Iteration   1: 2585096.988 ops/s
[info]                  ·gc.alloc.rate:               1227.536 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 818.443 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2586413.577 ops/s
[info]                  ·gc.alloc.rate:               1210.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          736.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 409.006 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2577759.431 ops/s
[info]                  ·gc.alloc.rate:                   1234.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2566793.622 ops/s
[info]                  ·gc.alloc.rate:                   1238.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              759.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     825.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2575699.808 ops/s
[info]                  ·gc.alloc.rate:                   1232.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     822.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2578352.685 ±(99.9%) 30531.092 ops/s [Average]
[info]   (min, avg, max) = (2566793.622, 2578352.685, 2586413.577), stdev = 7928.828
[info]   CI (99.9%): [2547821.593, 2608883.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1228.612 ±(99.9%) 41.336 MB/sec [Average]
[info]   (min, avg, max) = (1210.735, 1228.612, 1238.435), stdev = 10.735
[info]   CI (99.9%): [1187.276, 1269.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.870 ±(99.9%) 32.789 B/op [Average]
[info]   (min, avg, max) = (736.660, 749.870, 759.342), stdev = 8.515
[info]   CI (99.9%): [717.082, 782.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.730 ±(99.9%) 1159.185 MB/sec [Average]
[info]   (min, avg, max) = (672.220, 1210.730, 1346.007), stdev = 301.037
[info]   CI (99.9%): [51.545, 2369.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   739.198 ±(99.9%) 710.826 B/op [Average]
[info]   (min, avg, max) = (409.006, 739.198, 825.299), stdev = 184.599
[info]   CI (99.9%): [28.372, 1450.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.570 ±(99.9%) 4.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.644), stdev = 1.161
[info]   CI (99.9%): [≈ 0, 5.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.350 ±(99.9%) 2.742 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.350, 1.621), stdev = 0.712
[info]   CI (99.9%): [≈ 0, 3.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5.62% complete, ETA 02:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1791362.816 ops/s
[info] # Warmup Iteration   2: 2784810.560 ops/s
[info] # Warmup Iteration   3: 2922306.990 ops/s
[info] # Warmup Iteration   4: 2923880.926 ops/s
[info] # Warmup Iteration   5: 2812864.776 ops/s
[info] Iteration   1: 2924086.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2922860.747 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2922850.829 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2922874.320 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2916227.764 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2921779.975 ±(99.9%) 12124.664 ops/s [Average]
[info]   (min, avg, max) = (2916227.764, 2921779.975, 2924086.215), stdev = 3148.737
[info]   CI (99.9%): [2909655.311, 2933904.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.82% complete, ETA 02:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138112.153 ops/s
[info] # Warmup Iteration   2: 435959.626 ops/s
[info] # Warmup Iteration   3: 462475.205 ops/s
[info] # Warmup Iteration   4: 459614.015 ops/s
[info] # Warmup Iteration   5: 462201.208 ops/s
[info] Iteration   1: 465552.911 ops/s
[info]                  ·gc.alloc.rate:               696.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          2353.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2258.731 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 453769.188 ops/s
[info]                  ·gc.alloc.rate:               669.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          2321.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2317.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 465636.401 ops/s
[info]                  ·gc.alloc.rate:               696.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          2355.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2260.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 466406.858 ops/s
[info]                  ·gc.alloc.rate:                   692.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              2337.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2256.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 473912.251 ops/s
[info]                  ·gc.alloc.rate:               703.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          2334.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2223.406 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   465055.522 ±(99.9%) 27782.996 ops/s [Average]
[info]   (min, avg, max) = (453769.188, 465055.522, 473912.251), stdev = 7215.156
[info]   CI (99.9%): [437272.526, 492838.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   691.702 ±(99.9%) 50.072 MB/sec [Average]
[info]   (min, avg, max) = (669.394, 691.702, 703.080), stdev = 13.003
[info]   CI (99.9%): [641.630, 741.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2340.728 ±(99.9%) 54.788 B/op [Average]
[info]   (min, avg, max) = (2321.366, 2340.728, 2355.558), stdev = 14.228
[info]   CI (99.9%): [2285.940, 2395.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.700 ±(99.9%) 2.127 MB/sec [Average]
[info]   (min, avg, max) = (668.131, 668.700, 669.521), stdev = 0.552
[info]   CI (99.9%): [666.574, 670.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2263.384 ±(99.9%) 130.419 B/op [Average]
[info]   (min, avg, max) = (2223.406, 2263.384, 2317.400), stdev = 33.869
[info]   CI (99.9%): [2132.964, 2393.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6.02% complete, ETA 02:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85418.070 ops/s
[info] # Warmup Iteration   2: 152810.148 ops/s
[info] # Warmup Iteration   3: 159843.159 ops/s
[info] # Warmup Iteration   4: 160622.801 ops/s
[info] # Warmup Iteration   5: 160329.361 ops/s
[info] Iteration   1: 159989.397 ops/s
[info]                  ·gc.alloc.rate:                   963.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              9473.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13218.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 159995.506 ops/s
[info]                  ·gc.alloc.rate:               944.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          9287.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6612.128 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 159996.713 ops/s
[info]                  ·gc.alloc.rate:                   958.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              9425.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13224.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 160467.818 ops/s
[info]                  ·gc.alloc.rate:               956.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          9374.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6592.558 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 160259.783 ops/s
[info]                  ·gc.alloc.rate:               954.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          9377.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6607.614 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   160141.843 ±(99.9%) 830.094 ops/s [Average]
[info]   (min, avg, max) = (159989.397, 160141.843, 160467.818), stdev = 215.573
[info]   CI (99.9%): [159311.750, 160971.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   955.424 ±(99.9%) 26.796 MB/sec [Average]
[info]   (min, avg, max) = (944.419, 955.424, 963.412), stdev = 6.959
[info]   CI (99.9%): [928.629, 982.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9387.748 ±(99.9%) 265.970 B/op [Average]
[info]   (min, avg, max) = (9287.411, 9387.748, 9473.059), stdev = 69.072
[info]   CI (99.9%): [9121.778, 9653.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.257 ±(99.9%) 1416.958 MB/sec [Average]
[info]   (min, avg, max) = (672.321, 941.257, 1344.423), stdev = 367.980
[info]   CI (99.9%): [≈ 0, 2358.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9250.901 ±(99.9%) 13955.849 B/op [Average]
[info]   (min, avg, max) = (6592.558, 9250.901, 13224.008), stdev = 3624.290
[info]   CI (99.9%): [≈ 0, 23206.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.164 ±(99.9%) 1.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.614), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.22% complete, ETA 02:04:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6210.616 ops/s
[info] # Warmup Iteration   2: 15536.403 ops/s
[info] # Warmup Iteration   3: 17517.918 ops/s
[info] # Warmup Iteration   4: 17357.865 ops/s
[info] # Warmup Iteration   5: 17053.173 ops/s
[info] Iteration   1: 17179.505 ops/s
[info]                  ·gc.alloc.rate:                   1374.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              125898.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123024.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17117.756 ops/s
[info]                  ·gc.alloc.rate:               1386.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          127516.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123538.422 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 17323.307 ops/s
[info]                  ·gc.alloc.rate:                   1401.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              127348.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122130.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17502.492 ops/s
[info]                  ·gc.alloc.rate:                   1402.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              126096.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120761.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17606.677 ops/s
[info]                  ·gc.alloc.rate:                   1423.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              127226.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119803.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17345.947 ±(99.9%) 800.279 ops/s [Average]
[info]   (min, avg, max) = (17117.756, 17345.947, 17606.677), stdev = 207.830
[info]   CI (99.9%): [16545.668, 18146.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1397.783 ±(99.9%) 71.147 MB/sec [Average]
[info]   (min, avg, max) = (1374.255, 1397.783, 1423.402), stdev = 18.477
[info]   CI (99.9%): [1326.636, 1468.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126817.364 ±(99.9%) 2922.001 B/op [Average]
[info]   (min, avg, max) = (125898.425, 126817.364, 127516.842), stdev = 758.834
[info]   CI (99.9%): [123895.364, 129739.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.888 ±(99.9%) 6.010 MB/sec [Average]
[info]   (min, avg, max) = (1340.349, 1342.888, 1344.519), stdev = 1.561
[info]   CI (99.9%): [1336.878, 1348.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   121851.535 ±(99.9%) 5991.052 B/op [Average]
[info]   (min, avg, max) = (119803.232, 121851.535, 123538.422), stdev = 1555.857
[info]   CI (99.9%): [115860.484, 127842.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 2.832), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.171 ±(99.9%) 427.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.171, 257.212), stdev = 110.918
[info]   CI (99.9%): [≈ 0, 494.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.43% complete, ETA 02:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11579.545 ops/s
[info] # Warmup Iteration   2: 35371.213 ops/s
[info] # Warmup Iteration   3: 35815.032 ops/s
[info] # Warmup Iteration   4: 36274.626 ops/s
[info] # Warmup Iteration   5: 36844.374 ops/s
[info] Iteration   1: 37078.781 ops/s
[info]                  ·gc.alloc.rate:               1015.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          43115.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28360.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 36949.417 ops/s
[info]                  ·gc.alloc.rate:               1008.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          42936.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28487.899 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 37066.342 ops/s
[info]                  ·gc.alloc.rate:                   1026.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              43587.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56810.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 37218.267 ops/s
[info]                  ·gc.alloc.rate:               1011.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          42783.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28296.115 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 37001.886 ops/s
[info]                  ·gc.alloc.rate:                   1019.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              43380.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56950.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   37062.939 ±(99.9%) 389.868 ops/s [Average]
[info]   (min, avg, max) = (36949.417, 37062.939, 37218.267), stdev = 101.248
[info]   CI (99.9%): [36673.070, 37452.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1016.436 ±(99.9%) 27.658 MB/sec [Average]
[info]   (min, avg, max) = (1008.214, 1016.436, 1026.662), stdev = 7.183
[info]   CI (99.9%): [988.778, 1044.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43160.524 ±(99.9%) 1255.399 B/op [Average]
[info]   (min, avg, max) = (42783.305, 43160.524, 43587.094), stdev = 326.023
[info]   CI (99.9%): [41905.125, 44415.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.639 ±(99.9%) 1412.551 MB/sec [Average]
[info]   (min, avg, max) = (668.138, 936.639, 1338.852), stdev = 366.835
[info]   CI (99.9%): [≈ 0, 2349.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39781.106 ±(99.9%) 60107.657 B/op [Average]
[info]   (min, avg, max) = (28296.115, 39781.106, 56950.869), stdev = 15609.768
[info]   CI (99.9%): [≈ 0, 99888.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.531 ±(99.9%) 3.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.531, 1.768), stdev = 0.791
[info]   CI (99.9%): [≈ 0, 3.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.63% complete, ETA 02:04:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21119.519 ops/s
[info] # Warmup Iteration   2: 37965.487 ops/s
[info] # Warmup Iteration   3: 38323.857 ops/s
[info] # Warmup Iteration   4: 39747.401 ops/s
[info] # Warmup Iteration   5: 39770.491 ops/s
[info] Iteration   1: 40097.001 ops/s
[info]                  ·gc.alloc.rate:               603.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          23671.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26329.444 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 40688.633 ops/s
[info]                  ·gc.alloc.rate:               611.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          23641.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25946.433 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 40683.768 ops/s
[info]                  ·gc.alloc.rate:               609.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          23561.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25974.752 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 40717.807 ops/s
[info]                  ·gc.alloc.rate:      586.804 MB/sec
[info]                  ·gc.alloc.rate.norm: 22680.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 40564.832 ops/s
[info]                  ·gc.alloc.rate:               601.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          23329.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26051.578 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   40550.408 ±(99.9%) 1001.721 ops/s [Average]
[info]   (min, avg, max) = (40097.001, 40550.408, 40717.807), stdev = 260.144
[info]   CI (99.9%): [39548.687, 41552.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   602.320 ±(99.9%) 36.969 MB/sec [Average]
[info]   (min, avg, max) = (586.804, 602.320, 611.287), stdev = 9.601
[info]   CI (99.9%): [565.351, 639.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23376.831 ±(99.9%) 1586.013 B/op [Average]
[info]   (min, avg, max) = (22680.011, 23376.831, 23671.639), stdev = 411.882
[info]   CI (99.9%): [21790.818, 24962.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.931 ±(99.9%) 1155.786 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.931, 671.494), stdev = 300.154
[info]   CI (99.9%): [≈ 0, 1692.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20860.441 ±(99.9%) 44907.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20860.441, 26329.444), stdev = 11662.326
[info]   CI (99.9%): [≈ 0, 65767.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.83% complete, ETA 02:03:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4049.473 ops/s
[info] # Warmup Iteration   2: 28580.198 ops/s
[info] # Warmup Iteration   3: 29928.031 ops/s
[info] # Warmup Iteration   4: 30351.611 ops/s
[info] # Warmup Iteration   5: 28655.115 ops/s
[info] Iteration   1: 30204.117 ops/s
[info]                  ·gc.alloc.rate:                   1482.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              77197.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69664.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 30381.504 ops/s
[info]                  ·gc.alloc.rate:                   1481.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              76741.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69308.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 29960.417 ops/s
[info]                  ·gc.alloc.rate:                   1487.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              78118.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105483.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 30234.547 ops/s
[info]                  ·gc.alloc.rate:                   1497.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              77966.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69488.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30431.826 ops/s
[info]                  ·gc.alloc.rate:               1507.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          77940.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68970.304 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30242.482 ±(99.9%) 710.737 ops/s [Average]
[info]   (min, avg, max) = (29960.417, 30242.482, 30431.826), stdev = 184.576
[info]   CI (99.9%): [29531.745, 30953.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1491.164 ±(99.9%) 42.909 MB/sec [Average]
[info]   (min, avg, max) = (1481.444, 1491.164, 1507.267), stdev = 11.143
[info]   CI (99.9%): [1448.255, 1534.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77593.023 ±(99.9%) 2292.859 B/op [Average]
[info]   (min, avg, max) = (76741.358, 77593.023, 78118.650), stdev = 595.448
[info]   CI (99.9%): [75300.163, 79885.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.461 ±(99.9%) 1157.343 MB/sec [Average]
[info]   (min, avg, max) = (1333.797, 1470.461, 2008.107), stdev = 300.558
[info]   CI (99.9%): [313.118, 2627.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76583.145 ±(99.9%) 62219.044 B/op [Average]
[info]   (min, avg, max) = (68970.304, 76583.145, 105483.960), stdev = 16158.088
[info]   CI (99.9%): [14364.101, 138802.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.372), stdev = 1.944
[info]   CI (99.9%): [≈ 0, 8.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   47.010 ±(99.9%) 393.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.010, 229.636), stdev = 102.098
[info]   CI (99.9%): [≈ 0, 440.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.03% complete, ETA 02:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7784.486 ops/s
[info] # Warmup Iteration   2: 23739.843 ops/s
[info] # Warmup Iteration   3: 25120.497 ops/s
[info] # Warmup Iteration   4: 24587.381 ops/s
[info] # Warmup Iteration   5: 25007.979 ops/s
[info] Iteration   1: 24900.119 ops/s
[info]                  ·gc.alloc.rate:                   1816.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              114841.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127282.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 24853.843 ops/s
[info]                  ·gc.alloc.rate:                   1826.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              115664.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127475.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 241.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25319.610 ops/s
[info]                  ·gc.alloc.rate:                   1824.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              113410.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83226.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24707.828 ops/s
[info]                  ·gc.alloc.rate:                   1818.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127804.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24987.456 ops/s
[info]                  ·gc.alloc.rate:               1839.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          115897.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126419.891 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   24953.771 ±(99.9%) 878.768 ops/s [Average]
[info]   (min, avg, max) = (24707.828, 24953.771, 25319.610), stdev = 228.213
[info]   CI (99.9%): [24075.004, 25832.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1825.488 ±(99.9%) 34.907 MB/sec [Average]
[info]   (min, avg, max) = (1816.931, 1825.488, 1839.997), stdev = 9.065
[info]   CI (99.9%): [1790.580, 1860.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115129.511 ±(99.9%) 4043.059 B/op [Average]
[info]   (min, avg, max) = (113410.409, 115129.511, 115897.867), stdev = 1049.970
[info]   CI (99.9%): [111086.452, 119172.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1876.042 ±(99.9%) 1155.861 MB/sec [Average]
[info]   (min, avg, max) = (1339.107, 1876.042, 2013.762), stdev = 300.173
[info]   CI (99.9%): [720.181, 3031.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   118442.007 ±(99.9%) 75828.835 B/op [Average]
[info]   (min, avg, max) = (83226.890, 118442.007, 127804.747), stdev = 19692.508
[info]   CI (99.9%): [42613.172, 194270.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.810), stdev = 1.697
[info]   CI (99.9%): [≈ 0, 7.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   49.034 ±(99.9%) 413.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.034, 241.232), stdev = 107.444
[info]   CI (99.9%): [≈ 0, 462.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.23% complete, ETA 02:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4937.150 ops/s
[info] # Warmup Iteration   2: 22354.785 ops/s
[info] # Warmup Iteration   3: 24427.565 ops/s
[info] # Warmup Iteration   4: 24614.241 ops/s
[info] # Warmup Iteration   5: 24758.298 ops/s
[info] Iteration   1: 24418.083 ops/s
[info]                  ·gc.alloc.rate:                   1538.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              99144.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129145.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 24772.750 ops/s
[info]                  ·gc.alloc.rate:                   1543.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              98017.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84979.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 24826.409 ops/s
[info]                  ·gc.alloc.rate:                   1557.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              98742.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84840.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 24865.200 ops/s
[info]                  ·gc.alloc.rate:                   1549.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              98090.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84493.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24729.514 ops/s
[info]                  ·gc.alloc.rate:               1566.208 MB/sec
[info]                  ·gc.alloc.rate.norm:          99668.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127309.522 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   24722.391 ±(99.9%) 684.517 ops/s [Average]
[info]   (min, avg, max) = (24418.083, 24722.391, 24865.200), stdev = 177.767
[info]   CI (99.9%): [24037.874, 25406.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1551.121 ±(99.9%) 42.978 MB/sec [Average]
[info]   (min, avg, max) = (1538.223, 1551.121, 1566.208), stdev = 11.161
[info]   CI (99.9%): [1508.143, 1594.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98733.000 ±(99.9%) 2701.290 B/op [Average]
[info]   (min, avg, max) = (98017.921, 98733.000, 99668.460), stdev = 701.517
[info]   CI (99.9%): [96031.709, 101434.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1603.185 ±(99.9%) 1402.334 MB/sec [Average]
[info]   (min, avg, max) = (1334.931, 1603.185, 2003.678), stdev = 364.182
[info]   CI (99.9%): [200.851, 3005.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   102153.641 ±(99.9%) 91689.653 B/op [Average]
[info]   (min, avg, max) = (84493.217, 102153.641, 129145.339), stdev = 23811.512
[info]   CI (99.9%): [10463.988, 193843.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.998), stdev = 1.779
[info]   CI (99.9%): [≈ 0, 7.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   51.737 ±(99.9%) 434.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.737, 253.381), stdev = 112.726
[info]   CI (99.9%): [≈ 0, 485.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.43% complete, ETA 02:03:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13324.590 ops/s
[info] # Warmup Iteration   2: 26028.644 ops/s
[info] # Warmup Iteration   3: 27369.832 ops/s
[info] # Warmup Iteration   4: 27496.066 ops/s
[info] # Warmup Iteration   5: 26985.391 ops/s
[info] Iteration   1: 27596.488 ops/s
[info]                  ·gc.alloc.rate:               1628.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          92831.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76740.825 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 27438.902 ops/s
[info]                  ·gc.alloc.rate:                   1619.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              92887.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77220.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27135.692 ops/s
[info]                  ·gc.alloc.rate:                   1614.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              93642.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117023.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 26635.234 ops/s
[info]                  ·gc.alloc.rate:               1585.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          93682.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79272.975 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27570.210 ops/s
[info]                  ·gc.alloc.rate:               1626.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          92830.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76585.025 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   27275.305 ±(99.9%) 1547.550 ops/s [Average]
[info]   (min, avg, max) = (26635.234, 27275.305, 27596.488), stdev = 401.894
[info]   CI (99.9%): [25727.755, 28822.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1614.887 ±(99.9%) 66.348 MB/sec [Average]
[info]   (min, avg, max) = (1585.671, 1614.887, 1628.476), stdev = 17.230
[info]   CI (99.9%): [1548.539, 1681.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93175.257 ±(99.9%) 1717.027 B/op [Average]
[info]   (min, avg, max) = (92830.879, 93175.257, 93682.921), stdev = 445.907
[info]   CI (99.9%): [91458.230, 94892.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.727 ±(99.9%) 1160.179 MB/sec [Average]
[info]   (min, avg, max) = (1341.587, 1478.727, 2017.684), stdev = 301.295
[info]   CI (99.9%): [318.547, 2638.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   85368.651 ±(99.9%) 68265.333 B/op [Average]
[info]   (min, avg, max) = (76585.025, 85368.651, 117023.570), stdev = 17728.290
[info]   CI (99.9%): [17103.319, 153633.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 3.903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 2.269), stdev = 1.014
[info]   CI (99.9%): [≈ 0, 4.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39.069 ±(99.9%) 224.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.069, 130.150), stdev = 58.218
[info]   CI (99.9%): [≈ 0, 263.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7.63% complete, ETA 02:02:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11613.079 ops/s
[info] # Warmup Iteration   2: 25891.999 ops/s
[info] # Warmup Iteration   3: 27226.427 ops/s
[info] # Warmup Iteration   4: 27463.265 ops/s
[info] # Warmup Iteration   5: 27185.554 ops/s
[info] Iteration   1: 27571.793 ops/s
[info]                  ·gc.alloc.rate:                   1572.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              89767.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76769.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 27269.834 ops/s
[info]                  ·gc.alloc.rate:                   1569.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              90578.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116506.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 27574.767 ops/s
[info]                  ·gc.alloc.rate:                   1586.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              90542.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76742.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27517.951 ops/s
[info]                  ·gc.alloc.rate:                   1583.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              90508.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76767.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27179.327 ops/s
[info]                  ·gc.alloc.rate:               1565.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          90566.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116251.733 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27422.734 ±(99.9%) 712.693 ops/s [Average]
[info]   (min, avg, max) = (27179.327, 27422.734, 27574.767), stdev = 185.084
[info]   CI (99.9%): [26710.042, 28135.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1575.377 ±(99.9%) 34.802 MB/sec [Average]
[info]   (min, avg, max) = (1565.195, 1575.377, 1586.422), stdev = 9.038
[info]   CI (99.9%): [1540.575, 1610.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   90392.806 ±(99.9%) 1350.920 B/op [Average]
[info]   (min, avg, max) = (89767.055, 90392.806, 90578.753), stdev = 350.830
[info]   CI (99.9%): [89041.885, 91743.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1612.037 ±(99.9%) 1412.758 MB/sec [Average]
[info]   (min, avg, max) = (1342.739, 1612.037, 2018.767), stdev = 366.889
[info]   CI (99.9%): [199.279, 3024.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   92607.535 ±(99.9%) 83560.851 B/op [Average]
[info]   (min, avg, max) = (76742.228, 92607.535, 116506.309), stdev = 21700.488
[info]   CI (99.9%): [9046.685, 176168.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 3.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 2.144), stdev = 0.981
[info]   CI (99.9%): [≈ 0, 4.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   39.957 ±(99.9%) 217.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.957, 123.744), stdev = 56.477
[info]   CI (99.9%): [≈ 0, 257.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.83% complete, ETA 02:02:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2265.953 ops/s
[info] # Warmup Iteration   2: 6492.560 ops/s
[info] # Warmup Iteration   3: 7779.609 ops/s
[info] # Warmup Iteration   4: 7809.007 ops/s
[info] # Warmup Iteration   5: 7844.151 ops/s
[info] Iteration   1: 7812.111 ops/s
[info]                  ·gc.alloc.rate:               1178.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          237262.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 269959.682 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 7825.046 ops/s
[info]                  ·gc.alloc.rate:                   1169.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              235115.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269679.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7883.074 ops/s
[info]                  ·gc.alloc.rate:               1167.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          232961.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133914.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7820.977 ops/s
[info]                  ·gc.alloc.rate:               1171.600 MB/sec
[info]                  ·gc.alloc.rate.norm:          235770.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 269951.689 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 7777.593 ops/s
[info]                  ·gc.alloc.rate:                   1166.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              236013.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271613.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 783.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7823.760 ±(99.9%) 146.561 ops/s [Average]
[info]   (min, avg, max) = (7777.593, 7823.760, 7883.074), stdev = 38.062
[info]   CI (99.9%): [7677.199, 7970.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1170.557 ±(99.9%) 18.370 MB/sec [Average]
[info]   (min, avg, max) = (1166.497, 1170.557, 1178.290), stdev = 4.771
[info]   CI (99.9%): [1152.187, 1188.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   235425.007 ±(99.9%) 6090.328 B/op [Average]
[info]   (min, avg, max) = (232961.878, 235425.007, 237262.908), stdev = 1581.639
[info]   CI (99.9%): [229334.679, 241515.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207.334 ±(99.9%) 1154.778 MB/sec [Average]
[info]   (min, avg, max) = (670.872, 1207.334, 1342.449), stdev = 299.892
[info]   CI (99.9%): [52.556, 2362.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   243023.811 ±(99.9%) 234884.484 B/op [Average]
[info]   (min, avg, max) = (133914.525, 243023.811, 271613.400), stdev = 60998.755
[info]   CI (99.9%): [8139.327, 477908.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.872), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   158.375 ±(99.9%) 1345.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 158.375, 783.500), stdev = 349.475
[info]   CI (99.9%): [≈ 0, 1504.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.03% complete, ETA 02:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6541.998 ops/s
[info] # Warmup Iteration   2: 16710.895 ops/s
[info] # Warmup Iteration   3: 17880.204 ops/s
[info] # Warmup Iteration   4: 18046.280 ops/s
[info] # Warmup Iteration   5: 17548.016 ops/s
[info] Iteration   1: 17880.637 ops/s
[info]                  ·gc.alloc.rate:                   1623.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              142878.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118290.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17616.824 ops/s
[info]                  ·gc.alloc.rate:                   1622.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              144972.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120128.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17687.960 ops/s
[info]                  ·gc.alloc.rate:                   1637.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              145699.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179208.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17768.601 ops/s
[info]                  ·gc.alloc.rate:                   1632.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              144640.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118711.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17800.806 ops/s
[info]                  ·gc.alloc.rate:                   1622.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              143460.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118497.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17750.966 ±(99.9%) 392.564 ops/s [Average]
[info]   (min, avg, max) = (17616.824, 17750.966, 17880.637), stdev = 101.948
[info]   CI (99.9%): [17358.402, 18143.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1627.833 ±(99.9%) 27.149 MB/sec [Average]
[info]   (min, avg, max) = (1622.616, 1627.833, 1637.703), stdev = 7.050
[info]   CI (99.9%): [1600.684, 1654.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144330.356 ±(99.9%) 4410.705 B/op [Average]
[info]   (min, avg, max) = (142878.506, 144330.356, 145699.957), stdev = 1145.446
[info]   CI (99.9%): [139919.651, 148741.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1476.662 ±(99.9%) 1157.423 MB/sec [Average]
[info]   (min, avg, max) = (1340.224, 1476.662, 2014.342), stdev = 300.579
[info]   CI (99.9%): [319.239, 2634.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   130967.221 ±(99.9%) 103879.117 B/op [Average]
[info]   (min, avg, max) = (118290.208, 130967.221, 179208.046), stdev = 26977.077
[info]   CI (99.9%): [27088.104, 234846.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 4.308 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.708, 2.623), stdev = 1.119
[info]   CI (99.9%): [≈ 0, 5.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   63.150 ±(99.9%) 384.944 B/op [Average]
[info]   (min, avg, max) = (1.844, 63.150, 234.336), stdev = 99.969
[info]   CI (99.9%): [≈ 0, 448.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.23% complete, ETA 02:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9084.084 ops/s
[info] # Warmup Iteration   2: 39502.569 ops/s
[info] # Warmup Iteration   3: 40638.791 ops/s
[info] # Warmup Iteration   4: 41043.204 ops/s
[info] # Warmup Iteration   5: 41872.086 ops/s
[info] Iteration   1: 40873.572 ops/s
[info]                  ·gc.alloc.rate:                   1167.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              44942.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51379.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 40883.468 ops/s
[info]                  ·gc.alloc.rate:               1159.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          44604.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51415.869 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 41883.650 ops/s
[info]                  ·gc.alloc.rate:                   1169.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              43940.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25106.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.347 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 40504.404 ops/s
[info]                  ·gc.alloc.rate:               1144.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          44490.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51975.823 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 40621.996 ops/s
[info]                  ·gc.alloc.rate:                   1147.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              44451.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51873.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   40953.418 ±(99.9%) 2098.560 ops/s [Average]
[info]   (min, avg, max) = (40504.404, 40953.418, 41883.650), stdev = 544.989
[info]   CI (99.9%): [38854.858, 43051.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1157.642 ±(99.9%) 43.046 MB/sec [Average]
[info]   (min, avg, max) = (1144.996, 1157.642, 1169.338), stdev = 11.179
[info]   CI (99.9%): [1114.596, 1200.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44485.896 ±(99.9%) 1390.923 B/op [Average]
[info]   (min, avg, max) = (43940.305, 44485.896, 44942.905), stdev = 361.218
[info]   CI (99.9%): [43094.973, 45876.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.085 ±(99.9%) 1151.561 MB/sec [Average]
[info]   (min, avg, max) = (668.124, 1203.085, 1338.922), stdev = 299.057
[info]   CI (99.9%): [51.524, 2354.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46350.286 ±(99.9%) 45741.102 B/op [Average]
[info]   (min, avg, max) = (25106.150, 46350.286, 51975.823), stdev = 11878.819
[info]   CI (99.9%): [609.184, 92091.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 7.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 4.163), stdev = 1.853
[info]   CI (99.9%): [≈ 0, 7.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   32.890 ±(99.9%) 276.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.890, 161.300), stdev = 71.790
[info]   CI (99.9%): [≈ 0, 309.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 11.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.43% complete, ETA 02:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32043.955 ops/s
[info] # Warmup Iteration   2: 60951.735 ops/s
[info] # Warmup Iteration   3: 61058.350 ops/s
[info] # Warmup Iteration   4: 61789.648 ops/s
[info] # Warmup Iteration   5: 61829.898 ops/s
[info] Iteration   1: 62320.013 ops/s
[info]                  ·gc.alloc.rate:                   844.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              21325.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33898.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 61948.797 ops/s
[info]                  ·gc.alloc.rate:               832.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          21135.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17059.373 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 62060.698 ops/s
[info]                  ·gc.alloc.rate:                   820.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              20803.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17044.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 62315.990 ops/s
[info]                  ·gc.alloc.rate:               819.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          20695.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16975.743 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 62372.210 ops/s
[info]                  ·gc.alloc.rate:                   821.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              20720.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16968.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.576 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   62203.541 ±(99.9%) 720.283 ops/s [Average]
[info]   (min, avg, max) = (61948.797, 62203.541, 62372.210), stdev = 187.055
[info]   CI (99.9%): [61483.259, 62923.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   827.610 ±(99.9%) 41.171 MB/sec [Average]
[info]   (min, avg, max) = (819.671, 827.610, 844.497), stdev = 10.692
[info]   CI (99.9%): [786.438, 868.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20935.968 ±(99.9%) 1077.998 B/op [Average]
[info]   (min, avg, max) = (20695.484, 20935.968, 21325.583), stdev = 279.953
[info]   CI (99.9%): [19857.970, 22013.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.239 ±(99.9%) 1154.084 MB/sec [Average]
[info]   (min, avg, max) = (671.566, 806.239, 1342.379), stdev = 299.712
[info]   CI (99.9%): [≈ 0, 1960.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20389.342 ±(99.9%) 29079.455 B/op [Average]
[info]   (min, avg, max) = (16968.364, 20389.342, 33898.294), stdev = 7551.842
[info]   CI (99.9%): [≈ 0, 49468.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.948 ±(99.9%) 4.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.948, 2.640), stdev = 1.144
[info]   CI (99.9%): [≈ 0, 5.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.63% complete, ETA 02:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1042.476 ops/s
[info] # Warmup Iteration   2: 25861.053 ops/s
[info] # Warmup Iteration   3: 31989.009 ops/s
[info] # Warmup Iteration   4: 32166.880 ops/s
[info] # Warmup Iteration   5: 31731.753 ops/s
[info] Iteration   1: 31853.639 ops/s
[info]                  ·gc.alloc.rate:                   2103.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              103912.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132310.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 32020.063 ops/s
[info]                  ·gc.alloc.rate:                   2112.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              103844.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98977.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 32350.317 ops/s
[info]                  ·gc.alloc.rate:               2146.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          104447.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98068.026 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 32518.630 ops/s
[info]                  ·gc.alloc.rate:                   2144.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              103811.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97735.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 32471.387 ops/s
[info]                  ·gc.alloc.rate:               2155.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          104477.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98041.662 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   32242.807 ±(99.9%) 1124.217 ops/s [Average]
[info]   (min, avg, max) = (31853.639, 32242.807, 32518.630), stdev = 291.956
[info]   CI (99.9%): [31118.590, 33367.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2132.706 ±(99.9%) 88.781 MB/sec [Average]
[info]   (min, avg, max) = (2103.431, 2132.706, 2155.557), stdev = 23.056
[info]   CI (99.9%): [2043.924, 2221.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   104098.902 ±(99.9%) 1287.760 B/op [Average]
[info]   (min, avg, max) = (103811.145, 104098.902, 104477.992), stdev = 334.427
[info]   CI (99.9%): [102811.142, 105386.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.975 ±(99.9%) 1137.244 MB/sec [Average]
[info]   (min, avg, max) = (2013.736, 2149.975, 2678.256), stdev = 295.339
[info]   CI (99.9%): [1012.731, 3287.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105026.611 ±(99.9%) 58757.507 B/op [Average]
[info]   (min, avg, max) = (97735.769, 105026.611, 132310.352), stdev = 15259.138
[info]   CI (99.9%): [46269.104, 163784.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.233 ±(99.9%) 1.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.233, 0.937), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 1.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.505 ±(99.9%) 76.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.505, 46.284), stdev = 19.913
[info]   CI (99.9%): [≈ 0, 88.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.84% complete, ETA 02:01:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8039.019 ops/s
[info] # Warmup Iteration   2: 25621.226 ops/s
[info] # Warmup Iteration   3: 27032.087 ops/s
[info] # Warmup Iteration   4: 27331.473 ops/s
[info] # Warmup Iteration   5: 27146.681 ops/s
[info] Iteration   1: 27183.717 ops/s
[info]                  ·gc.alloc.rate:                   1746.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              101013.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116021.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 27246.691 ops/s
[info]                  ·gc.alloc.rate:                   1748.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              100961.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77415.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27401.055 ops/s
[info]                  ·gc.alloc.rate:                   1771.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              101725.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115169.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27443.317 ops/s
[info]                  ·gc.alloc.rate:               1745.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          100090.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76557.356 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27429.859 ops/s
[info]                  ·gc.alloc.rate:               1785.805 MB/sec
[info]                  ·gc.alloc.rate.norm:          102466.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114971.080 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27340.928 ±(99.9%) 453.999 ops/s [Average]
[info]   (min, avg, max) = (27183.717, 27340.928, 27443.317), stdev = 117.902
[info]   CI (99.9%): [26886.929, 27794.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1759.451 ±(99.9%) 69.754 MB/sec [Average]
[info]   (min, avg, max) = (1745.649, 1759.451, 1785.805), stdev = 18.115
[info]   CI (99.9%): [1689.697, 1829.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101251.610 ±(99.9%) 3438.248 B/op [Average]
[info]   (min, avg, max) = (100090.601, 101251.610, 102466.683), stdev = 892.902
[info]   CI (99.9%): [97813.361, 104689.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1738.111 ±(99.9%) 1406.908 MB/sec [Average]
[info]   (min, avg, max) = (1335.213, 1738.111, 2005.963), stdev = 365.370
[info]   CI (99.9%): [331.203, 3145.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100026.932 ±(99.9%) 81012.798 B/op [Average]
[info]   (min, avg, max) = (76557.356, 100026.932, 116021.176), stdev = 21038.766
[info]   CI (99.9%): [19014.134, 181039.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.810), stdev = 1.688
[info]   CI (99.9%): [≈ 0, 7.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.683 ±(99.9%) 375.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.683, 220.041), stdev = 97.514
[info]   CI (99.9%): [≈ 0, 421.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.793
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.04% complete, ETA 02:01:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20233.346 ops/s
[info] # Warmup Iteration   2: 33194.646 ops/s
[info] # Warmup Iteration   3: 34131.195 ops/s
[info] # Warmup Iteration   4: 33331.995 ops/s
[info] # Warmup Iteration   5: 33881.704 ops/s
[info] Iteration   1: 33985.991 ops/s
[info]                  ·gc.alloc.rate:                   1545.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              71519.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93486.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 34057.257 ops/s
[info]                  ·gc.alloc.rate:                   1532.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              70817.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62230.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34240.332 ops/s
[info]                  ·gc.alloc.rate:                   1554.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              71432.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61852.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34237.348 ops/s
[info]                  ·gc.alloc.rate:                   1539.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              70742.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61765.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34035.532 ops/s
[info]                  ·gc.alloc.rate:                   1544.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62097.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34111.292 ±(99.9%) 459.265 ops/s [Average]
[info]   (min, avg, max) = (33985.991, 34111.292, 34240.332), stdev = 119.270
[info]   CI (99.9%): [33652.026, 34570.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1543.094 ±(99.9%) 30.661 MB/sec [Average]
[info]   (min, avg, max) = (1532.558, 1543.094, 1554.103), stdev = 7.963
[info]   CI (99.9%): [1512.433, 1573.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   71184.160 ±(99.9%) 1432.328 B/op [Average]
[info]   (min, avg, max) = (70742.610, 71184.160, 71519.251), stdev = 371.971
[info]   CI (99.9%): [69751.833, 72616.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.812 ±(99.9%) 1162.019 MB/sec [Average]
[info]   (min, avg, max) = (1343.177, 1479.812, 2019.634), stdev = 301.773
[info]   CI (99.9%): [317.794, 2641.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   68286.532 ±(99.9%) 54250.203 B/op [Average]
[info]   (min, avg, max) = (61765.603, 68286.532, 93486.793), stdev = 14088.605
[info]   CI (99.9%): [14036.329, 122536.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 3.841 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.641, 2.311), stdev = 0.997
[info]   CI (99.9%): [≈ 0, 4.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.588 ±(99.9%) 177.433 B/op [Average]
[info]   (min, avg, max) = (0.957, 29.588, 106.783), stdev = 46.079
[info]   CI (99.9%): [≈ 0, 207.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 9.000), stdev = 2.881
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9.24% complete, ETA 02:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18911.679 ops/s
[info] # Warmup Iteration   2: 32274.729 ops/s
[info] # Warmup Iteration   3: 34656.710 ops/s
[info] # Warmup Iteration   4: 34387.797 ops/s
[info] # Warmup Iteration   5: 34264.681 ops/s
[info] Iteration   1: 34654.335 ops/s
[info]                  ·gc.alloc.rate:                   1486.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              67510.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61113.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34842.645 ops/s
[info]                  ·gc.alloc.rate:                   1505.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              68021.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60781.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34899.256 ops/s
[info]                  ·gc.alloc.rate:                   1508.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              68024.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60742.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34661.295 ops/s
[info]                  ·gc.alloc.rate:                   1515.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              68827.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91494.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35118.702 ops/s
[info]                  ·gc.alloc.rate:               1516.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          67948.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60121.621 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   34835.246 ±(99.9%) 739.402 ops/s [Average]
[info]   (min, avg, max) = (34654.335, 34835.246, 35118.702), stdev = 192.020
[info]   CI (99.9%): [34095.844, 35574.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1506.603 ±(99.9%) 46.781 MB/sec [Average]
[info]   (min, avg, max) = (1486.424, 1506.603, 1516.271), stdev = 12.149
[info]   CI (99.9%): [1459.822, 1553.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68066.527 ±(99.9%) 1832.733 B/op [Average]
[info]   (min, avg, max) = (67510.034, 68066.527, 68827.358), stdev = 475.955
[info]   CI (99.9%): [66233.794, 69899.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1478.992 ±(99.9%) 1153.972 MB/sec [Average]
[info]   (min, avg, max) = (1341.604, 1478.992, 2015.068), stdev = 299.683
[info]   CI (99.9%): [325.020, 2632.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   66850.812 ±(99.9%) 53066.017 B/op [Average]
[info]   (min, avg, max) = (60121.621, 66850.812, 91494.819), stdev = 13781.076
[info]   CI (99.9%): [13784.795, 119916.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 4.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 2.706), stdev = 1.166
[info]   CI (99.9%): [≈ 0, 5.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   30.835 ±(99.9%) 202.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.835, 122.041), stdev = 52.576
[info]   CI (99.9%): [≈ 0, 233.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9.44% complete, ETA 02:00:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56915.522 ops/s
[info] # Warmup Iteration   2: 313751.963 ops/s
[info] # Warmup Iteration   3: 316246.687 ops/s
[info] # Warmup Iteration   4: 319647.545 ops/s
[info] # Warmup Iteration   5: 327862.892 ops/s
[info] Iteration   1: 318734.782 ops/s
[info]                  ·gc.alloc.rate:                   1803.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              8904.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9946.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 318561.464 ops/s
[info]                  ·gc.alloc.rate:                   1785.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              8819.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6641.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 316163.209 ops/s
[info]                  ·gc.alloc.rate:                   1799.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              8957.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10004.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 324239.769 ops/s
[info]                  ·gc.alloc.rate:                   1857.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              9014.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9749.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 330080.676 ops/s
[info]                  ·gc.alloc.rate:               1863.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          8885.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6384.266 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   321555.980 ±(99.9%) 21601.515 ops/s [Average]
[info]   (min, avg, max) = (316163.209, 321555.980, 330080.676), stdev = 5609.845
[info]   CI (99.9%): [299954.465, 343157.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1821.741 ±(99.9%) 138.324 MB/sec [Average]
[info]   (min, avg, max) = (1785.159, 1821.741, 1863.577), stdev = 35.922
[info]   CI (99.9%): [1683.418, 1960.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8916.357 ±(99.9%) 282.930 B/op [Average]
[info]   (min, avg, max) = (8819.938, 8916.357, 9014.084), stdev = 73.476
[info]   CI (99.9%): [8633.428, 9199.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.170 ±(99.9%) 1411.761 MB/sec [Average]
[info]   (min, avg, max) = (1338.945, 1743.170, 2014.349), stdev = 366.630
[info]   CI (99.9%): [331.409, 3154.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8545.066 ±(99.9%) 7161.832 B/op [Average]
[info]   (min, avg, max) = (6384.266, 8545.066, 10004.218), stdev = 1859.905
[info]   CI (99.9%): [1383.234, 15706.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 6.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.580), stdev = 1.592
[info]   CI (99.9%): [≈ 0, 6.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.619 ±(99.9%) 30.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.619, 17.689), stdev = 7.865
[info]   CI (99.9%): [≈ 0, 33.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.793
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9.64% complete, ETA 02:00:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.762 ops/s
[info] # Warmup Iteration   2: 1391315.568 ops/s
[info] # Warmup Iteration   3: 1511900.448 ops/s
[info] # Warmup Iteration   4: 1527112.046 ops/s
[info] # Warmup Iteration   5: 1525885.940 ops/s
[info] Iteration   1: 1513539.076 ops/s
[info]                  ·gc.alloc.rate:      476.995 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1528925.289 ops/s
[info]                  ·gc.alloc.rate:               494.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          508.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 685.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1526708.131 ops/s
[info]                  ·gc.alloc.rate:                   504.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              519.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     686.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1528805.521 ops/s
[info]                  ·gc.alloc.rate:                   499.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              514.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     685.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1524058.309 ops/s
[info]                  ·gc.alloc.rate:      480.304 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1524407.265 ±(99.9%) 24602.759 ops/s [Average]
[info]   (min, avg, max) = (1513539.076, 1524407.265, 1528925.289), stdev = 6389.258
[info]   CI (99.9%): [1499804.506, 1549010.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   491.055 ±(99.9%) 45.854 MB/sec [Average]
[info]   (min, avg, max) = (476.995, 491.055, 504.128), stdev = 11.908
[info]   CI (99.9%): [445.201, 536.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   506.965 ±(99.9%) 41.308 B/op [Average]
[info]   (min, avg, max) = (496.000, 506.965, 519.718), stdev = 10.728
[info]   CI (99.9%): [465.657, 548.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.685 ±(99.9%) 1404.949 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.685, 666.161), stdev = 364.861
[info]   CI (99.9%): [≈ 0, 1804.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   411.650 ±(99.9%) 1447.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 411.650, 686.737), stdev = 375.784
[info]   CI (99.9%): [≈ 0, 1858.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.84% complete, ETA 02:00:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208716.582 ops/s
[info] # Warmup Iteration   2: 654470.392 ops/s
[info] # Warmup Iteration   3: 677825.389 ops/s
[info] # Warmup Iteration   4: 675790.809 ops/s
[info] # Warmup Iteration   5: 677701.994 ops/s
[info] Iteration   1: 677152.055 ops/s
[info]                  ·gc.alloc.rate:               581.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          1351.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1549.000 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 678738.997 ops/s
[info]                  ·gc.alloc.rate:                   583.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              1352.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1545.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 681463.692 ops/s
[info]                  ·gc.alloc.rate:      565.469 MB/sec
[info]                  ·gc.alloc.rate.norm: 1305.732 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 679823.906 ops/s
[info]                  ·gc.alloc.rate:               586.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          1358.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1545.233 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 678606.298 ops/s
[info]                  ·gc.alloc.rate:               584.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          1355.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1548.037 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   679156.990 ±(99.9%) 6168.065 ops/s [Average]
[info]   (min, avg, max) = (677152.055, 679156.990, 681463.692), stdev = 1601.827
[info]   CI (99.9%): [672988.925, 685325.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   580.313 ±(99.9%) 32.666 MB/sec [Average]
[info]   (min, avg, max) = (565.469, 580.313, 586.593), stdev = 8.483
[info]   CI (99.9%): [547.648, 612.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1344.762 ±(99.9%) 84.491 B/op [Average]
[info]   (min, avg, max) = (1305.732, 1344.762, 1358.011), stdev = 21.942
[info]   CI (99.9%): [1260.271, 1429.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.584 ±(99.9%) 1148.582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.584, 667.469), stdev = 298.283
[info]   CI (99.9%): [≈ 0, 1682.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1237.539 ±(99.9%) 2663.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1237.539, 1549.000), stdev = 691.807
[info]   CI (99.9%): [≈ 0, 3901.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.04% complete, ETA 01:59:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 865406.913 ops/s
[info] # Warmup Iteration   2: 1699892.631 ops/s
[info] # Warmup Iteration   3: 1887782.403 ops/s
[info] # Warmup Iteration   4: 1892606.714 ops/s
[info] # Warmup Iteration   5: 1887461.890 ops/s
[info] Iteration   1: 1886486.402 ops/s
[info]                  ·gc.alloc.rate:               381.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          318.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 426.839 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1886389.939 ops/s
[info]                  ·gc.alloc.rate:               381.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          318.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 426.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1900408.454 ops/s
[info]                  ·gc.alloc.rate:      367.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.047 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1885827.458 ops/s
[info]                  ·gc.alloc.rate:                   383.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              319.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1893599.466 ops/s
[info]                  ·gc.alloc.rate:      365.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1890542.344 ±(99.9%) 24551.397 ops/s [Average]
[info]   (min, avg, max) = (1885827.458, 1890542.344, 1900408.454), stdev = 6375.920
[info]   CI (99.9%): [1865990.947, 1915093.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   375.813 ±(99.9%) 33.016 MB/sec [Average]
[info]   (min, avg, max) = (365.757, 375.813, 383.342), stdev = 8.574
[info]   CI (99.9%): [342.796, 408.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.849 ±(99.9%) 31.131 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.849, 319.824), stdev = 8.085
[info]   CI (99.9%): [281.719, 343.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.786 ±(99.9%) 1216.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.786, 670.684), stdev = 316.012
[info]   CI (99.9%): [≈ 0, 1555.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   282.650 ±(99.9%) 1015.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 282.650, 559.556), stdev = 263.649
[info]   CI (99.9%): [≈ 0, 1297.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10.24% complete, ETA 01:59:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3720.537 ops/s
[info] # Warmup Iteration   2: 79651.636 ops/s
[info] # Warmup Iteration   3: 98193.922 ops/s
[info] # Warmup Iteration   4: 100556.025 ops/s
[info] # Warmup Iteration   5: 101877.539 ops/s
[info] Iteration   1: 100107.887 ops/s
[info]                  ·gc.alloc.rate:                   3206.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              50414.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3334.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52423.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.964 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 102427.538 ops/s
[info]                  ·gc.alloc.rate:                   3318.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              50994.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51318.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 102249.920 ops/s
[info]                  ·gc.alloc.rate:               3288.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          50619.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41271.216 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 102377.261 ops/s
[info]                  ·gc.alloc.rate:               3320.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          51046.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3363.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51710.920 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 101352.309 ops/s
[info]                  ·gc.alloc.rate:               3289.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          51075.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52418.973 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   101702.983 ±(99.9%) 3824.599 ops/s [Average]
[info]   (min, avg, max) = (100107.887, 101702.983, 102427.538), stdev = 993.236
[info]   CI (99.9%): [97878.384, 105527.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3284.770 ±(99.9%) 178.112 MB/sec [Average]
[info]   (min, avg, max) = (3206.755, 3284.770, 3320.647), stdev = 46.255
[info]   CI (99.9%): [3106.659, 3462.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50830.011 ±(99.9%) 1140.550 B/op [Average]
[info]   (min, avg, max) = (50414.832, 50830.011, 51075.639), stdev = 296.197
[info]   CI (99.9%): [49689.461, 51970.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3219.020 ±(99.9%) 1159.290 MB/sec [Average]
[info]   (min, avg, max) = (2681.314, 3219.020, 3375.638), stdev = 301.064
[info]   CI (99.9%): [2059.730, 4378.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49828.469 ±(99.9%) 18510.344 B/op [Average]
[info]   (min, avg, max) = (41271.216, 49828.469, 52423.040), stdev = 4807.078
[info]   CI (99.9%): [31318.124, 68338.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.457 ±(99.9%) 3.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 1.964), stdev = 0.854
[info]   CI (99.9%): [≈ 0, 3.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10.44% complete, ETA 01:59:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209360.296 ops/s
[info] # Warmup Iteration   2: 670939.682 ops/s
[info] # Warmup Iteration   3: 684335.485 ops/s
[info] # Warmup Iteration   4: 680950.239 ops/s
[info] # Warmup Iteration   5: 694834.315 ops/s
[info] Iteration   1: 680520.080 ops/s
[info]                  ·gc.alloc.rate:               1807.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          4181.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3112.137 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 675204.078 ops/s
[info]                  ·gc.alloc.rate:                   1822.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              4246.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4701.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 691913.603 ops/s
[info]                  ·gc.alloc.rate:               1852.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          4212.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3053.088 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 696301.524 ops/s
[info]                  ·gc.alloc.rate:                   1865.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4548.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 673997.119 ops/s
[info]                  ·gc.alloc.rate:               1834.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          4282.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4703.324 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   683587.281 ±(99.9%) 38633.139 ops/s [Average]
[info]   (min, avg, max) = (673997.119, 683587.281, 696301.524), stdev = 10032.904
[info]   CI (99.9%): [644954.142, 722220.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1836.332 ±(99.9%) 87.987 MB/sec [Average]
[info]   (min, avg, max) = (1807.979, 1836.332, 1865.087), stdev = 22.850
[info]   CI (99.9%): [1748.345, 1924.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4227.716 ±(99.9%) 148.412 B/op [Average]
[info]   (min, avg, max) = (4181.486, 4227.716, 4282.853), stdev = 38.542
[info]   CI (99.9%): [4079.304, 4376.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1746.479 ±(99.9%) 1414.564 MB/sec [Average]
[info]   (min, avg, max) = (1342.513, 1746.479, 2017.369), stdev = 367.358
[info]   CI (99.9%): [331.915, 3161.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4023.782 ±(99.9%) 3318.155 B/op [Average]
[info]   (min, avg, max) = (3053.088, 4023.782, 4703.324), stdev = 861.714
[info]   CI (99.9%): [705.628, 7341.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 5.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 3.061), stdev = 1.366
[info]   CI (99.9%): [≈ 0, 5.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.436 ±(99.9%) 12.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.436, 7.133), stdev = 3.185
[info]   CI (99.9%): [≈ 0, 13.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.64% complete, ETA 01:59:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133355.601 ops/s
[info] # Warmup Iteration   2: 360333.848 ops/s
[info] # Warmup Iteration   3: 359165.826 ops/s
[info] # Warmup Iteration   4: 363089.220 ops/s
[info] # Warmup Iteration   5: 362943.224 ops/s
[info] Iteration   1: 357148.171 ops/s
[info]                  ·gc.alloc.rate:               1241.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          5471.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5909.199 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 356627.924 ops/s
[info]                  ·gc.alloc.rate:                   1225.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              5407.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5920.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 353505.808 ops/s
[info]                  ·gc.alloc.rate:                   1212.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              5398.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2989.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 352515.954 ops/s
[info]                  ·gc.alloc.rate:                   1223.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              5460.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5995.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 357610.495 ops/s
[info]                  ·gc.alloc.rate:                   1240.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              5457.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5904.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   355481.670 ±(99.9%) 8890.428 ops/s [Average]
[info]   (min, avg, max) = (352515.954, 355481.670, 357610.495), stdev = 2308.816
[info]   CI (99.9%): [346591.242, 364372.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1228.630 ±(99.9%) 46.890 MB/sec [Average]
[info]   (min, avg, max) = (1212.827, 1228.630, 1241.715), stdev = 12.177
[info]   CI (99.9%): [1181.740, 1275.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5439.239 ±(99.9%) 130.035 B/op [Average]
[info]   (min, avg, max) = (5398.668, 5439.239, 5471.945), stdev = 33.770
[info]   CI (99.9%): [5309.203, 5569.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.770 ±(99.9%) 1154.170 MB/sec [Average]
[info]   (min, avg, max) = (671.590, 1207.770, 1342.922), stdev = 299.734
[info]   CI (99.9%): [53.600, 2361.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5343.895 ±(99.9%) 5070.099 B/op [Average]
[info]   (min, avg, max) = (2989.458, 5343.895, 5995.653), stdev = 1316.689
[info]   CI (99.9%): [273.796, 10413.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.039), stdev = 1.319
[info]   CI (99.9%): [≈ 0, 5.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.099 ±(99.9%) 22.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.099, 13.569), stdev = 5.892
[info]   CI (99.9%): [≈ 0, 25.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.84% complete, ETA 01:58:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.791 ops/s
[info] # Warmup Iteration   2: 1467893.675 ops/s
[info] # Warmup Iteration   3: 1559766.943 ops/s
[info] # Warmup Iteration   4: 1577780.055 ops/s
[info] # Warmup Iteration   5: 1566475.104 ops/s
[info] Iteration   1: 1603376.764 ops/s
[info]                  ·gc.alloc.rate:                   762.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1608450.448 ops/s
[info]                  ·gc.alloc.rate:               765.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 652.150 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1599830.879 ops/s
[info]                  ·gc.alloc.rate:                   777.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              764.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1311.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1605601.081 ops/s
[info]                  ·gc.alloc.rate:               759.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 653.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1607248.432 ops/s
[info]                  ·gc.alloc.rate:                   760.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1604901.521 ±(99.9%) 13147.081 ops/s [Average]
[info]   (min, avg, max) = (1599830.879, 1604901.521, 1608450.448), stdev = 3414.255
[info]   CI (99.9%): [1591754.440, 1618048.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   764.968 ±(99.9%) 28.626 MB/sec [Average]
[info]   (min, avg, max) = (759.019, 764.968, 777.535), stdev = 7.434
[info]   CI (99.9%): [736.343, 793.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   750.158 ±(99.9%) 32.766 B/op [Average]
[info]   (min, avg, max) = (744.011, 750.158, 764.877), stdev = 8.509
[info]   CI (99.9%): [717.392, 782.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.001 ±(99.9%) 1148.010 MB/sec [Average]
[info]   (min, avg, max) = (665.867, 800.001, 1333.319), stdev = 298.135
[info]   CI (99.9%): [≈ 0, 1948.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   784.915 ±(99.9%) 1133.758 B/op [Average]
[info]   (min, avg, max) = (652.150, 784.915, 1311.612), stdev = 294.433
[info]   CI (99.9%): [≈ 0, 1918.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.04% complete, ETA 01:58:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 475015.346 ops/s
[info] # Warmup Iteration   2: 992412.668 ops/s
[info] # Warmup Iteration   3: 1009865.649 ops/s
[info] # Warmup Iteration   4: 1018687.329 ops/s
[info] # Warmup Iteration   5: 1050764.553 ops/s
[info] Iteration   1: 1052148.280 ops/s
[info]                  ·gc.alloc.rate:               769.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          1150.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 998.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1049297.411 ops/s
[info]                  ·gc.alloc.rate:               764.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          1146.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1002.163 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1052801.316 ops/s
[info]                  ·gc.alloc.rate:                   762.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              1139.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     998.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1050782.141 ops/s
[info]                  ·gc.alloc.rate:                   759.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              1137.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1001.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1053097.653 ops/s
[info]                  ·gc.alloc.rate:                   775.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              1158.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2000.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1051625.360 ±(99.9%) 6074.484 ops/s [Average]
[info]   (min, avg, max) = (1049297.411, 1051625.360, 1053097.653), stdev = 1577.524
[info]   CI (99.9%): [1045550.876, 1057699.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   766.199 ±(99.9%) 24.116 MB/sec [Average]
[info]   (min, avg, max) = (759.761, 766.199, 775.479), stdev = 6.263
[info]   CI (99.9%): [742.083, 790.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1146.587 ±(99.9%) 32.866 B/op [Average]
[info]   (min, avg, max) = (1137.983, 1146.587, 1158.687), stdev = 8.535
[info]   CI (99.9%): [1113.721, 1179.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.258 ±(99.9%) 1154.521 MB/sec [Average]
[info]   (min, avg, max) = (667.425, 802.258, 1338.601), stdev = 299.825
[info]   CI (99.9%): [≈ 0, 1956.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1200.243 ±(99.9%) 1721.719 B/op [Average]
[info]   (min, avg, max) = (998.435, 1200.243, 2000.079), stdev = 447.125
[info]   CI (99.9%): [≈ 0, 2921.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.031), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.24% complete, ETA 01:58:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1640983.424 ops/s
[info] # Warmup Iteration   2: 2688571.616 ops/s
[info] # Warmup Iteration   3: 2724084.284 ops/s
[info] # Warmup Iteration   4: 2736390.004 ops/s
[info] # Warmup Iteration   5: 2713412.087 ops/s
[info] Iteration   1: 2739304.753 ops/s
[info]                  ·gc.alloc.rate:                   1299.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     772.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2791519.161 ops/s
[info]                  ·gc.alloc.rate:                   1342.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     758.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2791717.615 ops/s
[info]                  ·gc.alloc.rate:               1305.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          735.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 379.303 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2805006.544 ops/s
[info]                  ·gc.alloc.rate:                   1324.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2815988.074 ops/s
[info]                  ·gc.alloc.rate:                   1342.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     751.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2788707.230 ±(99.9%) 113373.286 ops/s [Average]
[info]   (min, avg, max) = (2739304.753, 2788707.230, 2815988.074), stdev = 29442.682
[info]   CI (99.9%): [2675333.944, 2902080.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1322.904 ±(99.9%) 78.005 MB/sec [Average]
[info]   (min, avg, max) = (1299.498, 1322.904, 1342.620), stdev = 20.258
[info]   CI (99.9%): [1244.899, 1400.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   746.491 ±(99.9%) 30.198 B/op [Average]
[info]   (min, avg, max) = (735.590, 746.491, 756.602), stdev = 7.842
[info]   CI (99.9%): [716.293, 776.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.477 ±(99.9%) 1157.004 MB/sec [Average]
[info]   (min, avg, max) = (672.981, 1210.477, 1345.587), stdev = 300.470
[info]   CI (99.9%): [53.473, 2367.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   683.210 ±(99.9%) 654.888 B/op [Average]
[info]   (min, avg, max) = (379.303, 683.210, 772.157), stdev = 170.072
[info]   CI (99.9%): [28.322, 1338.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 5.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 2.935), stdev = 1.299
[info]   CI (99.9%): [≈ 0, 5.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.343 ±(99.9%) 2.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.343, 1.647), stdev = 0.729
[info]   CI (99.9%): [≈ 0, 3.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11.45% complete, ETA 01:58:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1843576.503 ops/s
[info] # Warmup Iteration   2: 3217339.213 ops/s
[info] # Warmup Iteration   3: 3251218.757 ops/s
[info] # Warmup Iteration   4: 3252594.254 ops/s
[info] # Warmup Iteration   5: 3254004.814 ops/s
[info] Iteration   1: 3254614.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3253770.119 ops/s
[info]                  ·gc.alloc.rate:      0.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3253707.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3246150.600 ops/s
[info]                  ·gc.alloc.rate:      1.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.503 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3257277.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3253104.271 ±(99.9%) 15976.807 ops/s [Average]
[info]   (min, avg, max) = (3246150.600, 3253104.271, 3257277.685), stdev = 4149.126
[info]   CI (99.9%): [3237127.464, 3269081.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.214 ±(99.9%) 1.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.214, 1.037), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 1.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.104 ±(99.9%) 0.859 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.104, 0.503), stdev = 0.223
[info]   CI (99.9%): [≈ 0, 0.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.65% complete, ETA 01:57:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154538.888 ops/s
[info] # Warmup Iteration   2: 463946.183 ops/s
[info] # Warmup Iteration   3: 487868.768 ops/s
[info] # Warmup Iteration   4: 483370.435 ops/s
[info] # Warmup Iteration   5: 488980.640 ops/s
[info] Iteration   1: 489289.828 ops/s
[info]                  ·gc.alloc.rate:               582.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          1874.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2148.107 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 489584.061 ops/s
[info]                  ·gc.alloc.rate:      578.835 MB/sec
[info]                  ·gc.alloc.rate.norm: 1860.571 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 488464.218 ops/s
[info]                  ·gc.alloc.rate:               569.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          1835.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2151.655 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 489411.791 ops/s
[info]                  ·gc.alloc.rate:                   587.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1890.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2149.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 488563.061 ops/s
[info]                  ·gc.alloc.rate:               579.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          1867.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2153.382 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   489062.592 ±(99.9%) 1975.768 ops/s [Average]
[info]   (min, avg, max) = (488464.218, 489062.592, 489584.061), stdev = 513.101
[info]   CI (99.9%): [487086.824, 491038.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   579.836 ±(99.9%) 25.681 MB/sec [Average]
[info]   (min, avg, max) = (569.772, 579.836, 587.995), stdev = 6.669
[info]   CI (99.9%): [554.154, 605.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1865.729 ±(99.9%) 78.326 B/op [Average]
[info]   (min, avg, max) = (1835.376, 1865.729, 1890.840), stdev = 20.341
[info]   CI (99.9%): [1787.403, 1944.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   534.577 ±(99.9%) 1150.718 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.577, 668.482), stdev = 298.838
[info]   CI (99.9%): [≈ 0, 1685.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1720.562 ±(99.9%) 3703.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1720.562, 2153.382), stdev = 961.825
[info]   CI (99.9%): [≈ 0, 5424.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11.85% complete, ETA 01:57:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68548.858 ops/s
[info] # Warmup Iteration   2: 170761.974 ops/s
[info] # Warmup Iteration   3: 168536.935 ops/s
[info] # Warmup Iteration   4: 170452.160 ops/s
[info] # Warmup Iteration   5: 172183.372 ops/s
[info] Iteration   1: 173083.455 ops/s
[info]                  ·gc.alloc.rate:               1018.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          9260.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6108.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 172241.637 ops/s
[info]                  ·gc.alloc.rate:                   1028.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              9395.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12282.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 173110.301 ops/s
[info]                  ·gc.alloc.rate:               1017.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          9250.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6116.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 171885.582 ops/s
[info]                  ·gc.alloc.rate:                   1058.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              9683.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12320.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 173205.110 ops/s
[info]                  ·gc.alloc.rate:               1019.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          9261.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6113.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   172705.217 ±(99.9%) 2313.399 ops/s [Average]
[info]   (min, avg, max) = (171885.582, 172705.217, 173205.110), stdev = 600.782
[info]   CI (99.9%): [170391.818, 175018.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1028.364 ±(99.9%) 66.036 MB/sec [Average]
[info]   (min, avg, max) = (1017.483, 1028.364, 1058.054), stdev = 17.149
[info]   CI (99.9%): [962.329, 1094.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9370.277 ±(99.9%) 713.232 B/op [Average]
[info]   (min, avg, max) = (9250.272, 9370.277, 9683.752), stdev = 185.224
[info]   CI (99.9%): [8657.045, 10083.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.616 ±(99.9%) 1418.727 MB/sec [Average]
[info]   (min, avg, max) = (671.826, 941.616, 1346.183), stdev = 368.439
[info]   CI (99.9%): [≈ 0, 2360.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8588.435 ±(99.9%) 13052.361 B/op [Average]
[info]   (min, avg, max) = (6108.804, 8588.435, 12320.832), stdev = 3389.657
[info]   CI (99.9%): [≈ 0, 21640.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.114 ±(99.9%) 0.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.380), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.05% complete, ETA 01:57:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55891.379 ops/s
[info] # Warmup Iteration   2: 148473.937 ops/s
[info] # Warmup Iteration   3: 146273.906 ops/s
[info] # Warmup Iteration   4: 159601.220 ops/s
[info] # Warmup Iteration   5: 161481.138 ops/s
[info] Iteration   1: 161806.379 ops/s
[info]                  ·gc.alloc.rate:                   2051.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              19953.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19619.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 159280.705 ops/s
[info]                  ·gc.alloc.rate:                   2007.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              19830.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13256.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 161760.862 ops/s
[info]                  ·gc.alloc.rate:                   2063.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              20073.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19560.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.633 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 159501.146 ops/s
[info]                  ·gc.alloc.rate:               2023.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          19966.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19838.031 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 162421.875 ops/s
[info]                  ·gc.alloc.rate:               2073.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          20088.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19490.632 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   160954.193 ±(99.9%) 5594.355 ops/s [Average]
[info]   (min, avg, max) = (159280.705, 160954.193, 162421.875), stdev = 1452.836
[info]   CI (99.9%): [155359.839, 166548.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2043.756 ±(99.9%) 105.388 MB/sec [Average]
[info]   (min, avg, max) = (2007.843, 2043.756, 2073.095), stdev = 27.369
[info]   CI (99.9%): [1938.367, 2149.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19982.222 ±(99.9%) 402.461 B/op [Average]
[info]   (min, avg, max) = (19830.288, 19982.222, 20088.214), stdev = 104.518
[info]   CI (99.9%): [19579.761, 20384.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.308 ±(99.9%) 1153.880 MB/sec [Average]
[info]   (min, avg, max) = (1342.284, 1878.308, 2016.965), stdev = 299.659
[info]   CI (99.9%): [724.428, 3032.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18353.089 ±(99.9%) 10981.242 B/op [Average]
[info]   (min, avg, max) = (13256.950, 18353.089, 19838.031), stdev = 2851.794
[info]   CI (99.9%): [7371.847, 29334.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 5.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.372), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.251 ±(99.9%) 55.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.251, 32.801), stdev = 14.323
[info]   CI (99.9%): [≈ 0, 62.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.25% complete, ETA 01:57:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94583.359 ops/s
[info] # Warmup Iteration   2: 437389.414 ops/s
[info] # Warmup Iteration   3: 452397.288 ops/s
[info] # Warmup Iteration   4: 454993.144 ops/s
[info] # Warmup Iteration   5: 454136.470 ops/s
[info] Iteration   1: 454152.364 ops/s
[info]                  ·gc.alloc.rate:               374.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          1298.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1772.940 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 453911.279 ops/s
[info]                  ·gc.alloc.rate:               383.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          1330.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1773.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 454465.117 ops/s
[info]                  ·gc.alloc.rate:      365.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.193 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 450095.019 ops/s
[info]                  ·gc.alloc.rate:                   383.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              1340.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2329.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 453413.868 ops/s
[info]                  ·gc.alloc.rate:      364.162 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   453207.529 ±(99.9%) 6861.227 ops/s [Average]
[info]   (min, avg, max) = (450095.019, 453207.529, 454465.117), stdev = 1781.839
[info]   CI (99.9%): [446346.302, 460068.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   374.195 ±(99.9%) 36.499 MB/sec [Average]
[info]   (min, avg, max) = (364.162, 374.195, 383.672), stdev = 9.479
[info]   CI (99.9%): [337.695, 410.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1299.464 ±(99.9%) 138.061 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1299.464, 1340.682), stdev = 35.854
[info]   CI (99.9%): [1161.403, 1437.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   337.900 ±(99.9%) 1212.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.900, 666.163), stdev = 314.842
[info]   CI (99.9%): [≈ 0, 1550.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1175.248 ±(99.9%) 4222.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1175.248, 2329.403), stdev = 1096.597
[info]   CI (99.9%): [≈ 0, 5397.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.45% complete, ETA 01:56:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 541209.988 ops/s
[info] # Warmup Iteration   2: 1227414.334 ops/s
[info] # Warmup Iteration   3: 1263235.769 ops/s
[info] # Warmup Iteration   4: 1260858.851 ops/s
[info] # Warmup Iteration   5: 1279533.486 ops/s
[info] Iteration   1: 1274456.145 ops/s
[info]                  ·gc.alloc.rate:               263.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 631.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1278390.871 ops/s
[info]                  ·gc.alloc.rate:      246.923 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1272561.456 ops/s
[info]                  ·gc.alloc.rate:               262.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 632.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1277713.752 ops/s
[info]                  ·gc.alloc.rate:      246.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1271925.814 ops/s
[info]                  ·gc.alloc.rate:               258.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          319.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 633.059 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1275009.608 ±(99.9%) 11317.699 ops/s [Average]
[info]   (min, avg, max) = (1271925.814, 1275009.608, 1278390.871), stdev = 2939.170
[info]   CI (99.9%): [1263691.909, 1286327.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   255.462 ±(99.9%) 31.063 MB/sec [Average]
[info]   (min, avg, max) = (246.797, 255.462, 263.004), stdev = 8.067
[info]   CI (99.9%): [224.399, 286.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   315.344 ±(99.9%) 40.682 B/op [Average]
[info]   (min, avg, max) = (304.000, 315.344, 324.718), stdev = 10.565
[info]   CI (99.9%): [274.662, 356.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.985 ±(99.9%) 1079.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.985, 511.713), stdev = 280.238
[info]   CI (99.9%): [≈ 0, 1386.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   379.516 ±(99.9%) 1334.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 379.516, 633.059), stdev = 346.449
[info]   CI (99.9%): [≈ 0, 1713.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.65% complete, ETA 01:56:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8360.544 ops/s
[info] # Warmup Iteration   2: 73831.010 ops/s
[info] # Warmup Iteration   3: 84558.535 ops/s
[info] # Warmup Iteration   4: 84302.439 ops/s
[info] # Warmup Iteration   5: 84884.735 ops/s
[info] Iteration   1: 86183.754 ops/s
[info]                  ·gc.alloc.rate:                   3436.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              62755.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60913.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.521 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 86136.159 ops/s
[info]                  ·gc.alloc.rate:                   3462.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              63265.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61108.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 83610.905 ops/s
[info]                  ·gc.alloc.rate:                   3365.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              63359.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63216.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 85057.286 ops/s
[info]                  ·gc.alloc.rate:                   3423.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              63335.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62378.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 86533.159 ops/s
[info]                  ·gc.alloc.rate:               3468.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          63044.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61411.600 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   85504.252 ±(99.9%) 4598.345 ops/s [Average]
[info]   (min, avg, max) = (83610.905, 85504.252, 86533.159), stdev = 1194.176
[info]   CI (99.9%): [80905.908, 90102.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3431.301 ±(99.9%) 157.832 MB/sec [Average]
[info]   (min, avg, max) = (3365.989, 3431.301, 3468.663), stdev = 40.988
[info]   CI (99.9%): [3273.469, 3589.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63151.997 ±(99.9%) 977.793 B/op [Average]
[info]   (min, avg, max) = (62755.931, 63151.997, 63359.100), stdev = 253.930
[info]   CI (99.9%): [62174.204, 64129.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3357.685 ±(99.9%) 69.392 MB/sec [Average]
[info]   (min, avg, max) = (3335.612, 3357.685, 3378.842), stdev = 18.021
[info]   CI (99.9%): [3288.293, 3427.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61805.596 ±(99.9%) 3730.712 B/op [Average]
[info]   (min, avg, max) = (60913.507, 61805.596, 63216.253), stdev = 968.854
[info]   CI (99.9%): [58074.884, 65536.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.613 ±(99.9%) 2.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.613, 1.521), stdev = 0.576
[info]   CI (99.9%): [≈ 0, 2.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12.85% complete, ETA 01:56:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92170.603 ops/s
[info] # Warmup Iteration   2: 289801.697 ops/s
[info] # Warmup Iteration   3: 297404.161 ops/s
[info] # Warmup Iteration   4: 303938.789 ops/s
[info] # Warmup Iteration   5: 299607.818 ops/s
[info] Iteration   1: 304748.094 ops/s
[info]                  ·gc.alloc.rate:               1417.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          7321.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6915.072 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 306260.589 ops/s
[info]                  ·gc.alloc.rate:               1434.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          7369.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6880.869 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 305346.045 ops/s
[info]                  ·gc.alloc.rate:                   1443.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              7438.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6908.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 297051.239 ops/s
[info]                  ·gc.alloc.rate:                   1393.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              7380.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7111.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 304293.132 ops/s
[info]                  ·gc.alloc.rate:                   1438.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              7440.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6949.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   303539.820 ±(99.9%) 14251.821 ops/s [Average]
[info]   (min, avg, max) = (297051.239, 303539.820, 306260.589), stdev = 3701.153
[info]   CI (99.9%): [289287.999, 317791.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1425.477 ±(99.9%) 78.849 MB/sec [Average]
[info]   (min, avg, max) = (1393.095, 1425.477, 1443.448), stdev = 20.477
[info]   CI (99.9%): [1346.628, 1504.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7389.834 ±(99.9%) 192.988 B/op [Average]
[info]   (min, avg, max) = (7321.561, 7389.834, 7440.070), stdev = 50.118
[info]   CI (99.9%): [7196.846, 7582.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1341.059 ±(99.9%) 7.267 MB/sec [Average]
[info]   (min, avg, max) = (1339.209, 1341.059, 1343.565), stdev = 1.887
[info]   CI (99.9%): [1333.792, 1348.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6953.129 ±(99.9%) 354.275 B/op [Average]
[info]   (min, avg, max) = (6880.869, 6953.129, 7111.801), stdev = 92.004
[info]   CI (99.9%): [6598.855, 7307.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.271), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.373 ±(99.9%) 2.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.434), stdev = 0.603
[info]   CI (99.9%): [≈ 0, 2.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.05% complete, ETA 01:55:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105391.529 ops/s
[info] # Warmup Iteration   2: 291849.016 ops/s
[info] # Warmup Iteration   3: 304170.865 ops/s
[info] # Warmup Iteration   4: 308431.575 ops/s
[info] # Warmup Iteration   5: 305136.524 ops/s
[info] Iteration   1: 308243.371 ops/s
[info]                  ·gc.alloc.rate:               1724.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          8803.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6855.161 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 305080.260 ops/s
[info]                  ·gc.alloc.rate:                   1734.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              8946.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10395.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 308879.414 ops/s
[info]                  ·gc.alloc.rate:               1739.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          8864.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6828.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 304796.431 ops/s
[info]                  ·gc.alloc.rate:                   1731.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              8941.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10370.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.967 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 301607.376 ops/s
[info]                  ·gc.alloc.rate:               1700.452 MB/sec
[info]                  ·gc.alloc.rate.norm:          8873.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6986.799 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   305721.370 ±(99.9%) 11312.836 ops/s [Average]
[info]   (min, avg, max) = (301607.376, 305721.370, 308879.414), stdev = 2937.908
[info]   CI (99.9%): [294408.534, 317034.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.093 ±(99.9%) 59.278 MB/sec [Average]
[info]   (min, avg, max) = (1700.452, 1726.093, 1739.757), stdev = 15.394
[info]   CI (99.9%): [1666.816, 1785.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8886.002 ±(99.9%) 229.353 B/op [Average]
[info]   (min, avg, max) = (8803.408, 8886.002, 8946.528), stdev = 59.562
[info]   CI (99.9%): [8656.649, 9115.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.082 ±(99.9%) 1415.880 MB/sec [Average]
[info]   (min, avg, max) = (1338.864, 1609.082, 2015.104), stdev = 367.700
[info]   CI (99.9%): [193.202, 3024.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8287.379 ±(99.9%) 7369.983 B/op [Average]
[info]   (min, avg, max) = (6828.991, 8287.379, 10395.414), stdev = 1913.961
[info]   CI (99.9%): [917.396, 15657.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.414), stdev = 1.508
[info]   CI (99.9%): [≈ 0, 6.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.716 ±(99.9%) 29.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.716, 17.612), stdev = 7.779
[info]   CI (99.9%): [≈ 0, 33.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.25% complete, ETA 01:55:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505794.120 ops/s
[info] # Warmup Iteration   2: 1742864.546 ops/s
[info] # Warmup Iteration   3: 1919439.604 ops/s
[info] # Warmup Iteration   4: 1918029.855 ops/s
[info] # Warmup Iteration   5: 1875313.349 ops/s
[info] Iteration   1: 1923433.735 ops/s
[info]                  ·gc.alloc.rate:                   1029.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              842.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1092.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1939893.042 ops/s
[info]                  ·gc.alloc.rate:               1014.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          822.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 542.059 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1931843.851 ops/s
[info]                  ·gc.alloc.rate:                   1030.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              839.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1089.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1948003.120 ops/s
[info]                  ·gc.alloc.rate:               1026.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          829.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 540.349 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1945932.589 ops/s
[info]                  ·gc.alloc.rate:                   1026.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              830.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1937821.267 ±(99.9%) 39291.973 ops/s [Average]
[info]   (min, avg, max) = (1923433.735, 1937821.267, 1948003.120), stdev = 10204.001
[info]   CI (99.9%): [1898529.295, 1977113.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1025.639 ±(99.9%) 24.959 MB/sec [Average]
[info]   (min, avg, max) = (1014.534, 1025.639, 1030.688), stdev = 6.482
[info]   CI (99.9%): [1000.680, 1050.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.875 ±(99.9%) 30.773 B/op [Average]
[info]   (min, avg, max) = (822.924, 832.875, 842.417), stdev = 7.992
[info]   CI (99.9%): [802.102, 863.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.754 ±(99.9%) 1410.148 MB/sec [Average]
[info]   (min, avg, max) = (668.273, 1069.754, 1339.106), stdev = 366.211
[info]   CI (99.9%): [≈ 0, 2479.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   869.376 ±(99.9%) 1153.646 B/op [Average]
[info]   (min, avg, max) = (540.349, 869.376, 1092.322), stdev = 299.598
[info]   CI (99.9%): [≈ 0, 2023.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.45% complete, ETA 01:55:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1570240.389 ops/s
[info] # Warmup Iteration   2: 2695230.066 ops/s
[info] # Warmup Iteration   3: 2870932.066 ops/s
[info] # Warmup Iteration   4: 2805579.113 ops/s
[info] # Warmup Iteration   5: 2782132.769 ops/s
[info] Iteration   1: 2772304.868 ops/s
[info]                  ·gc.alloc.rate:               772.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 381.004 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2782819.601 ops/s
[info]                  ·gc.alloc.rate:               767.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 379.746 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2868934.629 ops/s
[info]                  ·gc.alloc.rate:                   808.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              443.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     737.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2877375.003 ops/s
[info]                  ·gc.alloc.rate:               791.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 367.644 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2879028.469 ops/s
[info]                  ·gc.alloc.rate:               801.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 367.603 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2836092.514 ±(99.9%) 206765.701 ops/s [Average]
[info]   (min, avg, max) = (2772304.868, 2836092.514, 2879028.469), stdev = 53696.396
[info]   CI (99.9%): [2629326.814, 3042858.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   788.437 ±(99.9%) 69.169 MB/sec [Average]
[info]   (min, avg, max) = (767.371, 788.437, 808.922), stdev = 17.963
[info]   CI (99.9%): [719.268, 857.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   437.471 ±(99.9%) 16.138 B/op [Average]
[info]   (min, avg, max) = (433.122, 437.471, 443.597), stdev = 4.191
[info]   CI (99.9%): [421.333, 453.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.278 ±(99.9%) 1157.673 MB/sec [Average]
[info]   (min, avg, max) = (671.234, 806.278, 1344.086), stdev = 300.644
[info]   CI (99.9%): [≈ 0, 1963.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   446.614 ±(99.9%) 625.715 B/op [Average]
[info]   (min, avg, max) = (367.603, 446.614, 737.071), stdev = 162.496
[info]   CI (99.9%): [≈ 0, 1072.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:55:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1720072.612 ops/s
[info] # Warmup Iteration   2: 2967301.031 ops/s
[info] # Warmup Iteration   3: 3122246.006 ops/s
[info] # Warmup Iteration   4: 3121265.523 ops/s
[info] # Warmup Iteration   5: 3121811.254 ops/s
[info] Iteration   1: 3109266.006 ops/s
[info]                  ·gc.alloc.rate:      3.064 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.551 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3124224.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3122058.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3115353.941 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3115290.787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3117238.724 ±(99.9%) 23018.778 ops/s [Average]
[info]   (min, avg, max) = (3109266.006, 3117238.724, 3124224.507), stdev = 5977.904
[info]   CI (99.9%): [3094219.946, 3140257.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.613 ±(99.9%) 5.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.613, 3.064), stdev = 1.370
[info]   CI (99.9%): [≈ 0, 5.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.310 ±(99.9%) 2.670 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.310, 1.551), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 2.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.86% complete, ETA 01:54:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15291.810 ops/s
[info] # Warmup Iteration   2: 46747.103 ops/s
[info] # Warmup Iteration   3: 47558.304 ops/s
[info] # Warmup Iteration   4: 48952.522 ops/s
[info] # Warmup Iteration   5: 49039.773 ops/s
[info] Iteration   1: 49022.182 ops/s
[info]                  ·gc.alloc.rate:                   2201.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              70639.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64608.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.660 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 48965.581 ops/s
[info]                  ·gc.alloc.rate:                   2222.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              71448.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64469.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.338 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 48972.218 ops/s
[info]                  ·gc.alloc.rate:                   2197.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              70631.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64414.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 49472.753 ops/s
[info]                  ·gc.alloc.rate:               2216.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          70500.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63851.243 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 49450.663 ops/s
[info]                  ·gc.alloc.rate:               2207.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          70262.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63985.652 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   49176.679 ±(99.9%) 1005.901 ops/s [Average]
[info]   (min, avg, max) = (48965.581, 49176.679, 49472.753), stdev = 261.229
[info]   CI (99.9%): [48170.778, 50182.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2209.199 ±(99.9%) 40.126 MB/sec [Average]
[info]   (min, avg, max) = (2197.858, 2209.199, 2222.897), stdev = 10.421
[info]   CI (99.9%): [2169.072, 2249.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   70696.548 ±(99.9%) 1720.953 B/op [Average]
[info]   (min, avg, max) = (70262.705, 70696.548, 71448.199), stdev = 446.926
[info]   CI (99.9%): [68975.595, 72417.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2008.243 ±(99.9%) 13.838 MB/sec [Average]
[info]   (min, avg, max) = (2004.405, 2008.243, 2013.097), stdev = 3.594
[info]   CI (99.9%): [1994.404, 2022.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64265.899 ±(99.9%) 1264.515 B/op [Average]
[info]   (min, avg, max) = (63851.243, 64265.899, 64608.364), stdev = 328.391
[info]   CI (99.9%): [63001.384, 65530.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 7.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 4.102), stdev = 1.828
[info]   CI (99.9%): [≈ 0, 7.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.733 ±(99.9%) 225.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.733, 131.660), stdev = 58.658
[info]   CI (99.9%): [≈ 0, 252.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14.06% complete, ETA 01:54:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66129.140 ops/s
[info] # Warmup Iteration   2: 153078.815 ops/s
[info] # Warmup Iteration   3: 153427.178 ops/s
[info] # Warmup Iteration   4: 155654.826 ops/s
[info] # Warmup Iteration   5: 155872.181 ops/s
[info] Iteration   1: 154812.523 ops/s
[info]                  ·gc.alloc.rate:                   850.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              8644.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13652.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 155968.278 ops/s
[info]                  ·gc.alloc.rate:               819.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          8267.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6779.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 155561.593 ops/s
[info]                  ·gc.alloc.rate:                   814.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              8241.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6800.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 155642.985 ops/s
[info]                  ·gc.alloc.rate:               813.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          8225.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6796.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 155882.287 ops/s
[info]                  ·gc.alloc.rate:               813.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          8212.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6789.544 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   155573.533 ±(99.9%) 1759.596 ops/s [Average]
[info]   (min, avg, max) = (154812.523, 155573.533, 155968.278), stdev = 456.962
[info]   CI (99.9%): [153813.937, 157333.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   822.240 ±(99.9%) 61.489 MB/sec [Average]
[info]   (min, avg, max) = (813.366, 822.240, 850.471), stdev = 15.969
[info]   CI (99.9%): [760.751, 883.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8318.273 ±(99.9%) 707.434 B/op [Average]
[info]   (min, avg, max) = (8212.203, 8318.273, 8644.827), stdev = 183.718
[info]   CI (99.9%): [7610.839, 9025.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806.331 ±(99.9%) 1155.448 MB/sec [Average]
[info]   (min, avg, max) = (671.805, 806.331, 1343.106), stdev = 300.066
[info]   CI (99.9%): [≈ 0, 1961.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8163.524 ±(99.9%) 11815.142 B/op [Average]
[info]   (min, avg, max) = (6779.123, 8163.524, 13652.346), stdev = 3068.355
[info]   CI (99.9%): [≈ 0, 19978.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.127 ±(99.9%) 0.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.423), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.26% complete, ETA 01:54:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86173.534 ops/s
[info] # Warmup Iteration   2: 223571.190 ops/s
[info] # Warmup Iteration   3: 242053.585 ops/s
[info] # Warmup Iteration   4: 243840.362 ops/s
[info] # Warmup Iteration   5: 244017.826 ops/s
[info] Iteration   1: 245653.493 ops/s
[info]                  ·gc.alloc.rate:                   2693.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              17253.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17173.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.667 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 245788.492 ops/s
[info]                  ·gc.alloc.rate:                   2683.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              17183.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12864.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 246043.386 ops/s
[info]                  ·gc.alloc.rate:               2714.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          17362.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17160.012 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 245902.575 ops/s
[info]                  ·gc.alloc.rate:               2713.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          17365.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17212.137 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 245353.328 ops/s
[info]                  ·gc.alloc.rate:                   2706.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              17363.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17297.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   245748.255 ±(99.9%) 1014.196 ops/s [Average]
[info]   (min, avg, max) = (245353.328, 245748.255, 246043.386), stdev = 263.383
[info]   CI (99.9%): [244734.059, 246762.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2702.643 ±(99.9%) 51.680 MB/sec [Average]
[info]   (min, avg, max) = (2683.964, 2702.643, 2714.797), stdev = 13.421
[info]   CI (99.9%): [2650.964, 2754.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17305.734 ±(99.9%) 321.828 B/op [Average]
[info]   (min, avg, max) = (17183.110, 17305.734, 17365.650), stdev = 83.578
[info]   CI (99.9%): [16983.906, 17627.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2552.045 ±(99.9%) 1168.160 MB/sec [Average]
[info]   (min, avg, max) = (2009.472, 2552.045, 2696.466), stdev = 303.367
[info]   CI (99.9%): [1383.886, 3720.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16341.608 ±(99.9%) 7486.656 B/op [Average]
[info]   (min, avg, max) = (12864.916, 16341.608, 17297.015), stdev = 1944.261
[info]   CI (99.9%): [8854.952, 23828.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.187 ±(99.9%) 1.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.667), stdev = 0.277
[info]   CI (99.9%): [≈ 0, 1.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.46% complete, ETA 01:54:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107811.567 ops/s
[info] # Warmup Iteration   2: 352637.569 ops/s
[info] # Warmup Iteration   3: 383558.605 ops/s
[info] # Warmup Iteration   4: 385289.166 ops/s
[info] # Warmup Iteration   5: 385520.889 ops/s
[info] Iteration   1: 385420.848 ops/s
[info]                  ·gc.alloc.rate:                   1978.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              8079.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8202.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 382771.131 ops/s
[info]                  ·gc.alloc.rate:                   1964.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              8075.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8248.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 383238.640 ops/s
[info]                  ·gc.alloc.rate:               1993.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          8182.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8223.310 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 386679.033 ops/s
[info]                  ·gc.alloc.rate:                   1973.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              8031.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8152.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 377425.267 ops/s
[info]                  ·gc.alloc.rate:                   1938.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              8083.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8366.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   383106.984 ±(99.9%) 13685.441 ops/s [Average]
[info]   (min, avg, max) = (377425.267, 383106.984, 386679.033), stdev = 3554.066
[info]   CI (99.9%): [369421.542, 396792.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1969.416 ±(99.9%) 78.265 MB/sec [Average]
[info]   (min, avg, max) = (1938.306, 1969.416, 1993.031), stdev = 20.325
[info]   CI (99.9%): [1891.152, 2047.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8090.423 ±(99.9%) 214.559 B/op [Average]
[info]   (min, avg, max) = (8031.074, 8090.423, 8182.649), stdev = 55.720
[info]   CI (99.9%): [7875.864, 8304.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2005.413 ±(99.9%) 9.354 MB/sec [Average]
[info]   (min, avg, max) = (2002.935, 2005.413, 2008.655), stdev = 2.429
[info]   CI (99.9%): [1996.059, 2014.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8238.798 ±(99.9%) 307.373 B/op [Average]
[info]   (min, avg, max) = (8152.666, 8238.798, 8366.985), stdev = 79.824
[info]   CI (99.9%): [7931.425, 8546.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 5.725 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.435), stdev = 1.487
[info]   CI (99.9%): [≈ 0, 6.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.285 ±(99.9%) 23.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.285, 14.026), stdev = 6.070
[info]   CI (99.9%): [≈ 0, 26.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.66% complete, ETA 01:53:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1276236.104 ops/s
[info] # Warmup Iteration   2: 2161836.196 ops/s
[info] # Warmup Iteration   3: 2274355.501 ops/s
[info] # Warmup Iteration   4: 2289748.263 ops/s
[info] # Warmup Iteration   5: 2274810.307 ops/s
[info] Iteration   1: 2291240.231 ops/s
[info]                  ·gc.alloc.rate:               833.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          572.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.001 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2293975.946 ops/s
[info]                  ·gc.alloc.rate:               809.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 460.705 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2226752.619 ops/s
[info]                  ·gc.alloc.rate:                   786.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2227092.204 ops/s
[info]                  ·gc.alloc.rate:               783.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 474.979 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2284011.444 ops/s
[info]                  ·gc.alloc.rate:               816.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2264614.489 ±(99.9%) 133233.257 ops/s [Average]
[info]   (min, avg, max) = (2226752.619, 2264614.489, 2293975.946), stdev = 34600.254
[info]   CI (99.9%): [2131381.231, 2397847.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   805.801 ±(99.9%) 80.607 MB/sec [Average]
[info]   (min, avg, max) = (783.989, 805.801, 833.538), stdev = 20.933
[info]   CI (99.9%): [725.194, 886.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.932 ±(99.9%) 29.922 B/op [Average]
[info]   (min, avg, max) = (554.035, 559.932, 572.561), stdev = 7.771
[info]   CI (99.9%): [530.010, 589.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.132 ±(99.9%) 1154.046 MB/sec [Average]
[info]   (min, avg, max) = (671.527, 806.132, 1342.255), stdev = 299.702
[info]   CI (99.9%): [≈ 0, 1960.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   559.229 ±(99.9%) 781.301 B/op [Average]
[info]   (min, avg, max) = (460.705, 559.229, 922.001), stdev = 202.901
[info]   CI (99.9%): [≈ 0, 1340.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.86% complete, ETA 01:53:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7512.706 ops/s
[info] # Warmup Iteration   2: 76294.062 ops/s
[info] # Warmup Iteration   3: 84773.391 ops/s
[info] # Warmup Iteration   4: 88386.312 ops/s
[info] # Warmup Iteration   5: 87630.012 ops/s
[info] Iteration   1: 89088.570 ops/s
[info]                  ·gc.alloc.rate:                   3511.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              62026.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59422.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.839 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 88998.080 ops/s
[info]                  ·gc.alloc.rate:                   3523.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              62291.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59684.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 88965.846 ops/s
[info]                  ·gc.alloc.rate:               3520.724 MB/sec
[info]                  ·gc.alloc.rate.norm:          62284.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59859.538 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 88240.527 ops/s
[info]                  ·gc.alloc.rate:               3516.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          62710.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3391.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60472.607 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 86481.781 ops/s
[info]                  ·gc.alloc.rate:                   3355.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              61044.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49436.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   88354.961 ±(99.9%) 4238.711 ops/s [Average]
[info]   (min, avg, max) = (86481.781, 88354.961, 89088.570), stdev = 1100.780
[info]   CI (99.9%): [84116.250, 92593.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3485.567 ±(99.9%) 279.569 MB/sec [Average]
[info]   (min, avg, max) = (3355.945, 3485.567, 3523.128), stdev = 72.603
[info]   CI (99.9%): [3205.998, 3765.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62071.651 ±(99.9%) 2404.127 B/op [Average]
[info]   (min, avg, max) = (61044.519, 62071.651, 62710.825), stdev = 624.344
[info]   CI (99.9%): [59667.524, 64475.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3246.443 ±(99.9%) 1138.606 MB/sec [Average]
[info]   (min, avg, max) = (2717.811, 3246.443, 3391.420), stdev = 295.692
[info]   CI (99.9%): [2107.837, 4385.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57775.152 ±(99.9%) 18010.346 B/op [Average]
[info]   (min, avg, max) = (49436.886, 57775.152, 60472.607), stdev = 4677.230
[info]   CI (99.9%): [39764.806, 75785.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.517 ±(99.9%) 2.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.517, 1.839), stdev = 0.762
[info]   CI (99.9%): [≈ 0, 3.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:53:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81415.521 ops/s
[info] # Warmup Iteration   2: 401455.345 ops/s
[info] # Warmup Iteration   3: 421456.682 ops/s
[info] # Warmup Iteration   4: 420290.293 ops/s
[info] # Warmup Iteration   5: 419033.711 ops/s
[info] Iteration   1: 424823.373 ops/s
[info]                  ·gc.alloc.rate:                   2053.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              7607.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7480.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 423111.791 ops/s
[info]                  ·gc.alloc.rate:                   2057.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              7650.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7490.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 426852.448 ops/s
[info]                  ·gc.alloc.rate:                   2060.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              7595.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7415.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 426863.652 ops/s
[info]                  ·gc.alloc.rate:                   2089.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              7702.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7421.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 425639.204 ops/s
[info]                  ·gc.alloc.rate:               2084.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          7704.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7450.187 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   425458.094 ±(99.9%) 6045.825 ops/s [Average]
[info]   (min, avg, max) = (423111.791, 425458.094, 426863.652), stdev = 1570.082
[info]   CI (99.9%): [419412.269, 431503.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2068.839 ±(99.9%) 64.153 MB/sec [Average]
[info]   (min, avg, max) = (2053.345, 2068.839, 2089.074), stdev = 16.660
[info]   CI (99.9%): [2004.686, 2132.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7652.097 ±(99.9%) 196.972 B/op [Average]
[info]   (min, avg, max) = (7595.702, 7652.097, 7704.594), stdev = 51.153
[info]   CI (99.9%): [7455.124, 7849.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2014.606 ±(99.9%) 11.599 MB/sec [Average]
[info]   (min, avg, max) = (2011.255, 2014.606, 2019.142), stdev = 3.012
[info]   CI (99.9%): [2003.006, 2026.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7451.615 ±(99.9%) 130.726 B/op [Average]
[info]   (min, avg, max) = (7415.283, 7451.615, 7490.855), stdev = 33.949
[info]   CI (99.9%): [7320.889, 7582.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.102), stdev = 1.351
[info]   CI (99.9%): [≈ 0, 5.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.577 ±(99.9%) 19.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.577, 11.492), stdev = 5.006
[info]   CI (99.9%): [≈ 0, 21.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.26% complete, ETA 01:53:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98884.892 ops/s
[info] # Warmup Iteration   2: 246111.290 ops/s
[info] # Warmup Iteration   3: 258222.053 ops/s
[info] # Warmup Iteration   4: 267018.141 ops/s
[info] # Warmup Iteration   5: 267010.486 ops/s
[info] Iteration   1: 267392.797 ops/s
[info]                  ·gc.alloc.rate:                   2147.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              12640.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15798.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.584 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 268871.889 ops/s
[info]                  ·gc.alloc.rate:                   2181.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              12766.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11759.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 269108.819 ops/s
[info]                  ·gc.alloc.rate:               2185.603 MB/sec
[info]                  ·gc.alloc.rate.norm:          12779.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11746.121 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 264127.224 ops/s
[info]                  ·gc.alloc.rate:                   2147.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              12790.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11975.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 269698.091 ops/s
[info]                  ·gc.alloc.rate:                   2191.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              12787.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11749.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   267839.764 ±(99.9%) 8634.354 ops/s [Average]
[info]   (min, avg, max) = (264127.224, 267839.764, 269698.091), stdev = 2242.314
[info]   CI (99.9%): [259205.410, 276474.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2170.805 ±(99.9%) 83.092 MB/sec [Average]
[info]   (min, avg, max) = (2147.015, 2170.805, 2191.644), stdev = 21.579
[info]   CI (99.9%): [2087.713, 2253.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12753.029 ±(99.9%) 244.544 B/op [Average]
[info]   (min, avg, max) = (12640.630, 12753.029, 12790.575), stdev = 63.507
[info]   CI (99.9%): [12508.486, 12997.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2145.421 ±(99.9%) 1160.680 MB/sec [Average]
[info]   (min, avg, max) = (2008.909, 2145.421, 2684.617), stdev = 301.425
[info]   CI (99.9%): [984.741, 3306.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12605.941 ±(99.9%) 6883.177 B/op [Average]
[info]   (min, avg, max) = (11746.121, 12605.941, 15798.881), stdev = 1787.539
[info]   CI (99.9%): [5722.764, 19489.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.498), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 6.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.190 ±(99.9%) 35.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.190, 20.584), stdev = 9.165
[info]   CI (99.9%): [≈ 0, 39.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.46% complete, ETA 01:52:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 642339.463 ops/s
[info] # Warmup Iteration   2: 1408967.403 ops/s
[info] # Warmup Iteration   3: 1425718.992 ops/s
[info] # Warmup Iteration   4: 1470349.209 ops/s
[info] # Warmup Iteration   5: 1432855.202 ops/s
[info] Iteration   1: 1468641.123 ops/s
[info]                  ·gc.alloc.rate:               881.137 MB/sec
[info]                  ·gc.alloc.rate.norm:          944.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 716.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1469642.647 ops/s
[info]                  ·gc.alloc.rate:               877.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          939.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 715.882 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1468338.369 ops/s
[info]                  ·gc.alloc.rate:               888.787 MB/sec
[info]                  ·gc.alloc.rate.norm:          952.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1434.506 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1472050.435 ops/s
[info]                  ·gc.alloc.rate:                   876.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1464121.853 ops/s
[info]                  ·gc.alloc.rate:               870.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 720.024 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1468558.885 ±(99.9%) 11078.234 ops/s [Average]
[info]   (min, avg, max) = (1464121.853, 1468558.885, 1472050.435), stdev = 2876.982
[info]   CI (99.9%): [1457480.652, 1479637.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   878.913 ±(99.9%) 26.117 MB/sec [Average]
[info]   (min, avg, max) = (870.258, 878.913, 888.787), stdev = 6.782
[info]   CI (99.9%): [852.796, 905.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   941.758 ±(99.9%) 26.837 B/op [Average]
[info]   (min, avg, max) = (935.338, 941.758, 952.636), stdev = 6.970
[info]   CI (99.9%): [914.920, 968.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   803.110 ±(99.9%) 1152.171 MB/sec [Average]
[info]   (min, avg, max) = (668.464, 803.110, 1338.361), stdev = 299.215
[info]   CI (99.9%): [≈ 0, 1955.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   860.582 ±(99.9%) 1235.432 B/op [Average]
[info]   (min, avg, max) = (715.882, 860.582, 1434.506), stdev = 320.838
[info]   CI (99.9%): [≈ 0, 2096.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.66% complete, ETA 01:52:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1641502.627 ops/s
[info] # Warmup Iteration   2: 2734377.797 ops/s
[info] # Warmup Iteration   3: 2684969.840 ops/s
[info] # Warmup Iteration   4: 2849976.990 ops/s
[info] # Warmup Iteration   5: 2780565.590 ops/s
[info] Iteration   1: 2844319.736 ops/s
[info]                  ·gc.alloc.rate:               992.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.362 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2657927.370 ops/s
[info]                  ·gc.alloc.rate:               945.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          559.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 397.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2832480.869 ops/s
[info]                  ·gc.alloc.rate:                   1007.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     746.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2846624.908 ops/s
[info]                  ·gc.alloc.rate:               994.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.807 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2833514.963 ops/s
[info]                  ·gc.alloc.rate:                   992.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2802973.569 ±(99.9%) 313164.150 ops/s [Average]
[info]   (min, avg, max) = (2657927.370, 2802973.569, 2846624.908), stdev = 81327.735
[info]   CI (99.9%): [2489809.419, 3116137.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   986.449 ±(99.9%) 92.149 MB/sec [Average]
[info]   (min, avg, max) = (945.112, 986.449, 1007.499), stdev = 23.931
[info]   CI (99.9%): [894.300, 1078.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   553.945 ±(99.9%) 20.367 B/op [Average]
[info]   (min, avg, max) = (549.370, 553.945, 559.732), stdev = 5.289
[info]   CI (99.9%): [533.578, 574.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.118 ±(99.9%) 1419.970 MB/sec [Average]
[info]   (min, avg, max) = (671.117, 941.118, 1345.718), stdev = 368.762
[info]   CI (99.9%): [≈ 0, 2361.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   527.069 ±(99.9%) 774.839 B/op [Average]
[info]   (min, avg, max) = (371.362, 527.069, 747.451), stdev = 201.223
[info]   CI (99.9%): [≈ 0, 1301.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15.86% complete, ETA 01:52:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1776646.622 ops/s
[info] # Warmup Iteration   2: 3137493.652 ops/s
[info] # Warmup Iteration   3: 3083782.707 ops/s
[info] # Warmup Iteration   4: 3170154.370 ops/s
[info] # Warmup Iteration   5: 3171503.212 ops/s
[info] Iteration   1: 3172355.887 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3171568.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3172577.619 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3160992.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3161080.612 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3167715.030 ±(99.9%) 23520.496 ops/s [Average]
[info]   (min, avg, max) = (3160992.470, 3167715.030, 3172577.619), stdev = 6108.198
[info]   CI (99.9%): [3144194.534, 3191235.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.06% complete, ETA 01:51:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91593.656 ops/s
[info] # Warmup Iteration   2: 358015.861 ops/s
[info] # Warmup Iteration   3: 380278.043 ops/s
[info] # Warmup Iteration   4: 397061.112 ops/s
[info] # Warmup Iteration   5: 386071.836 ops/s
[info] Iteration   1: 402188.978 ops/s
[info]                  ·gc.alloc.rate:                   2593.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              10145.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10453.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.607 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 390929.377 ops/s
[info]                  ·gc.alloc.rate:                   2510.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              10105.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10738.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 397529.089 ops/s
[info]                  ·gc.alloc.rate:               2557.975 MB/sec
[info]                  ·gc.alloc.rate.norm:          10125.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7927.953 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 400678.684 ops/s
[info]                  ·gc.alloc.rate:               2593.505 MB/sec
[info]                  ·gc.alloc.rate.norm:          10184.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10512.604 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 400292.944 ops/s
[info]                  ·gc.alloc.rate:               2596.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          10210.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10560.221 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   398323.814 ±(99.9%) 17185.228 ops/s [Average]
[info]   (min, avg, max) = (390929.377, 398323.814, 402188.978), stdev = 4462.949
[info]   CI (99.9%): [381138.586, 415509.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2570.325 ±(99.9%) 143.275 MB/sec [Average]
[info]   (min, avg, max) = (2510.138, 2570.325, 2596.916), stdev = 37.208
[info]   CI (99.9%): [2427.050, 2713.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10154.269 ±(99.9%) 164.816 B/op [Average]
[info]   (min, avg, max) = (10105.554, 10154.269, 10210.453), stdev = 42.802
[info]   CI (99.9%): [9989.453, 10319.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2540.960 ±(99.9%) 1158.728 MB/sec [Average]
[info]   (min, avg, max) = (2002.804, 2540.960, 2685.876), stdev = 300.918
[info]   CI (99.9%): [1382.232, 3699.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10038.426 ±(99.9%) 4561.386 B/op [Average]
[info]   (min, avg, max) = (7927.953, 10038.426, 10738.204), stdev = 1184.577
[info]   CI (99.9%): [5477.040, 14599.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 1.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.666), stdev = 0.294
[info]   CI (99.9%): [≈ 0, 1.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.555 ±(99.9%) 4.426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 2.607), stdev = 1.149
[info]   CI (99.9%): [≈ 0, 4.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16.27% complete, ETA 01:51:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52648.640 ops/s
[info] # Warmup Iteration   2: 91659.293 ops/s
[info] # Warmup Iteration   3: 91801.560 ops/s
[info] # Warmup Iteration   4: 93730.572 ops/s
[info] # Warmup Iteration   5: 92495.228 ops/s
[info] Iteration   1: 93549.419 ops/s
[info]                  ·gc.alloc.rate:               721.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          12139.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11291.219 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 93596.669 ops/s
[info]                  ·gc.alloc.rate:               730.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          12278.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11296.631 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 93908.162 ops/s
[info]                  ·gc.alloc.rate:               721.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          12098.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11259.225 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 93914.932 ops/s
[info]                  ·gc.alloc.rate:               720.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          12076.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11263.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 93955.551 ops/s
[info]                  ·gc.alloc.rate:               719.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          12055.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11258.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   93784.947 ±(99.9%) 750.889 ops/s [Average]
[info]   (min, avg, max) = (93549.419, 93784.947, 93955.551), stdev = 195.004
[info]   CI (99.9%): [93034.057, 94535.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   722.822 ±(99.9%) 16.471 MB/sec [Average]
[info]   (min, avg, max) = (719.656, 722.822, 730.305), stdev = 4.278
[info]   CI (99.9%): [706.351, 739.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12129.580 ±(99.9%) 342.511 B/op [Average]
[info]   (min, avg, max) = (12055.201, 12129.580, 12278.602), stdev = 88.949
[info]   CI (99.9%): [11787.069, 12472.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.837 ±(99.9%) 1.530 MB/sec [Average]
[info]   (min, avg, max) = (671.152, 671.837, 672.128), stdev = 0.397
[info]   CI (99.9%): [670.306, 673.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11273.923 ±(99.9%) 71.147 B/op [Average]
[info]   (min, avg, max) = (11258.573, 11273.923, 11296.631), stdev = 18.477
[info]   CI (99.9%): [11202.776, 11345.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:51:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6754.751 ops/s
[info] # Warmup Iteration   2: 22152.690 ops/s
[info] # Warmup Iteration   3: 25252.492 ops/s
[info] # Warmup Iteration   4: 24900.245 ops/s
[info] # Warmup Iteration   5: 24516.400 ops/s
[info] Iteration   1: 24820.957 ops/s
[info]                  ·gc.alloc.rate:               1596.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          101251.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85195.480 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 25003.955 ops/s
[info]                  ·gc.alloc.rate:                   1614.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              101577.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126920.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 25203.149 ops/s
[info]                  ·gc.alloc.rate:                   1611.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              100650.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83859.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25586.395 ops/s
[info]                  ·gc.alloc.rate:               1635.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          100588.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82443.725 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 25515.523 ops/s
[info]                  ·gc.alloc.rate:                   1656.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              102166.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123886.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25225.996 ±(99.9%) 1258.980 ops/s [Average]
[info]   (min, avg, max) = (24820.957, 25225.996, 25586.395), stdev = 326.953
[info]   CI (99.9%): [23967.016, 26484.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1622.963 ±(99.9%) 89.346 MB/sec [Average]
[info]   (min, avg, max) = (1596.820, 1622.963, 1656.277), stdev = 23.203
[info]   CI (99.9%): [1533.617, 1712.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   101246.780 ±(99.9%) 2542.920 B/op [Average]
[info]   (min, avg, max) = (100588.824, 101246.780, 102166.695), stdev = 660.388
[info]   CI (99.9%): [98703.860, 103789.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.499 ±(99.9%) 1413.632 MB/sec [Average]
[info]   (min, avg, max) = (1340.590, 1610.499, 2016.891), stdev = 367.116
[info]   CI (99.9%): [196.866, 3024.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   100461.203 ±(99.9%) 87853.520 B/op [Average]
[info]   (min, avg, max) = (82443.725, 100461.203, 126920.967), stdev = 22815.280
[info]   CI (99.9%): [12607.683, 188314.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 4.546 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 2.686), stdev = 1.181
[info]   CI (99.9%): [≈ 0, 5.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   48.622 ±(99.9%) 285.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.622, 169.029), stdev = 74.248
[info]   CI (99.9%): [≈ 0, 334.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.271
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16.67% complete, ETA 01:51:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.793 ops/s
[info] # Warmup Iteration   2: 86037.862 ops/s
[info] # Warmup Iteration   3: 94312.246 ops/s
[info] # Warmup Iteration   4: 98955.616 ops/s
[info] # Warmup Iteration   5: 99055.284 ops/s
[info] Iteration   1: 97740.141 ops/s
[info]                  ·gc.alloc.rate:                   959.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              15438.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21442.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 98533.082 ops/s
[info]                  ·gc.alloc.rate:               950.988 MB/sec
[info]                  ·gc.alloc.rate.norm:          15190.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10645.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 98039.397 ops/s
[info]                  ·gc.alloc.rate:                   968.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              15535.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21409.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 95222.145 ops/s
[info]                  ·gc.alloc.rate:               912.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          15077.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11027.037 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 98736.825 ops/s
[info]                  ·gc.alloc.rate:               946.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          15089.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10644.822 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   97654.318 ±(99.9%) 5450.792 ops/s [Average]
[info]   (min, avg, max) = (95222.145, 97654.318, 98736.825), stdev = 1415.553
[info]   CI (99.9%): [92203.526, 103105.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   947.466 ±(99.9%) 81.864 MB/sec [Average]
[info]   (min, avg, max) = (912.290, 947.466, 968.007), stdev = 21.260
[info]   CI (99.9%): [865.602, 1029.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15266.194 ±(99.9%) 805.503 B/op [Average]
[info]   (min, avg, max) = (15077.009, 15266.194, 15535.582), stdev = 209.187
[info]   CI (99.9%): [14460.690, 16071.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   933.558 ±(99.9%) 1404.274 MB/sec [Average]
[info]   (min, avg, max) = (666.460, 933.558, 1333.981), stdev = 364.685
[info]   CI (99.9%): [≈ 0, 2337.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15033.771 ±(99.9%) 22476.822 B/op [Average]
[info]   (min, avg, max) = (10644.822, 15033.771, 21442.416), stdev = 5837.159
[info]   CI (99.9%): [≈ 0, 37510.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.055), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.303 ±(99.9%) 1.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.303, 0.887), stdev = 0.424
[info]   CI (99.9%): [≈ 0, 1.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.87% complete, ETA 01:50:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19683.337 ops/s
[info] # Warmup Iteration   2: 62352.521 ops/s
[info] # Warmup Iteration   3: 63986.987 ops/s
[info] # Warmup Iteration   4: 69343.003 ops/s
[info] # Warmup Iteration   5: 68972.357 ops/s
[info] Iteration   1: 69419.747 ops/s
[info]                  ·gc.alloc.rate:                   1253.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              28416.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30325.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 69595.690 ops/s
[info]                  ·gc.alloc.rate:               1235.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          27937.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15139.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 69256.247 ops/s
[info]                  ·gc.alloc.rate:                   1266.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              28773.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30434.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 69449.797 ops/s
[info]                  ·gc.alloc.rate:                   1245.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              28216.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30366.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 69665.668 ops/s
[info]                  ·gc.alloc.rate:                   1248.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              28196.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30248.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   69477.430 ±(99.9%) 616.198 ops/s [Average]
[info]   (min, avg, max) = (69256.247, 69477.430, 69665.668), stdev = 160.025
[info]   CI (99.9%): [68861.232, 70093.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1249.675 ±(99.9%) 43.597 MB/sec [Average]
[info]   (min, avg, max) = (1235.359, 1249.675, 1266.181), stdev = 11.322
[info]   CI (99.9%): [1206.078, 1293.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28308.020 ±(99.9%) 1197.097 B/op [Average]
[info]   (min, avg, max) = (27937.355, 28308.020, 28773.493), stdev = 310.882
[info]   CI (99.9%): [27110.923, 29505.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.098 ±(99.9%) 1152.998 MB/sec [Average]
[info]   (min, avg, max) = (669.464, 1205.098, 1340.210), stdev = 299.430
[info]   CI (99.9%): [52.100, 2358.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27302.874 ±(99.9%) 26183.278 B/op [Average]
[info]   (min, avg, max) = (15139.771, 27302.874, 30434.423), stdev = 6799.714
[info]   CI (99.9%): [1119.596, 53486.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 5.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 3.186), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 6.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.046 ±(99.9%) 119.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.046, 72.179), stdev = 31.007
[info]   CI (99.9%): [≈ 0, 138.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.07% complete, ETA 01:50:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51214.084 ops/s
[info] # Warmup Iteration   2: 126484.737 ops/s
[info] # Warmup Iteration   3: 135642.804 ops/s
[info] # Warmup Iteration   4: 136491.028 ops/s
[info] # Warmup Iteration   5: 137213.220 ops/s
[info] Iteration   1: 137292.700 ops/s
[info]                  ·gc.alloc.rate:               946.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          10853.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7697.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 136610.477 ops/s
[info]                  ·gc.alloc.rate:                   956.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              11018.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15480.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 137161.831 ops/s
[info]                  ·gc.alloc.rate:               940.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          10793.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7712.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 136239.516 ops/s
[info]                  ·gc.alloc.rate:                   956.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              11047.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15529.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 134179.664 ops/s
[info]                  ·gc.alloc.rate:               928.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          10889.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7891.491 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   136296.838 ±(99.9%) 4841.730 ops/s [Average]
[info]   (min, avg, max) = (134179.664, 136296.838, 137292.700), stdev = 1257.382
[info]   CI (99.9%): [131455.108, 141138.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   945.830 ±(99.9%) 45.628 MB/sec [Average]
[info]   (min, avg, max) = (928.425, 945.830, 956.620), stdev = 11.850
[info]   CI (99.9%): [900.201, 991.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10920.504 ±(99.9%) 418.511 B/op [Average]
[info]   (min, avg, max) = (10793.224, 10920.504, 11047.453), stdev = 108.686
[info]   CI (99.9%): [10501.992, 11339.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.042 ±(99.9%) 1417.629 MB/sec [Average]
[info]   (min, avg, max) = (671.518, 941.042, 1344.643), stdev = 368.154
[info]   CI (99.9%): [≈ 0, 2358.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10862.370 ±(99.9%) 16321.987 B/op [Average]
[info]   (min, avg, max) = (7697.764, 10862.370, 15529.557), stdev = 4238.768
[info]   CI (99.9%): [≈ 0, 27184.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.240), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.27% complete, ETA 01:50:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5830.038 ops/s
[info] # Warmup Iteration   2: 33371.681 ops/s
[info] # Warmup Iteration   3: 37974.038 ops/s
[info] # Warmup Iteration   4: 37285.060 ops/s
[info] # Warmup Iteration   5: 37473.277 ops/s
[info] Iteration   1: 38238.929 ops/s
[info]                  ·gc.alloc.rate:                   1862.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              76658.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82649.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.857 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 38538.992 ops/s
[info]                  ·gc.alloc.rate:                   1873.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              76511.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81994.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.680 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 38231.603 ops/s
[info]                  ·gc.alloc.rate:               1858.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          76493.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54954.399 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 38735.405 ops/s
[info]                  ·gc.alloc.rate:                   1883.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              76523.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81280.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.846 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 37756.402 ops/s
[info]                  ·gc.alloc.rate:                   1863.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              77670.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83429.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.868 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   38300.266 ±(99.9%) 1428.638 ops/s [Average]
[info]   (min, avg, max) = (37756.402, 38300.266, 38735.405), stdev = 371.013
[info]   CI (99.9%): [36871.628, 39728.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1868.432 ±(99.9%) 39.651 MB/sec [Average]
[info]   (min, avg, max) = (1858.222, 1868.432, 1883.674), stdev = 10.297
[info]   CI (99.9%): [1828.781, 1908.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   76771.629 ±(99.9%) 1951.778 B/op [Average]
[info]   (min, avg, max) = (76493.889, 76771.629, 77670.844), stdev = 506.871
[info]   CI (99.9%): [74819.851, 78723.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1870.807 ±(99.9%) 1153.495 MB/sec [Average]
[info]   (min, avg, max) = (1334.976, 1870.807, 2008.286), stdev = 299.559
[info]   CI (99.9%): [717.312, 3024.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76861.585 ±(99.9%) 47255.977 B/op [Average]
[info]   (min, avg, max) = (54954.399, 76861.585, 83429.018), stdev = 12272.227
[info]   CI (99.9%): [29605.608, 124117.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 7.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 4.352), stdev = 1.939
[info]   CI (99.9%): [≈ 0, 8.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.050 ±(99.9%) 304.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.050, 177.680), stdev = 79.175
[info]   CI (99.9%): [≈ 0, 340.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 3.421
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17.47% complete, ETA 01:50:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29591.751 ops/s
[info] # Warmup Iteration   2: 68104.803 ops/s
[info] # Warmup Iteration   3: 68540.516 ops/s
[info] # Warmup Iteration   4: 69208.114 ops/s
[info] # Warmup Iteration   5: 67498.555 ops/s
[info] Iteration   1: 69491.266 ops/s
[info]                  ·gc.alloc.rate:               1352.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          30630.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30460.633 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 67886.682 ops/s
[info]                  ·gc.alloc.rate:                   1343.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              31150.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31196.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 69611.155 ops/s
[info]                  ·gc.alloc.rate:                   1363.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              30807.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30438.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 69594.436 ops/s
[info]                  ·gc.alloc.rate:                   1362.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              30806.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30415.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 69679.592 ops/s
[info]                  ·gc.alloc.rate:                   1378.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              31129.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30318.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   69252.626 ±(99.9%) 2951.732 ops/s [Average]
[info]   (min, avg, max) = (67886.682, 69252.626, 69679.592), stdev = 766.555
[info]   CI (99.9%): [66300.895, 72204.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1360.070 ±(99.9%) 50.013 MB/sec [Average]
[info]   (min, avg, max) = (1343.664, 1360.070, 1378.399), stdev = 12.988
[info]   CI (99.9%): [1310.057, 1410.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30904.880 ±(99.9%) 872.813 B/op [Average]
[info]   (min, avg, max) = (30630.198, 30904.880, 31150.979), stdev = 226.667
[info]   CI (99.9%): [30032.067, 31777.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1345.059 ±(99.9%) 5.990 MB/sec [Average]
[info]   (min, avg, max) = (1342.510, 1345.059, 1346.740), stdev = 1.556
[info]   CI (99.9%): [1339.068, 1351.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30565.857 ±(99.9%) 1372.617 B/op [Average]
[info]   (min, avg, max) = (30318.711, 30565.857, 31196.128), stdev = 356.464
[info]   CI (99.9%): [29193.240, 31938.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 4.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 2.686), stdev = 1.158
[info]   CI (99.9%): [≈ 0, 5.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   14.876 ±(99.9%) 100.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.876, 60.715), stdev = 26.181
[info]   CI (99.9%): [≈ 0, 115.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.67% complete, ETA 01:49:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10655.089 ops/s
[info] # Warmup Iteration   2: 30839.070 ops/s
[info] # Warmup Iteration   3: 30880.393 ops/s
[info] # Warmup Iteration   4: 31742.165 ops/s
[info] # Warmup Iteration   5: 32267.088 ops/s
[info] Iteration   1: 32396.784 ops/s
[info]                  ·gc.alloc.rate:               534.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          25949.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24853.601 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 32402.703 ops/s
[info]                  ·gc.alloc.rate:               537.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          26092.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32517.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 32381.960 ops/s
[info]                  ·gc.alloc.rate:               537.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          26133.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32535.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 32386.457 ops/s
[info]                  ·gc.alloc.rate:               541.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          26317.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32549.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 32541.690 ops/s
[info]                  ·gc.alloc.rate:      519.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   32421.919 ±(99.9%) 259.743 ops/s [Average]
[info]   (min, avg, max) = (32381.960, 32421.919, 32541.690), stdev = 67.454
[info]   CI (99.9%): [32162.176, 32681.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   533.986 ±(99.9%) 33.622 MB/sec [Average]
[info]   (min, avg, max) = (519.072, 533.986, 541.576), stdev = 8.731
[info]   CI (99.9%): [500.364, 567.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25919.504 ±(99.9%) 1826.826 B/op [Average]
[info]   (min, avg, max) = (25104.014, 25919.504, 26317.673), stdev = 474.421
[info]   CI (99.9%): [24092.678, 27746.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   504.109 ±(99.9%) 1116.614 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.109, 669.817), stdev = 289.981
[info]   CI (99.9%): [≈ 0, 1620.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24491.131 ±(99.9%) 54252.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24491.131, 32549.493), stdev = 14089.105
[info]   CI (99.9%): [≈ 0, 78743.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.87% complete, ETA 01:49:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15182.841 ops/s
[info] # Warmup Iteration   2: 31390.377 ops/s
[info] # Warmup Iteration   3: 31368.645 ops/s
[info] # Warmup Iteration   4: 32274.092 ops/s
[info] # Warmup Iteration   5: 32383.087 ops/s
[info] Iteration   1: 32564.896 ops/s
[info]                  ·gc.alloc.rate:      397.446 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32413.079 ops/s
[info]                  ·gc.alloc.rate:               405.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          19711.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24842.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 32388.824 ops/s
[info]                  ·gc.alloc.rate:                   417.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              20305.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32418.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31310.558 ops/s
[info]                  ·gc.alloc.rate:      382.155 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32398.922 ops/s
[info]                  ·gc.alloc.rate:               408.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          19856.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32409.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   32215.256 ±(99.9%) 1966.958 ops/s [Average]
[info]   (min, avg, max) = (31310.558, 32215.256, 32564.896), stdev = 510.813
[info]   CI (99.9%): [30248.297, 34182.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   402.463 ±(99.9%) 51.964 MB/sec [Average]
[info]   (min, avg, max) = (382.155, 402.463, 417.874), stdev = 13.495
[info]   CI (99.9%): [350.498, 454.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19657.771 ±(99.9%) 1792.208 B/op [Average]
[info]   (min, avg, max) = (19208.013, 19657.771, 20305.666), stdev = 465.431
[info]   CI (99.9%): [17865.563, 21449.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.228 ±(99.9%) 1320.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.228, 667.367), stdev = 342.992
[info]   CI (99.9%): [≈ 0, 1689.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17933.821 ±(99.9%) 64153.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17933.821, 32418.005), stdev = 16660.512
[info]   CI (99.9%): [≈ 0, 82087.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.607 ±(99.9%) 5.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.607, 3.035), stdev = 1.357
[info]   CI (99.9%): [≈ 0, 5.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.07% complete, ETA 01:49:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19285.504 ops/s
[info] # Warmup Iteration   2: 33131.306 ops/s
[info] # Warmup Iteration   3: 33914.908 ops/s
[info] # Warmup Iteration   4: 33783.002 ops/s
[info] # Warmup Iteration   5: 33803.145 ops/s
[info] Iteration   1: 34315.559 ops/s
[info]                  ·gc.alloc.rate:               423.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          19383.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23425.731 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 34438.449 ops/s
[info]                  ·gc.alloc.rate:      413.641 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34406.167 ops/s
[info]                  ·gc.alloc.rate:               435.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          19900.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30670.185 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 34444.407 ops/s
[info]                  ·gc.alloc.rate:      413.598 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34426.739 ops/s
[info]                  ·gc.alloc.rate:                   438.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              20061.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30651.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.903 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   34406.264 ±(99.9%) 203.187 ops/s [Average]
[info]   (min, avg, max) = (34315.559, 34406.264, 34444.407), stdev = 52.767
[info]   CI (99.9%): [34203.077, 34609.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   424.855 ±(99.9%) 45.469 MB/sec [Average]
[info]   (min, avg, max) = (413.598, 424.855, 438.896), stdev = 11.808
[info]   CI (99.9%): [379.386, 470.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19427.420 ±(99.9%) 2102.510 B/op [Average]
[info]   (min, avg, max) = (18896.013, 19427.420, 20061.220), stdev = 546.015
[info]   CI (99.9%): [17324.910, 21529.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.483 ±(99.9%) 1326.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.483, 670.588), stdev = 344.398
[info]   CI (99.9%): [≈ 0, 1696.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16949.479 ±(99.9%) 60655.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16949.479, 30670.185), stdev = 15752.096
[info]   CI (99.9%): [≈ 0, 77605.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.381 ±(99.9%) 3.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.903), stdev = 0.851
[info]   CI (99.9%): [≈ 0, 3.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18.27% complete, ETA 01:49:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20129.736 ops/s
[info] # Warmup Iteration   2: 33317.418 ops/s
[info] # Warmup Iteration   3: 34758.597 ops/s
[info] # Warmup Iteration   4: 33876.753 ops/s
[info] # Warmup Iteration   5: 35172.038 ops/s
[info] Iteration   1: 35126.281 ops/s
[info]                  ·gc.alloc.rate:                   391.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              17540.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22922.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.865 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 35062.302 ops/s
[info]                  ·gc.alloc.rate:               400.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          17960.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22963.483 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 35225.442 ops/s
[info]                  ·gc.alloc.rate:      382.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35023.167 ops/s
[info]                  ·gc.alloc.rate:                   395.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              17779.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30144.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.935 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34997.763 ops/s
[info]                  ·gc.alloc.rate:               399.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          17975.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30165.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   35086.991 ±(99.9%) 351.639 ops/s [Average]
[info]   (min, avg, max) = (34997.763, 35086.991, 35225.442), stdev = 91.320
[info]   CI (99.9%): [34735.352, 35438.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   393.994 ±(99.9%) 27.850 MB/sec [Average]
[info]   (min, avg, max) = (382.673, 393.994, 400.160), stdev = 7.233
[info]   CI (99.9%): [366.143, 421.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17670.334 ±(99.9%) 1409.527 B/op [Average]
[info]   (min, avg, max) = (17096.012, 17670.334, 17975.213), stdev = 366.050
[info]   CI (99.9%): [16260.807, 19079.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   473.054 ±(99.9%) 1063.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.054, 670.994), stdev = 276.178
[info]   CI (99.9%): [≈ 0, 1536.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   21239.084 ±(99.9%) 47780.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21239.084, 30165.582), stdev = 12408.528
[info]   CI (99.9%): [≈ 0, 69019.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.560 ±(99.9%) 3.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 1.865), stdev = 0.835
[info]   CI (99.9%): [≈ 0, 3.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18.47% complete, ETA 01:48:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9902.981 ops/s
[info] # Warmup Iteration   2: 26972.034 ops/s
[info] # Warmup Iteration   3: 27210.435 ops/s
[info] # Warmup Iteration   4: 27215.159 ops/s
[info] # Warmup Iteration   5: 26999.298 ops/s
[info] Iteration   1: 27362.252 ops/s
[info]                  ·gc.alloc.rate:               666.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          38312.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38584.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 27375.647 ops/s
[info]                  ·gc.alloc.rate:               664.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          38197.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38566.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 27359.635 ops/s
[info]                  ·gc.alloc.rate:                   671.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              38594.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38627.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27190.069 ops/s
[info]                  ·gc.alloc.rate:               662.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          38347.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38867.567 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27364.815 ops/s
[info]                  ·gc.alloc.rate:               664.807 MB/sec
[info]                  ·gc.alloc.rate.norm:          38237.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38658.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   27330.484 ±(99.9%) 303.161 ops/s [Average]
[info]   (min, avg, max) = (27190.069, 27330.484, 27375.647), stdev = 78.730
[info]   CI (99.9%): [27027.323, 27633.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   665.819 ±(99.9%) 12.413 MB/sec [Average]
[info]   (min, avg, max) = (662.522, 665.819, 671.072), stdev = 3.224
[info]   CI (99.9%): [653.406, 678.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   38337.815 ±(99.9%) 596.915 B/op [Average]
[info]   (min, avg, max) = (38197.889, 38337.815, 38594.064), stdev = 155.017
[info]   CI (99.9%): [37740.900, 38934.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.429 ±(99.9%) 1.996 MB/sec [Average]
[info]   (min, avg, max) = (670.857, 671.429, 672.137), stdev = 0.518
[info]   CI (99.9%): [669.433, 673.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   38661.090 ±(99.9%) 465.602 B/op [Average]
[info]   (min, avg, max) = (38566.640, 38661.090, 38867.567), stdev = 120.915
[info]   CI (99.9%): [38195.488, 39126.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.240 ±(99.9%) 2.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 1.198), stdev = 0.536
[info]   CI (99.9%): [≈ 0, 2.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.67% complete, ETA 01:48:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4047.587 ops/s
[info] # Warmup Iteration   2: 13702.628 ops/s
[info] # Warmup Iteration   3: 15111.460 ops/s
[info] # Warmup Iteration   4: 15137.886 ops/s
[info] # Warmup Iteration   5: 15386.176 ops/s
[info] Iteration   1: 15486.386 ops/s
[info]                  ·gc.alloc.rate:               1140.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          115912.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136445.537 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 15603.086 ops/s
[info]                  ·gc.alloc.rate:               1130.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          114075.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67728.092 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 14978.860 ops/s
[info]                  ·gc.alloc.rate:               1124.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          118131.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141097.932 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 15294.356 ops/s
[info]                  ·gc.alloc.rate:                   1132.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              116535.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138329.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 15754.561 ops/s
[info]                  ·gc.alloc.rate:                   1138.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              113749.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67145.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284.903 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15423.450 ±(99.9%) 1155.498 ops/s [Average]
[info]   (min, avg, max) = (14978.860, 15423.450, 15754.561), stdev = 300.079
[info]   CI (99.9%): [14267.952, 16578.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1133.398 ±(99.9%) 24.858 MB/sec [Average]
[info]   (min, avg, max) = (1124.374, 1133.398, 1140.530), stdev = 6.455
[info]   CI (99.9%): [1108.540, 1158.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   115680.885 ±(99.9%) 6967.488 B/op [Average]
[info]   (min, avg, max) = (113749.195, 115680.885, 118131.215), stdev = 1809.435
[info]   CI (99.9%): [108713.397, 122648.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1074.678 ±(99.9%) 1416.147 MB/sec [Average]
[info]   (min, avg, max) = (671.474, 1074.678, 1344.239), stdev = 367.769
[info]   CI (99.9%): [≈ 0, 2490.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110149.332 ±(99.9%) 150277.650 B/op [Average]
[info]   (min, avg, max) = (67145.598, 110149.332, 141097.932), stdev = 39026.628
[info]   CI (99.9%): [≈ 0, 260426.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 4.902 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.852), stdev = 1.273
[info]   CI (99.9%): [≈ 0, 5.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   57.409 ±(99.9%) 489.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.409, 284.903), stdev = 127.176
[info]   CI (99.9%): [≈ 0, 547.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.88% complete, ETA 01:48:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4861.851 ops/s
[info] # Warmup Iteration   2: 13468.471 ops/s
[info] # Warmup Iteration   3: 15857.046 ops/s
[info] # Warmup Iteration   4: 15934.001 ops/s
[info] # Warmup Iteration   5: 15869.527 ops/s
[info] Iteration   1: 15388.070 ops/s
[info]                  ·gc.alloc.rate:                   994.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              101710.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68333.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15439.416 ops/s
[info]                  ·gc.alloc.rate:               995.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          101483.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68175.774 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 15239.786 ops/s
[info]                  ·gc.alloc.rate:                   1023.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              105697.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138166.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 15440.692 ops/s
[info]                  ·gc.alloc.rate:               998.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          101762.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68200.893 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15232.374 ops/s
[info]                  ·gc.alloc.rate:                   993.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              102665.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138332.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15348.068 ±(99.9%) 402.175 ops/s [Average]
[info]   (min, avg, max) = (15232.374, 15348.068, 15440.692), stdev = 104.443
[info]   CI (99.9%): [14945.893, 15750.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1001.121 ±(99.9%) 48.594 MB/sec [Average]
[info]   (min, avg, max) = (993.665, 1001.121, 1023.475), stdev = 12.620
[info]   CI (99.9%): [952.527, 1049.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   102663.814 ±(99.9%) 6757.820 B/op [Average]
[info]   (min, avg, max) = (101483.205, 102663.814, 105697.609), stdev = 1754.984
[info]   CI (99.9%): [95905.995, 109421.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.566 ±(99.9%) 1412.401 MB/sec [Average]
[info]   (min, avg, max) = (668.212, 936.566, 1338.873), stdev = 366.796
[info]   CI (99.9%): [≈ 0, 2348.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   96241.801 ±(99.9%) 147662.958 B/op [Average]
[info]   (min, avg, max) = (68175.774, 96241.801, 138332.749), stdev = 38347.601
[info]   CI (99.9%): [≈ 0, 243904.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.194 ±(99.9%) 4.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.194, 2.617), stdev = 1.155
[info]   CI (99.9%): [≈ 0, 5.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.08% complete, ETA 01:48:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68054.280 ops/s
[info] # Warmup Iteration   2: 99641.513 ops/s
[info] # Warmup Iteration   3: 107889.813 ops/s
[info] # Warmup Iteration   4: 107271.219 ops/s
[info] # Warmup Iteration   5: 107429.523 ops/s
[info] Iteration   1: 99551.091 ops/s
[info]                  ·gc.alloc.rate:      259.209 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 105590.538 ops/s
[info]                  ·gc.alloc.rate:               287.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          4282.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7625.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 107879.216 ops/s
[info]                  ·gc.alloc.rate:      280.756 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 106265.257 ops/s
[info]                  ·gc.alloc.rate:                   295.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              4370.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7577.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 107793.094 ops/s
[info]                  ·gc.alloc.rate:      280.658 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   105415.839 ±(99.9%) 13180.635 ops/s [Average]
[info]   (min, avg, max) = (99551.091, 105415.839, 107879.216), stdev = 3422.969
[info]   CI (99.9%): [92235.205, 118596.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   280.613 ±(99.9%) 51.402 MB/sec [Average]
[info]   (min, avg, max) = (259.209, 280.613, 295.067), stdev = 13.349
[info]   CI (99.9%): [229.211, 332.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4188.194 ±(99.9%) 500.528 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4188.194, 4370.310), stdev = 129.985
[info]   CI (99.9%): [3687.667, 4688.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.654 ±(99.9%) 1079.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.654, 511.691), stdev = 280.234
[info]   CI (99.9%): [≈ 0, 1283.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3040.543 ±(99.9%) 16032.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3040.543, 7625.574), stdev = 4163.471
[info]   CI (99.9%): [≈ 0, 19072.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.123 ±(99.9%) 1.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.617), stdev = 0.276
[info]   CI (99.9%): [≈ 0, 1.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 5.000), stdev = 2.191
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.28% complete, ETA 01:47:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1795.235 ops/s
[info] # Warmup Iteration   2: 10171.513 ops/s
[info] # Warmup Iteration   3: 13783.626 ops/s
[info] # Warmup Iteration   4: 13831.885 ops/s
[info] # Warmup Iteration   5: 13841.193 ops/s
[info] Iteration   1: 13836.810 ops/s
[info]                  ·gc.alloc.rate:                   1368.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              155640.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151993.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13729.814 ops/s
[info]                  ·gc.alloc.rate:               1346.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          154345.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153319.785 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 13816.333 ops/s
[info]                  ·gc.alloc.rate:                   1364.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              155426.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152441.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13721.767 ops/s
[info]                  ·gc.alloc.rate:                   1368.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              156873.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153561.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 477.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13835.154 ops/s
[info]                  ·gc.alloc.rate:                   1364.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              155261.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151853.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13787.976 ±(99.9%) 221.044 ops/s [Average]
[info]   (min, avg, max) = (13721.767, 13787.976, 13836.810), stdev = 57.404
[info]   CI (99.9%): [13566.931, 14009.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1362.587 ±(99.9%) 34.904 MB/sec [Average]
[info]   (min, avg, max) = (1346.734, 1362.587, 1368.764), stdev = 9.065
[info]   CI (99.9%): [1327.683, 1397.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   155509.447 ±(99.9%) 3497.302 B/op [Average]
[info]   (min, avg, max) = (154345.625, 155509.447, 156873.093), stdev = 908.238
[info]   CI (99.9%): [152012.145, 159006.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1337.374 ±(99.9%) 6.335 MB/sec [Average]
[info]   (min, avg, max) = (1334.924, 1337.374, 1339.227), stdev = 1.645
[info]   CI (99.9%): [1331.039, 1343.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   152634.091 ±(99.9%) 2975.005 B/op [Average]
[info]   (min, avg, max) = (151853.324, 152634.091, 153561.950), stdev = 772.599
[info]   CI (99.9%): [149659.086, 155609.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 6.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.166), stdev = 1.816
[info]   CI (99.9%): [≈ 0, 7.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   106.917 ±(99.9%) 802.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.917, 477.745), stdev = 208.318
[info]   CI (99.9%): [≈ 0, 909.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19.48% complete, ETA 01:47:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2087.229 ops/s
[info] # Warmup Iteration   2: 13248.690 ops/s
[info] # Warmup Iteration   3: 15247.753 ops/s
[info] # Warmup Iteration   4: 15353.555 ops/s
[info] # Warmup Iteration   5: 15278.378 ops/s
[info] Iteration   1: 15365.620 ops/s
[info]                  ·gc.alloc.rate:                   1071.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              109703.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68811.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15265.558 ops/s
[info]                  ·gc.alloc.rate:                   1080.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              111440.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138592.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 14798.766 ops/s
[info]                  ·gc.alloc.rate:               1042.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          110837.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71482.547 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14541.456 ops/s
[info]                  ·gc.alloc.rate:               1051.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          113710.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145563.459 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 15145.964 ops/s
[info]                  ·gc.alloc.rate:                   1046.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              108761.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69914.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   15023.473 ±(99.9%) 1324.850 ops/s [Average]
[info]   (min, avg, max) = (14541.456, 15023.473, 15365.620), stdev = 344.059
[info]   CI (99.9%): [13698.623, 16348.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1058.403 ±(99.9%) 64.348 MB/sec [Average]
[info]   (min, avg, max) = (1042.244, 1058.403, 1080.920), stdev = 16.711
[info]   CI (99.9%): [994.055, 1122.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   110890.653 ±(99.9%) 7255.309 B/op [Average]
[info]   (min, avg, max) = (108761.626, 110890.653, 113710.662), stdev = 1884.181
[info]   CI (99.9%): [103635.344, 118145.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   941.329 ±(99.9%) 1418.623 MB/sec [Average]
[info]   (min, avg, max) = (671.797, 941.329, 1345.528), stdev = 368.412
[info]   CI (99.9%): [≈ 0, 2359.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   98872.728 ±(99.9%) 152212.243 B/op [Average]
[info]   (min, avg, max) = (68811.094, 98872.728, 145563.459), stdev = 39529.036
[info]   CI (99.9%): [≈ 0, 251084.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.718 ±(99.9%) 6.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.718, 4.292), stdev = 1.796
[info]   CI (99.9%): [≈ 0, 8.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.68% complete, ETA 01:47:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17313.097 ops/s
[info] # Warmup Iteration   2: 44747.730 ops/s
[info] # Warmup Iteration   3: 44096.310 ops/s
[info] # Warmup Iteration   4: 44681.994 ops/s
[info] # Warmup Iteration   5: 45255.004 ops/s
[info] Iteration   1: 45089.822 ops/s
[info]                  ·gc.alloc.rate:                   1154.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              40276.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46817.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 45050.301 ops/s
[info]                  ·gc.alloc.rate:                   1146.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              40041.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46890.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 44973.685 ops/s
[info]                  ·gc.alloc.rate:               1136.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          39758.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23498.024 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 45513.957 ops/s
[info]                  ·gc.alloc.rate:                   1153.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              39893.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46438.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 44380.725 ops/s
[info]                  ·gc.alloc.rate:                   1148.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              40738.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47672.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   45001.698 ±(99.9%) 1562.870 ops/s [Average]
[info]   (min, avg, max) = (44380.725, 45001.698, 45513.957), stdev = 405.872
[info]   CI (99.9%): [43438.828, 46564.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1147.830 ±(99.9%) 28.205 MB/sec [Average]
[info]   (min, avg, max) = (1136.193, 1147.830, 1154.052), stdev = 7.325
[info]   CI (99.9%): [1119.624, 1176.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40141.631 ±(99.9%) 1481.386 B/op [Average]
[info]   (min, avg, max) = (39758.888, 40141.631, 40738.062), stdev = 384.711
[info]   CI (99.9%): [38660.245, 41623.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.557 ±(99.9%) 1156.052 MB/sec [Average]
[info]   (min, avg, max) = (671.505, 1208.557, 1344.406), stdev = 300.223
[info]   CI (99.9%): [52.505, 2364.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42263.240 ±(99.9%) 40430.431 B/op [Average]
[info]   (min, avg, max) = (23498.024, 42263.240, 47672.210), stdev = 10499.655
[info]   CI (99.9%): [1832.809, 82693.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.700 ±(99.9%) 5.889 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 3.435), stdev = 1.529
[info]   CI (99.9%): [≈ 0, 6.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.796 ±(99.9%) 208.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.796, 121.809), stdev = 54.232
[info]   CI (99.9%): [≈ 0, 233.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.88% complete, ETA 01:46:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17122.235 ops/s
[info] # Warmup Iteration   2: 64175.578 ops/s
[info] # Warmup Iteration   3: 64246.618 ops/s
[info] # Warmup Iteration   4: 64807.565 ops/s
[info] # Warmup Iteration   5: 64844.968 ops/s
[info] Iteration   1: 62908.536 ops/s
[info]                  ·gc.alloc.rate:                   1111.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              27799.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33389.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 64414.927 ops/s
[info]                  ·gc.alloc.rate:                   1133.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              27672.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32554.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 64468.467 ops/s
[info]                  ·gc.alloc.rate:               1127.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          27522.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16319.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 64759.073 ops/s
[info]                  ·gc.alloc.rate:                   1147.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              27896.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32508.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 64785.210 ops/s
[info]                  ·gc.alloc.rate:                   1121.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              27237.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16262.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   64267.243 ±(99.9%) 2994.215 ops/s [Average]
[info]   (min, avg, max) = (62908.536, 64267.243, 64785.210), stdev = 777.588
[info]   CI (99.9%): [61273.027, 67261.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1128.346 ±(99.9%) 52.520 MB/sec [Average]
[info]   (min, avg, max) = (1111.488, 1128.346, 1147.858), stdev = 13.639
[info]   CI (99.9%): [1075.826, 1180.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27625.623 ±(99.9%) 995.030 B/op [Average]
[info]   (min, avg, max) = (27237.223, 27625.623, 27896.075), stdev = 258.406
[info]   CI (99.9%): [26630.593, 28620.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.873 ±(99.9%) 1405.659 MB/sec [Average]
[info]   (min, avg, max) = (668.469, 1068.873, 1337.647), stdev = 365.045
[info]   CI (99.9%): [≈ 0, 2474.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26207.130 ±(99.9%) 34882.219 B/op [Average]
[info]   (min, avg, max) = (16262.637, 26207.130, 33389.841), stdev = 9058.801
[info]   CI (99.9%): [≈ 0, 61089.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.729), stdev = 1.661
[info]   CI (99.9%): [≈ 0, 7.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.419 ±(99.9%) 155.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.419, 90.570), stdev = 40.335
[info]   CI (99.9%): [≈ 0, 173.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.08% complete, ETA 01:46:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102667.292 ops/s
[info] # Warmup Iteration   2: 168875.499 ops/s
[info] # Warmup Iteration   3: 176792.752 ops/s
[info] # Warmup Iteration   4: 170444.472 ops/s
[info] # Warmup Iteration   5: 177431.400 ops/s
[info] Iteration   1: 176533.722 ops/s
[info]                  ·gc.alloc.rate:                   297.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4561.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 176403.190 ops/s
[info]                  ·gc.alloc.rate:               294.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          2631.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4564.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 177314.447 ops/s
[info]                  ·gc.alloc.rate:      281.243 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 175998.689 ops/s
[info]                  ·gc.alloc.rate:                   295.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              2643.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4574.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 174459.525 ops/s
[info]                  ·gc.alloc.rate:      287.789 MB/sec
[info]                  ·gc.alloc.rate.norm: 2596.324 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   176141.914 ±(99.9%) 4060.357 ops/s [Average]
[info]   (min, avg, max) = (174459.525, 176141.914, 177314.447), stdev = 1054.462
[info]   CI (99.9%): [172081.558, 180202.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   291.316 ±(99.9%) 25.683 MB/sec [Average]
[info]   (min, avg, max) = (281.243, 291.316, 297.054), stdev = 6.670
[info]   CI (99.9%): [265.633, 316.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2603.034 ±(99.9%) 243.286 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2603.034, 2648.373), stdev = 63.181
[info]   CI (99.9%): [2359.748, 2846.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.955 ±(99.9%) 1078.992 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.955, 511.605), stdev = 280.211
[info]   CI (99.9%): [≈ 0, 1385.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2740.100 ±(99.9%) 9631.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2740.100, 4574.721), stdev = 2501.362
[info]   CI (99.9%): [≈ 0, 12371.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.372), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.28% complete, ETA 01:46:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103131.035 ops/s
[info] # Warmup Iteration   2: 181358.797 ops/s
[info] # Warmup Iteration   3: 185240.639 ops/s
[info] # Warmup Iteration   4: 184230.728 ops/s
[info] # Warmup Iteration   5: 184800.597 ops/s
[info] Iteration   1: 184916.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 185143.446 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 185446.666 ops/s
[info]                  ·gc.alloc.rate:      20.224 MB/sec
[info]                  ·gc.alloc.rate.norm: 171.613 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 184548.077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 184590.670 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   184929.027 ±(99.9%) 1458.293 ops/s [Average]
[info]   (min, avg, max) = (184548.077, 184929.027, 185446.666), stdev = 378.714
[info]   CI (99.9%): [183470.734, 186387.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.045 ±(99.9%) 34.826 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.045, 20.224), stdev = 9.044
[info]   CI (99.9%): [≈ 0, 38.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   34.325 ±(99.9%) 295.524 B/op [Average]
[info]   (min, avg, max) = (0.002, 34.325, 171.613), stdev = 76.747
[info]   CI (99.9%): [≈ 0, 329.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.48% complete, ETA 01:46:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24146.112 ops/s
[info] # Warmup Iteration   2: 55695.688 ops/s
[info] # Warmup Iteration   3: 56461.175 ops/s
[info] # Warmup Iteration   4: 58888.922 ops/s
[info] # Warmup Iteration   5: 59005.851 ops/s
[info] Iteration   1: 58750.252 ops/s
[info]                  ·gc.alloc.rate:                   1145.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              30677.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35894.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 58404.698 ops/s
[info]                  ·gc.alloc.rate:                   1134.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              30559.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36134.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.561 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 58989.745 ops/s
[info]                  ·gc.alloc.rate:               1135.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          30283.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17896.882 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 58830.332 ops/s
[info]                  ·gc.alloc.rate:               1148.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          30726.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35891.706 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 58147.933 ops/s
[info]                  ·gc.alloc.rate:                   1135.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              30738.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36347.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   58624.592 ±(99.9%) 1315.734 ops/s [Average]
[info]   (min, avg, max) = (58147.933, 58624.592, 58989.745), stdev = 341.692
[info]   CI (99.9%): [57308.858, 59940.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1139.807 ±(99.9%) 25.369 MB/sec [Average]
[info]   (min, avg, max) = (1134.065, 1139.807, 1148.562), stdev = 6.588
[info]   CI (99.9%): [1114.437, 1165.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30597.215 ±(99.9%) 728.401 B/op [Average]
[info]   (min, avg, max) = (30283.250, 30597.215, 30738.282), stdev = 189.163
[info]   CI (99.9%): [29868.814, 31325.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207.326 ±(99.9%) 1154.566 MB/sec [Average]
[info]   (min, avg, max) = (670.965, 1207.326, 1343.178), stdev = 299.837
[info]   CI (99.9%): [52.760, 2361.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32433.126 ±(99.9%) 31298.868 B/op [Average]
[info]   (min, avg, max) = (17896.882, 32433.126, 36347.413), stdev = 8128.217
[info]   CI (99.9%): [1134.258, 63731.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.771), stdev = 1.682
[info]   CI (99.9%): [≈ 0, 7.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.631 ±(99.9%) 175.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.631, 102.039), stdev = 45.509
[info]   CI (99.9%): [≈ 0, 195.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20.68% complete, ETA 01:45:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8589.403 ops/s
[info] # Warmup Iteration   2: 16719.730 ops/s
[info] # Warmup Iteration   3: 16868.188 ops/s
[info] # Warmup Iteration   4: 16552.838 ops/s
[info] # Warmup Iteration   5: 16734.967 ops/s
[info] Iteration   1: 16819.975 ops/s
[info]                  ·gc.alloc.rate:               602.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          56339.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62766.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 16702.408 ops/s
[info]                  ·gc.alloc.rate:               604.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          56996.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63205.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 16816.031 ops/s
[info]                  ·gc.alloc.rate:               607.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          56830.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62843.487 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 16868.264 ops/s
[info]                  ·gc.alloc.rate:                   604.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              56431.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62649.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16927.268 ops/s
[info]                  ·gc.alloc.rate:      586.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 54568.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   16826.789 ±(99.9%) 318.983 ops/s [Average]
[info]   (min, avg, max) = (16702.408, 16826.789, 16927.268), stdev = 82.839
[info]   CI (99.9%): [16507.806, 17145.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   601.233 ±(99.9%) 31.565 MB/sec [Average]
[info]   (min, avg, max) = (586.953, 601.233, 607.348), stdev = 8.197
[info]   CI (99.9%): [569.667, 632.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   56233.280 ±(99.9%) 3734.854 B/op [Average]
[info]   (min, avg, max) = (54568.026, 56233.280, 56996.968), stdev = 969.930
[info]   CI (99.9%): [52498.425, 59968.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   536.940 ±(99.9%) 1155.804 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.940, 671.614), stdev = 300.159
[info]   CI (99.9%): [≈ 0, 1692.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   50293.058 ±(99.9%) 108262.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50293.058, 63205.796), stdev = 28115.442
[info]   CI (99.9%): [≈ 0, 158555.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.777 ±(99.9%) 6.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.885), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.88% complete, ETA 01:45:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10489.503 ops/s
[info] # Warmup Iteration   2: 90762.915 ops/s
[info] # Warmup Iteration   3: 95245.772 ops/s
[info] # Warmup Iteration   4: 95588.150 ops/s
[info] # Warmup Iteration   5: 96771.279 ops/s
[info] Iteration   1: 97247.907 ops/s
[info]                  ·gc.alloc.rate:                   2161.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              34965.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32532.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 97360.093 ops/s
[info]                  ·gc.alloc.rate:                   2160.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              34924.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32423.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 96744.413 ops/s
[info]                  ·gc.alloc.rate:                   2135.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              34734.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32587.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 97093.782 ops/s
[info]                  ·gc.alloc.rate:               2170.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          35167.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32495.361 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 97898.768 ops/s
[info]                  ·gc.alloc.rate:               2187.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          35165.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32282.412 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   97268.993 ±(99.9%) 1623.725 ops/s [Average]
[info]   (min, avg, max) = (96744.413, 97268.993, 97898.768), stdev = 421.676
[info]   CI (99.9%): [95645.268, 98892.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2162.854 ±(99.9%) 72.878 MB/sec [Average]
[info]   (min, avg, max) = (2135.111, 2162.854, 2187.420), stdev = 18.926
[info]   CI (99.9%): [2089.976, 2235.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34991.513 ±(99.9%) 700.075 B/op [Average]
[info]   (min, avg, max) = (34734.779, 34991.513, 35167.239), stdev = 181.807
[info]   CI (99.9%): [34291.438, 35691.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2006.592 ±(99.9%) 11.502 MB/sec [Average]
[info]   (min, avg, max) = (2003.119, 2006.592, 2010.898), stdev = 2.987
[info]   CI (99.9%): [1995.090, 2018.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32464.235 ±(99.9%) 453.471 B/op [Average]
[info]   (min, avg, max) = (32282.412, 32464.235, 32587.493), stdev = 117.765
[info]   CI (99.9%): [32010.764, 32917.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.796 ±(99.9%) 6.406 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.796, 3.769), stdev = 1.664
[info]   CI (99.9%): [≈ 0, 7.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.871 ±(99.9%) 103.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.871, 60.981), stdev = 26.912
[info]   CI (99.9%): [≈ 0, 116.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.08% complete, ETA 01:45:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16157.562 ops/s
[info] # Warmup Iteration   2: 118127.846 ops/s
[info] # Warmup Iteration   3: 124905.331 ops/s
[info] # Warmup Iteration   4: 127188.824 ops/s
[info] # Warmup Iteration   5: 123177.140 ops/s
[info] Iteration   1: 126686.747 ops/s
[info]                  ·gc.alloc.rate:                   1780.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              22118.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16597.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 124499.768 ops/s
[info]                  ·gc.alloc.rate:                   1776.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              22456.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25356.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.739 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 127769.634 ops/s
[info]                  ·gc.alloc.rate:                   1821.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              22439.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24632.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 127927.183 ops/s
[info]                  ·gc.alloc.rate:               1797.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          22108.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16390.531 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 127940.991 ops/s
[info]                  ·gc.alloc.rate:               1824.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          22439.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24591.300 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   126964.864 ±(99.9%) 5672.542 ops/s [Average]
[info]   (min, avg, max) = (124499.768, 126964.864, 127940.991), stdev = 1473.141
[info]   CI (99.9%): [121292.322, 132637.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1800.087 ±(99.9%) 85.754 MB/sec [Average]
[info]   (min, avg, max) = (1776.661, 1800.087, 1824.061), stdev = 22.270
[info]   CI (99.9%): [1714.332, 1885.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22312.423 ±(99.9%) 700.224 B/op [Average]
[info]   (min, avg, max) = (22108.533, 22312.423, 22456.276), stdev = 181.846
[info]   CI (99.9%): [21612.199, 23012.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1734.724 ±(99.9%) 1407.750 MB/sec [Average]
[info]   (min, avg, max) = (1332.268, 1734.724, 2006.131), stdev = 365.588
[info]   CI (99.9%): [326.974, 3142.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21513.709 ±(99.9%) 17686.516 B/op [Average]
[info]   (min, avg, max) = (16390.531, 21513.709, 25356.685), stdev = 4593.132
[info]   CI (99.9%): [3827.194, 39200.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 7.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 4.331), stdev = 1.932
[info]   CI (99.9%): [≈ 0, 8.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.051 ±(99.9%) 94.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.051, 54.739), stdev = 24.423
[info]   CI (99.9%): [≈ 0, 105.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.29% complete, ETA 01:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70605.187 ops/s
[info] # Warmup Iteration   2: 163445.165 ops/s
[info] # Warmup Iteration   3: 165297.401 ops/s
[info] # Warmup Iteration   4: 163339.504 ops/s
[info] # Warmup Iteration   5: 166647.209 ops/s
[info] Iteration   1: 165486.781 ops/s
[info]                  ·gc.alloc.rate:                   1535.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              14604.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12785.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 162782.375 ops/s
[info]                  ·gc.alloc.rate:                   1535.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              14846.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19502.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 164356.624 ops/s
[info]                  ·gc.alloc.rate:                   1548.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              14829.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12873.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 164049.400 ops/s
[info]                  ·gc.alloc.rate:                   1546.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              14839.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12870.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 165114.217 ops/s
[info]                  ·gc.alloc.rate:               1555.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          14830.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12775.046 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   164357.879 ±(99.9%) 4049.517 ops/s [Average]
[info]   (min, avg, max) = (162782.375, 164357.879, 165486.781), stdev = 1051.647
[info]   CI (99.9%): [160308.363, 168407.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1544.531 ±(99.9%) 33.843 MB/sec [Average]
[info]   (min, avg, max) = (1535.616, 1544.531, 1555.887), stdev = 8.789
[info]   CI (99.9%): [1510.688, 1578.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14790.007 ±(99.9%) 400.595 B/op [Average]
[info]   (min, avg, max) = (14604.360, 14790.007, 14846.994), stdev = 104.033
[info]   CI (99.9%): [14389.412, 15190.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1477.573 ±(99.9%) 1161.680 MB/sec [Average]
[info]   (min, avg, max) = (1340.261, 1477.573, 2017.234), stdev = 301.685
[info]   CI (99.9%): [315.894, 2639.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14161.405 ±(99.9%) 11498.782 B/op [Average]
[info]   (min, avg, max) = (12775.046, 14161.405, 19502.639), stdev = 2986.197
[info]   CI (99.9%): [2662.623, 25660.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 4.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 2.769), stdev = 1.196
[info]   CI (99.9%): [≈ 0, 5.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.390 ±(99.9%) 44.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.390, 26.769), stdev = 11.569
[info]   CI (99.9%): [≈ 0, 50.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.49% complete, ETA 01:44:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5443.055 ops/s
[info] # Warmup Iteration   2: 47399.730 ops/s
[info] # Warmup Iteration   3: 52506.920 ops/s
[info] # Warmup Iteration   4: 54109.389 ops/s
[info] # Warmup Iteration   5: 54427.507 ops/s
[info] Iteration   1: 54571.155 ops/s
[info]                  ·gc.alloc.rate:               2900.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          83658.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77381.996 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 53294.032 ops/s
[info]                  ·gc.alloc.rate:                   2862.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              84520.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79455.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.229 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 54571.438 ops/s
[info]                  ·gc.alloc.rate:               2943.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          84866.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77807.490 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 54756.350 ops/s
[info]                  ·gc.alloc.rate:               2953.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          84877.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77733.280 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 54403.672 ops/s
[info]                  ·gc.alloc.rate:               2960.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          85657.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3387.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98010.724 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   54319.329 ±(99.9%) 2258.716 ops/s [Average]
[info]   (min, avg, max) = (53294.032, 54319.329, 54756.350), stdev = 586.581
[info]   CI (99.9%): [52060.613, 56578.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2924.080 ±(99.9%) 160.677 MB/sec [Average]
[info]   (min, avg, max) = (2862.085, 2924.080, 2960.862), stdev = 41.727
[info]   CI (99.9%): [2763.403, 3084.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84715.955 ±(99.9%) 2783.726 B/op [Average]
[info]   (min, avg, max) = (83658.944, 84715.955, 85657.412), stdev = 722.925
[info]   CI (99.9%): [81932.229, 87499.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2832.973 ±(99.9%) 1194.873 MB/sec [Average]
[info]   (min, avg, max) = (2683.204, 2832.973, 3387.871), stdev = 310.305
[info]   CI (99.9%): [1638.100, 4027.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82077.730 ±(99.9%) 34435.678 B/op [Average]
[info]   (min, avg, max) = (77381.996, 82077.730, 98010.724), stdev = 8942.836
[info]   CI (99.9%): [47642.052, 116513.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.246 ±(99.9%) 2.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.229), stdev = 0.550
[info]   CI (99.9%): [≈ 0, 2.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21.69% complete, ETA 01:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24789.634 ops/s
[info] # Warmup Iteration   2: 108454.063 ops/s
[info] # Warmup Iteration   3: 106549.493 ops/s
[info] # Warmup Iteration   4: 111847.716 ops/s
[info] # Warmup Iteration   5: 111444.266 ops/s
[info] Iteration   1: 111976.086 ops/s
[info]                  ·gc.alloc.rate:                   2144.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              30147.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28350.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 111002.753 ops/s
[info]                  ·gc.alloc.rate:                   2113.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              29960.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28514.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 112671.933 ops/s
[info]                  ·gc.alloc.rate:                   2157.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              30132.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28053.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 110593.353 ops/s
[info]                  ·gc.alloc.rate:                   2159.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              30727.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38111.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.592 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 110615.175 ops/s
[info]                  ·gc.alloc.rate:               2133.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          30345.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28648.193 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   111371.860 ±(99.9%) 3534.508 ops/s [Average]
[info]   (min, avg, max) = (110593.353, 111371.860, 112671.933), stdev = 917.901
[info]   CI (99.9%): [107837.352, 114906.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2141.797 ±(99.9%) 72.756 MB/sec [Average]
[info]   (min, avg, max) = (2113.915, 2141.797, 2159.645), stdev = 18.895
[info]   CI (99.9%): [2069.040, 2214.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30262.533 ±(99.9%) 1130.015 B/op [Average]
[info]   (min, avg, max) = (29960.436, 30262.533, 30727.458), stdev = 293.461
[info]   CI (99.9%): [29132.518, 31392.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2145.997 ±(99.9%) 1146.645 MB/sec [Average]
[info]   (min, avg, max) = (2008.668, 2145.997, 2678.655), stdev = 297.780
[info]   CI (99.9%): [999.353, 3292.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30335.669 ±(99.9%) 16760.768 B/op [Average]
[info]   (min, avg, max) = (28053.958, 30335.669, 38111.942), stdev = 4352.718
[info]   CI (99.9%): [13574.901, 47096.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.851), stdev = 1.708
[info]   CI (99.9%): [≈ 0, 7.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11.179 ±(99.9%) 92.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.179, 54.128), stdev = 24.011
[info]   CI (99.9%): [≈ 0, 103.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.89% complete, ETA 01:44:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82019.450 ops/s
[info] # Warmup Iteration   2: 181278.300 ops/s
[info] # Warmup Iteration   3: 181950.529 ops/s
[info] # Warmup Iteration   4: 183588.161 ops/s
[info] # Warmup Iteration   5: 183338.760 ops/s
[info] Iteration   1: 183418.986 ops/s
[info]                  ·gc.alloc.rate:                   1224.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              10507.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11505.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 180548.323 ops/s
[info]                  ·gc.alloc.rate:                   1212.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              10566.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11694.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 182789.973 ops/s
[info]                  ·gc.alloc.rate:               1209.362 MB/sec
[info]                  ·gc.alloc.rate.norm:          10411.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5778.455 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 178554.572 ops/s
[info]                  ·gc.alloc.rate:                   1196.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              10549.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11834.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 183417.465 ops/s
[info]                  ·gc.alloc.rate:                   1229.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              10550.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11512.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   181745.864 ±(99.9%) 8236.734 ops/s [Average]
[info]   (min, avg, max) = (178554.572, 181745.864, 183418.986), stdev = 2139.054
[info]   CI (99.9%): [173509.130, 189982.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1214.629 ±(99.9%) 50.443 MB/sec [Average]
[info]   (min, avg, max) = (1196.829, 1214.629, 1229.992), stdev = 13.100
[info]   CI (99.9%): [1164.185, 1265.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10516.884 ±(99.9%) 241.200 B/op [Average]
[info]   (min, avg, max) = (10411.873, 10516.884, 10566.065), stdev = 62.639
[info]   CI (99.9%): [10275.685, 10758.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.761 ±(99.9%) 1155.033 MB/sec [Average]
[info]   (min, avg, max) = (671.180, 1207.761, 1342.586), stdev = 299.958
[info]   CI (99.9%): [52.728, 2362.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10465.077 ±(99.9%) 10102.062 B/op [Average]
[info]   (min, avg, max) = (5778.455, 10465.077, 11834.102), stdev = 2623.473
[info]   CI (99.9%): [363.016, 20567.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 4.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.018), stdev = 1.296
[info]   CI (99.9%): [≈ 0, 5.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.467 ±(99.9%) 44.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.467, 26.605), stdev = 11.430
[info]   CI (99.9%): [≈ 0, 50.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.09% complete, ETA 01:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234623.504 ops/s
[info] # Warmup Iteration   2: 499734.932 ops/s
[info] # Warmup Iteration   3: 533690.352 ops/s
[info] # Warmup Iteration   4: 535314.350 ops/s
[info] # Warmup Iteration   5: 533243.257 ops/s
[info] Iteration   1: 537225.296 ops/s
[info]                  ·gc.alloc.rate:                   564.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1652.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1952.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 541115.849 ops/s
[info]                  ·gc.alloc.rate:      547.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 533682.253 ops/s
[info]                  ·gc.alloc.rate:               555.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          1639.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1965.524 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 536001.846 ops/s
[info]                  ·gc.alloc.rate:               567.444 MB/sec
[info]                  ·gc.alloc.rate.norm:          1666.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1959.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 537649.165 ops/s
[info]                  ·gc.alloc.rate:               563.822 MB/sec
[info]                  ·gc.alloc.rate.norm:          1650.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1953.992 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   537134.882 ±(99.9%) 10426.144 ops/s [Average]
[info]   (min, avg, max) = (533682.253, 537134.882, 541115.849), stdev = 2707.636
[info]   CI (99.9%): [526708.738, 547561.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   559.783 ±(99.9%) 31.195 MB/sec [Average]
[info]   (min, avg, max) = (547.443, 559.783, 567.444), stdev = 8.101
[info]   CI (99.9%): [528.588, 590.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1640.110 ±(99.9%) 109.914 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1640.110, 1666.105), stdev = 28.544
[info]   CI (99.9%): [1530.197, 1750.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.649 ±(99.9%) 1148.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.649, 667.615), stdev = 298.319
[info]   CI (99.9%): [≈ 0, 1682.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1566.397 ±(99.9%) 3371.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1566.397, 1965.524), stdev = 875.657
[info]   CI (99.9%): [≈ 0, 4938.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.29% complete, ETA 01:43:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307923.994 ops/s
[info] # Warmup Iteration   2: 705353.279 ops/s
[info] # Warmup Iteration   3: 711386.033 ops/s
[info] # Warmup Iteration   4: 713236.911 ops/s
[info] # Warmup Iteration   5: 711289.998 ops/s
[info] Iteration   1: 709333.415 ops/s
[info]                  ·gc.alloc.rate:               567.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          1258.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1487.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 714403.390 ops/s
[info]                  ·gc.alloc.rate:      548.364 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 716147.431 ops/s
[info]                  ·gc.alloc.rate:               568.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          1248.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1473.564 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 713260.562 ops/s
[info]                  ·gc.alloc.rate:               576.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          1271.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1480.952 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 719624.076 ops/s
[info]                  ·gc.alloc.rate:               575.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          1258.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1467.871 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   714553.775 ±(99.9%) 14560.688 ops/s [Average]
[info]   (min, avg, max) = (709333.415, 714553.775, 719624.076), stdev = 3781.364
[info]   CI (99.9%): [699993.087, 729114.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   567.099 ±(99.9%) 43.202 MB/sec [Average]
[info]   (min, avg, max) = (548.364, 567.099, 576.338), stdev = 11.219
[info]   CI (99.9%): [523.897, 610.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1249.025 ±(99.9%) 93.779 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1249.025, 1271.712), stdev = 24.354
[info]   CI (99.9%): [1155.246, 1342.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.690 ±(99.9%) 1155.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.690, 671.166), stdev = 300.019
[info]   CI (99.9%): [≈ 0, 1691.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1182.012 ±(99.9%) 2544.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1182.012, 1487.674), stdev = 660.807
[info]   CI (99.9%): [≈ 0, 3726.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.49% complete, ETA 01:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499640.456 ops/s
[info] # Warmup Iteration   2: 767689.430 ops/s
[info] # Warmup Iteration   3: 782248.310 ops/s
[info] # Warmup Iteration   4: 782600.900 ops/s
[info] # Warmup Iteration   5: 782834.856 ops/s
[info] Iteration   1: 782881.859 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 785096.956 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 784733.744 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 783162.090 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 783280.305 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   783830.991 ±(99.9%) 3883.793 ops/s [Average]
[info]   (min, avg, max) = (782881.859, 783830.991, 785096.956), stdev = 1008.609
[info]   CI (99.9%): [779947.198, 787714.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.69% complete, ETA 01:43:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87053.687 ops/s
[info] # Warmup Iteration   2: 329693.601 ops/s
[info] # Warmup Iteration   3: 336212.063 ops/s
[info] # Warmup Iteration   4: 336468.459 ops/s
[info] # Warmup Iteration   5: 338258.981 ops/s
[info] Iteration   1: 334721.552 ops/s
[info]                  ·gc.alloc.rate:               968.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          4552.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6267.514 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 338190.628 ops/s
[info]                  ·gc.alloc.rate:               948.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          4414.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3104.708 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 338056.334 ops/s
[info]                  ·gc.alloc.rate:               948.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          4416.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3105.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 338071.608 ops/s
[info]                  ·gc.alloc.rate:               959.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          4467.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6218.043 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 338642.923 ops/s
[info]                  ·gc.alloc.rate:               946.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          4399.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3106.747 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   337536.609 ±(99.9%) 6128.622 ops/s [Average]
[info]   (min, avg, max) = (334721.552, 337536.609, 338642.923), stdev = 1591.584
[info]   CI (99.9%): [331407.988, 343665.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   954.481 ±(99.9%) 36.220 MB/sec [Average]
[info]   (min, avg, max) = (946.602, 954.481, 968.577), stdev = 9.406
[info]   CI (99.9%): [918.261, 990.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4450.307 ±(99.9%) 242.498 B/op [Average]
[info]   (min, avg, max) = (4399.353, 4450.307, 4552.988), stdev = 62.976
[info]   CI (99.9%): [4207.809, 4692.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   934.374 ±(99.9%) 1406.408 MB/sec [Average]
[info]   (min, avg, max) = (667.146, 934.374, 1335.630), stdev = 365.240
[info]   CI (99.9%): [≈ 0, 2340.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4360.596 ±(99.9%) 6616.480 B/op [Average]
[info]   (min, avg, max) = (3104.708, 4360.596, 6267.514), stdev = 1718.279
[info]   CI (99.9%): [≈ 0, 10977.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22.89% complete, ETA 01:42:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21468.993 ops/s
[info] # Warmup Iteration   2: 42636.287 ops/s
[info] # Warmup Iteration   3: 42054.191 ops/s
[info] # Warmup Iteration   4: 43108.067 ops/s
[info] # Warmup Iteration   5: 43066.698 ops/s
[info] Iteration   1: 43143.825 ops/s
[info]                  ·gc.alloc.rate:               466.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          17000.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18662.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 43165.152 ops/s
[info]                  ·gc.alloc.rate:               474.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          17301.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24457.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 43355.622 ops/s
[info]                  ·gc.alloc.rate:      457.728 MB/sec
[info]                  ·gc.alloc.rate.norm: 16616.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 43299.176 ops/s
[info]                  ·gc.alloc.rate:               481.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          17516.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24382.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 43217.082 ops/s
[info]                  ·gc.alloc.rate:                   477.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              17406.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24451.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   43236.171 ±(99.9%) 345.347 ops/s [Average]
[info]   (min, avg, max) = (43143.825, 43236.171, 43355.622), stdev = 89.686
[info]   CI (99.9%): [42890.824, 43581.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   471.645 ±(99.9%) 37.563 MB/sec [Average]
[info]   (min, avg, max) = (457.728, 471.645, 481.962), stdev = 9.755
[info]   CI (99.9%): [434.083, 509.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17168.104 ±(99.9%) 1400.315 B/op [Average]
[info]   (min, avg, max) = (16616.010, 17168.104, 17516.990), stdev = 363.657
[info]   CI (99.9%): [15767.789, 18568.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   504.947 ±(99.9%) 1118.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.947, 671.464), stdev = 290.600
[info]   CI (99.9%): [≈ 0, 1623.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18390.894 ±(99.9%) 40739.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18390.894, 24457.787), stdev = 10579.913
[info]   CI (99.9%): [≈ 0, 59130.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.152 ±(99.9%) 1.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.758), stdev = 0.339
[info]   CI (99.9%): [≈ 0, 1.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.09% complete, ETA 01:42:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11604.115 ops/s
[info] # Warmup Iteration   2: 36288.905 ops/s
[info] # Warmup Iteration   3: 37517.419 ops/s
[info] # Warmup Iteration   4: 36975.302 ops/s
[info] # Warmup Iteration   5: 37625.336 ops/s
[info] Iteration   1: 37616.415 ops/s
[info]                  ·gc.alloc.rate:                   1940.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              81171.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84336.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 38574.489 ops/s
[info]                  ·gc.alloc.rate:                   1960.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              79975.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82162.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 37834.433 ops/s
[info]                  ·gc.alloc.rate:                   1936.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              80551.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83548.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 38622.942 ops/s
[info]                  ·gc.alloc.rate:                   1949.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              79417.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54563.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 38645.723 ops/s
[info]                  ·gc.alloc.rate:                   1990.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              81080.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81847.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.239 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38258.801 ±(99.9%) 1900.825 ops/s [Average]
[info]   (min, avg, max) = (37616.415, 38258.801, 38645.723), stdev = 493.638
[info]   CI (99.9%): [36357.976, 40159.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1955.490 ±(99.9%) 83.951 MB/sec [Average]
[info]   (min, avg, max) = (1936.857, 1955.490, 1990.869), stdev = 21.802
[info]   CI (99.9%): [1871.539, 2039.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80439.310 ±(99.9%) 2867.335 B/op [Average]
[info]   (min, avg, max) = (79417.735, 80439.310, 81171.538), stdev = 744.638
[info]   CI (99.9%): [77571.975, 83306.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.529 ±(99.9%) 1159.087 MB/sec [Average]
[info]   (min, avg, max) = (1339.089, 1877.529, 2015.794), stdev = 301.011
[info]   CI (99.9%): [718.442, 3036.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   77291.666 ±(99.9%) 49078.936 B/op [Average]
[info]   (min, avg, max) = (54563.848, 77291.666, 84336.469), stdev = 12745.644
[info]   CI (99.9%): [28212.730, 126370.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.518 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.766, 2.748), stdev = 1.173
[info]   CI (99.9%): [≈ 0, 5.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31.828 ±(99.9%) 188.960 B/op [Average]
[info]   (min, avg, max) = (0.848, 31.828, 114.966), stdev = 49.072
[info]   CI (99.9%): [≈ 0, 220.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:42:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.838 ops/s
[info] # Warmup Iteration   2: 257068.093 ops/s
[info] # Warmup Iteration   3: 292320.069 ops/s
[info] # Warmup Iteration   4: 295473.329 ops/s
[info] # Warmup Iteration   5: 296631.813 ops/s
[info] Iteration   1: 295221.135 ops/s
[info]                  ·gc.alloc.rate:                   315.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1683.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2727.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 294807.491 ops/s
[info]                  ·gc.alloc.rate:               318.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          1698.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2731.259 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 296802.179 ops/s
[info]                  ·gc.alloc.rate:      307.768 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 294236.286 ops/s
[info]                  ·gc.alloc.rate:                   322.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1726.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3559.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 297085.705 ops/s
[info]                  ·gc.alloc.rate:      308.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   295630.559 ±(99.9%) 4824.540 ops/s [Average]
[info]   (min, avg, max) = (294236.286, 295630.559, 297085.705), stdev = 1252.918
[info]   CI (99.9%): [290806.019, 300455.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   314.521 ±(99.9%) 24.999 MB/sec [Average]
[info]   (min, avg, max) = (307.768, 314.521, 322.747), stdev = 6.492
[info]   CI (99.9%): [289.523, 339.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1674.378 ±(99.9%) 160.370 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1674.378, 1726.307), stdev = 41.648
[info]   CI (99.9%): [1514.008, 1834.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   337.765 ±(99.9%) 1211.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.765, 665.520), stdev = 314.669
[info]   CI (99.9%): [≈ 0, 1549.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1803.663 ±(99.9%) 6473.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1803.663, 3559.725), stdev = 1681.052
[info]   CI (99.9%): [≈ 0, 8276.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.49% complete, ETA 01:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31989.685 ops/s
[info] # Warmup Iteration   2: 109369.232 ops/s
[info] # Warmup Iteration   3: 118826.420 ops/s
[info] # Warmup Iteration   4: 121320.158 ops/s
[info] # Warmup Iteration   5: 116797.253 ops/s
[info] Iteration   1: 117563.446 ops/s
[info]                  ·gc.alloc.rate:                   1402.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              18770.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17920.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 118464.879 ops/s
[info]                  ·gc.alloc.rate:                   1419.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              18851.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17797.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 121158.223 ops/s
[info]                  ·gc.alloc.rate:                   1438.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              18682.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17409.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 120411.263 ops/s
[info]                  ·gc.alloc.rate:                   1442.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              18853.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17499.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 117833.428 ops/s
[info]                  ·gc.alloc.rate:                   1424.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              19029.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17848.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   119086.248 ±(99.9%) 6186.048 ops/s [Average]
[info]   (min, avg, max) = (117563.446, 119086.248, 121158.223), stdev = 1606.497
[info]   CI (99.9%): [112900.199, 125272.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1425.349 ±(99.9%) 61.820 MB/sec [Average]
[info]   (min, avg, max) = (1402.310, 1425.349, 1442.466), stdev = 16.055
[info]   CI (99.9%): [1363.528, 1487.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18837.658 ±(99.9%) 494.067 B/op [Average]
[info]   (min, avg, max) = (18682.754, 18837.658, 19029.893), stdev = 128.308
[info]   CI (99.9%): [18343.591, 19331.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.776 ±(99.9%) 5.962 MB/sec [Average]
[info]   (min, avg, max) = (1336.226, 1338.776, 1340.256), stdev = 1.548
[info]   CI (99.9%): [1332.814, 1344.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17695.217 ±(99.9%) 870.333 B/op [Average]
[info]   (min, avg, max) = (17409.783, 17695.217, 17920.527), stdev = 226.023
[info]   CI (99.9%): [16824.884, 18565.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 5.210 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.841, 3.185), stdev = 1.353
[info]   CI (99.9%): [≈ 0, 6.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.951 ±(99.9%) 67.644 B/op [Average]
[info]   (min, avg, max) = (0.277, 10.951, 41.372), stdev = 17.567
[info]   CI (99.9%): [≈ 0, 78.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.69% complete, ETA 01:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302156.211 ops/s
[info] # Warmup Iteration   2: 475436.920 ops/s
[info] # Warmup Iteration   3: 481488.733 ops/s
[info] # Warmup Iteration   4: 486992.712 ops/s
[info] # Warmup Iteration   5: 483171.030 ops/s
[info] Iteration   1: 485555.950 ops/s
[info]                  ·gc.alloc.rate:               328.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          1063.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1658.285 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 487631.454 ops/s
[info]                  ·gc.alloc.rate:      317.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 485168.656 ops/s
[info]                  ·gc.alloc.rate:               330.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          1073.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1659.608 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 486472.895 ops/s
[info]                  ·gc.alloc.rate:      316.506 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 485877.762 ops/s
[info]                  ·gc.alloc.rate:                   335.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2172.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   486141.343 ±(99.9%) 3697.739 ops/s [Average]
[info]   (min, avg, max) = (485168.656, 486141.343, 487631.454), stdev = 960.291
[info]   CI (99.9%): [482443.604, 489839.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   325.708 ±(99.9%) 32.879 MB/sec [Average]
[info]   (min, avg, max) = (316.506, 325.708, 335.902), stdev = 8.539
[info]   CI (99.9%): [292.829, 358.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1054.528 ±(99.9%) 112.550 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1054.528, 1088.120), stdev = 29.229
[info]   CI (99.9%): [941.979, 1167.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.796 ±(99.9%) 1216.925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.796, 670.787), stdev = 316.032
[info]   CI (99.9%): [≈ 0, 1555.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1098.167 ±(99.9%) 3943.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1098.167, 2172.944), stdev = 1024.211
[info]   CI (99.9%): [≈ 0, 5042.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.90% complete, ETA 01:41:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4438.483 ops/s
[info] # Warmup Iteration   2: 38560.535 ops/s
[info] # Warmup Iteration   3: 41479.978 ops/s
[info] # Warmup Iteration   4: 40854.070 ops/s
[info] # Warmup Iteration   5: 42292.979 ops/s
[info] Iteration   1: 42279.550 ops/s
[info]                  ·gc.alloc.rate:                   2099.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              78128.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74836.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 42057.577 ops/s
[info]                  ·gc.alloc.rate:                   2075.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              77656.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74958.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42642.868 ops/s
[info]                  ·gc.alloc.rate:                   2113.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              78002.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73830.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 42688.993 ops/s
[info]                  ·gc.alloc.rate:                   2117.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              78080.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73787.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42510.555 ops/s
[info]                  ·gc.alloc.rate:               2122.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          78591.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74218.337 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   42435.908 ±(99.9%) 1018.855 ops/s [Average]
[info]   (min, avg, max) = (42057.577, 42435.908, 42688.993), stdev = 264.593
[info]   CI (99.9%): [41417.053, 43454.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2105.816 ±(99.9%) 73.742 MB/sec [Average]
[info]   (min, avg, max) = (2075.193, 2105.816, 2122.811), stdev = 19.151
[info]   CI (99.9%): [2032.074, 2179.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78091.947 ±(99.9%) 1290.637 B/op [Average]
[info]   (min, avg, max) = (77656.053, 78091.947, 78591.836), stdev = 335.174
[info]   CI (99.9%): [76801.310, 79382.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.182 ±(99.9%) 16.422 MB/sec [Average]
[info]   (min, avg, max) = (2000.485, 2004.182, 2011.245), stdev = 4.265
[info]   CI (99.9%): [1987.760, 2020.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74326.377 ±(99.9%) 2115.668 B/op [Average]
[info]   (min, avg, max) = (73787.863, 74326.377, 74958.825), stdev = 549.432
[info]   CI (99.9%): [72210.710, 76442.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.925 ±(99.9%) 7.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.925, 4.519), stdev = 2.010
[info]   CI (99.9%): [≈ 0, 8.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.405 ±(99.9%) 287.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.405, 168.152), stdev = 74.772
[info]   CI (99.9%): [≈ 0, 322.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24.10% complete, ETA 01:41:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26056.856 ops/s
[info] # Warmup Iteration   2: 81306.849 ops/s
[info] # Warmup Iteration   3: 86904.391 ops/s
[info] # Warmup Iteration   4: 87134.302 ops/s
[info] # Warmup Iteration   5: 87389.779 ops/s
[info] Iteration   1: 87082.757 ops/s
[info]                  ·gc.alloc.rate:               1626.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          29386.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36479.537 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 85878.348 ops/s
[info]                  ·gc.alloc.rate:                   1611.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              29528.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24666.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 84984.153 ops/s
[info]                  ·gc.alloc.rate:                   1581.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              29284.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24902.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 84542.170 ops/s
[info]                  ·gc.alloc.rate:                   1603.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              29824.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37429.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 85756.796 ops/s
[info]                  ·gc.alloc.rate:               1598.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          29325.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24597.872 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   85648.845 ±(99.9%) 3746.704 ops/s [Average]
[info]   (min, avg, max) = (84542.170, 85648.845, 87082.757), stdev = 973.007
[info]   CI (99.9%): [81902.140, 89395.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1604.002 ±(99.9%) 63.354 MB/sec [Average]
[info]   (min, avg, max) = (1581.468, 1604.002, 1626.057), stdev = 16.453
[info]   CI (99.9%): [1540.648, 1667.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   29470.054 ±(99.9%) 843.230 B/op [Average]
[info]   (min, avg, max) = (29284.277, 29470.054, 29824.963), stdev = 218.984
[info]   CI (99.9%): [28626.824, 30313.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1612.333 ±(99.9%) 1416.150 MB/sec [Average]
[info]   (min, avg, max) = (1340.466, 1612.333, 2018.508), stdev = 367.770
[info]   CI (99.9%): [196.183, 3028.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29615.257 ±(99.9%) 25834.120 B/op [Average]
[info]   (min, avg, max) = (24597.872, 29615.257, 37429.237), stdev = 6709.039
[info]   CI (99.9%): [3781.136, 55449.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 4.482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 2.727), stdev = 1.164
[info]   CI (99.9%): [≈ 0, 5.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   13.005 ±(99.9%) 82.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.005, 49.978), stdev = 21.328
[info]   CI (99.9%): [≈ 0, 95.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.30% complete, ETA 01:41:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26783.813 ops/s
[info] # Warmup Iteration   2: 72127.532 ops/s
[info] # Warmup Iteration   3: 74688.322 ops/s
[info] # Warmup Iteration   4: 73067.056 ops/s
[info] # Warmup Iteration   5: 75235.846 ops/s
[info] Iteration   1: 75430.641 ops/s
[info]                  ·gc.alloc.rate:               621.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          12962.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13968.412 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 75269.808 ops/s
[info]                  ·gc.alloc.rate:                   610.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              12756.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13998.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 75402.866 ops/s
[info]                  ·gc.alloc.rate:               619.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          12939.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13981.106 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 75533.277 ops/s
[info]                  ·gc.alloc.rate:               618.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          12874.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13956.122 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 75670.470 ops/s
[info]                  ·gc.alloc.rate:      599.647 MB/sec
[info]                  ·gc.alloc.rate.norm: 12472.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   75461.413 ±(99.9%) 577.457 ops/s [Average]
[info]   (min, avg, max) = (75269.808, 75461.413, 75670.470), stdev = 149.964
[info]   CI (99.9%): [74883.956, 76038.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   613.815 ±(99.9%) 34.777 MB/sec [Average]
[info]   (min, avg, max) = (599.647, 613.815, 621.280), stdev = 9.032
[info]   CI (99.9%): [579.037, 648.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12801.164 ±(99.9%) 772.502 B/op [Average]
[info]   (min, avg, max) = (12472.006, 12801.164, 12962.991), stdev = 200.616
[info]   CI (99.9%): [12028.662, 13573.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535.766 ±(99.9%) 1153.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.766, 670.027), stdev = 299.502
[info]   CI (99.9%): [≈ 0, 1689.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11180.822 ±(99.9%) 24067.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11180.822, 13998.471), stdev = 6250.289
[info]   CI (99.9%): [≈ 0, 35248.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.435), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.50% complete, ETA 01:40:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.789 ops/s
[info] # Warmup Iteration   2: 82222.893 ops/s
[info] # Warmup Iteration   3: 86514.580 ops/s
[info] # Warmup Iteration   4: 88040.877 ops/s
[info] # Warmup Iteration   5: 87980.510 ops/s
[info] Iteration   1: 88123.557 ops/s
[info]                  ·gc.alloc.rate:               518.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          9254.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11897.115 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 88359.990 ops/s
[info]                  ·gc.alloc.rate:      499.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87923.957 ops/s
[info]                  ·gc.alloc.rate:                   515.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              9222.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11923.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 87805.875 ops/s
[info]                  ·gc.alloc.rate:                   521.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11946.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88126.404 ops/s
[info]                  ·gc.alloc.rate:               519.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          9273.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11902.388 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   88067.957 ±(99.9%) 819.595 ops/s [Average]
[info]   (min, avg, max) = (87805.875, 88067.957, 88359.990), stdev = 212.846
[info]   CI (99.9%): [87248.362, 88887.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   514.808 ±(99.9%) 34.246 MB/sec [Average]
[info]   (min, avg, max) = (499.442, 514.808, 521.773), stdev = 8.894
[info]   CI (99.9%): [480.562, 549.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9199.921 ±(99.9%) 679.837 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9199.921, 9352.635), stdev = 176.551
[info]   CI (99.9%): [8520.084, 9879.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.078 ±(99.9%) 1147.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.078, 666.501), stdev = 298.000
[info]   CI (99.9%): [≈ 0, 1680.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   9533.914 ±(99.9%) 20522.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9533.914, 11946.845), stdev = 5329.656
[info]   CI (99.9%): [≈ 0, 30056.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.260), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.70% complete, ETA 01:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24711.644 ops/s
[info] # Warmup Iteration   2: 76322.523 ops/s
[info] # Warmup Iteration   3: 78573.763 ops/s
[info] # Warmup Iteration   4: 79080.553 ops/s
[info] # Warmup Iteration   5: 79167.559 ops/s
[info] Iteration   1: 78671.492 ops/s
[info]                  ·gc.alloc.rate:               482.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          9647.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10234.690 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 79117.173 ops/s
[info]                  ·gc.alloc.rate:               481.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          9575.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13277.978 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 79477.071 ops/s
[info]                  ·gc.alloc.rate:      468.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 9280.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 79281.794 ops/s
[info]                  ·gc.alloc.rate:                   480.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              9540.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13250.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 78485.346 ops/s
[info]                  ·gc.alloc.rate:               483.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          9702.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13398.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   79006.575 ±(99.9%) 1603.117 ops/s [Average]
[info]   (min, avg, max) = (78485.346, 79006.575, 79477.071), stdev = 416.324
[info]   CI (99.9%): [77403.458, 80609.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   479.367 ±(99.9%) 23.457 MB/sec [Average]
[info]   (min, avg, max) = (468.670, 479.367, 483.832), stdev = 6.092
[info]   CI (99.9%): [455.910, 502.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9548.976 ±(99.9%) 627.712 B/op [Average]
[info]   (min, avg, max) = (9280.005, 9548.976, 9702.246), stdev = 163.015
[info]   CI (99.9%): [8921.263, 10176.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.991 ±(99.9%) 1113.605 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.991, 668.145), stdev = 289.200
[info]   CI (99.9%): [≈ 0, 1616.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10032.285 ±(99.9%) 22196.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10032.285, 13398.241), stdev = 5764.306
[info]   CI (99.9%): [≈ 0, 32228.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.165 ±(99.9%) 1.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.827), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 1.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.90% complete, ETA 01:40:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46000.320 ops/s
[info] # Warmup Iteration   2: 85692.972 ops/s
[info] # Warmup Iteration   3: 85652.810 ops/s
[info] # Warmup Iteration   4: 87220.830 ops/s
[info] # Warmup Iteration   5: 87319.755 ops/s
[info] Iteration   1: 87249.876 ops/s
[info]                  ·gc.alloc.rate:               513.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          9249.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9228.709 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 87038.883 ops/s
[info]                  ·gc.alloc.rate:               511.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          9246.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12123.415 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 87159.995 ops/s
[info]                  ·gc.alloc.rate:                   507.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              9159.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12106.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 83004.575 ops/s
[info]                  ·gc.alloc.rate:      469.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 85772.982 ops/s
[info]                  ·gc.alloc.rate:               523.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          9597.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12314.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   86045.262 ±(99.9%) 6942.093 ops/s [Average]
[info]   (min, avg, max) = (83004.575, 86045.262, 87249.876), stdev = 1802.839
[info]   CI (99.9%): [79103.170, 92987.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   504.829 ±(99.9%) 79.975 MB/sec [Average]
[info]   (min, avg, max) = (469.192, 504.829, 523.243), stdev = 20.769
[info]   CI (99.9%): [424.854, 584.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9229.962 ±(99.9%) 967.416 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9229.962, 9597.893), stdev = 251.235
[info]   CI (99.9%): [8262.546, 10197.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.839 ±(99.9%) 1118.546 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.839, 671.337), stdev = 290.483
[info]   CI (99.9%): [≈ 0, 1623.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9154.595 ±(99.9%) 20314.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9154.595, 12314.403), stdev = 5275.505
[info]   CI (99.9%): [≈ 0, 29468.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 1.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.752), stdev = 0.336
[info]   CI (99.9%): [≈ 0, 1.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.10% complete, ETA 01:40:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48854.304 ops/s
[info] # Warmup Iteration   2: 86235.388 ops/s
[info] # Warmup Iteration   3: 85644.498 ops/s
[info] # Warmup Iteration   4: 86447.951 ops/s
[info] # Warmup Iteration   5: 87948.365 ops/s
[info] Iteration   1: 87825.147 ops/s
[info]                  ·gc.alloc.rate:               438.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          7854.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9168.086 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 87016.125 ops/s
[info]                  ·gc.alloc.rate:      437.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 7912.375 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87751.373 ops/s
[info]                  ·gc.alloc.rate:               446.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          8008.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12030.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87909.622 ops/s
[info]                  ·gc.alloc.rate:               453.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          8125.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12009.964 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 88161.292 ops/s
[info]                  ·gc.alloc.rate:      428.867 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   87732.712 ±(99.9%) 1653.277 ops/s [Average]
[info]   (min, avg, max) = (87016.125, 87732.712, 88161.292), stdev = 429.351
[info]   CI (99.9%): [86079.435, 89385.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   441.016 ±(99.9%) 36.651 MB/sec [Average]
[info]   (min, avg, max) = (428.867, 441.016, 453.863), stdev = 9.518
[info]   CI (99.9%): [404.365, 477.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7911.396 ±(99.9%) 677.329 B/op [Average]
[info]   (min, avg, max) = (7656.005, 7911.396, 8125.657), stdev = 175.900
[info]   CI (99.9%): [7234.068, 8588.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.641 ±(99.9%) 1326.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.641, 670.823), stdev = 344.534
[info]   CI (99.9%): [≈ 0, 1697.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6641.763 ±(99.9%) 23773.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6641.763, 12030.763), stdev = 6173.881
[info]   CI (99.9%): [≈ 0, 30415.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.30% complete, ETA 01:39:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 918.587 ops/s
[info] # Warmup Iteration   2: 8416.825 ops/s
[info] # Warmup Iteration   3: 9714.099 ops/s
[info] # Warmup Iteration   4: 9902.307 ops/s
[info] # Warmup Iteration   5: 9862.375 ops/s
[info] Iteration   1: 9946.808 ops/s
[info]                  ·gc.alloc.rate:                   1649.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              260955.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212160.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 9803.569 ops/s
[info]                  ·gc.alloc.rate:                   1663.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              267109.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323128.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 574.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9832.125 ops/s
[info]                  ·gc.alloc.rate:                   1651.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              264298.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214588.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9820.491 ops/s
[info]                  ·gc.alloc.rate:                   1670.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              267692.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214454.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9883.483 ops/s
[info]                  ·gc.alloc.rate:                   1655.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              263632.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     319293.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9857.295 ±(99.9%) 224.307 ops/s [Average]
[info]   (min, avg, max) = (9803.569, 9857.295, 9946.808), stdev = 58.252
[info]   CI (99.9%): [9632.988, 10081.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1658.233 ±(99.9%) 34.085 MB/sec [Average]
[info]   (min, avg, max) = (1649.494, 1658.233, 1670.665), stdev = 8.852
[info]   CI (99.9%): [1624.148, 1692.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   264737.814 ±(99.9%) 10557.888 B/op [Average]
[info]   (min, avg, max) = (260955.906, 264737.814, 267692.576), stdev = 2741.850
[info]   CI (99.9%): [254179.925, 275295.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1607.673 ±(99.9%) 1410.825 MB/sec [Average]
[info]   (min, avg, max) = (1338.409, 1607.673, 2012.709), stdev = 366.387
[info]   CI (99.9%): [196.848, 3018.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   256724.941 ±(99.9%) 226767.252 B/op [Average]
[info]   (min, avg, max) = (212160.367, 256724.941, 323128.239), stdev = 58890.735
[info]   CI (99.9%): [29957.689, 483492.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.003 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.795, 3.580), stdev = 1.559
[info]   CI (99.9%): [≈ 0, 6.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   127.598 ±(99.9%) 963.807 B/op [Average]
[info]   (min, avg, max) = (6.630, 127.598, 574.819), stdev = 250.297
[info]   CI (99.9%): [≈ 0, 1091.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.347
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.50% complete, ETA 01:39:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1438.085 ops/s
[info] # Warmup Iteration   2: 9484.486 ops/s
[info] # Warmup Iteration   3: 10100.082 ops/s
[info] # Warmup Iteration   4: 10153.844 ops/s
[info] # Warmup Iteration   5: 10127.267 ops/s
[info] Iteration   1: 10125.418 ops/s
[info]                  ·gc.alloc.rate:                   1562.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              242835.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208120.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 10091.907 ops/s
[info]                  ·gc.alloc.rate:                   1554.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              242383.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208904.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10061.738 ops/s
[info]                  ·gc.alloc.rate:                   1549.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              242414.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209631.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10184.122 ops/s
[info]                  ·gc.alloc.rate:                   1562.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              241490.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309549.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10220.241 ops/s
[info]                  ·gc.alloc.rate:               1563.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          240829.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205345.706 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10136.685 ±(99.9%) 250.892 ops/s [Average]
[info]   (min, avg, max) = (10061.738, 10136.685, 10220.241), stdev = 65.156
[info]   CI (99.9%): [9885.794, 10387.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1558.623 ±(99.9%) 23.967 MB/sec [Average]
[info]   (min, avg, max) = (1549.858, 1558.623, 1563.954), stdev = 6.224
[info]   CI (99.9%): [1534.656, 1582.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   241990.714 ±(99.9%) 3131.348 B/op [Average]
[info]   (min, avg, max) = (240829.839, 241990.714, 242835.159), stdev = 813.201
[info]   CI (99.9%): [238859.366, 245122.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.103 ±(99.9%) 1145.486 MB/sec [Average]
[info]   (min, avg, max) = (1333.520, 1471.103, 2003.228), stdev = 297.479
[info]   CI (99.9%): [325.617, 2616.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   228310.463 ±(99.9%) 174984.175 B/op [Average]
[info]   (min, avg, max) = (205345.706, 228310.463, 309549.188), stdev = 45442.835
[info]   CI (99.9%): [53326.288, 403294.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.900 ±(99.9%) 6.753 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.900, 4.020), stdev = 1.754
[info]   CI (99.9%): [≈ 0, 7.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   140.556 ±(99.9%) 1056.515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.556, 628.744), stdev = 274.374
[info]   CI (99.9%): [≈ 0, 1197.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.70% complete, ETA 01:39:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83265.604 ops/s
[info] # Warmup Iteration   2: 147888.546 ops/s
[info] # Warmup Iteration   3: 156096.893 ops/s
[info] # Warmup Iteration   4: 156152.556 ops/s
[info] # Warmup Iteration   5: 156082.277 ops/s
[info] Iteration   1: 156747.949 ops/s
[info]                  ·gc.alloc.rate:      407.924 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 151857.357 ops/s
[info]                  ·gc.alloc.rate:               421.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          4365.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5302.219 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 156141.738 ops/s
[info]                  ·gc.alloc.rate:                   430.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              4340.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6761.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 156273.699 ops/s
[info]                  ·gc.alloc.rate:      406.759 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 151093.880 ops/s
[info]                  ·gc.alloc.rate:               426.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          4441.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6987.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   154422.925 ±(99.9%) 10448.327 ops/s [Average]
[info]   (min, avg, max) = (151093.880, 154422.925, 156747.949), stdev = 2713.397
[info]   CI (99.9%): [143974.598, 164871.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   418.639 ±(99.9%) 41.772 MB/sec [Average]
[info]   (min, avg, max) = (406.759, 418.639, 430.664), stdev = 10.848
[info]   CI (99.9%): [376.867, 460.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4268.092 ±(99.9%) 621.642 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4268.092, 4441.837), stdev = 161.438
[info]   CI (99.9%): [3646.450, 4889.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.698 ±(99.9%) 1326.911 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.698, 671.061), stdev = 344.594
[info]   CI (99.9%): [≈ 0, 1697.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3810.197 ±(99.9%) 13622.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3810.197, 6987.222), stdev = 3537.840
[info]   CI (99.9%): [≈ 0, 17433.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.210), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25.90% complete, ETA 01:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 624.424 ops/s
[info] # Warmup Iteration   2: 4963.219 ops/s
[info] # Warmup Iteration   3: 5247.970 ops/s
[info] # Warmup Iteration   4: 5882.009 ops/s
[info] # Warmup Iteration   5: 5760.020 ops/s
[info] Iteration   1: 5859.992 ops/s
[info]                  ·gc.alloc.rate:               1513.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          406355.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 359156.513 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 5807.197 ops/s
[info]                  ·gc.alloc.rate:                   1493.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              404783.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362642.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 5784.720 ops/s
[info]                  ·gc.alloc.rate:                   1524.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              414868.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546578.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1178.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 5899.672 ops/s
[info]                  ·gc.alloc.rate:                   1539.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              410589.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     356039.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5882.483 ops/s
[info]                  ·gc.alloc.rate:                   1534.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              410529.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     356772.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5846.813 ±(99.9%) 189.281 ops/s [Average]
[info]   (min, avg, max) = (5784.720, 5846.813, 5899.672), stdev = 49.156
[info]   CI (99.9%): [5657.532, 6036.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1521.158 ±(99.9%) 70.453 MB/sec [Average]
[info]   (min, avg, max) = (1493.696, 1521.158, 1539.325), stdev = 18.296
[info]   CI (99.9%): [1450.705, 1591.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   409425.240 ±(99.9%) 15302.623 B/op [Average]
[info]   (min, avg, max) = (404783.674, 409425.240, 414868.477), stdev = 3974.043
[info]   CI (99.9%): [394122.617, 424727.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.641 ±(99.9%) 1159.111 MB/sec [Average]
[info]   (min, avg, max) = (1333.578, 1470.641, 2009.107), stdev = 301.018
[info]   CI (99.9%): [311.530, 2629.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   396237.966 ±(99.9%) 323772.013 B/op [Average]
[info]   (min, avg, max) = (356039.699, 396237.966, 546578.848), stdev = 84082.564
[info]   CI (99.9%): [72465.953, 720009.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.971 ±(99.9%) 7.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.971, 4.332), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   263.543 ±(99.9%) 1974.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 263.543, 1178.569), stdev = 512.654
[info]   CI (99.9%): [≈ 0, 2237.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 3.271
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26.10% complete, ETA 01:38:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 974.492 ops/s
[info] # Warmup Iteration   2: 9160.089 ops/s
[info] # Warmup Iteration   3: 9979.619 ops/s
[info] # Warmup Iteration   4: 10063.045 ops/s
[info] # Warmup Iteration   5: 10080.422 ops/s
[info] Iteration   1: 10013.021 ops/s
[info]                  ·gc.alloc.rate:               1582.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          248698.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211181.008 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 10234.543 ops/s
[info]                  ·gc.alloc.rate:                   1639.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              252053.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206723.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10246.823 ops/s
[info]                  ·gc.alloc.rate:                   1651.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              253660.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309415.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 578.748 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10272.920 ops/s
[info]                  ·gc.alloc.rate:               1641.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          251536.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205224.948 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 10256.723 ops/s
[info]                  ·gc.alloc.rate:               1642.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          252045.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205442.807 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   10204.806 ±(99.9%) 416.359 ops/s [Average]
[info]   (min, avg, max) = (10013.021, 10204.806, 10272.920), stdev = 108.127
[info]   CI (99.9%): [9788.447, 10621.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1631.730 ±(99.9%) 106.373 MB/sec [Average]
[info]   (min, avg, max) = (1582.989, 1631.730, 1651.540), stdev = 27.625
[info]   CI (99.9%): [1525.357, 1738.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   251598.822 ±(99.9%) 6960.707 B/op [Average]
[info]   (min, avg, max) = (248698.440, 251598.822, 253660.002), stdev = 1807.674
[info]   CI (99.9%): [244638.114, 258559.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1476.397 ±(99.9%) 1158.476 MB/sec [Average]
[info]   (min, avg, max) = (1338.936, 1476.397, 2014.558), stdev = 300.852
[info]   CI (99.9%): [317.921, 2634.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   227597.717 ±(99.9%) 176362.153 B/op [Average]
[info]   (min, avg, max) = (205224.948, 227597.717, 309415.869), stdev = 45800.691
[info]   CI (99.9%): [51235.563, 403959.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.768), stdev = 1.683
[info]   CI (99.9%): [≈ 0, 7.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   116.390 ±(99.9%) 995.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.390, 578.748), stdev = 258.470
[info]   CI (99.9%): [≈ 0, 1111.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.31% complete, ETA 01:38:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4963.026 ops/s
[info] # Warmup Iteration   2: 19163.363 ops/s
[info] # Warmup Iteration   3: 19933.721 ops/s
[info] # Warmup Iteration   4: 19930.272 ops/s
[info] # Warmup Iteration   5: 20022.043 ops/s
[info] Iteration   1: 19979.727 ops/s
[info]                  ·gc.alloc.rate:                   1553.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              122306.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105623.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 19918.639 ops/s
[info]                  ·gc.alloc.rate:               1549.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          122408.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106005.023 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 20040.095 ops/s
[info]                  ·gc.alloc.rate:                   1566.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              123048.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105464.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 20254.520 ops/s
[info]                  ·gc.alloc.rate:                   1583.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              122984.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156000.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.617 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 20204.660 ops/s
[info]                  ·gc.alloc.rate:               1567.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          122100.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104193.419 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   20079.528 ±(99.9%) 556.949 ops/s [Average]
[info]   (min, avg, max) = (19918.639, 20079.528, 20254.520), stdev = 144.638
[info]   CI (99.9%): [19522.579, 20636.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1564.157 ±(99.9%) 51.779 MB/sec [Average]
[info]   (min, avg, max) = (1549.456, 1564.157, 1583.422), stdev = 13.447
[info]   CI (99.9%): [1512.377, 1615.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122569.549 ±(99.9%) 1630.618 B/op [Average]
[info]   (min, avg, max) = (122100.171, 122569.549, 123048.914), stdev = 423.466
[info]   CI (99.9%): [120938.930, 124200.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.506 ±(99.9%) 1149.498 MB/sec [Average]
[info]   (min, avg, max) = (1337.685, 1474.506, 2008.504), stdev = 298.521
[info]   CI (99.9%): [325.008, 2624.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   115457.351 ±(99.9%) 87310.853 B/op [Average]
[info]   (min, avg, max) = (104193.419, 115457.351, 156000.201), stdev = 22674.351
[info]   CI (99.9%): [28146.498, 202768.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.664), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   58.197 ±(99.9%) 494.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.197, 287.725), stdev = 128.313
[info]   CI (99.9%): [≈ 0, 552.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.51% complete, ETA 01:38:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6074.431 ops/s
[info] # Warmup Iteration   2: 22014.805 ops/s
[info] # Warmup Iteration   3: 23487.571 ops/s
[info] # Warmup Iteration   4: 23129.386 ops/s
[info] # Warmup Iteration   5: 23256.923 ops/s
[info] Iteration   1: 23187.003 ops/s
[info]                  ·gc.alloc.rate:               1572.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          106708.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90877.792 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 22888.777 ops/s
[info]                  ·gc.alloc.rate:               1569.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          107861.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92110.529 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 23538.704 ops/s
[info]                  ·gc.alloc.rate:                   1614.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              107946.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134379.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261.823 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 23737.204 ops/s
[info]                  ·gc.alloc.rate:                   1614.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              107010.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88643.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23698.753 ops/s
[info]                  ·gc.alloc.rate:               1610.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          106972.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88737.912 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   23410.088 ±(99.9%) 1399.547 ops/s [Average]
[info]   (min, avg, max) = (22888.777, 23410.088, 23737.204), stdev = 363.458
[info]   CI (99.9%): [22010.541, 24809.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1596.231 ±(99.9%) 90.175 MB/sec [Average]
[info]   (min, avg, max) = (1569.143, 1596.231, 1614.585), stdev = 23.418
[info]   CI (99.9%): [1506.056, 1686.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   107299.847 ±(99.9%) 2173.305 B/op [Average]
[info]   (min, avg, max) = (106708.629, 107299.847, 107946.505), stdev = 564.400
[info]   CI (99.9%): [105126.543, 109473.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.487 ±(99.9%) 1156.728 MB/sec [Average]
[info]   (min, avg, max) = (1336.172, 1472.487, 2009.850), stdev = 300.399
[info]   CI (99.9%): [315.758, 2629.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   98949.832 ±(99.9%) 76473.536 B/op [Average]
[info]   (min, avg, max) = (88643.782, 98949.832, 134379.143), stdev = 19859.934
[info]   CI (99.9%): [22476.296, 175423.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.916), stdev = 1.749
[info]   CI (99.9%): [≈ 0, 7.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   52.641 ±(99.9%) 450.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.641, 261.823), stdev = 116.938
[info]   CI (99.9%): [≈ 0, 502.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.71% complete, ETA 01:37:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98244.080 ops/s
[info] # Warmup Iteration   2: 124838.942 ops/s
[info] # Warmup Iteration   3: 127418.442 ops/s
[info] # Warmup Iteration   4: 134233.241 ops/s
[info] # Warmup Iteration   5: 134154.973 ops/s
[info] Iteration   1: 134876.802 ops/s
[info]                  ·gc.alloc.rate:      298.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 133689.302 ops/s
[info]                  ·gc.alloc.rate:               309.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          3643.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6022.738 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 134806.687 ops/s
[info]                  ·gc.alloc.rate:      298.069 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 133787.783 ops/s
[info]                  ·gc.alloc.rate:                   312.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              3677.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6018.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.490 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 134640.078 ops/s
[info]                  ·gc.alloc.rate:      297.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   134360.130 ±(99.9%) 2213.974 ops/s [Average]
[info]   (min, avg, max) = (133689.302, 134360.130, 134876.802), stdev = 574.962
[info]   CI (99.9%): [132146.157, 136574.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   303.237 ±(99.9%) 27.936 MB/sec [Average]
[info]   (min, avg, max) = (297.707, 303.237, 312.641), stdev = 7.255
[info]   CI (99.9%): [275.301, 331.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3552.242 ±(99.9%) 383.582 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3552.242, 3677.254), stdev = 99.615
[info]   CI (99.9%): [3168.660, 3935.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.658 ±(99.9%) 1079.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.658, 511.679), stdev = 280.239
[info]   CI (99.9%): [≈ 0, 1283.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2408.213 ±(99.9%) 12697.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2408.213, 6022.738), stdev = 3297.582
[info]   CI (99.9%): [≈ 0, 15106.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.098 ±(99.9%) 0.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.490), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26.91% complete, ETA 01:37:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101622.780 ops/s
[info] # Warmup Iteration   2: 136523.050 ops/s
[info] # Warmup Iteration   3: 140361.442 ops/s
[info] # Warmup Iteration   4: 140427.679 ops/s
[info] # Warmup Iteration   5: 140480.391 ops/s
[info] Iteration   1: 140000.646 ops/s
[info]                  ·gc.alloc.rate:      0.940 MB/sec
[info]                  ·gc.alloc.rate.norm: 10.560 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 140461.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 140473.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 140353.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 140462.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   140350.187 ±(99.9%) 775.609 ops/s [Average]
[info]   (min, avg, max) = (140000.646, 140350.187, 140473.063), stdev = 201.423
[info]   CI (99.9%): [139574.578, 141125.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.188 ±(99.9%) 1.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.188, 0.940), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.115 ±(99.9%) 18.180 B/op [Average]
[info]   (min, avg, max) = (0.003, 2.115, 10.560), stdev = 4.721
[info]   CI (99.9%): [≈ 0, 20.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.11% complete, ETA 01:37:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8202.445 ops/s
[info] # Warmup Iteration   2: 22200.941 ops/s
[info] # Warmup Iteration   3: 23208.273 ops/s
[info] # Warmup Iteration   4: 23411.480 ops/s
[info] # Warmup Iteration   5: 23462.887 ops/s
[info] Iteration   1: 22968.098 ops/s
[info]                  ·gc.alloc.rate:                   1607.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              110130.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137713.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.706 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 23474.998 ops/s
[info]                  ·gc.alloc.rate:                   1625.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              109005.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89900.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 23572.726 ops/s
[info]                  ·gc.alloc.rate:                   1632.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              108986.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89438.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23296.508 ops/s
[info]                  ·gc.alloc.rate:               1637.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          110639.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 135454.005 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 23408.196 ops/s
[info]                  ·gc.alloc.rate:               1620.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          108908.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89758.930 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   23344.105 ±(99.9%) 897.197 ops/s [Average]
[info]   (min, avg, max) = (22968.098, 23344.105, 23572.726), stdev = 232.999
[info]   CI (99.9%): [22446.908, 24241.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1624.702 ±(99.9%) 45.609 MB/sec [Average]
[info]   (min, avg, max) = (1607.198, 1624.702, 1637.869), stdev = 11.844
[info]   CI (99.9%): [1579.093, 1670.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109534.154 ±(99.9%) 3073.487 B/op [Average]
[info]   (min, avg, max) = (108908.208, 109534.154, 110639.413), stdev = 798.175
[info]   CI (99.9%): [106460.668, 112607.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1606.152 ±(99.9%) 1410.730 MB/sec [Average]
[info]   (min, avg, max) = (1335.316, 1606.152, 2009.727), stdev = 366.362
[info]   CI (99.9%): [195.422, 3016.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108453.119 ±(99.9%) 98933.022 B/op [Average]
[info]   (min, avg, max) = (89438.280, 108453.119, 137713.468), stdev = 25692.592
[info]   CI (99.9%): [9520.096, 207386.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.821 ±(99.9%) 5.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.821, 3.145), stdev = 1.351
[info]   CI (99.9%): [≈ 0, 6.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54.993 ±(99.9%) 348.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.993, 210.887), stdev = 90.543
[info]   CI (99.9%): [≈ 0, 403.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27.31% complete, ETA 01:37:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5555.982 ops/s
[info] # Warmup Iteration   2: 9370.110 ops/s
[info] # Warmup Iteration   3: 9485.614 ops/s
[info] # Warmup Iteration   4: 9736.360 ops/s
[info] # Warmup Iteration   5: 9790.922 ops/s
[info] Iteration   1: 9777.349 ops/s
[info]                  ·gc.alloc.rate:               858.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          138159.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108192.370 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 9719.265 ops/s
[info]                  ·gc.alloc.rate:               853.470 MB/sec
[info]                  ·gc.alloc.rate.norm:          138199.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108837.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9762.153 ops/s
[info]                  ·gc.alloc.rate:                   878.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              141556.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216717.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9780.708 ops/s
[info]                  ·gc.alloc.rate:               851.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          137039.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108255.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 9771.403 ops/s
[info]                  ·gc.alloc.rate:               861.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          138724.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108354.999 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   9762.176 ±(99.9%) 96.269 ops/s [Average]
[info]   (min, avg, max) = (9719.265, 9762.176, 9780.708), stdev = 25.001
[info]   CI (99.9%): [9665.906, 9858.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   860.632 ±(99.9%) 40.481 MB/sec [Average]
[info]   (min, avg, max) = (851.784, 860.632, 878.136), stdev = 10.513
[info]   CI (99.9%): [820.151, 901.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   138735.717 ±(99.9%) 6516.343 B/op [Average]
[info]   (min, avg, max) = (137039.061, 138735.717, 141556.438), stdev = 1692.274
[info]   CI (99.9%): [132219.374, 145252.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806.884 ±(99.9%) 1157.024 MB/sec [Average]
[info]   (min, avg, max) = (672.138, 806.884, 1344.391), stdev = 300.475
[info]   CI (99.9%): [≈ 0, 1963.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   130071.549 ±(99.9%) 186513.773 B/op [Average]
[info]   (min, avg, max) = (108192.370, 130071.549, 216717.162), stdev = 48437.035
[info]   CI (99.9%): [≈ 0, 316585.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.342 ±(99.9%) 11.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.342, 6.712), stdev = 3.002
[info]   CI (99.9%): [≈ 0, 12.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.51% complete, ETA 01:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40697.805 ops/s
[info] # Warmup Iteration   2: 111631.957 ops/s
[info] # Warmup Iteration   3: 118628.951 ops/s
[info] # Warmup Iteration   4: 123648.575 ops/s
[info] # Warmup Iteration   5: 124278.382 ops/s
[info] Iteration   1: 123635.165 ops/s
[info]                  ·gc.alloc.rate:               1749.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          22275.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25643.692 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 124329.937 ops/s
[info]                  ·gc.alloc.rate:                   1770.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              22411.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17016.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 123590.442 ops/s
[info]                  ·gc.alloc.rate:                   1786.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              22748.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25592.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 124021.781 ops/s
[info]                  ·gc.alloc.rate:               1751.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          22228.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16991.324 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 123798.321 ops/s
[info]                  ·gc.alloc.rate:               1776.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          22584.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25532.475 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   123875.129 ±(99.9%) 1175.686 ops/s [Average]
[info]   (min, avg, max) = (123590.442, 123875.129, 124329.937), stdev = 305.322
[info]   CI (99.9%): [122699.443, 125050.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1766.975 ±(99.9%) 61.131 MB/sec [Average]
[info]   (min, avg, max) = (1749.719, 1766.975, 1786.409), stdev = 15.876
[info]   CI (99.9%): [1705.843, 1828.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22449.799 ±(99.9%) 834.438 B/op [Average]
[info]   (min, avg, max) = (22228.573, 22449.799, 22748.159), stdev = 216.701
[info]   CI (99.9%): [21615.361, 23284.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.147 ±(99.9%) 1411.288 MB/sec [Average]
[info]   (min, avg, max) = (1339.062, 1743.147, 2014.265), stdev = 366.507
[info]   CI (99.9%): [331.859, 3154.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22155.373 ±(99.9%) 18107.952 B/op [Average]
[info]   (min, avg, max) = (16991.324, 22155.373, 25643.692), stdev = 4702.578
[info]   CI (99.9%): [4047.421, 40263.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.560), stdev = 1.579
[info]   CI (99.9%): [≈ 0, 6.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.330 ±(99.9%) 76.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.330, 45.062), stdev = 19.986
[info]   CI (99.9%): [≈ 0, 86.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27.71% complete, ETA 01:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.680 ops/s
[info] # Warmup Iteration   2: 537939.561 ops/s
[info] # Warmup Iteration   3: 541691.626 ops/s
[info] # Warmup Iteration   4: 547365.487 ops/s
[info] # Warmup Iteration   5: 549748.424 ops/s
[info] Iteration   1: 548146.289 ops/s
[info]                  ·gc.alloc.rate:               581.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          1668.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1910.748 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 548206.482 ops/s
[info]                  ·gc.alloc.rate:               589.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          1693.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1910.553 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 548292.668 ops/s
[info]                  ·gc.alloc.rate:                   588.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              1690.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1911.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 565293.800 ops/s
[info]                  ·gc.alloc.rate:                   607.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              1690.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 565082.228 ops/s
[info]                  ·gc.alloc.rate:               609.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          1696.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1856.328 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   555004.293 ±(99.9%) 35798.933 ops/s [Average]
[info]   (min, avg, max) = (548146.289, 555004.293, 565293.800), stdev = 9296.869
[info]   CI (99.9%): [519205.360, 590803.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   595.214 ±(99.9%) 47.412 MB/sec [Average]
[info]   (min, avg, max) = (581.174, 595.214, 609.042), stdev = 12.313
[info]   CI (99.9%): [547.802, 642.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1687.820 ±(99.9%) 42.051 B/op [Average]
[info]   (min, avg, max) = (1668.769, 1687.820, 1696.245), stdev = 10.920
[info]   CI (99.9%): [1645.769, 1729.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.819 ±(99.9%) 1.665 MB/sec [Average]
[info]   (min, avg, max) = (665.446, 665.819, 666.520), stdev = 0.432
[info]   CI (99.9%): [664.155, 667.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1888.522 ±(99.9%) 117.601 B/op [Average]
[info]   (min, avg, max) = (1853.833, 1888.522, 1911.146), stdev = 30.541
[info]   CI (99.9%): [1770.920, 2006.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.91% complete, ETA 01:36:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98808.020 ops/s
[info] # Warmup Iteration   2: 333422.250 ops/s
[info] # Warmup Iteration   3: 354222.253 ops/s
[info] # Warmup Iteration   4: 345977.086 ops/s
[info] # Warmup Iteration   5: 348370.064 ops/s
[info] Iteration   1: 354077.439 ops/s
[info]                  ·gc.alloc.rate:                   498.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              2216.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2273.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 355032.795 ops/s
[info]                  ·gc.alloc.rate:               505.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          2240.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2951.552 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 345144.438 ops/s
[info]                  ·gc.alloc.rate:      468.621 MB/sec
[info]                  ·gc.alloc.rate.norm: 2136.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 353558.822 ops/s
[info]                  ·gc.alloc.rate:                   502.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              2234.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2963.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 351385.651 ops/s
[info]                  ·gc.alloc.rate:               493.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          2208.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2986.648 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   351839.829 ±(99.9%) 15304.966 ops/s [Average]
[info]   (min, avg, max) = (345144.438, 351839.829, 355032.795), stdev = 3974.651
[info]   CI (99.9%): [336534.863, 367144.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   493.578 ±(99.9%) 56.567 MB/sec [Average]
[info]   (min, avg, max) = (468.621, 493.578, 505.521), stdev = 14.690
[info]   CI (99.9%): [437.012, 550.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2207.091 ±(99.9%) 161.186 B/op [Average]
[info]   (min, avg, max) = (2136.001, 2207.091, 2240.965), stdev = 41.860
[info]   CI (99.9%): [2045.905, 2368.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.064 ±(99.9%) 1111.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.064, 666.789), stdev = 288.527
[info]   CI (99.9%): [≈ 0, 1613.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2235.178 ±(99.9%) 4948.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2235.178, 2986.648), stdev = 1285.132
[info]   CI (99.9%): [≈ 0, 7183.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.11% complete, ETA 01:36:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353301.300 ops/s
[info] # Warmup Iteration   2: 761350.529 ops/s
[info] # Warmup Iteration   3: 769089.364 ops/s
[info] # Warmup Iteration   4: 748974.111 ops/s
[info] # Warmup Iteration   5: 745026.330 ops/s
[info] Iteration   1: 747437.982 ops/s
[info]                  ·gc.alloc.rate:               503.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          1059.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1077.202 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 746855.114 ops/s
[info]                  ·gc.alloc.rate:               510.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          1075.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1412.863 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 739284.427 ops/s
[info]                  ·gc.alloc.rate:                   507.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1081.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1427.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 749330.458 ops/s
[info]                  ·gc.alloc.rate:      488.776 MB/sec
[info]                  ·gc.alloc.rate.norm: 1026.391 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 740842.587 ops/s
[info]                  ·gc.alloc.rate:               510.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          1083.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1425.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   744750.114 ±(99.9%) 16979.736 ops/s [Average]
[info]   (min, avg, max) = (739284.427, 744750.114, 749330.458), stdev = 4409.584
[info]   CI (99.9%): [727770.377, 761729.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   504.058 ±(99.9%) 34.794 MB/sec [Average]
[info]   (min, avg, max) = (488.776, 504.058, 510.488), stdev = 9.036
[info]   CI (99.9%): [469.263, 538.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1065.169 ±(99.9%) 91.142 B/op [Average]
[info]   (min, avg, max) = (1026.391, 1065.169, 1083.553), stdev = 23.669
[info]   CI (99.9%): [974.027, 1156.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.779 ±(99.9%) 1118.525 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.779, 671.084), stdev = 290.477
[info]   CI (99.9%): [≈ 0, 1623.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1068.634 ±(99.9%) 2371.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1068.634, 1427.386), stdev = 615.784
[info]   CI (99.9%): [≈ 0, 3439.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.31% complete, ETA 01:35:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6764.629 ops/s
[info] # Warmup Iteration   2: 70209.809 ops/s
[info] # Warmup Iteration   3: 74305.367 ops/s
[info] # Warmup Iteration   4: 77047.043 ops/s
[info] # Warmup Iteration   5: 77194.204 ops/s
[info] Iteration   1: 77894.166 ops/s
[info]                  ·gc.alloc.rate:                   3183.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              64314.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53911.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 75714.579 ops/s
[info]                  ·gc.alloc.rate:                   3150.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              65479.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69437.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 76355.568 ops/s
[info]                  ·gc.alloc.rate:               3151.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          64934.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55282.161 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 76840.771 ops/s
[info]                  ·gc.alloc.rate:               3197.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          65471.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3364.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68902.680 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 77362.282 ops/s
[info]                  ·gc.alloc.rate:               3218.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          65472.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3376.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68680.881 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   76833.473 ±(99.9%) 3270.260 ops/s [Average]
[info]   (min, avg, max) = (75714.579, 76833.473, 77894.166), stdev = 849.276
[info]   CI (99.9%): [73563.213, 80103.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3179.976 ±(99.9%) 113.900 MB/sec [Average]
[info]   (min, avg, max) = (3150.075, 3179.976, 3218.316), stdev = 29.579
[info]   CI (99.9%): [3066.076, 3293.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65134.641 ±(99.9%) 1981.712 B/op [Average]
[info]   (min, avg, max) = (64314.550, 65134.641, 65479.561), stdev = 514.644
[info]   CI (99.9%): [63152.929, 67116.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3086.443 ±(99.9%) 1445.485 MB/sec [Average]
[info]   (min, avg, max) = (2668.264, 3086.443, 3376.008), stdev = 375.388
[info]   CI (99.9%): [1640.959, 4531.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63242.911 ±(99.9%) 30468.118 B/op [Average]
[info]   (min, avg, max) = (53911.345, 63242.911, 69437.488), stdev = 7912.474
[info]   CI (99.9%): [32774.793, 93711.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.339 ±(99.9%) 2.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 1.262), stdev = 0.549
[info]   CI (99.9%): [≈ 0, 2.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28.51% complete, ETA 01:35:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78207.789 ops/s
[info] # Warmup Iteration   2: 227286.427 ops/s
[info] # Warmup Iteration   3: 231349.245 ops/s
[info] # Warmup Iteration   4: 224738.826 ops/s
[info] # Warmup Iteration   5: 226312.777 ops/s
[info] Iteration   1: 225045.100 ops/s
[info]                  ·gc.alloc.rate:                   1281.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              8961.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9345.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 231744.347 ops/s
[info]                  ·gc.alloc.rate:               1321.114 MB/sec
[info]                  ·gc.alloc.rate.norm:          8971.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9077.474 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 233476.876 ops/s
[info]                  ·gc.alloc.rate:               1337.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          9017.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9016.841 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 223397.052 ops/s
[info]                  ·gc.alloc.rate:                   1310.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              9231.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9435.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 232889.366 ops/s
[info]                  ·gc.alloc.rate:               1339.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          9048.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9064.286 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   229310.548 ±(99.9%) 18189.258 ops/s [Average]
[info]   (min, avg, max) = (223397.052, 229310.548, 233476.876), stdev = 4723.693
[info]   CI (99.9%): [211121.290, 247499.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1317.954 ±(99.9%) 90.765 MB/sec [Average]
[info]   (min, avg, max) = (1281.627, 1317.954, 1339.033), stdev = 23.571
[info]   CI (99.9%): [1227.189, 1408.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9046.215 ±(99.9%) 420.630 B/op [Average]
[info]   (min, avg, max) = (8961.463, 9046.215, 9231.160), stdev = 109.236
[info]   CI (99.9%): [8625.584, 9466.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1338.288 ±(99.9%) 7.742 MB/sec [Average]
[info]   (min, avg, max) = (1336.595, 1338.288, 1341.309), stdev = 2.011
[info]   CI (99.9%): [1330.546, 1346.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9187.972 ±(99.9%) 727.945 B/op [Average]
[info]   (min, avg, max) = (9016.841, 9187.972, 9435.448), stdev = 189.045
[info]   CI (99.9%): [8460.027, 9915.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.147), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:35:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48941.181 ops/s
[info] # Warmup Iteration   2: 198264.876 ops/s
[info] # Warmup Iteration   3: 195557.774 ops/s
[info] # Warmup Iteration   4: 201951.913 ops/s
[info] # Warmup Iteration   5: 200583.650 ops/s
[info] Iteration   1: 201761.823 ops/s
[info]                  ·gc.alloc.rate:                   1464.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              11427.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10456.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 201776.153 ops/s
[info]                  ·gc.alloc.rate:                   1474.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              11500.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10461.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 201661.815 ops/s
[info]                  ·gc.alloc.rate:                   1500.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              11709.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15716.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 202142.273 ops/s
[info]                  ·gc.alloc.rate:                   1489.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              11596.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10435.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 202767.361 ops/s
[info]                  ·gc.alloc.rate:               1494.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          11604.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10382.401 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   202021.885 ±(99.9%) 1751.825 ops/s [Average]
[info]   (min, avg, max) = (201661.815, 202021.885, 202767.361), stdev = 454.943
[info]   CI (99.9%): [200270.060, 203773.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1484.813 ±(99.9%) 56.723 MB/sec [Average]
[info]   (min, avg, max) = (1464.952, 1484.813, 1500.379), stdev = 14.731
[info]   CI (99.9%): [1428.090, 1541.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11567.501 ±(99.9%) 414.228 B/op [Average]
[info]   (min, avg, max) = (11427.485, 11567.501, 11709.004), stdev = 107.574
[info]   CI (99.9%): [11153.273, 11981.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.682 ±(99.9%) 1160.666 MB/sec [Average]
[info]   (min, avg, max) = (1337.514, 1474.682, 2013.875), stdev = 301.421
[info]   CI (99.9%): [314.016, 2635.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11490.482 ±(99.9%) 9097.294 B/op [Average]
[info]   (min, avg, max) = (10382.401, 11490.482, 15716.345), stdev = 2362.538
[info]   CI (99.9%): [2393.187, 20587.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.987 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.497), stdev = 1.555
[info]   CI (99.9%): [≈ 0, 6.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.589 ±(99.9%) 46.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.589, 27.294), stdev = 12.134
[info]   CI (99.9%): [≈ 0, 52.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.92% complete, ETA 01:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.819 ops/s
[info] # Warmup Iteration   2: 603442.908 ops/s
[info] # Warmup Iteration   3: 640449.957 ops/s
[info] # Warmup Iteration   4: 625746.797 ops/s
[info] # Warmup Iteration   5: 655343.223 ops/s
[info] Iteration   1: 655604.603 ops/s
[info]                  ·gc.alloc.rate:                   369.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              887.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 660892.594 ops/s
[info]                  ·gc.alloc.rate:      359.470 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 657330.196 ops/s
[info]                  ·gc.alloc.rate:               374.329 MB/sec
[info]                  ·gc.alloc.rate.norm:          895.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1594.977 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 657063.749 ops/s
[info]                  ·gc.alloc.rate:      357.382 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 654639.677 ops/s
[info]                  ·gc.alloc.rate:               370.988 MB/sec
[info]                  ·gc.alloc.rate.norm:          891.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1601.564 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   657106.164 ±(99.9%) 9178.614 ops/s [Average]
[info]   (min, avg, max) = (654639.677, 657106.164, 660892.594), stdev = 2383.657
[info]   CI (99.9%): [647927.550, 666284.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   366.406 ±(99.9%) 28.896 MB/sec [Average]
[info]   (min, avg, max) = (357.382, 366.406, 374.329), stdev = 7.504
[info]   CI (99.9%): [337.510, 395.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   877.531 ±(99.9%) 76.450 B/op [Average]
[info]   (min, avg, max) = (856.001, 877.531, 895.849), stdev = 19.854
[info]   CI (99.9%): [801.081, 953.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.847 ±(99.9%) 1319.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.847, 666.458), stdev = 342.583
[info]   CI (99.9%): [≈ 0, 1688.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   884.942 ±(99.9%) 3164.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 884.942, 1601.564), stdev = 821.850
[info]   CI (99.9%): [≈ 0, 4049.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.12% complete, ETA 01:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300488.875 ops/s
[info] # Warmup Iteration   2: 648215.778 ops/s
[info] # Warmup Iteration   3: 656115.960 ops/s
[info] # Warmup Iteration   4: 645418.688 ops/s
[info] # Warmup Iteration   5: 655862.105 ops/s
[info] Iteration   1: 650427.813 ops/s
[info]                  ·gc.alloc.rate:               499.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1237.962 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 653568.440 ops/s
[info]                  ·gc.alloc.rate:               503.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          1211.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1603.286 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 655532.369 ops/s
[info]                  ·gc.alloc.rate:                   502.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              1205.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1598.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 659057.555 ops/s
[info]                  ·gc.alloc.rate:      489.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 659786.096 ops/s
[info]                  ·gc.alloc.rate:                   514.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1226.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1590.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   655674.455 ±(99.9%) 14954.894 ops/s [Average]
[info]   (min, avg, max) = (650427.813, 655674.455, 659786.096), stdev = 3883.738
[info]   CI (99.9%): [640719.561, 670629.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   501.645 ±(99.9%) 34.566 MB/sec [Average]
[info]   (min, avg, max) = (489.133, 501.645, 514.252), stdev = 8.977
[info]   CI (99.9%): [467.079, 536.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1204.064 ±(99.9%) 83.709 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1204.064, 1226.725), stdev = 21.739
[info]   CI (99.9%): [1120.355, 1287.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.040 ±(99.9%) 1110.955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.040, 666.813), stdev = 288.512
[info]   CI (99.9%): [≈ 0, 1612.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1206.077 ±(99.9%) 2664.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1206.077, 1603.286), stdev = 691.971
[info]   CI (99.9%): [≈ 0, 3870.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.32% complete, ETA 01:34:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 515191.859 ops/s
[info] # Warmup Iteration   2: 999730.533 ops/s
[info] # Warmup Iteration   3: 1043374.301 ops/s
[info] # Warmup Iteration   4: 1103323.197 ops/s
[info] # Warmup Iteration   5: 1110995.409 ops/s
[info] Iteration   1: 1109183.124 ops/s
[info]                  ·gc.alloc.rate:                   628.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              892.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1110269.728 ops/s
[info]                  ·gc.alloc.rate:               640.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          907.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 950.457 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1098289.729 ops/s
[info]                  ·gc.alloc.rate:               617.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 961.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1094654.708 ops/s
[info]                  ·gc.alloc.rate:               613.402 MB/sec
[info]                  ·gc.alloc.rate.norm:          881.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 964.947 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1115126.173 ops/s
[info]                  ·gc.alloc.rate:      606.538 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1105504.692 ±(99.9%) 33268.938 ops/s [Average]
[info]   (min, avg, max) = (1094654.708, 1105504.692, 1115126.173), stdev = 8639.838
[info]   CI (99.9%): [1072235.754, 1138773.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   621.237 ±(99.9%) 51.255 MB/sec [Average]
[info]   (min, avg, max) = (606.538, 621.237, 640.112), stdev = 13.311
[info]   CI (99.9%): [569.982, 672.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   884.298 ±(99.9%) 72.272 B/op [Average]
[info]   (min, avg, max) = (856.000, 884.298, 907.423), stdev = 18.769
[info]   CI (99.9%): [812.025, 956.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.756 ±(99.9%) 1155.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.756, 671.441), stdev = 300.056
[info]   CI (99.9%): [≈ 0, 1692.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   765.702 ±(99.9%) 1648.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 765.702, 964.947), stdev = 428.087
[info]   CI (99.9%): [≈ 0, 2414.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.52% complete, ETA 01:34:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 697290.732 ops/s
[info] # Warmup Iteration   2: 1137710.845 ops/s
[info] # Warmup Iteration   3: 1177328.471 ops/s
[info] # Warmup Iteration   4: 1190242.731 ops/s
[info] # Warmup Iteration   5: 1174582.422 ops/s
[info] Iteration   1: 1189373.778 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1189425.075 ops/s
[info]                  ·gc.alloc.rate:      0.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.261 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1189704.724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1189990.477 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1189815.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1189661.854 ±(99.9%) 1004.868 ops/s [Average]
[info]   (min, avg, max) = (1189373.778, 1189661.854, 1189990.477), stdev = 260.961
[info]   CI (99.9%): [1188656.985, 1190666.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.191 ±(99.9%) 1.641 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.191, 0.953), stdev = 0.426
[info]   CI (99.9%): [≈ 0, 1.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.253 ±(99.9%) 2.171 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.253, 1.261), stdev = 0.564
[info]   CI (99.9%): [≈ 0, 2.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.72% complete, ETA 01:33:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9293.565 ops/s
[info] # Warmup Iteration   2: 33079.655 ops/s
[info] # Warmup Iteration   3: 34686.882 ops/s
[info] # Warmup Iteration   4: 34415.874 ops/s
[info] # Warmup Iteration   5: 34915.339 ops/s
[info] Iteration   1: 34781.385 ops/s
[info]                  ·gc.alloc.rate:                   1964.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              88890.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91073.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35080.981 ops/s
[info]                  ·gc.alloc.rate:                   1990.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              89291.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90180.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.829 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35107.432 ops/s
[info]                  ·gc.alloc.rate:                   2003.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              89804.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89862.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35147.052 ops/s
[info]                  ·gc.alloc.rate:                   1992.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              89207.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89757.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.729 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35255.660 ops/s
[info]                  ·gc.alloc.rate:                   2025.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              90425.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89614.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.859 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   35074.502 ±(99.9%) 681.046 ops/s [Average]
[info]   (min, avg, max) = (34781.385, 35074.502, 35255.660), stdev = 176.865
[info]   CI (99.9%): [34393.456, 35755.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1995.397 ±(99.9%) 85.409 MB/sec [Average]
[info]   (min, avg, max) = (1964.467, 1995.397, 2025.640), stdev = 22.180
[info]   CI (99.9%): [1909.988, 2080.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89523.955 ±(99.9%) 2316.352 B/op [Average]
[info]   (min, avg, max) = (88890.582, 89523.955, 90425.876), stdev = 601.549
[info]   CI (99.9%): [87207.604, 91840.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2008.092 ±(99.9%) 13.326 MB/sec [Average]
[info]   (min, avg, max) = (2004.861, 2008.092, 2012.714), stdev = 3.461
[info]   CI (99.9%): [1994.766, 2021.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   90097.768 ±(99.9%) 2248.721 B/op [Average]
[info]   (min, avg, max) = (89614.128, 90097.768, 91073.715), stdev = 583.986
[info]   CI (99.9%): [87849.048, 92346.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 5.068 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.845, 3.081), stdev = 1.316
[info]   CI (99.9%): [≈ 0, 5.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   38.151 ±(99.9%) 229.303 B/op [Average]
[info]   (min, avg, max) = (0.933, 38.151, 139.406), stdev = 59.549
[info]   CI (99.9%): [≈ 0, 267.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29.92% complete, ETA 01:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61813.683 ops/s
[info] # Warmup Iteration   2: 116938.393 ops/s
[info] # Warmup Iteration   3: 123059.371 ops/s
[info] # Warmup Iteration   4: 123246.801 ops/s
[info] # Warmup Iteration   5: 123745.640 ops/s
[info] Iteration   1: 123795.501 ops/s
[info]                  ·gc.alloc.rate:                   1371.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              17432.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17094.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 123414.295 ops/s
[info]                  ·gc.alloc.rate:               1353.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          17256.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17155.443 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 123690.625 ops/s
[info]                  ·gc.alloc.rate:                   1368.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              17412.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17130.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 124113.710 ops/s
[info]                  ·gc.alloc.rate:                   1373.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              17411.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17064.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 123768.699 ops/s
[info]                  ·gc.alloc.rate:               1370.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          17429.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17084.793 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   123756.566 ±(99.9%) 964.031 ops/s [Average]
[info]   (min, avg, max) = (123414.295, 123756.566, 124113.710), stdev = 250.356
[info]   CI (99.9%): [122792.535, 124720.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1367.515 ±(99.9%) 30.844 MB/sec [Average]
[info]   (min, avg, max) = (1353.515, 1367.515, 1373.315), stdev = 8.010
[info]   CI (99.9%): [1336.671, 1398.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17388.499 ±(99.9%) 287.000 B/op [Average]
[info]   (min, avg, max) = (17256.274, 17388.499, 17432.649), stdev = 74.533
[info]   CI (99.9%): [17101.499, 17675.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1345.270 ±(99.9%) 3.777 MB/sec [Average]
[info]   (min, avg, max) = (1343.888, 1345.270, 1346.272), stdev = 0.981
[info]   CI (99.9%): [1341.493, 1349.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17105.777 ±(99.9%) 140.994 B/op [Average]
[info]   (min, avg, max) = (17064.027, 17105.777, 17155.443), stdev = 36.616
[info]   CI (99.9%): [16964.783, 17246.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 4.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.540), stdev = 1.101
[info]   CI (99.9%): [≈ 0, 4.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7.572 ±(99.9%) 53.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.572, 32.315), stdev = 14.014
[info]   CI (99.9%): [≈ 0, 61.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:33:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18155.535 ops/s
[info] # Warmup Iteration   2: 124409.042 ops/s
[info] # Warmup Iteration   3: 127628.741 ops/s
[info] # Warmup Iteration   4: 130912.410 ops/s
[info] # Warmup Iteration   5: 129959.458 ops/s
[info] Iteration   1: 129083.397 ops/s
[info]                  ·gc.alloc.rate:                   1673.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              20403.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24483.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.508 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 131727.522 ops/s
[info]                  ·gc.alloc.rate:                   1687.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              20164.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16009.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 130374.076 ops/s
[info]                  ·gc.alloc.rate:                   1660.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              20035.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16163.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 128699.476 ops/s
[info]                  ·gc.alloc.rate:                   1678.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              20518.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24520.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 132686.610 ops/s
[info]                  ·gc.alloc.rate:               1688.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          20023.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15834.599 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   130514.216 ±(99.9%) 6543.707 ops/s [Average]
[info]   (min, avg, max) = (128699.476, 130514.216, 132686.610), stdev = 1699.380
[info]   CI (99.9%): [123970.509, 137057.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1677.547 ±(99.9%) 44.533 MB/sec [Average]
[info]   (min, avg, max) = (1660.103, 1677.547, 1688.108), stdev = 11.565
[info]   CI (99.9%): [1633.014, 1722.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20229.057 ±(99.9%) 857.017 B/op [Average]
[info]   (min, avg, max) = (20023.514, 20229.057, 20518.259), stdev = 222.564
[info]   CI (99.9%): [19372.040, 21086.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1605.587 ±(99.9%) 1410.736 MB/sec [Average]
[info]   (min, avg, max) = (1334.956, 1605.587, 2008.085), stdev = 366.364
[info]   CI (99.9%): [194.852, 3016.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19402.127 ±(99.9%) 17931.747 B/op [Average]
[info]   (min, avg, max) = (15834.599, 19402.127, 24520.376), stdev = 4656.818
[info]   CI (99.9%): [1470.380, 37333.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.747), stdev = 1.653
[info]   CI (99.9%): [≈ 0, 7.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.462 ±(99.9%) 76.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.462, 44.768), stdev = 19.749
[info]   CI (99.9%): [≈ 0, 85.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.32% complete, ETA 01:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71304.933 ops/s
[info] # Warmup Iteration   2: 194803.646 ops/s
[info] # Warmup Iteration   3: 199735.499 ops/s
[info] # Warmup Iteration   4: 205504.170 ops/s
[info] # Warmup Iteration   5: 205067.866 ops/s
[info] Iteration   1: 203283.824 ops/s
[info]                  ·gc.alloc.rate:                   1243.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              9622.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10340.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 204580.336 ops/s
[info]                  ·gc.alloc.rate:               1244.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          9572.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10284.980 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 205677.607 ops/s
[info]                  ·gc.alloc.rate:               1261.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          9642.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10203.487 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 199945.653 ops/s
[info]                  ·gc.alloc.rate:                   1213.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              9546.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5269.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 206391.394 ops/s
[info]                  ·gc.alloc.rate:                   1263.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              9636.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10194.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   203975.763 ±(99.9%) 9782.761 ops/s [Average]
[info]   (min, avg, max) = (199945.653, 203975.763, 206391.394), stdev = 2540.552
[info]   CI (99.9%): [194193.002, 213758.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1245.284 ±(99.9%) 78.194 MB/sec [Average]
[info]   (min, avg, max) = (1213.112, 1245.284, 1263.729), stdev = 20.307
[info]   CI (99.9%): [1167.090, 1323.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9604.193 ±(99.9%) 162.392 B/op [Average]
[info]   (min, avg, max) = (9546.923, 9604.193, 9642.831), stdev = 42.173
[info]   CI (99.9%): [9441.802, 9766.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.984 ±(99.9%) 1148.185 MB/sec [Average]
[info]   (min, avg, max) = (669.585, 1202.984, 1337.112), stdev = 298.180
[info]   CI (99.9%): [54.799, 2351.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9258.666 ±(99.9%) 8590.122 B/op [Average]
[info]   (min, avg, max) = (5269.490, 9258.666, 10340.427), stdev = 2230.827
[info]   CI (99.9%): [668.544, 17848.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 5.985 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.581), stdev = 1.554
[info]   CI (99.9%): [≈ 0, 6.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.558 ±(99.9%) 47.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.558, 28.183), stdev = 12.237
[info]   CI (99.9%): [≈ 0, 53.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.52% complete, ETA 01:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122978.351 ops/s
[info] # Warmup Iteration   2: 247592.899 ops/s
[info] # Warmup Iteration   3: 251196.897 ops/s
[info] # Warmup Iteration   4: 251339.187 ops/s
[info] # Warmup Iteration   5: 247738.899 ops/s
[info] Iteration   1: 254029.875 ops/s
[info]                  ·gc.alloc.rate:                   1351.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              8373.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8326.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 251951.580 ops/s
[info]                  ·gc.alloc.rate:                   1351.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              8444.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8401.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 252114.489 ops/s
[info]                  ·gc.alloc.rate:                   1353.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              8443.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8401.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 255043.157 ops/s
[info]                  ·gc.alloc.rate:                   1367.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              8439.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8301.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 253975.981 ops/s
[info]                  ·gc.alloc.rate:                   1374.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              8519.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8326.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   253423.017 ±(99.9%) 5157.662 ops/s [Average]
[info]   (min, avg, max) = (251951.580, 253423.017, 255043.157), stdev = 1339.428
[info]   CI (99.9%): [248265.355, 258580.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1359.803 ±(99.9%) 41.301 MB/sec [Average]
[info]   (min, avg, max) = (1351.604, 1359.803, 1374.760), stdev = 10.726
[info]   CI (99.9%): [1318.502, 1401.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8444.341 ±(99.9%) 197.724 B/op [Average]
[info]   (min, avg, max) = (8373.978, 8444.341, 8519.013), stdev = 51.348
[info]   CI (99.9%): [8246.617, 8642.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.830 ±(99.9%) 4.135 MB/sec [Average]
[info]   (min, avg, max) = (1343.643, 1344.830, 1346.307), stdev = 1.074
[info]   CI (99.9%): [1340.695, 1348.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8351.542 ±(99.9%) 180.437 B/op [Average]
[info]   (min, avg, max) = (8301.706, 8351.542, 8401.998), stdev = 46.859
[info]   CI (99.9%): [8171.105, 8531.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.327 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.616, 2.603), stdev = 1.124
[info]   CI (99.9%): [≈ 0, 4.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.840 ±(99.9%) 27.008 B/op [Average]
[info]   (min, avg, max) = (0.129, 3.840, 16.244), stdev = 7.014
[info]   CI (99.9%): [≈ 0, 30.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.72% complete, ETA 01:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4816.013 ops/s
[info] # Warmup Iteration   2: 53034.457 ops/s
[info] # Warmup Iteration   3: 67925.595 ops/s
[info] # Warmup Iteration   4: 68026.429 ops/s
[info] # Warmup Iteration   5: 70914.649 ops/s
[info] Iteration   1: 69580.815 ops/s
[info]                  ·gc.alloc.rate:               2789.963 MB/sec
[info]                  ·gc.alloc.rate.norm:          63105.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60659.927 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 70621.469 ops/s
[info]                  ·gc.alloc.rate:                   2844.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              63389.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59998.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.464 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 70410.607 ops/s
[info]                  ·gc.alloc.rate:               2851.250 MB/sec
[info]                  ·gc.alloc.rate.norm:          63718.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60357.036 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 71029.519 ops/s
[info]                  ·gc.alloc.rate:               2875.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          63714.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2706.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59977.036 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 70431.229 ops/s
[info]                  ·gc.alloc.rate:               2854.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          63750.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2713.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60605.264 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   70414.728 ±(99.9%) 2034.302 ops/s [Average]
[info]   (min, avg, max) = (69580.815, 70414.728, 71029.519), stdev = 528.302
[info]   CI (99.9%): [68380.426, 72449.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2843.060 ±(99.9%) 122.715 MB/sec [Average]
[info]   (min, avg, max) = (2789.963, 2843.060, 2875.476), stdev = 31.869
[info]   CI (99.9%): [2720.345, 2965.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63535.840 ±(99.9%) 1085.222 B/op [Average]
[info]   (min, avg, max) = (63105.830, 63535.840, 63750.370), stdev = 281.829
[info]   CI (99.9%): [62450.618, 64621.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2699.016 ±(99.9%) 47.570 MB/sec [Average]
[info]   (min, avg, max) = (2681.828, 2699.016, 2713.361), stdev = 12.354
[info]   CI (99.9%): [2651.446, 2746.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60319.569 ±(99.9%) 1246.607 B/op [Average]
[info]   (min, avg, max) = (59977.036, 60319.569, 60659.927), stdev = 323.740
[info]   CI (99.9%): [59072.962, 61566.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.093 ±(99.9%) 0.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.464), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 0.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30.92% complete, ETA 01:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58312.309 ops/s
[info] # Warmup Iteration   2: 171345.414 ops/s
[info] # Warmup Iteration   3: 173363.910 ops/s
[info] # Warmup Iteration   4: 182010.381 ops/s
[info] # Warmup Iteration   5: 182048.778 ops/s
[info] Iteration   1: 183137.735 ops/s
[info]                  ·gc.alloc.rate:               1429.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          12280.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11552.506 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 182981.836 ops/s
[info]                  ·gc.alloc.rate:                   1425.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              12254.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11568.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 183000.021 ops/s
[info]                  ·gc.alloc.rate:                   1423.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              12245.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11572.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 183708.854 ops/s
[info]                  ·gc.alloc.rate:                   1455.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              12469.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11516.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 181074.214 ops/s
[info]                  ·gc.alloc.rate:               1420.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          12346.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11660.558 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   182780.532 ±(99.9%) 3845.633 ops/s [Average]
[info]   (min, avg, max) = (181074.214, 182780.532, 183708.854), stdev = 998.699
[info]   CI (99.9%): [178934.899, 186626.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1430.887 ±(99.9%) 54.275 MB/sec [Average]
[info]   (min, avg, max) = (1420.702, 1430.887, 1455.533), stdev = 14.095
[info]   CI (99.9%): [1376.612, 1485.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   12319.371 ±(99.9%) 358.124 B/op [Average]
[info]   (min, avg, max) = (12245.799, 12319.371, 12469.843), stdev = 93.004
[info]   CI (99.9%): [11961.247, 12677.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.286 ±(99.9%) 6.001 MB/sec [Average]
[info]   (min, avg, max) = (1341.732, 1344.286, 1345.603), stdev = 1.558
[info]   CI (99.9%): [1338.285, 1350.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11574.047 ±(99.9%) 204.405 B/op [Average]
[info]   (min, avg, max) = (11516.730, 11574.047, 11660.558), stdev = 53.083
[info]   CI (99.9%): [11369.642, 11778.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 4.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 2.894), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 5.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5.940 ±(99.9%) 41.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.940, 24.885), stdev = 10.757
[info]   CI (99.9%): [≈ 0, 47.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.12% complete, ETA 01:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50182.474 ops/s
[info] # Warmup Iteration   2: 177927.259 ops/s
[info] # Warmup Iteration   3: 181519.534 ops/s
[info] # Warmup Iteration   4: 183701.842 ops/s
[info] # Warmup Iteration   5: 183561.153 ops/s
[info] Iteration   1: 184238.209 ops/s
[info]                  ·gc.alloc.rate:               1212.162 MB/sec
[info]                  ·gc.alloc.rate.norm:          10355.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5724.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 183478.935 ops/s
[info]                  ·gc.alloc.rate:               1222.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          10484.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11502.469 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 183670.285 ops/s
[info]                  ·gc.alloc.rate:                   1228.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              10524.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11498.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 183442.165 ops/s
[info]                  ·gc.alloc.rate:                   1239.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              10636.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11519.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 184563.874 ops/s
[info]                  ·gc.alloc.rate:                   1236.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              10541.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11440.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   183878.694 ±(99.9%) 1918.110 ops/s [Average]
[info]   (min, avg, max) = (183442.165, 183878.694, 184563.874), stdev = 498.127
[info]   CI (99.9%): [181960.583, 185796.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1227.695 ±(99.9%) 42.495 MB/sec [Average]
[info]   (min, avg, max) = (1212.162, 1227.695, 1239.680), stdev = 11.036
[info]   CI (99.9%): [1185.199, 1270.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10508.355 ±(99.9%) 393.875 B/op [Average]
[info]   (min, avg, max) = (10355.088, 10508.355, 10636.473), stdev = 102.288
[info]   CI (99.9%): [10114.480, 10902.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.449 ±(99.9%) 1156.582 MB/sec [Average]
[info]   (min, avg, max) = (670.149, 1207.449, 1342.584), stdev = 300.361
[info]   CI (99.9%): [50.867, 2364.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10337.289 ±(99.9%) 9929.267 B/op [Average]
[info]   (min, avg, max) = (5724.855, 10337.289, 11519.390), stdev = 2578.599
[info]   CI (99.9%): [408.022, 20266.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.143), stdev = 1.370
[info]   CI (99.9%): [≈ 0, 5.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.069 ±(99.9%) 45.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.069, 26.970), stdev = 11.752
[info]   CI (99.9%): [≈ 0, 51.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.33% complete, ETA 01:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297929.994 ops/s
[info] # Warmup Iteration   2: 687940.306 ops/s
[info] # Warmup Iteration   3: 710117.346 ops/s
[info] # Warmup Iteration   4: 694735.370 ops/s
[info] # Warmup Iteration   5: 716178.788 ops/s
[info] Iteration   1: 721607.635 ops/s
[info]                  ·gc.alloc.rate:               743.211 MB/sec
[info]                  ·gc.alloc.rate.norm:          1621.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1454.344 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 726256.558 ops/s
[info]                  ·gc.alloc.rate:               758.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          1644.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1447.205 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 722956.886 ops/s
[info]                  ·gc.alloc.rate:               750.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          1633.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1453.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 714026.486 ops/s
[info]                  ·gc.alloc.rate:               740.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          1631.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1473.395 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 718467.373 ops/s
[info]                  ·gc.alloc.rate:               744.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          1629.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1464.341 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   720662.988 ±(99.9%) 17886.462 ops/s [Average]
[info]   (min, avg, max) = (714026.486, 720662.988, 726256.558), stdev = 4645.057
[info]   CI (99.9%): [702776.525, 738549.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   747.318 ±(99.9%) 28.311 MB/sec [Average]
[info]   (min, avg, max) = (740.245, 747.318, 758.679), stdev = 7.352
[info]   CI (99.9%): [719.007, 775.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1632.028 ±(99.9%) 31.949 B/op [Average]
[info]   (min, avg, max) = (1621.004, 1632.028, 1644.135), stdev = 8.297
[info]   CI (99.9%): [1600.078, 1663.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.881 ±(99.9%) 2.680 MB/sec [Average]
[info]   (min, avg, max) = (666.799, 667.881, 668.534), stdev = 0.696
[info]   CI (99.9%): [665.201, 670.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1458.618 ±(99.9%) 39.589 B/op [Average]
[info]   (min, avg, max) = (1447.205, 1458.618, 1473.395), stdev = 10.281
[info]   CI (99.9%): [1419.029, 1498.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458639.641 ops/s
[info] # Warmup Iteration   2: 668719.031 ops/s
[info] # Warmup Iteration   3: 671055.078 ops/s
[info] # Warmup Iteration   4: 694696.591 ops/s
[info] # Warmup Iteration   5: 704455.943 ops/s
[info] Iteration   1: 712286.809 ops/s
[info]                  ·gc.alloc.rate:               568.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          1256.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1482.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 702899.237 ops/s
[info]                  ·gc.alloc.rate:      539.584 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 700700.857 ops/s
[info]                  ·gc.alloc.rate:               551.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          1239.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1506.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 713049.012 ops/s
[info]                  ·gc.alloc.rate:               571.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          1261.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1482.095 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 711535.996 ops/s
[info]                  ·gc.alloc.rate:                   566.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              1253.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1485.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   708094.382 ±(99.9%) 22421.799 ops/s [Average]
[info]   (min, avg, max) = (700700.857, 708094.382, 713049.012), stdev = 5822.870
[info]   CI (99.9%): [685672.583, 730516.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   559.659 ±(99.9%) 52.137 MB/sec [Average]
[info]   (min, avg, max) = (539.584, 559.659, 571.454), stdev = 13.540
[info]   CI (99.9%): [507.523, 611.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1243.745 ±(99.9%) 82.984 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1243.745, 1261.353), stdev = 21.551
[info]   CI (99.9%): [1160.761, 1326.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.931 ±(99.9%) 1155.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.931, 671.460), stdev = 300.154
[info]   CI (99.9%): [≈ 0, 1692.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1191.238 ±(99.9%) 2564.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1191.238, 1506.633), stdev = 666.001
[info]   CI (99.9%): [≈ 0, 3755.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.73% complete, ETA 01:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468048.527 ops/s
[info] # Warmup Iteration   2: 742415.472 ops/s
[info] # Warmup Iteration   3: 777261.536 ops/s
[info] # Warmup Iteration   4: 755528.710 ops/s
[info] # Warmup Iteration   5: 779279.859 ops/s
[info] Iteration   1: 778756.862 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 780514.893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 778900.463 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 779356.329 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 779546.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   779415.019 ±(99.9%) 2673.638 ops/s [Average]
[info]   (min, avg, max) = (778756.862, 779415.019, 780514.893), stdev = 694.335
[info]   CI (99.9%): [776741.382, 782088.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.93% complete, ETA 01:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104284.810 ops/s
[info] # Warmup Iteration   2: 345157.692 ops/s
[info] # Warmup Iteration   3: 348519.940 ops/s
[info] # Warmup Iteration   4: 340367.463 ops/s
[info] # Warmup Iteration   5: 343287.785 ops/s
[info] Iteration   1: 340912.396 ops/s
[info]                  ·gc.alloc.rate:                   980.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              4525.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6153.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 342550.354 ops/s
[info]                  ·gc.alloc.rate:               966.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          4441.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3065.117 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 343073.692 ops/s
[info]                  ·gc.alloc.rate:                   973.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              4466.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6123.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 341078.064 ops/s
[info]                  ·gc.alloc.rate:               961.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          4437.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3081.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 344533.933 ops/s
[info]                  ·gc.alloc.rate:               972.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          4441.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3053.644 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   342429.688 ±(99.9%) 5771.539 ops/s [Average]
[info]   (min, avg, max) = (340912.396, 342429.688, 344533.933), stdev = 1498.850
[info]   CI (99.9%): [336658.148, 348201.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   971.068 ±(99.9%) 26.948 MB/sec [Average]
[info]   (min, avg, max) = (961.903, 971.068, 980.215), stdev = 6.998
[info]   CI (99.9%): [944.120, 998.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4462.448 ±(99.9%) 142.424 B/op [Average]
[info]   (min, avg, max) = (4437.141, 4462.448, 4525.313), stdev = 36.987
[info]   CI (99.9%): [4320.025, 4604.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   934.411 ±(99.9%) 1405.042 MB/sec [Average]
[info]   (min, avg, max) = (667.210, 934.411, 1335.293), stdev = 364.885
[info]   CI (99.9%): [≈ 0, 2339.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4295.600 ±(99.9%) 6479.578 B/op [Average]
[info]   (min, avg, max) = (3053.644, 4295.600, 6153.767), stdev = 1682.726
[info]   CI (99.9%): [≈ 0, 10775.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.096), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32.13% complete, ETA 01:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24876.812 ops/s
[info] # Warmup Iteration   2: 40540.855 ops/s
[info] # Warmup Iteration   3: 42900.083 ops/s
[info] # Warmup Iteration   4: 42954.056 ops/s
[info] # Warmup Iteration   5: 43008.250 ops/s
[info] Iteration   1: 43111.887 ops/s
[info]                  ·gc.alloc.rate:               471.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          17207.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18676.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 43177.323 ops/s
[info]                  ·gc.alloc.rate:               479.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          17470.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24451.557 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 43341.329 ops/s
[info]                  ·gc.alloc.rate:      457.584 MB/sec
[info]                  ·gc.alloc.rate.norm: 16616.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 43176.436 ops/s
[info]                  ·gc.alloc.rate:                   472.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              17220.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24452.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.277 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 43158.522 ops/s
[info]                  ·gc.alloc.rate:               480.402 MB/sec
[info]                  ·gc.alloc.rate.norm:          17518.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24486.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   43193.099 ±(99.9%) 335.081 ops/s [Average]
[info]   (min, avg, max) = (43111.887, 43193.099, 43341.329), stdev = 87.019
[info]   CI (99.9%): [42858.019, 43528.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   472.235 ±(99.9%) 35.071 MB/sec [Average]
[info]   (min, avg, max) = (457.584, 472.235, 480.402), stdev = 9.108
[info]   CI (99.9%): [437.164, 507.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17206.734 ±(99.9%) 1383.104 B/op [Average]
[info]   (min, avg, max) = (16616.010, 17206.734, 17518.644), stdev = 359.188
[info]   CI (99.9%): [15823.630, 18589.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   504.964 ±(99.9%) 1118.959 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.964, 671.480), stdev = 290.590
[info]   CI (99.9%): [≈ 0, 1623.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18413.446 ±(99.9%) 40794.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18413.446, 24486.612), stdev = 10594.087
[info]   CI (99.9%): [≈ 0, 59207.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.455 ±(99.9%) 3.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.455, 2.277), stdev = 1.018
[info]   CI (99.9%): [≈ 0, 4.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.33% complete, ETA 01:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2131.975 ops/s
[info] # Warmup Iteration   2: 10352.509 ops/s
[info] # Warmup Iteration   3: 11105.875 ops/s
[info] # Warmup Iteration   4: 11204.166 ops/s
[info] # Warmup Iteration   5: 11280.368 ops/s
[info] Iteration   1: 11272.484 ops/s
[info]                  ·gc.alloc.rate:                   1424.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              198738.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187488.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11210.025 ops/s
[info]                  ·gc.alloc.rate:                   1430.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              200889.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188588.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11217.256 ops/s
[info]                  ·gc.alloc.rate:                   1409.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              197764.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188547.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 443.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11279.877 ops/s
[info]                  ·gc.alloc.rate:                   1442.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              201212.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187278.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10797.454 ops/s
[info]                  ·gc.alloc.rate:                   1380.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              201250.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195151.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11155.419 ±(99.9%) 780.026 ops/s [Average]
[info]   (min, avg, max) = (10797.454, 11155.419, 11279.877), stdev = 202.570
[info]   CI (99.9%): [10375.393, 11935.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1417.572 ±(99.9%) 91.845 MB/sec [Average]
[info]   (min, avg, max) = (1380.643, 1417.572, 1442.664), stdev = 23.852
[info]   CI (99.9%): [1325.728, 1509.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   199970.974 ±(99.9%) 6210.814 B/op [Average]
[info]   (min, avg, max) = (197764.954, 199970.974, 201250.040), stdev = 1612.929
[info]   CI (99.9%): [193760.160, 206181.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.439 ±(99.9%) 7.984 MB/sec [Average]
[info]   (min, avg, max) = (1338.806, 1342.439, 1343.938), stdev = 2.073
[info]   CI (99.9%): [1334.455, 1350.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   189410.917 ±(99.9%) 12569.336 B/op [Average]
[info]   (min, avg, max) = (187278.908, 189410.917, 195151.644), stdev = 3264.217
[info]   CI (99.9%): [176841.581, 201980.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 5.220 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.799, 3.164), stdev = 1.356
[info]   CI (99.9%): [≈ 0, 6.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   112.075 ±(99.9%) 732.307 B/op [Average]
[info]   (min, avg, max) = (2.923, 112.075, 443.916), stdev = 190.178
[info]   CI (99.9%): [≈ 0, 844.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.53% complete, ETA 01:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1785.210 ops/s
[info] # Warmup Iteration   2: 9815.115 ops/s
[info] # Warmup Iteration   3: 11196.022 ops/s
[info] # Warmup Iteration   4: 11198.810 ops/s
[info] # Warmup Iteration   5: 11159.873 ops/s
[info] Iteration   1: 10882.009 ops/s
[info]                  ·gc.alloc.rate:               1269.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          183638.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193452.831 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 10930.380 ops/s
[info]                  ·gc.alloc.rate:                   1280.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              184329.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192795.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10838.883 ops/s
[info]                  ·gc.alloc.rate:               1256.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          182392.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194492.376 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 11089.962 ops/s
[info]                  ·gc.alloc.rate:                   1271.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              180347.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95101.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 496.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11197.148 ops/s
[info]                  ·gc.alloc.rate:                   1308.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              183889.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188198.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10987.676 ±(99.9%) 580.569 ops/s [Average]
[info]   (min, avg, max) = (10838.883, 10987.676, 11197.148), stdev = 150.772
[info]   CI (99.9%): [10407.107, 11568.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1277.102 ±(99.9%) 74.691 MB/sec [Average]
[info]   (min, avg, max) = (1256.224, 1277.102, 1308.251), stdev = 19.397
[info]   CI (99.9%): [1202.410, 1351.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   182919.491 ±(99.9%) 6190.388 B/op [Average]
[info]   (min, avg, max) = (180347.607, 182919.491, 184329.048), stdev = 1607.624
[info]   CI (99.9%): [176729.103, 189109.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.058 ±(99.9%) 1151.030 MB/sec [Average]
[info]   (min, avg, max) = (670.337, 1205.058, 1339.562), stdev = 298.919
[info]   CI (99.9%): [54.027, 2356.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   172808.171 ±(99.9%) 167525.850 B/op [Average]
[info]   (min, avg, max) = (95101.646, 172808.171, 194492.376), stdev = 43505.931
[info]   CI (99.9%): [5282.321, 340334.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 5.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 3.500), stdev = 1.514
[info]   CI (99.9%): [≈ 0, 6.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   120.990 ±(99.9%) 827.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 120.990, 496.617), stdev = 214.791
[info]   CI (99.9%): [≈ 0, 948.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.73% complete, ETA 01:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137355.255 ops/s
[info] # Warmup Iteration   2: 260035.975 ops/s
[info] # Warmup Iteration   3: 270749.428 ops/s
[info] # Warmup Iteration   4: 271980.694 ops/s
[info] # Warmup Iteration   5: 272199.224 ops/s
[info] Iteration   1: 272394.253 ops/s
[info]                  ·gc.alloc.rate:                   1838.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              10615.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11649.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 270869.943 ops/s
[info]                  ·gc.alloc.rate:                   1799.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              10457.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7818.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 268138.951 ops/s
[info]                  ·gc.alloc.rate:               1810.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          10625.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11827.221 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 250872.436 ops/s
[info]                  ·gc.alloc.rate:               1671.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          10488.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8424.949 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 250406.004 ops/s
[info]                  ·gc.alloc.rate:               1709.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          10744.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12665.074 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   262536.318 ±(99.9%) 42234.751 ops/s [Average]
[info]   (min, avg, max) = (250406.004, 262536.318, 272394.253), stdev = 10968.231
[info]   CI (99.9%): [220301.567, 304771.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1766.013 ±(99.9%) 275.198 MB/sec [Average]
[info]   (min, avg, max) = (1671.915, 1766.013, 1838.664), stdev = 71.468
[info]   CI (99.9%): [1490.815, 2041.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10586.400 ±(99.9%) 445.070 B/op [Average]
[info]   (min, avg, max) = (10457.690, 10586.400, 10744.408), stdev = 115.583
[info]   CI (99.9%): [10141.331, 11031.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.256 ±(99.9%) 1416.616 MB/sec [Average]
[info]   (min, avg, max) = (1342.938, 1747.256, 2017.688), stdev = 367.891
[info]   CI (99.9%): [330.640, 3163.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10477.054 ±(99.9%) 8450.329 B/op [Average]
[info]   (min, avg, max) = (7818.551, 10477.054, 12665.074), stdev = 2194.524
[info]   CI (99.9%): [2026.725, 18927.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.476), stdev = 1.075
[info]   CI (99.9%): [≈ 0, 4.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.367 ±(99.9%) 23.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.367, 14.293), stdev = 6.206
[info]   CI (99.9%): [≈ 0, 27.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 8.000), stdev = 2.280
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.93% complete, ETA 01:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1139.292 ops/s
[info] # Warmup Iteration   2: 7159.381 ops/s
[info] # Warmup Iteration   3: 7997.386 ops/s
[info] # Warmup Iteration   4: 8198.143 ops/s
[info] # Warmup Iteration   5: 8183.448 ops/s
[info] Iteration   1: 8187.762 ops/s
[info]                  ·gc.alloc.rate:               1462.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          281143.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 257022.750 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 8178.908 ops/s
[info]                  ·gc.alloc.rate:                   1466.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              282258.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257497.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8186.346 ops/s
[info]                  ·gc.alloc.rate:                   1456.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              279942.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257405.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8099.925 ops/s
[info]                  ·gc.alloc.rate:                   1478.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              287088.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     389430.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8118.539 ops/s
[info]                  ·gc.alloc.rate:               1468.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          284704.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 258269.951 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8154.296 ±(99.9%) 160.943 ops/s [Average]
[info]   (min, avg, max) = (8099.925, 8154.296, 8187.762), stdev = 41.796
[info]   CI (99.9%): [7993.353, 8315.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1466.520 ±(99.9%) 31.221 MB/sec [Average]
[info]   (min, avg, max) = (1456.129, 1466.520, 1478.158), stdev = 8.108
[info]   CI (99.9%): [1435.299, 1497.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   283027.696 ±(99.9%) 11054.051 B/op [Average]
[info]   (min, avg, max) = (279942.647, 283027.696, 287088.737), stdev = 2870.702
[info]   CI (99.9%): [271973.645, 294081.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.353 ±(99.9%) 1151.113 MB/sec [Average]
[info]   (min, avg, max) = (1332.297, 1470.353, 2005.093), stdev = 298.940
[info]   CI (99.9%): [319.240, 2621.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   283925.312 ±(99.9%) 227114.370 B/op [Average]
[info]   (min, avg, max) = (257022.750, 283925.312, 389430.410), stdev = 58980.881
[info]   CI (99.9%): [56810.941, 511039.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.946 ±(99.9%) 6.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.946, 3.858), stdev = 1.669
[info]   CI (99.9%): [≈ 0, 7.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   182.122 ±(99.9%) 1235.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 182.122, 741.651), stdev = 320.824
[info]   CI (99.9%): [≈ 0, 1417.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 8.000), stdev = 2.683
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33.13% complete, ETA 01:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 943.477 ops/s
[info] # Warmup Iteration   2: 9270.273 ops/s
[info] # Warmup Iteration   3: 10268.284 ops/s
[info] # Warmup Iteration   4: 10280.161 ops/s
[info] # Warmup Iteration   5: 10272.626 ops/s
[info] Iteration   1: 10294.994 ops/s
[info]                  ·gc.alloc.rate:               1256.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          192050.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204684.642 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 10279.989 ops/s
[info]                  ·gc.alloc.rate:                   1247.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              190988.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205003.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10538.693 ops/s
[info]                  ·gc.alloc.rate:               1286.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          192156.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 199946.662 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 10524.784 ops/s
[info]                  ·gc.alloc.rate:                   1271.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              190170.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200312.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10628.237 ops/s
[info]                  ·gc.alloc.rate:                   1296.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              191924.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198568.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   10453.339 ±(99.9%) 603.036 ops/s [Average]
[info]   (min, avg, max) = (10279.989, 10453.339, 10628.237), stdev = 156.607
[info]   CI (99.9%): [9850.303, 11056.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1271.762 ±(99.9%) 77.611 MB/sec [Average]
[info]   (min, avg, max) = (1247.763, 1271.762, 1296.084), stdev = 20.155
[info]   CI (99.9%): [1194.151, 1349.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   191458.121 ±(99.9%) 3298.704 B/op [Average]
[info]   (min, avg, max) = (190170.366, 191458.121, 192156.806), stdev = 856.663
[info]   CI (99.9%): [188159.417, 194756.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1339.576 ±(99.9%) 3.139 MB/sec [Average]
[info]   (min, avg, max) = (1338.873, 1339.576, 1340.952), stdev = 0.815
[info]   CI (99.9%): [1336.437, 1342.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   201703.041 ±(99.9%) 11329.242 B/op [Average]
[info]   (min, avg, max) = (198568.531, 201703.041, 205003.186), stdev = 2942.168
[info]   CI (99.9%): [190373.799, 213032.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.291), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   9.891 ±(99.9%) 71.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.891, 43.156), stdev = 18.662
[info]   CI (99.9%): [≈ 0, 81.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.33% complete, ETA 01:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8846.213 ops/s
[info] # Warmup Iteration   2: 24892.499 ops/s
[info] # Warmup Iteration   3: 24699.466 ops/s
[info] # Warmup Iteration   4: 25287.322 ops/s
[info] # Warmup Iteration   5: 25486.516 ops/s
[info] Iteration   1: 25539.801 ops/s
[info]                  ·gc.alloc.rate:               1331.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          82078.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41318.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 24994.998 ops/s
[info]                  ·gc.alloc.rate:                   1306.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              82267.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84469.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 25180.376 ops/s
[info]                  ·gc.alloc.rate:               1326.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          82939.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83936.042 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 25319.589 ops/s
[info]                  ·gc.alloc.rate:                   1333.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              82887.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83475.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.972 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25420.852 ops/s
[info]                  ·gc.alloc.rate:               1338.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          82874.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82978.758 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   25291.123 ±(99.9%) 815.563 ops/s [Average]
[info]   (min, avg, max) = (24994.998, 25291.123, 25539.801), stdev = 211.799
[info]   CI (99.9%): [24475.560, 26106.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1327.570 ±(99.9%) 47.798 MB/sec [Average]
[info]   (min, avg, max) = (1306.645, 1327.570, 1338.591), stdev = 12.413
[info]   CI (99.9%): [1279.772, 1375.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82609.463 ±(99.9%) 1559.621 B/op [Average]
[info]   (min, avg, max) = (82078.151, 82609.463, 82939.560), stdev = 405.029
[info]   CI (99.9%): [81049.842, 84169.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.695 ±(99.9%) 1156.362 MB/sec [Average]
[info]   (min, avg, max) = (670.500, 1207.695, 1343.150), stdev = 300.303
[info]   CI (99.9%): [51.334, 2364.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   75235.654 ±(99.9%) 73040.715 B/op [Average]
[info]   (min, avg, max) = (41318.238, 75235.654, 84469.904), stdev = 18968.442
[info]   CI (99.9%): [2194.939, 148276.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 6.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.539), stdev = 1.578
[info]   CI (99.9%): [≈ 0, 6.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   44.519 ±(99.9%) 377.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.519, 219.972), stdev = 98.088
[info]   CI (99.9%): [≈ 0, 422.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.53% complete, ETA 01:28:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11086.636 ops/s
[info] # Warmup Iteration   2: 28729.756 ops/s
[info] # Warmup Iteration   3: 29795.354 ops/s
[info] # Warmup Iteration   4: 29631.822 ops/s
[info] # Warmup Iteration   5: 29324.806 ops/s
[info] Iteration   1: 29771.501 ops/s
[info]                  ·gc.alloc.rate:                   1235.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              65306.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70743.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 29466.793 ops/s
[info]                  ·gc.alloc.rate:                   1232.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              65809.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71551.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 29934.728 ops/s
[info]                  ·gc.alloc.rate:               1224.356 MB/sec
[info]                  ·gc.alloc.rate.norm:          64359.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35233.891 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 29612.364 ops/s
[info]                  ·gc.alloc.rate:                   1250.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              66451.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71269.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 29691.288 ops/s
[info]                  ·gc.alloc.rate:                   1240.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              65731.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71006.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   29695.335 ±(99.9%) 673.153 ops/s [Average]
[info]   (min, avg, max) = (29466.793, 29695.335, 29934.728), stdev = 174.816
[info]   CI (99.9%): [29022.181, 30368.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1236.622 ±(99.9%) 37.904 MB/sec [Average]
[info]   (min, avg, max) = (1224.356, 1236.622, 1250.772), stdev = 9.844
[info]   CI (99.9%): [1198.718, 1274.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65531.677 ±(99.9%) 2976.303 B/op [Average]
[info]   (min, avg, max) = (64359.005, 65531.677, 66451.844), stdev = 772.936
[info]   CI (99.9%): [62555.374, 68507.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.922 ±(99.9%) 1153.010 MB/sec [Average]
[info]   (min, avg, max) = (670.284, 1205.922, 1341.448), stdev = 299.433
[info]   CI (99.9%): [52.912, 2358.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63960.859 ±(99.9%) 61847.786 B/op [Average]
[info]   (min, avg, max) = (35233.891, 63960.859, 71551.231), stdev = 16061.674
[info]   CI (99.9%): [2113.073, 125808.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 5.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.168), stdev = 1.360
[info]   CI (99.9%): [≈ 0, 6.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42.708 ±(99.9%) 278.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.708, 168.288), stdev = 72.246
[info]   CI (99.9%): [≈ 0, 320.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.73% complete, ETA 01:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 289856.505 ops/s
[info] # Warmup Iteration   2: 611545.207 ops/s
[info] # Warmup Iteration   3: 632187.781 ops/s
[info] # Warmup Iteration   4: 636360.721 ops/s
[info] # Warmup Iteration   5: 634868.300 ops/s
[info] Iteration   1: 627000.856 ops/s
[info]                  ·gc.alloc.rate:               1158.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          2906.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1687.209 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 632691.861 ops/s
[info]                  ·gc.alloc.rate:                   1172.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              2915.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3345.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 639190.721 ops/s
[info]                  ·gc.alloc.rate:                   1181.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              2909.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3313.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 635757.083 ops/s
[info]                  ·gc.alloc.rate:               1160.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          2873.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1666.322 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 653132.078 ops/s
[info]                  ·gc.alloc.rate:                   1218.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              2936.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3245.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   637554.520 ±(99.9%) 37708.477 ops/s [Average]
[info]   (min, avg, max) = (627000.856, 637554.520, 653132.078), stdev = 9792.772
[info]   CI (99.9%): [599846.043, 675262.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1178.238 ±(99.9%) 93.895 MB/sec [Average]
[info]   (min, avg, max) = (1158.055, 1178.238, 1218.488), stdev = 24.384
[info]   CI (99.9%): [1084.343, 1272.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2908.433 ±(99.9%) 86.926 B/op [Average]
[info]   (min, avg, max) = (2873.703, 2908.433, 2936.240), stdev = 22.574
[info]   CI (99.9%): [2821.507, 2995.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.616 ±(99.9%) 1420.066 MB/sec [Average]
[info]   (min, avg, max) = (672.149, 1076.616, 1346.931), stdev = 368.787
[info]   CI (99.9%): [≈ 0, 2496.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2651.785 ±(99.9%) 3430.265 B/op [Average]
[info]   (min, avg, max) = (1666.322, 2651.785, 3345.657), stdev = 890.829
[info]   CI (99.9%): [≈ 0, 6082.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 5.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 3.039), stdev = 1.348
[info]   CI (99.9%): [≈ 0, 5.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.516 ±(99.9%) 12.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.516, 7.324), stdev = 3.247
[info]   CI (99.9%): [≈ 0, 14.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.94% complete, ETA 01:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468826.963 ops/s
[info] # Warmup Iteration   2: 723115.797 ops/s
[info] # Warmup Iteration   3: 772840.955 ops/s
[info] # Warmup Iteration   4: 770275.066 ops/s
[info] # Warmup Iteration   5: 785311.597 ops/s
[info] Iteration   1: 782900.421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 783999.652 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 784906.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 783996.663 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 785325.088 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   784225.754 ±(99.9%) 3618.718 ops/s [Average]
[info]   (min, avg, max) = (782900.421, 784225.754, 785325.088), stdev = 939.770
[info]   CI (99.9%): [780607.036, 787844.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.14% complete, ETA 01:27:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10789.437 ops/s
[info] # Warmup Iteration   2: 27880.140 ops/s
[info] # Warmup Iteration   3: 29990.479 ops/s
[info] # Warmup Iteration   4: 30214.803 ops/s
[info] # Warmup Iteration   5: 29589.010 ops/s
[info] Iteration   1: 29317.389 ops/s
[info]                  ·gc.alloc.rate:                   1329.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              71318.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71953.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 29634.708 ops/s
[info]                  ·gc.alloc.rate:               1338.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          71065.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71216.421 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 30241.890 ops/s
[info]                  ·gc.alloc.rate:                   1363.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              70936.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69834.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 30452.956 ops/s
[info]                  ·gc.alloc.rate:                   1384.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              71511.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69284.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30316.779 ops/s
[info]                  ·gc.alloc.rate:               1378.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          71578.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69437.081 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   29992.745 ±(99.9%) 1889.526 ops/s [Average]
[info]   (min, avg, max) = (29317.389, 29992.745, 30452.956), stdev = 490.704
[info]   CI (99.9%): [28103.218, 31882.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1358.708 ±(99.9%) 93.439 MB/sec [Average]
[info]   (min, avg, max) = (1329.041, 1358.708, 1384.061), stdev = 24.266
[info]   CI (99.9%): [1265.269, 1452.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71282.226 ±(99.9%) 1068.918 B/op [Average]
[info]   (min, avg, max) = (70936.616, 71282.226, 71578.728), stdev = 277.594
[info]   CI (99.9%): [70213.309, 72351.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1340.533 ±(99.9%) 6.585 MB/sec [Average]
[info]   (min, avg, max) = (1337.570, 1340.533, 1341.938), stdev = 1.710
[info]   CI (99.9%): [1333.948, 1347.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70345.070 ±(99.9%) 4537.890 B/op [Average]
[info]   (min, avg, max) = (69284.234, 70345.070, 71953.034), stdev = 1178.475
[info]   CI (99.9%): [65807.180, 74882.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 5.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.270), stdev = 1.413
[info]   CI (99.9%): [≈ 0, 6.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   42.224 ±(99.9%) 283.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.224, 170.194), stdev = 73.549
[info]   CI (99.9%): [≈ 0, 325.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34.34% complete, ETA 01:27:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6985.551 ops/s
[info] # Warmup Iteration   2: 13734.217 ops/s
[info] # Warmup Iteration   3: 13684.907 ops/s
[info] # Warmup Iteration   4: 13952.865 ops/s
[info] # Warmup Iteration   5: 13893.616 ops/s
[info] Iteration   1: 14051.921 ops/s
[info]                  ·gc.alloc.rate:               920.250 MB/sec
[info]                  ·gc.alloc.rate.norm:          103064.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75276.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 14017.147 ops/s
[info]                  ·gc.alloc.rate:                   928.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              104300.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150939.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13768.112 ops/s
[info]                  ·gc.alloc.rate:               897.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          102617.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76829.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13982.727 ops/s
[info]                  ·gc.alloc.rate:               912.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          102742.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75728.406 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13966.374 ops/s
[info]                  ·gc.alloc.rate:               929.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          104695.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151619.436 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   13957.256 ±(99.9%) 426.431 ops/s [Average]
[info]   (min, avg, max) = (13768.112, 13957.256, 14051.921), stdev = 110.743
[info]   CI (99.9%): [13530.825, 14383.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   917.772 ±(99.9%) 50.407 MB/sec [Average]
[info]   (min, avg, max) = (897.759, 917.772, 929.123), stdev = 13.090
[info]   CI (99.9%): [867.365, 968.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   103483.952 ±(99.9%) 3659.337 B/op [Average]
[info]   (min, avg, max) = (102617.362, 103483.952, 104695.964), stdev = 950.318
[info]   CI (99.9%): [99824.614, 107143.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.392 ±(99.9%) 1418.554 MB/sec [Average]
[info]   (min, avg, max) = (672.137, 941.392, 1345.545), stdev = 368.394
[info]   CI (99.9%): [≈ 0, 2359.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   106078.690 ±(99.9%) 158905.362 B/op [Average]
[info]   (min, avg, max) = (75276.641, 106078.690, 151619.436), stdev = 41267.218
[info]   CI (99.9%): [≈ 0, 264984.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.467 ±(99.9%) 4.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 2.337), stdev = 1.045
[info]   CI (99.9%): [≈ 0, 4.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.54% complete, ETA 01:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3648.680 ops/s
[info] # Warmup Iteration   2: 31172.363 ops/s
[info] # Warmup Iteration   3: 33881.627 ops/s
[info] # Warmup Iteration   4: 33054.822 ops/s
[info] # Warmup Iteration   5: 34368.523 ops/s
[info] Iteration   1: 34704.897 ops/s
[info]                  ·gc.alloc.rate:                   1840.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              83432.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91353.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34532.703 ops/s
[info]                  ·gc.alloc.rate:                   1815.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              82716.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61232.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34180.392 ops/s
[info]                  ·gc.alloc.rate:                   1822.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              83910.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92508.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.959 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34740.021 ops/s
[info]                  ·gc.alloc.rate:                   1825.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60599.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.943 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34723.667 ops/s
[info]                  ·gc.alloc.rate:                   1852.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              83945.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90941.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   34576.336 ±(99.9%) 910.624 ops/s [Average]
[info]   (min, avg, max) = (34180.392, 34576.336, 34740.021), stdev = 236.486
[info]   CI (99.9%): [33665.712, 35486.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1831.333 ±(99.9%) 56.695 MB/sec [Average]
[info]   (min, avg, max) = (1815.686, 1831.333, 1852.059), stdev = 14.724
[info]   CI (99.9%): [1774.638, 1888.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83345.028 ±(99.9%) 2336.217 B/op [Average]
[info]   (min, avg, max) = (82716.320, 83345.028, 83945.347), stdev = 606.708
[info]   CI (99.9%): [81008.811, 85681.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.528 ±(99.9%) 1411.892 MB/sec [Average]
[info]   (min, avg, max) = (1337.677, 1742.528, 2015.272), stdev = 366.664
[info]   CI (99.9%): [330.636, 3154.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79327.362 ±(99.9%) 64761.129 B/op [Average]
[info]   (min, avg, max) = (60599.816, 79327.362, 92508.782), stdev = 16818.260
[info]   CI (99.9%): [14566.233, 144088.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.634 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.791, 3.873), stdev = 1.723
[info]   CI (99.9%): [≈ 0, 7.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   36.049 ±(99.9%) 302.239 B/op [Average]
[info]   (min, avg, max) = (0.943, 36.049, 176.458), stdev = 78.491
[info]   CI (99.9%): [≈ 0, 338.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.74% complete, ETA 01:27:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5412.297 ops/s
[info] # Warmup Iteration   2: 30176.564 ops/s
[info] # Warmup Iteration   3: 32340.170 ops/s
[info] # Warmup Iteration   4: 32774.372 ops/s
[info] # Warmup Iteration   5: 32499.507 ops/s
[info] Iteration   1: 32865.129 ops/s
[info]                  ·gc.alloc.rate:                   1451.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              69530.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64086.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 32928.602 ops/s
[info]                  ·gc.alloc.rate:                   1447.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              69171.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64009.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 33323.233 ops/s
[info]                  ·gc.alloc.rate:                   1486.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              70210.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63280.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 33460.916 ops/s
[info]                  ·gc.alloc.rate:                   1466.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              68992.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62945.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33325.871 ops/s
[info]                  ·gc.alloc.rate:                   1500.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              70884.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94598.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   33180.750 ±(99.9%) 1024.317 ops/s [Average]
[info]   (min, avg, max) = (32865.129, 33180.750, 33460.916), stdev = 266.012
[info]   CI (99.9%): [32156.433, 34205.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1470.733 ±(99.9%) 88.038 MB/sec [Average]
[info]   (min, avg, max) = (1447.250, 1470.733, 1500.929), stdev = 22.863
[info]   CI (99.9%): [1382.695, 1558.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69757.925 ±(99.9%) 3017.460 B/op [Average]
[info]   (min, avg, max) = (68992.061, 69757.925, 70884.785), stdev = 783.625
[info]   CI (99.9%): [66740.466, 72775.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.761 ±(99.9%) 1143.647 MB/sec [Average]
[info]   (min, avg, max) = (1338.191, 1471.761, 2003.052), stdev = 297.002
[info]   CI (99.9%): [328.113, 2615.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   69784.202 ±(99.9%) 53447.388 B/op [Average]
[info]   (min, avg, max) = (62945.265, 69784.202, 94598.663), stdev = 13880.117
[info]   CI (99.9%): [16336.814, 123231.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.875 ±(99.9%) 5.721 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.875, 3.458), stdev = 1.486
[info]   CI (99.9%): [≈ 0, 6.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.284 ±(99.9%) 270.125 B/op [Average]
[info]   (min, avg, max) = (0.995, 41.284, 163.300), stdev = 70.151
[info]   CI (99.9%): [≈ 0, 311.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.94% complete, ETA 01:26:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205118.079 ops/s
[info] # Warmup Iteration   2: 446352.038 ops/s
[info] # Warmup Iteration   3: 452875.803 ops/s
[info] # Warmup Iteration   4: 453382.569 ops/s
[info] # Warmup Iteration   5: 451260.097 ops/s
[info] Iteration   1: 453789.642 ops/s
[info]                  ·gc.alloc.rate:               1213.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          4208.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4662.268 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 451799.412 ops/s
[info]                  ·gc.alloc.rate:               1202.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          4189.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2342.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 453851.813 ops/s
[info]                  ·gc.alloc.rate:                   1220.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              4232.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4665.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 454091.249 ops/s
[info]                  ·gc.alloc.rate:                   1220.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              4230.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4665.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 457457.329 ops/s
[info]                  ·gc.alloc.rate:                   1229.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              4230.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4629.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   454197.889 ±(99.9%) 7861.929 ops/s [Average]
[info]   (min, avg, max) = (451799.412, 454197.889, 457457.329), stdev = 2041.718
[info]   CI (99.9%): [446335.960, 462059.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1217.357 ±(99.9%) 38.607 MB/sec [Average]
[info]   (min, avg, max) = (1202.741, 1217.357, 1229.678), stdev = 10.026
[info]   CI (99.9%): [1178.751, 1255.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4218.312 ±(99.9%) 72.507 B/op [Average]
[info]   (min, avg, max) = (4189.792, 4218.312, 4232.237), stdev = 18.830
[info]   CI (99.9%): [4145.805, 4290.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.754 ±(99.9%) 1158.689 MB/sec [Average]
[info]   (min, avg, max) = (672.475, 1210.754, 1346.255), stdev = 300.908
[info]   CI (99.9%): [52.065, 2369.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4193.081 ±(99.9%) 3983.750 B/op [Average]
[info]   (min, avg, max) = (2342.592, 4193.081, 4665.992), stdev = 1034.567
[info]   CI (99.9%): [209.331, 8176.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.789), stdev = 1.219
[info]   CI (99.9%): [≈ 0, 5.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.134 ±(99.9%) 16.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.134, 9.668), stdev = 4.226
[info]   CI (99.9%): [≈ 0, 18.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.14% complete, ETA 01:26:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1565.344 ops/s
[info] # Warmup Iteration   2: 15951.235 ops/s
[info] # Warmup Iteration   3: 18903.284 ops/s
[info] # Warmup Iteration   4: 19046.377 ops/s
[info] # Warmup Iteration   5: 19150.001 ops/s
[info] Iteration   1: 18641.420 ops/s
[info]                  ·gc.alloc.rate:                   1873.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              158145.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169513.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.758 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 18784.643 ops/s
[info]                  ·gc.alloc.rate:                   1895.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              158783.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168102.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 19005.573 ops/s
[info]                  ·gc.alloc.rate:                   1930.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              159876.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165706.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.724 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 19248.185 ops/s
[info]                  ·gc.alloc.rate:                   1935.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              158105.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163163.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 19297.524 ops/s
[info]                  ·gc.alloc.rate:               1925.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          157034.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108790.914 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18995.469 ±(99.9%) 1097.606 ops/s [Average]
[info]   (min, avg, max) = (18641.420, 18995.469, 19297.524), stdev = 285.045
[info]   CI (99.9%): [17897.863, 20093.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1911.975 ±(99.9%) 103.087 MB/sec [Average]
[info]   (min, avg, max) = (1873.126, 1911.975, 1935.135), stdev = 26.771
[info]   CI (99.9%): [1808.888, 2015.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   158389.063 ±(99.9%) 4012.590 B/op [Average]
[info]   (min, avg, max) = (157034.061, 158389.063, 159876.528), stdev = 1042.057
[info]   CI (99.9%): [154376.474, 162401.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1869.293 ±(99.9%) 1152.169 MB/sec [Average]
[info]   (min, avg, max) = (1334.096, 1869.293, 2007.770), stdev = 299.215
[info]   CI (99.9%): [717.124, 3021.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   155055.511 ±(99.9%) 100021.638 B/op [Average]
[info]   (min, avg, max) = (108790.914, 155055.511, 169513.413), stdev = 25975.302
[info]   CI (99.9%): [55033.873, 255077.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 7.591 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 4.434), stdev = 1.971
[info]   CI (99.9%): [≈ 0, 8.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76.014 ±(99.9%) 636.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 76.014, 371.492), stdev = 165.187
[info]   CI (99.9%): [≈ 0, 712.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35.34% complete, ETA 01:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4480.549 ops/s
[info] # Warmup Iteration   2: 29905.847 ops/s
[info] # Warmup Iteration   3: 33502.407 ops/s
[info] # Warmup Iteration   4: 33900.530 ops/s
[info] # Warmup Iteration   5: 34011.121 ops/s
[info] Iteration   1: 34206.704 ops/s
[info]                  ·gc.alloc.rate:                   1667.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              76691.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61850.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34026.787 ops/s
[info]                  ·gc.alloc.rate:                   1670.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              77263.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93330.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 34306.836 ops/s
[info]                  ·gc.alloc.rate:                   1681.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              77139.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61641.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34201.807 ops/s
[info]                  ·gc.alloc.rate:                   1716.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              79005.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92538.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34324.427 ops/s
[info]                  ·gc.alloc.rate:               1683.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          77170.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61393.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   34213.312 ±(99.9%) 455.862 ops/s [Average]
[info]   (min, avg, max) = (34026.787, 34213.312, 34324.427), stdev = 118.386
[info]   CI (99.9%): [33757.450, 34669.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1683.828 ±(99.9%) 76.060 MB/sec [Average]
[info]   (min, avg, max) = (1667.029, 1683.828, 1716.937), stdev = 19.753
[info]   CI (99.9%): [1607.768, 1759.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   77454.135 ±(99.9%) 3446.928 B/op [Average]
[info]   (min, avg, max) = (76691.450, 77454.135, 79005.805), stdev = 895.156
[info]   CI (99.9%): [74007.206, 80901.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1611.219 ±(99.9%) 1417.587 MB/sec [Average]
[info]   (min, avg, max) = (1338.995, 1611.219, 2017.940), stdev = 368.143
[info]   CI (99.9%): [193.632, 3028.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   74150.901 ±(99.9%) 66039.147 B/op [Average]
[info]   (min, avg, max) = (61393.468, 74150.901, 93330.690), stdev = 17150.157
[info]   CI (99.9%): [8111.754, 140190.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.185), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 6.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   34.814 ±(99.9%) 245.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.814, 147.322), stdev = 63.675
[info]   CI (99.9%): [≈ 0, 280.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.54% complete, ETA 01:26:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11811.314 ops/s
[info] # Warmup Iteration   2: 55414.999 ops/s
[info] # Warmup Iteration   3: 55930.140 ops/s
[info] # Warmup Iteration   4: 56699.849 ops/s
[info] # Warmup Iteration   5: 56703.474 ops/s
[info] Iteration   1: 54888.952 ops/s
[info]                  ·gc.alloc.rate:               1662.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          47676.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38449.888 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 56698.651 ops/s
[info]                  ·gc.alloc.rate:                   1755.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              48731.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55878.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.120 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 56952.106 ops/s
[info]                  ·gc.alloc.rate:                   1737.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              48002.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37000.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 55806.539 ops/s
[info]                  ·gc.alloc.rate:                   1727.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              48707.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56585.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.761 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 57096.944 ops/s
[info]                  ·gc.alloc.rate:               1753.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          48348.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36871.388 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   56288.638 ±(99.9%) 3577.784 ops/s [Average]
[info]   (min, avg, max) = (54888.952, 56288.638, 57096.944), stdev = 929.139
[info]   CI (99.9%): [52710.854, 59866.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1727.283 ±(99.9%) 146.250 MB/sec [Average]
[info]   (min, avg, max) = (1662.744, 1727.283, 1755.528), stdev = 37.981
[info]   CI (99.9%): [1581.034, 1873.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48293.395 ±(99.9%) 1756.717 B/op [Average]
[info]   (min, avg, max) = (47676.010, 48293.395, 48731.777), stdev = 456.214
[info]   CI (99.9%): [46536.678, 50050.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1607.383 ±(99.9%) 1414.308 MB/sec [Average]
[info]   (min, avg, max) = (1337.582, 1607.383, 2012.973), stdev = 367.291
[info]   CI (99.9%): [193.074, 3021.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44956.987 ±(99.9%) 39715.920 B/op [Average]
[info]   (min, avg, max) = (36871.388, 44956.987, 56585.343), stdev = 10314.098
[info]   CI (99.9%): [5241.067, 84672.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.643), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 6.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.806 ±(99.9%) 172.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.806, 101.120), stdev = 44.903
[info]   CI (99.9%): [≈ 0, 193.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.74% complete, ETA 01:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53467.405 ops/s
[info] # Warmup Iteration   2: 152618.526 ops/s
[info] # Warmup Iteration   3: 154014.188 ops/s
[info] # Warmup Iteration   4: 159650.372 ops/s
[info] # Warmup Iteration   5: 154473.455 ops/s
[info] Iteration   1: 154112.567 ops/s
[info]                  ·gc.alloc.rate:                   1860.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              19001.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20534.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.549 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 157782.600 ops/s
[info]                  ·gc.alloc.rate:                   1901.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              18967.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13358.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 160643.606 ops/s
[info]                  ·gc.alloc.rate:               1948.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          19088.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19644.810 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 151692.067 ops/s
[info]                  ·gc.alloc.rate:                   1862.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              19314.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20803.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 160598.522 ops/s
[info]                  ·gc.alloc.rate:               1959.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          19201.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19675.692 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   156965.872 ±(99.9%) 15323.348 ops/s [Average]
[info]   (min, avg, max) = (151692.067, 156965.872, 160643.606), stdev = 3979.425
[info]   CI (99.9%): [141642.524, 172289.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1906.501 ±(99.9%) 179.254 MB/sec [Average]
[info]   (min, avg, max) = (1860.629, 1906.501, 1959.249), stdev = 46.552
[info]   CI (99.9%): [1727.246, 2085.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19114.621 ±(99.9%) 553.118 B/op [Average]
[info]   (min, avg, max) = (18967.913, 19114.621, 19314.595), stdev = 143.643
[info]   CI (99.9%): [18561.502, 19667.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1873.804 ±(99.9%) 1150.327 MB/sec [Average]
[info]   (min, avg, max) = (1339.422, 1873.804, 2010.759), stdev = 298.736
[info]   CI (99.9%): [723.477, 3024.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18803.433 ±(99.9%) 11885.360 B/op [Average]
[info]   (min, avg, max) = (13358.862, 18803.433, 20803.297), stdev = 3086.590
[info]   CI (99.9%): [6918.072, 30688.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 5.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.187), stdev = 1.387
[info]   CI (99.9%): [≈ 0, 6.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.425 ±(99.9%) 54.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.425, 32.549), stdev = 14.167
[info]   CI (99.9%): [≈ 0, 61.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.94% complete, ETA 01:25:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 648353.655 ops/s
[info] # Warmup Iteration   2: 1056654.296 ops/s
[info] # Warmup Iteration   3: 1168176.252 ops/s
[info] # Warmup Iteration   4: 1180300.026 ops/s
[info] # Warmup Iteration   5: 1175081.227 ops/s
[info] Iteration   1: 1191675.138 ops/s
[info]                  ·gc.alloc.rate:                   1308.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1727.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1775.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1196202.994 ops/s
[info]                  ·gc.alloc.rate:                   1324.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              1742.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1769.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1194765.699 ops/s
[info]                  ·gc.alloc.rate:                   1321.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              1741.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1772.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1162200.343 ops/s
[info]                  ·gc.alloc.rate:                   1299.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              1760.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1824.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1159687.251 ops/s
[info]                  ·gc.alloc.rate:                   1284.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              1742.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1824.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1180906.285 ±(99.9%) 70536.201 ops/s [Average]
[info]   (min, avg, max) = (1159687.251, 1180906.285, 1196202.994), stdev = 18318.027
[info]   CI (99.9%): [1110370.084, 1251442.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1307.707 ±(99.9%) 62.828 MB/sec [Average]
[info]   (min, avg, max) = (1284.467, 1307.707, 1324.100), stdev = 16.316
[info]   CI (99.9%): [1244.879, 1370.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1742.820 ±(99.9%) 44.494 B/op [Average]
[info]   (min, avg, max) = (1727.973, 1742.820, 1760.426), stdev = 11.555
[info]   CI (99.9%): [1698.326, 1787.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.297 ±(99.9%) 3.852 MB/sec [Average]
[info]   (min, avg, max) = (1344.281, 1345.297, 1346.878), stdev = 1.000
[info]   CI (99.9%): [1341.445, 1349.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1793.176 ±(99.9%) 109.226 B/op [Average]
[info]   (min, avg, max) = (1769.567, 1793.176, 1824.326), stdev = 28.366
[info]   CI (99.9%): [1683.951, 1902.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.795 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.583, 2.810), stdev = 1.245
[info]   CI (99.9%): [≈ 0, 5.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.789 ±(99.9%) 6.494 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.789, 3.806), stdev = 1.687
[info]   CI (99.9%): [≈ 0, 7.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.14% complete, ETA 01:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709594.001 ops/s
[info] # Warmup Iteration   2: 1299867.353 ops/s
[info] # Warmup Iteration   3: 1375910.567 ops/s
[info] # Warmup Iteration   4: 1376702.149 ops/s
[info] # Warmup Iteration   5: 1375455.523 ops/s
[info] Iteration   1: 1374378.075 ops/s
[info]                  ·gc.alloc.rate:      0.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.328 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1358116.084 ops/s
[info]                  ·gc.alloc.rate:      6.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.328 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1376156.011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1381418.104 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1377634.572 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1373540.569 ±(99.9%) 34670.399 ops/s [Average]
[info]   (min, avg, max) = (1358116.084, 1373540.569, 1381418.104), stdev = 9003.792
[info]   CI (99.9%): [1338870.170, 1408210.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.322 ±(99.9%) 10.777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.322, 6.324), stdev = 2.799
[info]   CI (99.9%): [≈ 0, 12.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.531 ±(99.9%) 12.490 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.531, 7.328), stdev = 3.244
[info]   CI (99.9%): [≈ 0, 14.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.35% complete, ETA 01:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25431.397 ops/s
[info] # Warmup Iteration   2: 65489.382 ops/s
[info] # Warmup Iteration   3: 68165.757 ops/s
[info] # Warmup Iteration   4: 68749.945 ops/s
[info] # Warmup Iteration   5: 69169.468 ops/s
[info] Iteration   1: 68967.067 ops/s
[info]                  ·gc.alloc.rate:               1745.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          39829.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45917.766 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 69555.192 ops/s
[info]                  ·gc.alloc.rate:                   1759.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              39799.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30386.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 69213.852 ops/s
[info]                  ·gc.alloc.rate:                   1764.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              40111.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45654.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 69414.092 ops/s
[info]                  ·gc.alloc.rate:                   1741.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              39481.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30327.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 69642.683 ops/s
[info]                  ·gc.alloc.rate:               1787.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          40398.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45342.200 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   69358.577 ±(99.9%) 1048.693 ops/s [Average]
[info]   (min, avg, max) = (68967.067, 69358.577, 69642.683), stdev = 272.342
[info]   CI (99.9%): [68309.884, 70407.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1759.659 ±(99.9%) 70.907 MB/sec [Average]
[info]   (min, avg, max) = (1741.320, 1759.659, 1787.825), stdev = 18.414
[info]   CI (99.9%): [1688.752, 1830.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39924.029 ±(99.9%) 1334.519 B/op [Average]
[info]   (min, avg, max) = (39481.474, 39924.029, 40398.558), stdev = 346.570
[info]   CI (99.9%): [38589.511, 41258.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1741.571 ±(99.9%) 1410.064 MB/sec [Average]
[info]   (min, avg, max) = (1337.602, 1741.571, 2012.144), stdev = 366.189
[info]   CI (99.9%): [331.507, 3151.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39525.738 ±(99.9%) 32239.190 B/op [Average]
[info]   (min, avg, max) = (30327.840, 39525.738, 45917.766), stdev = 8372.415
[info]   CI (99.9%): [7286.547, 71764.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.706), stdev = 1.642
[info]   CI (99.9%): [≈ 0, 7.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.430 ±(99.9%) 143.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.430, 83.841), stdev = 37.137
[info]   CI (99.9%): [≈ 0, 160.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36.55% complete, ETA 01:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13195.095 ops/s
[info] # Warmup Iteration   2: 27543.794 ops/s
[info] # Warmup Iteration   3: 27342.901 ops/s
[info] # Warmup Iteration   4: 27815.564 ops/s
[info] # Warmup Iteration   5: 27495.784 ops/s
[info] Iteration   1: 27888.487 ops/s
[info]                  ·gc.alloc.rate:               653.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          36884.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37857.308 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 27874.834 ops/s
[info]                  ·gc.alloc.rate:               657.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          37140.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37876.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 27689.343 ops/s
[info]                  ·gc.alloc.rate:                   655.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              37243.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38168.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27892.671 ops/s
[info]                  ·gc.alloc.rate:               658.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          37155.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37889.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27887.224 ops/s
[info]                  ·gc.alloc.rate:               656.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          37035.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37915.058 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   27846.512 ±(99.9%) 339.285 ops/s [Average]
[info]   (min, avg, max) = (27689.343, 27846.512, 27892.671), stdev = 88.111
[info]   CI (99.9%): [27507.227, 28185.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   656.318 ±(99.9%) 7.654 MB/sec [Average]
[info]   (min, avg, max) = (653.639, 656.318, 658.516), stdev = 1.988
[info]   CI (99.9%): [648.664, 663.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   37091.949 ±(99.9%) 529.036 B/op [Average]
[info]   (min, avg, max) = (36884.554, 37091.949, 37243.072), stdev = 137.389
[info]   CI (99.9%): [36562.913, 37620.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.346 ±(99.9%) 1.537 MB/sec [Average]
[info]   (min, avg, max) = (670.877, 671.346, 671.809), stdev = 0.399
[info]   CI (99.9%): [669.809, 672.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   37941.349 ±(99.9%) 495.797 B/op [Average]
[info]   (min, avg, max) = (37857.308, 37941.349, 38168.590), stdev = 128.757
[info]   CI (99.9%): [37445.552, 38437.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.237 ±(99.9%) 2.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 1.183), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.75% complete, ETA 01:24:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3706.341 ops/s
[info] # Warmup Iteration   2: 16352.501 ops/s
[info] # Warmup Iteration   3: 18075.819 ops/s
[info] # Warmup Iteration   4: 18213.249 ops/s
[info] # Warmup Iteration   5: 18176.427 ops/s
[info] Iteration   1: 18188.477 ops/s
[info]                  ·gc.alloc.rate:                   1599.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              138397.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116207.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17900.096 ops/s
[info]                  ·gc.alloc.rate:                   1607.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              141278.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177173.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 314.872 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 18236.596 ops/s
[info]                  ·gc.alloc.rate:                   1613.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              139285.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115780.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.860 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18412.173 ops/s
[info]                  ·gc.alloc.rate:                   1617.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              138217.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114446.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18365.963 ops/s
[info]                  ·gc.alloc.rate:                   1638.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              140310.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171927.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18220.661 ±(99.9%) 774.548 ops/s [Average]
[info]   (min, avg, max) = (17900.096, 18220.661, 18412.173), stdev = 201.148
[info]   CI (99.9%): [17446.113, 18995.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1615.304 ±(99.9%) 55.660 MB/sec [Average]
[info]   (min, avg, max) = (1599.449, 1615.304, 1638.109), stdev = 14.455
[info]   CI (99.9%): [1559.644, 1670.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   139497.805 ±(99.9%) 4994.333 B/op [Average]
[info]   (min, avg, max) = (138217.255, 139497.805, 141278.771), stdev = 1297.013
[info]   CI (99.9%): [134503.472, 144492.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.428 ±(99.9%) 1414.038 MB/sec [Average]
[info]   (min, avg, max) = (1339.183, 1609.428, 2016.130), stdev = 367.221
[info]   CI (99.9%): [195.390, 3023.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   139107.028 ±(99.9%) 124819.191 B/op [Average]
[info]   (min, avg, max) = (114446.012, 139107.028, 177173.792), stdev = 32415.147
[info]   CI (99.9%): [14287.838, 263926.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 5.919 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.904, 3.583), stdev = 1.537
[info]   CI (99.9%): [≈ 0, 6.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   79.132 ±(99.9%) 520.291 B/op [Average]
[info]   (min, avg, max) = (1.801, 79.132, 314.872), stdev = 135.118
[info]   CI (99.9%): [≈ 0, 599.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.95% complete, ETA 01:24:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2502.892 ops/s
[info] # Warmup Iteration   2: 16510.479 ops/s
[info] # Warmup Iteration   3: 17342.213 ops/s
[info] # Warmup Iteration   4: 17492.636 ops/s
[info] # Warmup Iteration   5: 17361.381 ops/s
[info] Iteration   1: 17494.431 ops/s
[info]                  ·gc.alloc.rate:                   1434.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              129066.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120277.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 16732.632 ops/s
[info]                  ·gc.alloc.rate:                   1400.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              131762.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125840.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 16910.350 ops/s
[info]                  ·gc.alloc.rate:                   1404.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              130687.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124585.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 16951.718 ops/s
[info]                  ·gc.alloc.rate:                   1398.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              129798.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124129.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17354.476 ops/s
[info]                  ·gc.alloc.rate:               1443.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          130892.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120998.832 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17088.721 ±(99.9%) 1236.728 ops/s [Average]
[info]   (min, avg, max) = (16732.632, 17088.721, 17494.431), stdev = 321.174
[info]   CI (99.9%): [15851.993, 18325.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1416.325 ±(99.9%) 80.917 MB/sec [Average]
[info]   (min, avg, max) = (1398.519, 1416.325, 1443.340), stdev = 21.014
[info]   CI (99.9%): [1335.408, 1497.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   130441.346 ±(99.9%) 3999.473 B/op [Average]
[info]   (min, avg, max) = (129066.116, 130441.346, 131762.663), stdev = 1038.650
[info]   CI (99.9%): [126441.874, 134440.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337.046 ±(99.9%) 6.498 MB/sec [Average]
[info]   (min, avg, max) = (1334.241, 1337.046, 1338.628), stdev = 1.688
[info]   CI (99.9%): [1330.547, 1343.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   123166.300 ±(99.9%) 9260.930 B/op [Average]
[info]   (min, avg, max) = (120277.307, 123166.300, 125840.398), stdev = 2405.034
[info]   CI (99.9%): [113905.371, 132427.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 6.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 3.728), stdev = 1.613
[info]   CI (99.9%): [≈ 0, 7.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81.769 ±(99.9%) 578.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.769, 347.007), stdev = 150.119
[info]   CI (99.9%): [≈ 0, 659.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.15% complete, ETA 01:23:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301936.531 ops/s
[info] # Warmup Iteration   2: 600226.547 ops/s
[info] # Warmup Iteration   3: 662463.137 ops/s
[info] # Warmup Iteration   4: 659328.497 ops/s
[info] # Warmup Iteration   5: 666266.715 ops/s
[info] Iteration   1: 663424.653 ops/s
[info]                  ·gc.alloc.rate:               1778.440 MB/sec
[info]                  ·gc.alloc.rate.norm:          4219.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4788.466 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 668738.469 ops/s
[info]                  ·gc.alloc.rate:                   1792.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              4218.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3170.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 666412.034 ops/s
[info]                  ·gc.alloc.rate:                   1813.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              4281.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4760.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 667330.511 ops/s
[info]                  ·gc.alloc.rate:               1803.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          4251.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4751.043 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 664428.724 ops/s
[info]                  ·gc.alloc.rate:               1784.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          4224.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3181.108 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   666066.878 ±(99.9%) 8285.196 ops/s [Average]
[info]   (min, avg, max) = (663424.653, 666066.878, 668738.469), stdev = 2151.639
[info]   CI (99.9%): [657781.682, 674352.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1794.469 ±(99.9%) 54.381 MB/sec [Average]
[info]   (min, avg, max) = (1778.440, 1794.469, 1813.216), stdev = 14.123
[info]   CI (99.9%): [1740.088, 1848.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4239.222 ±(99.9%) 105.478 B/op [Average]
[info]   (min, avg, max) = (4218.785, 4239.222, 4281.778), stdev = 27.392
[info]   CI (99.9%): [4133.744, 4344.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1748.112 ±(99.9%) 1415.833 MB/sec [Average]
[info]   (min, avg, max) = (1343.499, 1748.112, 2018.473), stdev = 367.687
[info]   CI (99.9%): [332.279, 3163.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4130.283 ±(99.9%) 3356.305 B/op [Average]
[info]   (min, avg, max) = (3170.087, 4130.283, 4788.466), stdev = 871.622
[info]   CI (99.9%): [773.978, 7486.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 4.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.769), stdev = 1.222
[info]   CI (99.9%): [≈ 0, 5.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.382 ±(99.9%) 11.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.382, 6.516), stdev = 2.875
[info]   CI (99.9%): [≈ 0, 12.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.35% complete, ETA 01:23:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 624.592 ops/s
[info] # Warmup Iteration   2: 10978.487 ops/s
[info] # Warmup Iteration   3: 12919.643 ops/s
[info] # Warmup Iteration   4: 13140.474 ops/s
[info] # Warmup Iteration   5: 13131.146 ops/s
[info] Iteration   1: 13037.122 ops/s
[info]                  ·gc.alloc.rate:               1731.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          209062.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 242139.914 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 13131.614 ops/s
[info]                  ·gc.alloc.rate:                   1753.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              210109.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160379.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 13147.595 ops/s
[info]                  ·gc.alloc.rate:                   1757.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              210375.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239918.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12682.991 ops/s
[info]                  ·gc.alloc.rate:               1756.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          217921.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 247988.017 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13125.664 ops/s
[info]                  ·gc.alloc.rate:               1757.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          210689.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159786.433 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13024.997 ±(99.9%) 754.683 ops/s [Average]
[info]   (min, avg, max) = (12682.991, 13024.997, 13147.595), stdev = 195.989
[info]   CI (99.9%): [12270.315, 13779.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1751.294 ±(99.9%) 42.400 MB/sec [Average]
[info]   (min, avg, max) = (1731.766, 1751.294, 1757.443), stdev = 11.011
[info]   CI (99.9%): [1708.894, 1793.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   211631.652 ±(99.9%) 13741.442 B/op [Average]
[info]   (min, avg, max) = (209062.710, 211631.652, 217921.150), stdev = 3568.609
[info]   CI (99.9%): [197890.210, 225373.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1735.977 ±(99.9%) 1406.988 MB/sec [Average]
[info]   (min, avg, max) = (1332.729, 1735.977, 2005.761), stdev = 365.390
[info]   CI (99.9%): [328.989, 3142.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   210042.495 ±(99.9%) 175982.434 B/op [Average]
[info]   (min, avg, max) = (159786.433, 210042.495, 247988.017), stdev = 45702.079
[info]   CI (99.9%): [34060.061, 386024.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 6.874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 4.081), stdev = 1.785
[info]   CI (99.9%): [≈ 0, 7.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   108.756 ±(99.9%) 823.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108.756, 488.963), stdev = 213.863
[info]   CI (99.9%): [≈ 0, 932.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 3.130
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37.55% complete, ETA 01:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3095.793 ops/s
[info] # Warmup Iteration   2: 16291.791 ops/s
[info] # Warmup Iteration   3: 17212.353 ops/s
[info] # Warmup Iteration   4: 17010.213 ops/s
[info] # Warmup Iteration   5: 17353.648 ops/s
[info] Iteration   1: 17225.783 ops/s
[info]                  ·gc.alloc.rate:                   1461.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              133555.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122803.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16770.943 ops/s
[info]                  ·gc.alloc.rate:                   1448.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              135922.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126149.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17353.865 ops/s
[info]                  ·gc.alloc.rate:                   1490.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              135148.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121979.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17452.727 ops/s
[info]                  ·gc.alloc.rate:                   1515.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              136682.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181650.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16909.022 ops/s
[info]                  ·gc.alloc.rate:               1455.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          135470.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124623.803 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   17142.468 ±(99.9%) 1123.337 ops/s [Average]
[info]   (min, avg, max) = (16770.943, 17142.468, 17452.727), stdev = 291.727
[info]   CI (99.9%): [16019.131, 18265.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1474.400 ±(99.9%) 108.320 MB/sec [Average]
[info]   (min, avg, max) = (1448.438, 1474.400, 1515.771), stdev = 28.130
[info]   CI (99.9%): [1366.080, 1582.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   135356.010 ±(99.9%) 4465.837 B/op [Average]
[info]   (min, avg, max) = (133555.322, 135356.010, 136682.914), stdev = 1159.764
[info]   CI (99.9%): [130890.173, 139821.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1477.414 ±(99.9%) 1156.048 MB/sec [Average]
[info]   (min, avg, max) = (1338.899, 1477.414, 2014.449), stdev = 300.222
[info]   CI (99.9%): [321.367, 2633.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   135441.305 ±(99.9%) 99664.068 B/op [Average]
[info]   (min, avg, max) = (121979.428, 135441.305, 181650.654), stdev = 25882.442
[info]   CI (99.9%): [35777.236, 235105.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.909 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.957), stdev = 1.275
[info]   CI (99.9%): [≈ 0, 5.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   69.407 ±(99.9%) 445.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.407, 268.095), stdev = 115.578
[info]   CI (99.9%): [≈ 0, 514.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.75% complete, ETA 01:23:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12322.007 ops/s
[info] # Warmup Iteration   2: 41405.887 ops/s
[info] # Warmup Iteration   3: 43704.677 ops/s
[info] # Warmup Iteration   4: 42229.420 ops/s
[info] # Warmup Iteration   5: 43256.285 ops/s
[info] Iteration   1: 44097.609 ops/s
[info]                  ·gc.alloc.rate:                   1714.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              61185.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71464.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.743 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 44134.063 ops/s
[info]                  ·gc.alloc.rate:                   1725.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              61547.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47676.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 43475.233 ops/s
[info]                  ·gc.alloc.rate:               1727.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          62534.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72717.635 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 44329.872 ops/s
[info]                  ·gc.alloc.rate:               1720.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          61085.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47630.296 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 44302.466 ops/s
[info]                  ·gc.alloc.rate:                   1746.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              62055.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71622.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   44067.848 ±(99.9%) 1334.131 ops/s [Average]
[info]   (min, avg, max) = (43475.233, 44067.848, 44329.872), stdev = 346.470
[info]   CI (99.9%): [42733.717, 45401.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1727.119 ±(99.9%) 46.772 MB/sec [Average]
[info]   (min, avg, max) = (1714.329, 1727.119, 1746.729), stdev = 12.146
[info]   CI (99.9%): [1680.347, 1773.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61682.058 ±(99.9%) 2347.536 B/op [Average]
[info]   (min, avg, max) = (61085.750, 61682.058, 62534.871), stdev = 609.648
[info]   CI (99.9%): [59334.522, 64029.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1741.238 ±(99.9%) 1412.844 MB/sec [Average]
[info]   (min, avg, max) = (1336.945, 1741.238, 2016.007), stdev = 366.911
[info]   CI (99.9%): [328.394, 3154.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   62222.303 ±(99.9%) 51245.350 B/op [Average]
[info]   (min, avg, max) = (47630.296, 62222.303, 72717.635), stdev = 13308.255
[info]   CI (99.9%): [10976.953, 113467.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.593 ±(99.9%) 2.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.593, 1.479), stdev = 0.619
[info]   CI (99.9%): [≈ 0, 2.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.95% complete, ETA 01:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20775.597 ops/s
[info] # Warmup Iteration   2: 53684.472 ops/s
[info] # Warmup Iteration   3: 52237.462 ops/s
[info] # Warmup Iteration   4: 54971.414 ops/s
[info] # Warmup Iteration   5: 55532.615 ops/s
[info] Iteration   1: 55772.990 ops/s
[info]                  ·gc.alloc.rate:                   1688.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              47653.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37820.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 55485.887 ops/s
[info]                  ·gc.alloc.rate:                   1718.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              48739.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57072.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.985 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 53784.437 ops/s
[info]                  ·gc.alloc.rate:                   1657.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              48494.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39181.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 55441.286 ops/s
[info]                  ·gc.alloc.rate:                   1720.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              48832.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56938.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 54093.863 ops/s
[info]                  ·gc.alloc.rate:               1651.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          48046.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38888.909 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   54915.693 ±(99.9%) 3492.999 ops/s [Average]
[info]   (min, avg, max) = (53784.437, 54915.693, 55772.990), stdev = 907.121
[info]   CI (99.9%): [51422.694, 58408.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1687.392 ±(99.9%) 125.852 MB/sec [Average]
[info]   (min, avg, max) = (1651.370, 1687.392, 1720.441), stdev = 32.683
[info]   CI (99.9%): [1561.540, 1813.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48353.224 ±(99.9%) 1908.636 B/op [Average]
[info]   (min, avg, max) = (47653.202, 48353.224, 48832.342), stdev = 495.667
[info]   CI (99.9%): [46444.588, 50261.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606.971 ±(99.9%) 1414.377 MB/sec [Average]
[info]   (min, avg, max) = (1336.622, 1606.971, 2012.607), stdev = 367.309
[info]   CI (99.9%): [192.594, 3021.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45980.339 ±(99.9%) 38804.726 B/op [Average]
[info]   (min, avg, max) = (37820.392, 45980.339, 57072.237), stdev = 10077.464
[info]   CI (99.9%): [7175.612, 84785.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 6.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.667), stdev = 1.606
[info]   CI (99.9%): [≈ 0, 6.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.698 ±(99.9%) 175.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.698, 103.985), stdev = 45.527
[info]   CI (99.9%): [≈ 0, 198.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.15% complete, ETA 01:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 802383.905 ops/s
[info] # Warmup Iteration   2: 1209147.616 ops/s
[info] # Warmup Iteration   3: 1358728.927 ops/s
[info] # Warmup Iteration   4: 1357029.693 ops/s
[info] # Warmup Iteration   5: 1352196.725 ops/s
[info] Iteration   1: 1330532.831 ops/s
[info]                  ·gc.alloc.rate:                   1242.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1470.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1590.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1318575.081 ops/s
[info]                  ·gc.alloc.rate:                   1239.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              1479.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1605.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1351897.993 ops/s
[info]                  ·gc.alloc.rate:                   1283.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              1494.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1566.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1361452.515 ops/s
[info]                  ·gc.alloc.rate:                   1279.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              1478.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1364865.939 ops/s
[info]                  ·gc.alloc.rate:               1268.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          1462.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 775.083 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1345464.872 ±(99.9%) 77478.791 ops/s [Average]
[info]   (min, avg, max) = (1318575.081, 1345464.872, 1364865.939), stdev = 20120.996
[info]   CI (99.9%): [1267986.081, 1422943.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1262.690 ±(99.9%) 79.085 MB/sec [Average]
[info]   (min, avg, max) = (1239.383, 1262.690, 1283.521), stdev = 20.538
[info]   CI (99.9%): [1183.606, 1341.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1477.001 ±(99.9%) 45.426 B/op [Average]
[info]   (min, avg, max) = (1462.747, 1477.001, 1494.249), stdev = 11.797
[info]   CI (99.9%): [1431.575, 1522.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.820 ±(99.9%) 1159.611 MB/sec [Average]
[info]   (min, avg, max) = (672.115, 1210.820, 1347.266), stdev = 301.147
[info]   CI (99.9%): [51.209, 2370.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1418.810 ±(99.9%) 1387.606 B/op [Average]
[info]   (min, avg, max) = (775.083, 1418.810, 1605.261), stdev = 360.357
[info]   CI (99.9%): [31.204, 2806.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 4.913 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.873), stdev = 1.276
[info]   CI (99.9%): [≈ 0, 5.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.684 ±(99.9%) 5.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.684, 3.321), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.200, 5.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 926852.525 ops/s
[info] # Warmup Iteration   2: 1490131.775 ops/s
[info] # Warmup Iteration   3: 1578014.967 ops/s
[info] # Warmup Iteration   4: 1578649.682 ops/s
[info] # Warmup Iteration   5: 1578551.999 ops/s
[info] Iteration   1: 1578551.572 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1577988.476 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1579259.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1578604.763 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1578761.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1578633.099 ±(99.9%) 1755.539 ops/s [Average]
[info]   (min, avg, max) = (1577988.476, 1578633.099, 1579259.133), stdev = 455.908
[info]   CI (99.9%): [1576877.561, 1580388.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.55% complete, ETA 01:22:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1418.261 ops/s
[info] # Warmup Iteration   2: 3324.820 ops/s
[info] # Warmup Iteration   3: 3666.707 ops/s
[info] # Warmup Iteration   4: 3679.373 ops/s
[info] # Warmup Iteration   5: 3806.593 ops/s
[info] Iteration   1: 3651.504 ops/s
[info]                  ·gc.alloc.rate:               493.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          212731.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 220450.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 3648.436 ops/s
[info]                  ·gc.alloc.rate:               509.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          219826.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 288286.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3580.703 ops/s
[info]                  ·gc.alloc.rate:               494.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          217339.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 293759.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3568.312 ops/s
[info]                  ·gc.alloc.rate:      481.755 MB/sec
[info]                  ·gc.alloc.rate.norm: 212448.121 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3557.765 ops/s
[info]                  ·gc.alloc.rate:               502.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          222187.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 295952.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3601.344 ±(99.9%) 173.813 ops/s [Average]
[info]   (min, avg, max) = (3557.765, 3601.344, 3651.504), stdev = 45.139
[info]   CI (99.9%): [3427.531, 3775.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   496.369 ±(99.9%) 40.209 MB/sec [Average]
[info]   (min, avg, max) = (481.755, 496.369, 509.649), stdev = 10.442
[info]   CI (99.9%): [456.160, 536.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   216906.476 ±(99.9%) 16551.678 B/op [Average]
[info]   (min, avg, max) = (212448.121, 216906.476, 222187.003), stdev = 4298.418
[info]   CI (99.9%): [200354.798, 233458.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   503.473 ±(99.9%) 1114.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.473, 669.067), stdev = 289.553
[info]   CI (99.9%): [≈ 0, 1618.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   219689.805 ±(99.9%) 488106.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 219689.805, 295952.400), stdev = 126759.604
[info]   CI (99.9%): [≈ 0, 707795.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38.76% complete, ETA 01:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12896.947 ops/s
[info] # Warmup Iteration   2: 29497.743 ops/s
[info] # Warmup Iteration   3: 29819.021 ops/s
[info] # Warmup Iteration   4: 29811.850 ops/s
[info] # Warmup Iteration   5: 29948.112 ops/s
[info] Iteration   1: 30127.949 ops/s
[info]                  ·gc.alloc.rate:                   692.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              36193.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35024.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 30024.414 ops/s
[info]                  ·gc.alloc.rate:               707.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          37075.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35181.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 30151.446 ops/s
[info]                  ·gc.alloc.rate:                   702.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              36651.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35033.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30159.165 ops/s
[info]                  ·gc.alloc.rate:               695.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          36301.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35040.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 30122.598 ops/s
[info]                  ·gc.alloc.rate:                   693.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              36247.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35082.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.175 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   30117.114 ±(99.9%) 208.146 ops/s [Average]
[info]   (min, avg, max) = (30024.414, 30117.114, 30159.165), stdev = 54.055
[info]   CI (99.9%): [29908.968, 30325.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   698.374 ±(99.9%) 23.796 MB/sec [Average]
[info]   (min, avg, max) = (692.944, 698.374, 707.298), stdev = 6.180
[info]   CI (99.9%): [674.578, 722.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   36493.931 ±(99.9%) 1429.754 B/op [Average]
[info]   (min, avg, max) = (36193.918, 36493.931, 37075.841), stdev = 371.303
[info]   CI (99.9%): [35064.178, 37923.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.180 ±(99.9%) 1.452 MB/sec [Average]
[info]   (min, avg, max) = (670.554, 671.180, 671.485), stdev = 0.377
[info]   CI (99.9%): [669.728, 672.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   35072.605 ±(99.9%) 250.211 B/op [Average]
[info]   (min, avg, max) = (35024.450, 35072.605, 35181.841), stdev = 64.979
[info]   CI (99.9%): [34822.395, 35322.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.870 ±(99.9%) 3.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 2.175), stdev = 0.910
[info]   CI (99.9%): [≈ 0, 4.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.96% complete, ETA 01:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41698.345 ops/s
[info] # Warmup Iteration   2: 112416.999 ops/s
[info] # Warmup Iteration   3: 120137.237 ops/s
[info] # Warmup Iteration   4: 125679.653 ops/s
[info] # Warmup Iteration   5: 125649.510 ops/s
[info] Iteration   1: 126087.077 ops/s
[info]                  ·gc.alloc.rate:                   1991.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              24855.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25161.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 126762.400 ops/s
[info]                  ·gc.alloc.rate:                   2013.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              24993.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25002.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 126508.458 ops/s
[info]                  ·gc.alloc.rate:                   2009.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              24994.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24986.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 126325.085 ops/s
[info]                  ·gc.alloc.rate:               2019.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          25164.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25022.808 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 126404.613 ops/s
[info]                  ·gc.alloc.rate:               2021.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          25163.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25038.962 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   126417.526 ±(99.9%) 953.210 ops/s [Average]
[info]   (min, avg, max) = (126087.077, 126417.526, 126762.400), stdev = 247.545
[info]   CI (99.9%): [125464.317, 127370.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2010.981 ±(99.9%) 46.135 MB/sec [Average]
[info]   (min, avg, max) = (1991.414, 2010.981, 2021.176), stdev = 11.981
[info]   CI (99.9%): [1964.847, 2057.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25034.207 ±(99.9%) 505.661 B/op [Average]
[info]   (min, avg, max) = (24855.260, 25034.207, 25164.586), stdev = 131.319
[info]   CI (99.9%): [24528.546, 25539.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011.642 ±(99.9%) 12.921 MB/sec [Average]
[info]   (min, avg, max) = (2008.436, 2011.642, 2015.966), stdev = 3.356
[info]   CI (99.9%): [1998.721, 2024.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25042.562 ±(99.9%) 267.528 B/op [Average]
[info]   (min, avg, max) = (24986.814, 25042.562, 25161.700), stdev = 69.476
[info]   CI (99.9%): [24775.034, 25310.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 2.790), stdev = 1.194
[info]   CI (99.9%): [≈ 0, 5.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.239 ±(99.9%) 57.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.239, 34.820), stdev = 14.907
[info]   CI (99.9%): [≈ 0, 66.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.16% complete, ETA 01:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.712 ops/s
[info] # Warmup Iteration   2: 346674.107 ops/s
[info] # Warmup Iteration   3: 366488.586 ops/s
[info] # Warmup Iteration   4: 379236.664 ops/s
[info] # Warmup Iteration   5: 382302.588 ops/s
[info] Iteration   1: 380792.584 ops/s
[info]                  ·gc.alloc.rate:                   801.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              3311.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5504.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 381399.540 ops/s
[info]                  ·gc.alloc.rate:               789.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          3258.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2748.979 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 380584.818 ops/s
[info]                  ·gc.alloc.rate:                   783.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              3240.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2757.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 368519.123 ops/s
[info]                  ·gc.alloc.rate:                   765.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              3268.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2847.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 375548.202 ops/s
[info]                  ·gc.alloc.rate:               777.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          3258.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2795.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   377368.853 ±(99.9%) 21085.861 ops/s [Average]
[info]   (min, avg, max) = (368519.123, 377368.853, 381399.540), stdev = 5475.931
[info]   CI (99.9%): [356282.992, 398454.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   783.575 ±(99.9%) 51.823 MB/sec [Average]
[info]   (min, avg, max) = (765.291, 783.575, 801.310), stdev = 13.458
[info]   CI (99.9%): [731.753, 835.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3267.443 ±(99.9%) 102.013 B/op [Average]
[info]   (min, avg, max) = (3240.743, 3267.443, 3311.373), stdev = 26.492
[info]   CI (99.9%): [3165.431, 3369.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.861 ±(99.9%) 1145.292 MB/sec [Average]
[info]   (min, avg, max) = (666.477, 799.861, 1331.917), stdev = 297.429
[info]   CI (99.9%): [≈ 0, 1945.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3330.872 ±(99.9%) 4680.419 B/op [Average]
[info]   (min, avg, max) = (2748.979, 3330.872, 5504.083), stdev = 1215.490
[info]   CI (99.9%): [≈ 0, 8011.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.086), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.36% complete, ETA 01:21:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62892.854 ops/s
[info] # Warmup Iteration   2: 243742.617 ops/s
[info] # Warmup Iteration   3: 261606.278 ops/s
[info] # Warmup Iteration   4: 262135.187 ops/s
[info] # Warmup Iteration   5: 261886.928 ops/s
[info] Iteration   1: 263471.390 ops/s
[info]                  ·gc.alloc.rate:               592.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          3540.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3977.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 262773.270 ops/s
[info]                  ·gc.alloc.rate:      571.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 3423.247 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 262929.306 ops/s
[info]                  ·gc.alloc.rate:               595.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          3565.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3985.109 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 262769.807 ops/s
[info]                  ·gc.alloc.rate:                   593.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              3554.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3993.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 262243.470 ops/s
[info]                  ·gc.alloc.rate:                   589.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              3538.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4001.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   262837.449 ±(99.9%) 1691.463 ops/s [Average]
[info]   (min, avg, max) = (262243.470, 262837.449, 263471.390), stdev = 439.268
[info]   CI (99.9%): [261145.985, 264528.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   588.609 ±(99.9%) 37.638 MB/sec [Average]
[info]   (min, avg, max) = (571.561, 588.609, 595.653), stdev = 9.774
[info]   CI (99.9%): [550.971, 626.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3524.442 ±(99.9%) 221.898 B/op [Average]
[info]   (min, avg, max) = (3423.247, 3524.442, 3565.429), stdev = 57.626
[info]   CI (99.9%): [3302.544, 3746.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.060 ±(99.9%) 1147.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.060, 666.931), stdev = 297.990
[info]   CI (99.9%): [≈ 0, 1680.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3191.644 ±(99.9%) 6870.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3191.644, 4001.954), stdev = 1784.207
[info]   CI (99.9%): [≈ 0, 10061.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.249), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.56% complete, ETA 01:20:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304746.038 ops/s
[info] # Warmup Iteration   2: 507740.774 ops/s
[info] # Warmup Iteration   3: 493388.780 ops/s
[info] # Warmup Iteration   4: 515961.029 ops/s
[info] # Warmup Iteration   5: 517348.098 ops/s
[info] Iteration   1: 522176.099 ops/s
[info]                  ·gc.alloc.rate:      658.308 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 501331.449 ops/s
[info]                  ·gc.alloc.rate:               646.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          2030.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2106.947 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 503537.032 ops/s
[info]                  ·gc.alloc.rate:                   655.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              2049.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2098.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 517890.088 ops/s
[info]                  ·gc.alloc.rate:               671.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          2041.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2040.606 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 519421.260 ops/s
[info]                  ·gc.alloc.rate:                   671.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              2035.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2036.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   512871.186 ±(99.9%) 37282.020 ops/s [Average]
[info]   (min, avg, max) = (501331.449, 512871.186, 522176.099), stdev = 9682.022
[info]   CI (99.9%): [475589.166, 550153.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   660.862 ±(99.9%) 41.509 MB/sec [Average]
[info]   (min, avg, max) = (646.766, 660.862, 671.721), stdev = 10.780
[info]   CI (99.9%): [619.353, 702.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2028.052 ±(99.9%) 98.632 B/op [Average]
[info]   (min, avg, max) = (1984.001, 2028.052, 2049.318), stdev = 25.614
[info]   CI (99.9%): [1929.421, 2126.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.287 ±(99.9%) 1156.551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.287, 672.166), stdev = 300.353
[info]   CI (99.9%): [≈ 0, 1693.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1656.586 ±(99.9%) 3568.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1656.586, 2106.947), stdev = 926.621
[info]   CI (99.9%): [≈ 0, 5224.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8416.069 ops/s
[info] # Warmup Iteration   2: 62704.337 ops/s
[info] # Warmup Iteration   3: 72536.449 ops/s
[info] # Warmup Iteration   4: 73957.785 ops/s
[info] # Warmup Iteration   5: 74026.787 ops/s
[info] Iteration   1: 73124.801 ops/s
[info]                  ·gc.alloc.rate:                   3093.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              66581.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3336.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71803.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.273 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 74089.373 ops/s
[info]                  ·gc.alloc.rate:                   3120.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              66283.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56758.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.884 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 74717.000 ops/s
[info]                  ·gc.alloc.rate:               3174.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          66866.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3349.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70566.437 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 75008.152 ops/s
[info]                  ·gc.alloc.rate:               3160.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          66319.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56441.786 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 73423.348 ops/s
[info]                  ·gc.alloc.rate:                   3122.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              66932.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72301.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.446 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   74072.534 ±(99.9%) 3110.834 ops/s [Average]
[info]   (min, avg, max) = (73124.801, 74072.534, 75008.152), stdev = 807.874
[info]   CI (99.9%): [70961.700, 77183.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3134.270 ±(99.9%) 126.160 MB/sec [Average]
[info]   (min, avg, max) = (3093.511, 3134.270, 3174.301), stdev = 32.763
[info]   CI (99.9%): [3008.110, 3260.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66596.554 ±(99.9%) 1156.673 B/op [Average]
[info]   (min, avg, max) = (66283.222, 66596.554, 66932.366), stdev = 300.384
[info]   CI (99.9%): [65439.881, 67753.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3084.194 ±(99.9%) 1418.735 MB/sec [Average]
[info]   (min, avg, max) = (2671.883, 3084.194, 3373.073), stdev = 368.441
[info]   CI (99.9%): [1665.459, 4502.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65574.269 ±(99.9%) 31642.450 B/op [Average]
[info]   (min, avg, max) = (56441.786, 65574.269, 72301.553), stdev = 8217.444
[info]   CI (99.9%): [33931.819, 97216.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.291), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.521 ±(99.9%) 10.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.521, 6.273), stdev = 2.682
[info]   CI (99.9%): [≈ 0, 11.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.96% complete, ETA 01:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52514.906 ops/s
[info] # Warmup Iteration   2: 125945.066 ops/s
[info] # Warmup Iteration   3: 128856.782 ops/s
[info] # Warmup Iteration   4: 132065.762 ops/s
[info] # Warmup Iteration   5: 131937.283 ops/s
[info] Iteration   1: 132315.468 ops/s
[info]                  ·gc.alloc.rate:               1148.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          13657.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7974.971 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 132177.206 ops/s
[info]                  ·gc.alloc.rate:                   1159.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              13802.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15970.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 131299.315 ops/s
[info]                  ·gc.alloc.rate:                   1162.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              13928.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16089.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 132324.582 ops/s
[info]                  ·gc.alloc.rate:               1143.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          13595.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7986.494 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 132479.359 ops/s
[info]                  ·gc.alloc.rate:                   1158.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              13757.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15954.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   132119.186 ±(99.9%) 1812.253 ops/s [Average]
[info]   (min, avg, max) = (131299.315, 132119.186, 132479.359), stdev = 470.636
[info]   CI (99.9%): [130306.933, 133931.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1154.230 ±(99.9%) 31.540 MB/sec [Average]
[info]   (min, avg, max) = (1143.041, 1154.230, 1162.054), stdev = 8.191
[info]   CI (99.9%): [1122.690, 1185.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13748.331 ±(99.9%) 498.979 B/op [Average]
[info]   (min, avg, max) = (13595.790, 13748.331, 13928.972), stdev = 129.583
[info]   CI (99.9%): [13249.352, 14247.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.851 ±(99.9%) 1416.244 MB/sec [Average]
[info]   (min, avg, max) = (670.458, 1073.851, 1343.208), stdev = 367.794
[info]   CI (99.9%): [≈ 0, 2490.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12795.226 ±(99.9%) 16924.824 B/op [Average]
[info]   (min, avg, max) = (7974.971, 12795.226, 16089.680), stdev = 4395.323
[info]   CI (99.9%): [≈ 0, 29720.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.498), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 6.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.459 ±(99.9%) 71.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.459, 41.547), stdev = 18.498
[info]   CI (99.9%): [≈ 0, 79.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.16% complete, ETA 01:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.772 ops/s
[info] # Warmup Iteration   2: 197713.214 ops/s
[info] # Warmup Iteration   3: 203111.816 ops/s
[info] # Warmup Iteration   4: 209425.709 ops/s
[info] # Warmup Iteration   5: 209331.127 ops/s
[info] Iteration   1: 202246.370 ops/s
[info]                  ·gc.alloc.rate:                   172.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1342.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3981.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 208752.551 ops/s
[info]                  ·gc.alloc.rate:      163.419 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 208830.579 ops/s
[info]                  ·gc.alloc.rate:      163.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 206165.326 ops/s
[info]                  ·gc.alloc.rate:               173.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          1321.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3905.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 208500.506 ops/s
[info]                  ·gc.alloc.rate:      163.208 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   206899.066 ±(99.9%) 10877.083 ops/s [Average]
[info]   (min, avg, max) = (202246.370, 206899.066, 208830.579), stdev = 2824.744
[info]   CI (99.9%): [196021.983, 217776.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   167.135 ±(99.9%) 19.886 MB/sec [Average]
[info]   (min, avg, max) = (163.208, 167.135, 173.039), stdev = 5.164
[info]   CI (99.9%): [147.249, 187.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1271.940 ±(99.9%) 212.640 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1271.940, 1342.683), stdev = 55.222
[info]   CI (99.9%): [1059.301, 1484.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.598), stdev = 280.213
[info]   CI (99.9%): [≈ 0, 1283.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1577.376 ±(99.9%) 8317.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1577.376, 3981.245), stdev = 2160.076
[info]   CI (99.9%): [≈ 0, 9895.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.366 ±(99.9%) 3.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.366, 1.832), stdev = 0.819
[info]   CI (99.9%): [≈ 0, 3.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2.852 ±(99.9%) 24.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.852, 14.259), stdev = 6.377
[info]   CI (99.9%): [≈ 0, 27.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.36% complete, ETA 01:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136743.121 ops/s
[info] # Warmup Iteration   2: 397896.931 ops/s
[info] # Warmup Iteration   3: 414128.073 ops/s
[info] # Warmup Iteration   4: 416148.646 ops/s
[info] # Warmup Iteration   5: 419045.699 ops/s
[info] Iteration   1: 418307.343 ops/s
[info]                  ·gc.alloc.rate:      410.358 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 417760.998 ops/s
[info]                  ·gc.alloc.rate:               422.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          1589.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1927.396 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 409498.818 ops/s
[info]                  ·gc.alloc.rate:               430.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          1655.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2564.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 416602.743 ops/s
[info]                  ·gc.alloc.rate:      408.668 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 417169.689 ops/s
[info]                  ·gc.alloc.rate:               435.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          1641.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2516.954 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   415867.918 ±(99.9%) 13928.285 ops/s [Average]
[info]   (min, avg, max) = (409498.818, 415867.918, 418307.343), stdev = 3617.131
[info]   CI (99.9%): [401939.633, 429796.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   421.425 ±(99.9%) 45.726 MB/sec [Average]
[info]   (min, avg, max) = (408.668, 421.425, 435.188), stdev = 11.875
[info]   CI (99.9%): [375.699, 467.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1595.133 ±(99.9%) 203.148 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1595.133, 1655.895), stdev = 52.757
[info]   CI (99.9%): [1391.984, 1798.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.190 ±(99.9%) 1320.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.190, 667.172), stdev = 342.950
[info]   CI (99.9%): [≈ 0, 1689.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1401.688 ±(99.9%) 5020.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1401.688, 2564.090), stdev = 1303.920
[info]   CI (99.9%): [≈ 0, 6422.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.56% complete, ETA 01:19:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297973.047 ops/s
[info] # Warmup Iteration   2: 451367.035 ops/s
[info] # Warmup Iteration   3: 448400.204 ops/s
[info] # Warmup Iteration   4: 461123.748 ops/s
[info] # Warmup Iteration   5: 471075.441 ops/s
[info] Iteration   1: 451606.741 ops/s
[info]                  ·gc.alloc.rate:               363.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          1266.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1782.933 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 465493.410 ops/s
[info]                  ·gc.alloc.rate:                   381.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              1290.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1729.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 471632.287 ops/s
[info]                  ·gc.alloc.rate:      369.188 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 467526.694 ops/s
[info]                  ·gc.alloc.rate:               386.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          1301.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2258.233 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 471694.192 ops/s
[info]                  ·gc.alloc.rate:      369.238 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   465590.665 ±(99.9%) 31815.154 ops/s [Average]
[info]   (min, avg, max) = (451606.741, 465590.665, 471694.192), stdev = 8262.294
[info]   CI (99.9%): [433775.511, 497405.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   374.053 ±(99.9%) 37.398 MB/sec [Average]
[info]   (min, avg, max) = (363.478, 374.053, 386.780), stdev = 9.712
[info]   CI (99.9%): [336.655, 411.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1264.586 ±(99.9%) 124.508 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1264.586, 1301.996), stdev = 32.334
[info]   CI (99.9%): [1140.078, 1389.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.807 ±(99.9%) 1216.982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.807, 670.846), stdev = 316.046
[info]   CI (99.9%): [≈ 0, 1555.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1154.192 ±(99.9%) 4133.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1154.192, 2258.233), stdev = 1073.529
[info]   CI (99.9%): [≈ 0, 5287.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.76% complete, ETA 01:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237304.059 ops/s
[info] # Warmup Iteration   2: 480953.685 ops/s
[info] # Warmup Iteration   3: 490033.118 ops/s
[info] # Warmup Iteration   4: 493622.977 ops/s
[info] # Warmup Iteration   5: 494042.242 ops/s
[info] Iteration   1: 494020.349 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 495673.257 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 495548.110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 494122.620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 494201.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   494713.133 ±(99.9%) 3169.260 ops/s [Average]
[info]   (min, avg, max) = (494020.349, 494713.133, 495673.257), stdev = 823.047
[info]   CI (99.9%): [491543.874, 497882.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.96% complete, ETA 01:18:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8235.969 ops/s
[info] # Warmup Iteration   2: 27708.028 ops/s
[info] # Warmup Iteration   3: 29136.046 ops/s
[info] # Warmup Iteration   4: 29037.066 ops/s
[info] # Warmup Iteration   5: 28724.107 ops/s
[info] Iteration   1: 29178.714 ops/s
[info]                  ·gc.alloc.rate:                   1579.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              85189.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72293.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 28755.508 ops/s
[info]                  ·gc.alloc.rate:                   1616.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              88459.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110107.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 29542.564 ops/s
[info]                  ·gc.alloc.rate:                   1597.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              85097.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71402.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 29572.448 ops/s
[info]                  ·gc.alloc.rate:                   1623.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              86424.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71186.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29519.137 ops/s
[info]                  ·gc.alloc.rate:                   1633.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              87114.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106867.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   29313.674 ±(99.9%) 1349.558 ops/s [Average]
[info]   (min, avg, max) = (28755.508, 29313.674, 29572.448), stdev = 350.476
[info]   CI (99.9%): [27964.117, 30663.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1610.250 ±(99.9%) 84.020 MB/sec [Average]
[info]   (min, avg, max) = (1579.439, 1610.250, 1633.904), stdev = 21.820
[info]   CI (99.9%): [1526.229, 1694.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86457.248 ±(99.9%) 5411.050 B/op [Average]
[info]   (min, avg, max) = (85097.591, 86457.248, 88459.677), stdev = 1405.233
[info]   CI (99.9%): [81046.198, 91868.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1606.973 ±(99.9%) 1410.882 MB/sec [Average]
[info]   (min, avg, max) = (1337.604, 1606.973, 2012.277), stdev = 366.402
[info]   CI (99.9%): [196.091, 3017.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86371.516 ±(99.9%) 77883.244 B/op [Average]
[info]   (min, avg, max) = (71186.037, 86371.516, 110107.772), stdev = 20226.031
[info]   CI (99.9%): [8488.271, 164254.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.808, 3.103), stdev = 1.325
[info]   CI (99.9%): [≈ 0, 5.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   43.939 ±(99.9%) 279.352 B/op [Average]
[info]   (min, avg, max) = (2.216, 43.939, 169.765), stdev = 72.547
[info]   CI (99.9%): [≈ 0, 323.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.347
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.16% complete, ETA 01:18:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 680.570 ops/s
[info] # Warmup Iteration   2: 7242.397 ops/s
[info] # Warmup Iteration   3: 8391.183 ops/s
[info] # Warmup Iteration   4: 8403.305 ops/s
[info] # Warmup Iteration   5: 8480.162 ops/s
[info] Iteration   1: 8717.270 ops/s
[info]                  ·gc.alloc.rate:                   1269.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              229204.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242210.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.758 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 8483.570 ops/s
[info]                  ·gc.alloc.rate:               1228.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          227912.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 249013.629 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 8458.579 ops/s
[info]                  ·gc.alloc.rate:                   1221.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              227260.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249843.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8411.435 ops/s
[info]                  ·gc.alloc.rate:                   1232.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              230580.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251269.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 689.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 8587.227 ops/s
[info]                  ·gc.alloc.rate:               1223.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          224109.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123060.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8531.616 ±(99.9%) 470.213 ops/s [Average]
[info]   (min, avg, max) = (8411.435, 8531.616, 8717.270), stdev = 122.113
[info]   CI (99.9%): [8061.403, 9001.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1234.980 ±(99.9%) 76.321 MB/sec [Average]
[info]   (min, avg, max) = (1221.468, 1234.980, 1269.575), stdev = 19.820
[info]   CI (99.9%): [1158.659, 1311.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   227813.438 ±(99.9%) 9357.537 B/op [Average]
[info]   (min, avg, max) = (224109.849, 227813.438, 230580.096), stdev = 2430.123
[info]   CI (99.9%): [218455.902, 237170.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1208.238 ±(99.9%) 1155.229 MB/sec [Average]
[info]   (min, avg, max) = (671.566, 1208.238, 1342.895), stdev = 300.009
[info]   CI (99.9%): [53.009, 2363.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   223079.503 ±(99.9%) 215716.993 B/op [Average]
[info]   (min, avg, max) = (123060.264, 223079.503, 251269.371), stdev = 56021.018
[info]   CI (99.9%): [7362.509, 438796.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.684), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 7.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   139.407 ±(99.9%) 1183.929 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 139.407, 689.402), stdev = 307.463
[info]   CI (99.9%): [≈ 0, 1323.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.200, 8.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.37% complete, ETA 01:18:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1089.454 ops/s
[info] # Warmup Iteration   2: 6839.661 ops/s
[info] # Warmup Iteration   3: 7690.316 ops/s
[info] # Warmup Iteration   4: 7891.048 ops/s
[info] # Warmup Iteration   5: 7929.009 ops/s
[info] Iteration   1: 7850.214 ops/s
[info]                  ·gc.alloc.rate:                   1060.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              212569.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267752.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7816.768 ops/s
[info]                  ·gc.alloc.rate:                   1053.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              212207.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269051.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7933.952 ops/s
[info]                  ·gc.alloc.rate:               1046.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          207530.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132657.548 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7821.015 ops/s
[info]                  ·gc.alloc.rate:               1057.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          212691.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 269214.482 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 7918.133 ops/s
[info]                  ·gc.alloc.rate:               1042.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          207237.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132991.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   7868.016 ±(99.9%) 211.010 ops/s [Average]
[info]   (min, avg, max) = (7816.768, 7868.016, 7933.952), stdev = 54.799
[info]   CI (99.9%): [7657.006, 8079.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1052.149 ±(99.9%) 28.939 MB/sec [Average]
[info]   (min, avg, max) = (1042.681, 1052.149, 1060.765), stdev = 7.515
[info]   CI (99.9%): [1023.210, 1081.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   210447.277 ±(99.9%) 10796.855 B/op [Average]
[info]   (min, avg, max) = (207237.420, 210447.277, 212691.328), stdev = 2803.909
[info]   CI (99.9%): [199650.423, 221244.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.668 ±(99.9%) 1408.556 MB/sec [Average]
[info]   (min, avg, max) = (668.790, 1069.668, 1337.954), stdev = 365.798
[info]   CI (99.9%): [≈ 0, 2478.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   214333.582 ±(99.9%) 286524.059 B/op [Average]
[info]   (min, avg, max) = (132657.548, 214333.582, 269214.482), stdev = 74409.388
[info]   CI (99.9%): [≈ 0, 500857.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.673 ±(99.9%) 8.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.673, 4.191), stdev = 2.291
[info]   CI (99.9%): [≈ 0, 10.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.57% complete, ETA 01:18:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102820.005 ops/s
[info] # Warmup Iteration   2: 177683.077 ops/s
[info] # Warmup Iteration   3: 185568.110 ops/s
[info] # Warmup Iteration   4: 185534.735 ops/s
[info] # Warmup Iteration   5: 186762.264 ops/s
[info] Iteration   1: 185717.298 ops/s
[info]                  ·gc.alloc.rate:                   1853.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              15704.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17107.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 181984.503 ops/s
[info]                  ·gc.alloc.rate:                   1815.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              15697.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17447.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.861 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 186690.517 ops/s
[info]                  ·gc.alloc.rate:                   1861.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              15686.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11310.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 186590.037 ops/s
[info]                  ·gc.alloc.rate:                   1874.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              15811.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16974.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 186115.443 ops/s
[info]                  ·gc.alloc.rate:               1885.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          15943.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17029.361 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   185419.560 ±(99.9%) 7545.167 ops/s [Average]
[info]   (min, avg, max) = (181984.503, 185419.560, 186690.517), stdev = 1959.456
[info]   CI (99.9%): [177874.393, 192964.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1858.092 ±(99.9%) 104.282 MB/sec [Average]
[info]   (min, avg, max) = (1815.165, 1858.092, 1885.997), stdev = 27.082
[info]   CI (99.9%): [1753.810, 1962.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15768.725 ±(99.9%) 422.687 B/op [Average]
[info]   (min, avg, max) = (15686.579, 15768.725, 15943.399), stdev = 109.771
[info]   CI (99.9%): [15346.037, 16191.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1881.071 ±(99.9%) 1160.142 MB/sec [Average]
[info]   (min, avg, max) = (1342.132, 1881.071, 2018.678), stdev = 301.285
[info]   CI (99.9%): [720.929, 3041.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15973.755 ±(99.9%) 10063.419 B/op [Average]
[info]   (min, avg, max) = (11310.276, 15973.755, 17447.269), stdev = 2613.438
[info]   CI (99.9%): [5910.336, 26037.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 4.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 2.644), stdev = 1.137
[info]   CI (99.9%): [≈ 0, 5.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.558 ±(99.9%) 37.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.558, 22.404), stdev = 9.634
[info]   CI (99.9%): [≈ 0, 42.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.77% complete, ETA 01:17:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753.696 ops/s
[info] # Warmup Iteration   2: 6552.636 ops/s
[info] # Warmup Iteration   3: 7418.949 ops/s
[info] # Warmup Iteration   4: 7945.657 ops/s
[info] # Warmup Iteration   5: 7897.241 ops/s
[info] Iteration   1: 7753.852 ops/s
[info]                  ·gc.alloc.rate:               1302.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          264305.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 270661.314 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 7881.461 ops/s
[info]                  ·gc.alloc.rate:                   1326.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              264675.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266566.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7780.999 ops/s
[info]                  ·gc.alloc.rate:                   1303.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              263637.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270261.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7970.003 ops/s
[info]                  ·gc.alloc.rate:                   1335.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              263710.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263985.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 822.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7953.921 ops/s
[info]                  ·gc.alloc.rate:                   1331.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              263494.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263857.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7868.047 ±(99.9%) 378.105 ops/s [Average]
[info]   (min, avg, max) = (7753.852, 7868.047, 7970.003), stdev = 98.193
[info]   CI (99.9%): [7489.942, 8246.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1319.808 ±(99.9%) 61.021 MB/sec [Average]
[info]   (min, avg, max) = (1302.205, 1319.808, 1335.560), stdev = 15.847
[info]   CI (99.9%): [1258.787, 1380.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   263964.656 ±(99.9%) 1939.577 B/op [Average]
[info]   (min, avg, max) = (263494.340, 263964.656, 264675.520), stdev = 503.702
[info]   CI (99.9%): [262025.079, 265904.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1335.161 ±(99.9%) 6.028 MB/sec [Average]
[info]   (min, avg, max) = (1333.517, 1335.161, 1336.954), stdev = 1.565
[info]   CI (99.9%): [1329.134, 1341.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   267066.445 ±(99.9%) 12650.163 B/op [Average]
[info]   (min, avg, max) = (263857.359, 267066.445, 270661.314), stdev = 3285.207
[info]   CI (99.9%): [254416.282, 279716.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.966 ±(99.9%) 6.955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.966, 4.166), stdev = 1.806
[info]   CI (99.9%): [≈ 0, 7.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   190.895 ±(99.9%) 1373.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 190.895, 822.511), stdev = 356.606
[info]   CI (99.9%): [≈ 0, 1564.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41.97% complete, ETA 01:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1507.200 ops/s
[info] # Warmup Iteration   2: 7900.966 ops/s
[info] # Warmup Iteration   3: 8007.849 ops/s
[info] # Warmup Iteration   4: 8352.914 ops/s
[info] # Warmup Iteration   5: 8309.036 ops/s
[info] Iteration   1: 8256.747 ops/s
[info]                  ·gc.alloc.rate:               1135.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          216387.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 256018.102 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 8356.979 ops/s
[info]                  ·gc.alloc.rate:               1122.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          211460.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126509.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8337.278 ops/s
[info]                  ·gc.alloc.rate:               1134.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          214151.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 253750.614 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 8310.517 ops/s
[info]                  ·gc.alloc.rate:               1127.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          213586.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 254574.876 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 8349.045 ops/s
[info]                  ·gc.alloc.rate:                   1119.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              211011.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126770.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 600.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   8322.113 ±(99.9%) 156.155 ops/s [Average]
[info]   (min, avg, max) = (8256.747, 8322.113, 8356.979), stdev = 40.553
[info]   CI (99.9%): [8165.958, 8478.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1128.054 ±(99.9%) 27.174 MB/sec [Average]
[info]   (min, avg, max) = (1119.418, 1128.054, 1135.290), stdev = 7.057
[info]   CI (99.9%): [1100.881, 1155.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   213319.642 ±(99.9%) 8383.920 B/op [Average]
[info]   (min, avg, max) = (211011.004, 213319.642, 216387.963), stdev = 2177.277
[info]   CI (99.9%): [204935.722, 221703.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1075.295 ±(99.9%) 1417.113 MB/sec [Average]
[info]   (min, avg, max) = (671.778, 1075.295, 1344.638), stdev = 368.020
[info]   CI (99.9%): [≈ 0, 2492.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   203524.713 ±(99.9%) 270278.948 B/op [Average]
[info]   (min, avg, max) = (126509.020, 203524.713, 256018.102), stdev = 70190.584
[info]   CI (99.9%): [≈ 0, 473803.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 3.185), stdev = 1.424
[info]   CI (99.9%): [≈ 0, 6.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   120.084 ±(99.9%) 1033.959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 120.084, 600.420), stdev = 268.516
[info]   CI (99.9%): [≈ 0, 1154.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.17% complete, ETA 01:17:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7087.714 ops/s
[info] # Warmup Iteration   2: 19415.588 ops/s
[info] # Warmup Iteration   3: 20387.537 ops/s
[info] # Warmup Iteration   4: 20028.755 ops/s
[info] # Warmup Iteration   5: 19935.314 ops/s
[info] Iteration   1: 19750.904 ops/s
[info]                  ·gc.alloc.rate:                   1135.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              90477.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106768.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 19921.205 ops/s
[info]                  ·gc.alloc.rate:                   1131.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              89335.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105936.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 20059.348 ops/s
[info]                  ·gc.alloc.rate:               1130.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          88695.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52627.394 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 20417.368 ops/s
[info]                  ·gc.alloc.rate:               1154.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          88956.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103461.005 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 20524.459 ops/s
[info]                  ·gc.alloc.rate:                   1170.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              89792.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102977.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20134.657 ±(99.9%) 1263.063 ops/s [Average]
[info]   (min, avg, max) = (19750.904, 20134.657, 20524.459), stdev = 328.013
[info]   CI (99.9%): [18871.594, 21397.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1144.600 ±(99.9%) 67.877 MB/sec [Average]
[info]   (min, avg, max) = (1130.711, 1144.600, 1170.992), stdev = 17.628
[info]   CI (99.9%): [1076.723, 1212.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89451.632 ±(99.9%) 2720.917 B/op [Average]
[info]   (min, avg, max) = (88695.921, 89451.632, 90477.003), stdev = 706.614
[info]   CI (99.9%): [86730.715, 92172.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.613 ±(99.9%) 1155.316 MB/sec [Average]
[info]   (min, avg, max) = (670.903, 1207.613, 1342.938), stdev = 300.032
[info]   CI (99.9%): [52.298, 2362.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   94354.225 ±(99.9%) 90031.999 B/op [Average]
[info]   (min, avg, max) = (52627.394, 94354.225, 106768.445), stdev = 23381.024
[info]   CI (99.9%): [4322.226, 184386.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 6.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.518), stdev = 1.564
[info]   CI (99.9%): [≈ 0, 6.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55.272 ±(99.9%) 461.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.272, 269.768), stdev = 119.924
[info]   CI (99.9%): [≈ 0, 517.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.37% complete, ETA 01:17:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7853.768 ops/s
[info] # Warmup Iteration   2: 22802.641 ops/s
[info] # Warmup Iteration   3: 24297.484 ops/s
[info] # Warmup Iteration   4: 24429.563 ops/s
[info] # Warmup Iteration   5: 24318.900 ops/s
[info] Iteration   1: 24587.843 ops/s
[info]                  ·gc.alloc.rate:                   1101.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              70473.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85597.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 24728.892 ops/s
[info]                  ·gc.alloc.rate:               1082.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          68850.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42563.690 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 24599.607 ops/s
[info]                  ·gc.alloc.rate:                   1103.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              70572.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85662.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 24169.055 ops/s
[info]                  ·gc.alloc.rate:               1068.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          69555.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43614.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 24550.682 ops/s
[info]                  ·gc.alloc.rate:                   1098.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              70409.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85897.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   24527.216 ±(99.9%) 813.251 ops/s [Average]
[info]   (min, avg, max) = (24169.055, 24527.216, 24728.892), stdev = 211.199
[info]   CI (99.9%): [23713.965, 25340.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1090.718 ±(99.9%) 58.060 MB/sec [Average]
[info]   (min, avg, max) = (1068.249, 1090.718, 1103.525), stdev = 15.078
[info]   CI (99.9%): [1032.658, 1148.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69972.248 ±(99.9%) 2878.026 B/op [Average]
[info]   (min, avg, max) = (68850.630, 69972.248, 70572.651), stdev = 747.414
[info]   CI (99.9%): [67094.222, 72850.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.176 ±(99.9%) 1412.138 MB/sec [Average]
[info]   (min, avg, max) = (669.048, 1071.176, 1339.915), stdev = 366.728
[info]   CI (99.9%): [≈ 0, 2483.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68667.171 ±(99.9%) 89922.499 B/op [Average]
[info]   (min, avg, max) = (42563.690, 68667.171, 85897.399), stdev = 23352.588
[info]   CI (99.9%): [≈ 0, 158589.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.374), stdev = 1.504
[info]   CI (99.9%): [≈ 0, 6.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.798 ±(99.9%) 371.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.798, 216.325), stdev = 96.448
[info]   CI (99.9%): [≈ 0, 415.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.57% complete, ETA 01:16:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186079.284 ops/s
[info] # Warmup Iteration   2: 374220.532 ops/s
[info] # Warmup Iteration   3: 359959.884 ops/s
[info] # Warmup Iteration   4: 376611.070 ops/s
[info] # Warmup Iteration   5: 376128.931 ops/s
[info] Iteration   1: 376597.638 ops/s
[info]                  ·gc.alloc.rate:               877.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          3667.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2807.654 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 377350.508 ops/s
[info]                  ·gc.alloc.rate:               875.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          3648.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2802.060 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 375341.124 ops/s
[info]                  ·gc.alloc.rate:                   886.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              3716.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5636.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 378331.618 ops/s
[info]                  ·gc.alloc.rate:                   884.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              3677.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2798.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 376390.607 ops/s
[info]                  ·gc.alloc.rate:               867.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          3625.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2813.279 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   376802.299 ±(99.9%) 4299.015 ops/s [Average]
[info]   (min, avg, max) = (375341.124, 376802.299, 378331.618), stdev = 1116.441
[info]   CI (99.9%): [372503.284, 381101.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   878.118 ±(99.9%) 29.025 MB/sec [Average]
[info]   (min, avg, max) = (867.438, 878.118, 886.274), stdev = 7.538
[info]   CI (99.9%): [849.094, 907.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3667.257 ±(99.9%) 130.405 B/op [Average]
[info]   (min, avg, max) = (3625.594, 3667.257, 3716.299), stdev = 33.866
[info]   CI (99.9%): [3536.852, 3797.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.822 ±(99.9%) 1156.994 MB/sec [Average]
[info]   (min, avg, max) = (671.814, 806.822, 1344.314), stdev = 300.468
[info]   CI (99.9%): [≈ 0, 1963.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3371.770 ±(99.9%) 4875.984 B/op [Average]
[info]   (min, avg, max) = (2798.922, 3371.770, 5636.935), stdev = 1266.277
[info]   CI (99.9%): [≈ 0, 8247.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.175), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42.77% complete, ETA 01:16:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241505.106 ops/s
[info] # Warmup Iteration   2: 397934.111 ops/s
[info] # Warmup Iteration   3: 417281.713 ops/s
[info] # Warmup Iteration   4: 417989.302 ops/s
[info] # Warmup Iteration   5: 416970.207 ops/s
[info] Iteration   1: 417542.182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 416830.957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 417059.885 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 417574.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 418462.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   417493.905 ±(99.9%) 2415.678 ops/s [Average]
[info]   (min, avg, max) = (416830.957, 417493.905, 418462.187), stdev = 627.344
[info]   CI (99.9%): [415078.227, 419909.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.97% complete, ETA 01:16:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7615.518 ops/s
[info] # Warmup Iteration   2: 23281.267 ops/s
[info] # Warmup Iteration   3: 24883.604 ops/s
[info] # Warmup Iteration   4: 24795.722 ops/s
[info] # Warmup Iteration   5: 24761.719 ops/s
[info] Iteration   1: 23988.631 ops/s
[info]                  ·gc.alloc.rate:               1164.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          76389.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43943.782 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 24064.771 ops/s
[info]                  ·gc.alloc.rate:               1158.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          75731.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87628.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 24113.617 ops/s
[info]                  ·gc.alloc.rate:                   1157.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              75544.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87515.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 25043.515 ops/s
[info]                  ·gc.alloc.rate:               1186.046 MB/sec
[info]                  ·gc.alloc.rate.norm:          74518.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42154.019 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 24891.540 ops/s
[info]                  ·gc.alloc.rate:                   1204.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              76114.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84826.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   24420.415 ±(99.9%) 1941.863 ops/s [Average]
[info]   (min, avg, max) = (23988.631, 24420.415, 25043.515), stdev = 504.296
[info]   CI (99.9%): [22478.552, 26362.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1174.101 ±(99.9%) 78.153 MB/sec [Average]
[info]   (min, avg, max) = (1157.872, 1174.101, 1204.015), stdev = 20.296
[info]   CI (99.9%): [1095.948, 1252.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75659.699 ±(99.9%) 2764.129 B/op [Average]
[info]   (min, avg, max) = (74518.234, 75659.699, 76389.369), stdev = 717.836
[info]   CI (99.9%): [72895.569, 78423.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.818 ±(99.9%) 1414.708 MB/sec [Average]
[info]   (min, avg, max) = (669.783, 1072.818, 1341.813), stdev = 367.395
[info]   CI (99.9%): [≈ 0, 2487.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69213.507 ±(99.9%) 92105.863 B/op [Average]
[info]   (min, avg, max) = (42154.019, 69213.507, 87628.194), stdev = 23919.600
[info]   CI (99.9%): [≈ 0, 161319.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.851 ±(99.9%) 7.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.851, 4.208), stdev = 1.877
[info]   CI (99.9%): [≈ 0, 8.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   53.804 ±(99.9%) 456.817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.804, 266.010), stdev = 118.634
[info]   CI (99.9%): [≈ 0, 510.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43.17% complete, ETA 01:15:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5753.806 ops/s
[info] # Warmup Iteration   2: 10451.890 ops/s
[info] # Warmup Iteration   3: 10711.084 ops/s
[info] # Warmup Iteration   4: 11098.042 ops/s
[info] # Warmup Iteration   5: 10862.669 ops/s
[info] Iteration   1: 11033.074 ops/s
[info]                  ·gc.alloc.rate:                   962.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              137236.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191738.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10830.627 ops/s
[info]                  ·gc.alloc.rate:               930.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          135126.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97665.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 10904.709 ops/s
[info]                  ·gc.alloc.rate:               922.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          133187.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97003.134 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 10965.056 ops/s
[info]                  ·gc.alloc.rate:                   942.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              135321.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193136.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11068.316 ops/s
[info]                  ·gc.alloc.rate:               937.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          133338.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95669.536 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   10960.356 ±(99.9%) 369.799 ops/s [Average]
[info]   (min, avg, max) = (10830.627, 10960.356, 11068.316), stdev = 96.036
[info]   CI (99.9%): [10590.557, 11330.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   939.215 ±(99.9%) 57.359 MB/sec [Average]
[info]   (min, avg, max) = (922.998, 939.215, 962.230), stdev = 14.896
[info]   CI (99.9%): [881.856, 996.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   134842.020 ±(99.9%) 6398.319 B/op [Average]
[info]   (min, avg, max) = (133187.307, 134842.020, 137236.650), stdev = 1661.623
[info]   CI (99.9%): [128443.701, 141240.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.490 ±(99.9%) 1418.406 MB/sec [Average]
[info]   (min, avg, max) = (672.239, 941.490, 1345.637), stdev = 368.355
[info]   CI (99.9%): [≈ 0, 2359.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   135042.610 ±(99.9%) 201778.418 B/op [Average]
[info]   (min, avg, max) = (95669.536, 135042.610, 193136.092), stdev = 52401.214
[info]   CI (99.9%): [≈ 0, 336821.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.383 ±(99.9%) 12.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.383, 5.976), stdev = 3.263
[info]   CI (99.9%): [≈ 0, 14.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.37% complete, ETA 01:15:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1367.438 ops/s
[info] # Warmup Iteration   2: 11347.756 ops/s
[info] # Warmup Iteration   3: 13119.010 ops/s
[info] # Warmup Iteration   4: 13141.607 ops/s
[info] # Warmup Iteration   5: 13165.942 ops/s
[info] Iteration   1: 13145.719 ops/s
[info]                  ·gc.alloc.rate:                   1277.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              152880.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160540.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.477 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13110.102 ops/s
[info]                  ·gc.alloc.rate:               1270.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          152452.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80524.368 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 13477.365 ops/s
[info]                  ·gc.alloc.rate:               1305.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          152458.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156702.993 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 12998.533 ops/s
[info]                  ·gc.alloc.rate:                   1292.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              156470.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162557.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 438.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 13181.396 ops/s
[info]                  ·gc.alloc.rate:                   1295.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              154632.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160077.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13182.623 ±(99.9%) 687.167 ops/s [Average]
[info]   (min, avg, max) = (12998.533, 13182.623, 13477.365), stdev = 178.455
[info]   CI (99.9%): [12495.456, 13869.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1288.107 ±(99.9%) 54.884 MB/sec [Average]
[info]   (min, avg, max) = (1270.202, 1288.107, 1305.569), stdev = 14.253
[info]   CI (99.9%): [1233.223, 1342.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   153778.817 ±(99.9%) 6748.830 B/op [Average]
[info]   (min, avg, max) = (152452.225, 153778.817, 156470.809), stdev = 1752.650
[info]   CI (99.9%): [147029.988, 160527.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1207.493 ±(99.9%) 1155.032 MB/sec [Average]
[info]   (min, avg, max) = (670.913, 1207.493, 1342.594), stdev = 299.958
[info]   CI (99.9%): [52.461, 2362.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   144080.471 ±(99.9%) 137048.931 B/op [Average]
[info]   (min, avg, max) = (80524.368, 144080.471, 162557.105), stdev = 35591.172
[info]   CI (99.9%): [7031.540, 281129.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.622), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 6.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   91.194 ±(99.9%) 747.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.194, 438.553), stdev = 194.231
[info]   CI (99.9%): [≈ 0, 839.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.57% complete, ETA 01:15:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1967.207 ops/s
[info] # Warmup Iteration   2: 12379.280 ops/s
[info] # Warmup Iteration   3: 13310.394 ops/s
[info] # Warmup Iteration   4: 13664.698 ops/s
[info] # Warmup Iteration   5: 13661.448 ops/s
[info] Iteration   1: 13351.337 ops/s
[info]                  ·gc.alloc.rate:               1192.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          140581.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78678.535 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13507.626 ops/s
[info]                  ·gc.alloc.rate:                   1207.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              140652.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155617.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 13540.698 ops/s
[info]                  ·gc.alloc.rate:               1209.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          140541.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155354.629 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 13600.817 ops/s
[info]                  ·gc.alloc.rate:                   1236.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              143113.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154773.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435.975 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 13733.972 ops/s
[info]                  ·gc.alloc.rate:                   1221.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              139998.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76681.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.639 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13546.890 ±(99.9%) 536.776 ops/s [Average]
[info]   (min, avg, max) = (13351.337, 13546.890, 13733.972), stdev = 139.399
[info]   CI (99.9%): [13010.113, 14083.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1213.656 ±(99.9%) 64.161 MB/sec [Average]
[info]   (min, avg, max) = (1192.618, 1213.656, 1236.935), stdev = 16.662
[info]   CI (99.9%): [1149.495, 1277.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   140977.690 ±(99.9%) 4706.229 B/op [Average]
[info]   (min, avg, max) = (139998.641, 140977.690, 143113.985), stdev = 1222.193
[info]   CI (99.9%): [136271.461, 145683.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.442 ±(99.9%) 1409.839 MB/sec [Average]
[info]   (min, avg, max) = (667.469, 1069.442, 1337.710), stdev = 366.131
[info]   CI (99.9%): [≈ 0, 2479.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   124221.161 ±(99.9%) 163625.816 B/op [Average]
[info]   (min, avg, max) = (76681.319, 124221.161, 155617.682), stdev = 42493.105
[info]   CI (99.9%): [≈ 0, 287846.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 6.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 3.768), stdev = 1.640
[info]   CI (99.9%): [≈ 0, 7.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   99.608 ±(99.9%) 730.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.608, 435.975), stdev = 189.755
[info]   CI (99.9%): [≈ 0, 830.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.78% complete, ETA 01:15:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137326.594 ops/s
[info] # Warmup Iteration   2: 278430.006 ops/s
[info] # Warmup Iteration   3: 290947.024 ops/s
[info] # Warmup Iteration   4: 289871.744 ops/s
[info] # Warmup Iteration   5: 290814.337 ops/s
[info] Iteration   1: 292136.016 ops/s
[info]                  ·gc.alloc.rate:                   1741.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              9382.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10870.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 294076.951 ops/s
[info]                  ·gc.alloc.rate:                   1740.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              9317.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7201.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 291375.377 ops/s
[info]                  ·gc.alloc.rate:                   1762.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              9518.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10877.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 294114.007 ops/s
[info]                  ·gc.alloc.rate:               1741.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          9317.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7179.317 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 285769.283 ops/s
[info]                  ·gc.alloc.rate:                   1733.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              9545.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11083.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   291494.327 ±(99.9%) 13162.038 ops/s [Average]
[info]   (min, avg, max) = (285769.283, 291494.327, 294114.007), stdev = 3418.139
[info]   CI (99.9%): [278332.289, 304656.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1743.878 ±(99.9%) 41.857 MB/sec [Average]
[info]   (min, avg, max) = (1733.446, 1743.878, 1762.369), stdev = 10.870
[info]   CI (99.9%): [1702.021, 1785.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9416.260 ±(99.9%) 421.297 B/op [Average]
[info]   (min, avg, max) = (9317.249, 9416.260, 9545.645), stdev = 109.409
[info]   CI (99.9%): [8994.963, 9837.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746.360 ±(99.9%) 1415.788 MB/sec [Average]
[info]   (min, avg, max) = (1341.597, 1746.360, 2017.790), stdev = 367.676
[info]   CI (99.9%): [330.573, 3162.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9442.662 ±(99.9%) 7923.502 B/op [Average]
[info]   (min, avg, max) = (7179.317, 9442.662, 11083.871), stdev = 2057.708
[info]   CI (99.9%): [1519.161, 17366.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 5.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 2.998), stdev = 1.310
[info]   CI (99.9%): [≈ 0, 5.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.546 ±(99.9%) 27.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.546, 16.043), stdev = 7.012
[info]   CI (99.9%): [≈ 0, 30.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.98% complete, ETA 01:14:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 683.613 ops/s
[info] # Warmup Iteration   2: 9182.502 ops/s
[info] # Warmup Iteration   3: 12228.631 ops/s
[info] # Warmup Iteration   4: 12600.398 ops/s
[info] # Warmup Iteration   5: 12507.168 ops/s
[info] Iteration   1: 12768.018 ops/s
[info]                  ·gc.alloc.rate:                   1571.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              193633.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164142.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12657.557 ops/s
[info]                  ·gc.alloc.rate:                   1586.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              197265.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248933.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12735.232 ops/s
[info]                  ·gc.alloc.rate:                   1569.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              193894.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165378.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12705.302 ops/s
[info]                  ·gc.alloc.rate:                   1565.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              193904.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166098.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12311.043 ops/s
[info]                  ·gc.alloc.rate:               1562.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          199700.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 257503.153 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12635.430 ±(99.9%) 715.585 ops/s [Average]
[info]   (min, avg, max) = (12311.043, 12635.430, 12768.018), stdev = 185.835
[info]   CI (99.9%): [11919.846, 13351.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1570.884 ±(99.9%) 36.239 MB/sec [Average]
[info]   (min, avg, max) = (1562.123, 1570.884, 1586.526), stdev = 9.411
[info]   CI (99.9%): [1534.645, 1607.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   195679.816 ±(99.9%) 10405.853 B/op [Average]
[info]   (min, avg, max) = (193633.578, 195679.816, 199700.885), stdev = 2702.367
[info]   CI (99.9%): [185273.963, 206085.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1605.511 ±(99.9%) 1415.550 MB/sec [Average]
[info]   (min, avg, max) = (1331.954, 1605.511, 2014.271), stdev = 367.614
[info]   CI (99.9%): [189.961, 3021.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   200411.267 ±(99.9%) 186009.646 B/op [Average]
[info]   (min, avg, max) = (164142.790, 200411.267, 257503.153), stdev = 48306.114
[info]   CI (99.9%): [14401.621, 386420.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.192 ±(99.9%) 0.954 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.562), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23.691 ±(99.9%) 117.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.691, 69.456), stdev = 30.632
[info]   CI (99.9%): [≈ 0, 141.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44.18% complete, ETA 01:14:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1573.091 ops/s
[info] # Warmup Iteration   2: 11017.530 ops/s
[info] # Warmup Iteration   3: 12241.662 ops/s
[info] # Warmup Iteration   4: 12959.376 ops/s
[info] # Warmup Iteration   5: 12878.178 ops/s
[info] Iteration   1: 12519.108 ops/s
[info]                  ·gc.alloc.rate:               1192.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          149824.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168788.829 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 12388.246 ops/s
[info]                  ·gc.alloc.rate:               1172.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          149002.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170644.299 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 12235.758 ops/s
[info]                  ·gc.alloc.rate:               1151.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          148001.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86410.271 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 12453.033 ops/s
[info]                  ·gc.alloc.rate:                   1172.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              148225.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169893.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12274.411 ops/s
[info]                  ·gc.alloc.rate:                   1180.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              151324.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172356.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 464.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   12374.111 ±(99.9%) 457.782 ops/s [Average]
[info]   (min, avg, max) = (12235.758, 12374.111, 12519.108), stdev = 118.885
[info]   CI (99.9%): [11916.329, 12831.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1173.963 ±(99.9%) 57.835 MB/sec [Average]
[info]   (min, avg, max) = (1151.203, 1173.963, 1192.326), stdev = 15.020
[info]   CI (99.9%): [1116.129, 1231.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   149275.742 ±(99.9%) 5201.632 B/op [Average]
[info]   (min, avg, max) = (148001.496, 149275.742, 151324.431), stdev = 1350.847
[info]   CI (99.9%): [144074.110, 154477.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1209.510 ±(99.9%) 1156.761 MB/sec [Average]
[info]   (min, avg, max) = (672.127, 1209.510, 1344.732), stdev = 300.407
[info]   CI (99.9%): [52.749, 2366.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   153618.817 ±(99.9%) 144757.782 B/op [Average]
[info]   (min, avg, max) = (86410.271, 153618.817, 172356.958), stdev = 37593.136
[info]   CI (99.9%): [8861.035, 298376.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 6.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.623), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 6.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   93.409 ±(99.9%) 798.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.409, 464.416), stdev = 207.402
[info]   CI (99.9%): [≈ 0, 892.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.38% complete, ETA 01:14:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10379.701 ops/s
[info] # Warmup Iteration   2: 32668.322 ops/s
[info] # Warmup Iteration   3: 33887.241 ops/s
[info] # Warmup Iteration   4: 33589.982 ops/s
[info] # Warmup Iteration   5: 32871.979 ops/s
[info] Iteration   1: 32944.030 ops/s
[info]                  ·gc.alloc.rate:               1421.900 MB/sec
[info]                  ·gc.alloc.rate.norm:          67931.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64076.109 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 33386.939 ops/s
[info]                  ·gc.alloc.rate:                   1441.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              67963.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63273.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33664.764 ops/s
[info]                  ·gc.alloc.rate:                   1468.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              68569.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93971.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.972 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 33899.152 ops/s
[info]                  ·gc.alloc.rate:                   1463.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              67955.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62224.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34047.870 ops/s
[info]                  ·gc.alloc.rate:                   1481.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              68489.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61892.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   33588.551 ±(99.9%) 1688.706 ops/s [Average]
[info]   (min, avg, max) = (32944.030, 33588.551, 34047.870), stdev = 438.552
[info]   CI (99.9%): [31899.845, 35277.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1455.494 ±(99.9%) 91.051 MB/sec [Average]
[info]   (min, avg, max) = (1421.900, 1455.494, 1481.703), stdev = 23.646
[info]   CI (99.9%): [1364.443, 1546.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68181.627 ±(99.9%) 1227.694 B/op [Average]
[info]   (min, avg, max) = (67931.211, 68181.627, 68569.262), stdev = 318.828
[info]   CI (99.9%): [66953.933, 69409.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.004 ±(99.9%) 1155.975 MB/sec [Average]
[info]   (min, avg, max) = (1338.996, 1475.004, 2012.019), stdev = 300.203
[info]   CI (99.9%): [319.028, 2630.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69087.785 ±(99.9%) 53668.229 B/op [Average]
[info]   (min, avg, max) = (61892.866, 69087.785, 93971.900), stdev = 13937.469
[info]   CI (99.9%): [15419.556, 122756.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.757 ±(99.9%) 6.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.757, 3.618), stdev = 1.600
[info]   CI (99.9%): [≈ 0, 6.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.340 ±(99.9%) 287.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.340, 168.972), stdev = 74.725
[info]   CI (99.9%): [≈ 0, 323.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.58% complete, ETA 01:14:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25362.189 ops/s
[info] # Warmup Iteration   2: 78925.704 ops/s
[info] # Warmup Iteration   3: 82192.679 ops/s
[info] # Warmup Iteration   4: 81856.107 ops/s
[info] # Warmup Iteration   5: 80862.890 ops/s
[info] Iteration   1: 81389.862 ops/s
[info]                  ·gc.alloc.rate:                   2036.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              39380.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38901.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 81987.037 ops/s
[info]                  ·gc.alloc.rate:                   2044.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              39246.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38502.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 83011.624 ops/s
[info]                  ·gc.alloc.rate:               2086.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          39555.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38001.676 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 83327.356 ops/s
[info]                  ·gc.alloc.rate:               2108.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          39798.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37886.771 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 81946.247 ops/s
[info]                  ·gc.alloc.rate:               2074.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          39844.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38580.504 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   82332.425 ±(99.9%) 3109.291 ops/s [Average]
[info]   (min, avg, max) = (81389.862, 82332.425, 83327.356), stdev = 807.473
[info]   CI (99.9%): [79223.134, 85441.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2070.034 ±(99.9%) 114.428 MB/sec [Average]
[info]   (min, avg, max) = (2036.478, 2070.034, 2108.290), stdev = 29.716
[info]   CI (99.9%): [1955.606, 2184.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39565.177 ±(99.9%) 996.243 B/op [Average]
[info]   (min, avg, max) = (39246.774, 39565.177, 39844.113), stdev = 258.721
[info]   CI (99.9%): [38568.935, 40561.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.523 ±(99.9%) 10.929 MB/sec [Average]
[info]   (min, avg, max) = (2004.439, 2007.523, 2011.720), stdev = 2.838
[info]   CI (99.9%): [1996.594, 2018.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38374.734 ±(99.9%) 1626.867 B/op [Average]
[info]   (min, avg, max) = (37886.771, 38374.734, 38901.987), stdev = 422.492
[info]   CI (99.9%): [36747.866, 40001.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.789), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.733 ±(99.9%) 125.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.733, 73.263), stdev = 32.720
[info]   CI (99.9%): [≈ 0, 140.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.78% complete, ETA 01:13:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 289122.072 ops/s
[info] # Warmup Iteration   2: 609716.582 ops/s
[info] # Warmup Iteration   3: 600360.832 ops/s
[info] # Warmup Iteration   4: 631765.065 ops/s
[info] # Warmup Iteration   5: 622789.174 ops/s
[info] Iteration   1: 626114.220 ops/s
[info]                  ·gc.alloc.rate:                   883.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              2219.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1687.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 627331.711 ops/s
[info]                  ·gc.alloc.rate:               879.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          2206.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1684.650 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 618388.977 ops/s
[info]                  ·gc.alloc.rate:               892.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          2272.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3421.311 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 634047.773 ops/s
[info]                  ·gc.alloc.rate:               888.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          2204.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1668.483 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 616256.450 ops/s
[info]                  ·gc.alloc.rate:               868.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          2218.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1716.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   624427.826 ±(99.9%) 27704.502 ops/s [Average]
[info]   (min, avg, max) = (616256.450, 624427.826, 634047.773), stdev = 7194.771
[info]   CI (99.9%): [596723.324, 652132.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   882.605 ±(99.9%) 35.542 MB/sec [Average]
[info]   (min, avg, max) = (868.816, 882.605, 892.908), stdev = 9.230
[info]   CI (99.9%): [847.063, 918.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2224.321 ±(99.9%) 106.777 B/op [Average]
[info]   (min, avg, max) = (2204.671, 2224.321, 2272.354), stdev = 27.730
[info]   CI (99.9%): [2117.543, 2331.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.457 ±(99.9%) 1157.932 MB/sec [Average]
[info]   (min, avg, max) = (671.513, 806.457, 1344.385), stdev = 300.711
[info]   CI (99.9%): [≈ 0, 1964.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2035.799 ±(99.9%) 2983.168 B/op [Average]
[info]   (min, avg, max) = (1668.483, 2035.799, 3421.311), stdev = 774.719
[info]   CI (99.9%): [≈ 0, 5018.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44.98% complete, ETA 01:13:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 476363.283 ops/s
[info] # Warmup Iteration   2: 733236.765 ops/s
[info] # Warmup Iteration   3: 729009.394 ops/s
[info] # Warmup Iteration   4: 737289.128 ops/s
[info] # Warmup Iteration   5: 737200.306 ops/s
[info] Iteration   1: 736903.781 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 735639.834 ops/s
[info]                  ·gc.alloc.rate:      0.495 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.059 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 737274.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 737002.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 737253.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   736814.831 ±(99.9%) 2602.714 ops/s [Average]
[info]   (min, avg, max) = (735639.834, 736814.831, 737274.303), stdev = 675.917
[info]   CI (99.9%): [734212.118, 739417.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.099 ±(99.9%) 0.852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.099, 0.495), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.212 ±(99.9%) 1.823 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.212, 1.059), stdev = 0.473
[info]   CI (99.9%): [≈ 0, 2.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:13:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11760.398 ops/s
[info] # Warmup Iteration   2: 65900.879 ops/s
[info] # Warmup Iteration   3: 71663.516 ops/s
[info] # Warmup Iteration   4: 73151.130 ops/s
[info] # Warmup Iteration   5: 73021.384 ops/s
[info] Iteration   1: 71037.876 ops/s
[info]                  ·gc.alloc.rate:                   2053.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              45494.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44400.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 70495.919 ops/s
[info]                  ·gc.alloc.rate:                   2052.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              45806.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44892.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.253 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 72376.053 ops/s
[info]                  ·gc.alloc.rate:               2095.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          45556.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43841.561 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 73703.094 ops/s
[info]                  ·gc.alloc.rate:               2155.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          46014.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43176.240 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 73694.227 ops/s
[info]                  ·gc.alloc.rate:                   2135.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              45591.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43269.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   72261.434 ±(99.9%) 5697.962 ops/s [Average]
[info]   (min, avg, max) = (70495.919, 72261.434, 73703.094), stdev = 1479.743
[info]   CI (99.9%): [66563.472, 77959.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2098.419 ±(99.9%) 180.543 MB/sec [Average]
[info]   (min, avg, max) = (2052.244, 2098.419, 2155.698), stdev = 46.886
[info]   CI (99.9%): [1917.876, 2278.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45692.729 ±(99.9%) 827.296 B/op [Average]
[info]   (min, avg, max) = (45494.484, 45692.729, 46014.432), stdev = 214.846
[info]   CI (99.9%): [44865.432, 46520.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2016.231 ±(99.9%) 34.305 MB/sec [Average]
[info]   (min, avg, max) = (2004.093, 2016.231, 2026.383), stdev = 8.909
[info]   CI (99.9%): [1981.926, 2050.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   43916.033 ±(99.9%) 2829.168 B/op [Average]
[info]   (min, avg, max) = (43176.240, 43916.033, 44892.230), stdev = 734.726
[info]   CI (99.9%): [41086.865, 46745.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.924 ±(99.9%) 5.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 3.253), stdev = 1.357
[info]   CI (99.9%): [≈ 0, 6.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45.38% complete, ETA 01:12:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10414.550 ops/s
[info] # Warmup Iteration   2: 19716.169 ops/s
[info] # Warmup Iteration   3: 20145.700 ops/s
[info] # Warmup Iteration   4: 20189.254 ops/s
[info] # Warmup Iteration   5: 20296.968 ops/s
[info] Iteration   1: 19979.686 ops/s
[info]                  ·gc.alloc.rate:               752.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          59283.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52735.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 20256.291 ops/s
[info]                  ·gc.alloc.rate:               774.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          60171.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52014.752 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 20286.082 ops/s
[info]                  ·gc.alloc.rate:                   768.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              59643.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51888.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20274.204 ops/s
[info]                  ·gc.alloc.rate:               769.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          59708.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51916.871 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 20221.517 ops/s
[info]                  ·gc.alloc.rate:                   780.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              60733.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104105.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   20203.556 ±(99.9%) 490.950 ops/s [Average]
[info]   (min, avg, max) = (19979.686, 20203.556, 20286.082), stdev = 127.498
[info]   CI (99.9%): [19712.606, 20694.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   769.063 ±(99.9%) 39.768 MB/sec [Average]
[info]   (min, avg, max) = (752.614, 769.063, 780.334), stdev = 10.328
[info]   CI (99.9%): [729.295, 808.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   59908.153 ±(99.9%) 2152.706 B/op [Average]
[info]   (min, avg, max) = (59283.578, 59908.153, 60733.536), stdev = 559.051
[info]   CI (99.9%): [57755.447, 62060.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   802.830 ±(99.9%) 1151.139 MB/sec [Average]
[info]   (min, avg, max) = (668.777, 802.830, 1337.603), stdev = 298.947
[info]   CI (99.9%): [≈ 0, 1953.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   62532.391 ±(99.9%) 89499.997 B/op [Average]
[info]   (min, avg, max) = (51888.723, 62532.391, 104105.840), stdev = 23242.865
[info]   CI (99.9%): [≈ 0, 152032.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.647 ±(99.9%) 3.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.647, 1.620), stdev = 0.886
[info]   CI (99.9%): [≈ 0, 4.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.58% complete, ETA 01:12:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4041.710 ops/s
[info] # Warmup Iteration   2: 15709.648 ops/s
[info] # Warmup Iteration   3: 17280.331 ops/s
[info] # Warmup Iteration   4: 17292.582 ops/s
[info] # Warmup Iteration   5: 17206.242 ops/s
[info] Iteration   1: 17159.895 ops/s
[info]                  ·gc.alloc.rate:               901.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          82656.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61526.397 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17006.680 ops/s
[info]                  ·gc.alloc.rate:               931.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          86082.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123701.503 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 17265.208 ops/s
[info]                  ·gc.alloc.rate:               908.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          82832.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61148.716 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 17340.826 ops/s
[info]                  ·gc.alloc.rate:                   909.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              82570.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60941.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.779 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17349.910 ops/s
[info]                  ·gc.alloc.rate:               908.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          82407.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60909.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   17224.504 ±(99.9%) 553.127 ops/s [Average]
[info]   (min, avg, max) = (17006.680, 17224.504, 17349.910), stdev = 143.645
[info]   CI (99.9%): [16671.377, 17777.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   911.924 ±(99.9%) 44.218 MB/sec [Average]
[info]   (min, avg, max) = (901.192, 911.924, 931.544), stdev = 11.483
[info]   CI (99.9%): [867.707, 956.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83309.844 ±(99.9%) 5997.346 B/op [Average]
[info]   (min, avg, max) = (82407.817, 83309.844, 86082.485), stdev = 1557.492
[info]   CI (99.9%): [77312.498, 89307.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   804.634 ±(99.9%) 1149.488 MB/sec [Average]
[info]   (min, avg, max) = (670.817, 804.634, 1338.639), stdev = 298.518
[info]   CI (99.9%): [≈ 0, 1954.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   73645.492 ±(99.9%) 107753.495 B/op [Average]
[info]   (min, avg, max) = (60909.618, 73645.492, 123701.503), stdev = 27983.241
[info]   CI (99.9%): [≈ 0, 181398.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.756 ±(99.9%) 6.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 3.779), stdev = 1.690
[info]   CI (99.9%): [≈ 0, 7.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.78% complete, ETA 01:12:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6086.359 ops/s
[info] # Warmup Iteration   2: 15534.882 ops/s
[info] # Warmup Iteration   3: 17032.808 ops/s
[info] # Warmup Iteration   4: 16989.190 ops/s
[info] # Warmup Iteration   5: 17097.532 ops/s
[info] Iteration   1: 17095.183 ops/s
[info]                  ·gc.alloc.rate:               748.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          68894.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61450.062 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16894.773 ops/s
[info]                  ·gc.alloc.rate:               741.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          69097.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62243.104 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 17111.813 ops/s
[info]                  ·gc.alloc.rate:               752.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          69212.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61450.291 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 16942.443 ops/s
[info]                  ·gc.alloc.rate:                   741.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              68859.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62094.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.934 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17089.908 ops/s
[info]                  ·gc.alloc.rate:               744.471 MB/sec
[info]                  ·gc.alloc.rate.norm:          68542.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61552.853 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17026.824 ±(99.9%) 387.143 ops/s [Average]
[info]   (min, avg, max) = (16894.773, 17026.824, 17111.813), stdev = 100.540
[info]   CI (99.9%): [16639.681, 17413.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   745.709 ±(99.9%) 18.292 MB/sec [Average]
[info]   (min, avg, max) = (741.273, 745.709, 752.589), stdev = 4.750
[info]   CI (99.9%): [727.418, 764.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   68921.211 ±(99.9%) 988.915 B/op [Average]
[info]   (min, avg, max) = (68542.597, 68921.211, 69212.684), stdev = 256.818
[info]   CI (99.9%): [67932.296, 69910.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.189 ±(99.9%) 1.617 MB/sec [Average]
[info]   (min, avg, max) = (667.483, 668.189, 668.552), stdev = 0.420
[info]   CI (99.9%): [666.572, 669.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61758.075 ±(99.9%) 1466.107 B/op [Average]
[info]   (min, avg, max) = (61450.062, 61758.075, 62243.104), stdev = 380.743
[info]   CI (99.9%): [60291.968, 63224.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.387 ±(99.9%) 3.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.387, 1.934), stdev = 0.865
[info]   CI (99.9%): [≈ 0, 3.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.98% complete, ETA 01:12:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77292.281 ops/s
[info] # Warmup Iteration   2: 109810.564 ops/s
[info] # Warmup Iteration   3: 117032.287 ops/s
[info] # Warmup Iteration   4: 121648.987 ops/s
[info] # Warmup Iteration   5: 119705.099 ops/s
[info] Iteration   1: 122903.485 ops/s
[info]                  ·gc.alloc.rate:      308.738 MB/sec
[info]                  ·gc.alloc.rate.norm: 3953.089 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 121987.343 ops/s
[info]                  ·gc.alloc.rate:               323.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          4170.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6600.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 121081.477 ops/s
[info]                  ·gc.alloc.rate:                   326.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              4239.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6649.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.541 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 121244.494 ops/s
[info]                  ·gc.alloc.rate:      304.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 121401.467 ops/s
[info]                  ·gc.alloc.rate:      304.838 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   121723.653 ±(99.9%) 2860.464 ops/s [Average]
[info]   (min, avg, max) = (121081.477, 121723.653, 122903.485), stdev = 742.853
[info]   CI (99.9%): [118863.189, 124584.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   313.502 ±(99.9%) 40.210 MB/sec [Average]
[info]   (min, avg, max) = (304.457, 313.502, 326.174), stdev = 10.442
[info]   CI (99.9%): [273.292, 353.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4053.457 ±(99.9%) 541.078 B/op [Average]
[info]   (min, avg, max) = (3952.004, 4053.457, 4239.244), stdev = 140.516
[info]   CI (99.9%): [3512.379, 4594.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.660 ±(99.9%) 1079.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.660, 511.661), stdev = 280.242
[info]   CI (99.9%): [≈ 0, 1283.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2650.139 ±(99.9%) 13973.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2650.139, 6649.984), stdev = 3628.894
[info]   CI (99.9%): [≈ 0, 16623.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.108 ±(99.9%) 0.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.541), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.18% complete, ETA 01:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964.609 ops/s
[info] # Warmup Iteration   2: 11459.481 ops/s
[info] # Warmup Iteration   3: 13995.396 ops/s
[info] # Warmup Iteration   4: 13477.697 ops/s
[info] # Warmup Iteration   5: 13719.671 ops/s
[info] Iteration   1: 13833.027 ops/s
[info]                  ·gc.alloc.rate:                   1057.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              120277.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152113.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13603.643 ops/s
[info]                  ·gc.alloc.rate:               1023.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          118399.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77375.445 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 14004.220 ops/s
[info]                  ·gc.alloc.rate:                   1079.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              121342.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150368.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 14038.309 ops/s
[info]                  ·gc.alloc.rate:               1057.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          118512.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75020.982 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13994.492 ops/s
[info]                  ·gc.alloc.rate:               1081.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          121659.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150577.821 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   13894.738 ±(99.9%) 697.100 ops/s [Average]
[info]   (min, avg, max) = (13603.643, 13894.738, 14038.309), stdev = 181.035
[info]   CI (99.9%): [13197.638, 14591.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1059.886 ±(99.9%) 90.778 MB/sec [Average]
[info]   (min, avg, max) = (1023.438, 1059.886, 1081.841), stdev = 23.575
[info]   CI (99.9%): [969.108, 1150.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   120038.211 ±(99.9%) 5901.995 B/op [Average]
[info]   (min, avg, max) = (118399.759, 120038.211, 121659.176), stdev = 1532.729
[info]   CI (99.9%): [114136.217, 125940.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1070.433 ±(99.9%) 1411.066 MB/sec [Average]
[info]   (min, avg, max) = (668.827, 1070.433, 1338.997), stdev = 366.449
[info]   CI (99.9%): [≈ 0, 2481.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   121091.328 ±(99.9%) 157859.491 B/op [Average]
[info]   (min, avg, max) = (75020.982, 121091.328, 152113.627), stdev = 40995.609
[info]   CI (99.9%): [≈ 0, 278950.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.415 ±(99.9%) 8.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.415, 4.737), stdev = 2.115
[info]   CI (99.9%): [≈ 0, 9.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46.39% complete, ETA 01:11:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1808.275 ops/s
[info] # Warmup Iteration   2: 12511.484 ops/s
[info] # Warmup Iteration   3: 14824.382 ops/s
[info] # Warmup Iteration   4: 14665.665 ops/s
[info] # Warmup Iteration   5: 14940.911 ops/s
[info] Iteration   1: 15345.186 ops/s
[info]                  ·gc.alloc.rate:                   745.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              76492.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68798.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15066.805 ops/s
[info]                  ·gc.alloc.rate:               741.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          77463.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70137.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15037.586 ops/s
[info]                  ·gc.alloc.rate:               751.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          78669.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70276.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 15351.489 ops/s
[info]                  ·gc.alloc.rate:               747.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          76593.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68873.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15366.595 ops/s
[info]                  ·gc.alloc.rate:                   750.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              76888.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68806.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   15233.532 ±(99.9%) 639.365 ops/s [Average]
[info]   (min, avg, max) = (15037.586, 15233.532, 15366.595), stdev = 166.041
[info]   CI (99.9%): [14594.167, 15872.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   747.466 ±(99.9%) 15.088 MB/sec [Average]
[info]   (min, avg, max) = (741.944, 747.466, 751.660), stdev = 3.918
[info]   CI (99.9%): [732.378, 762.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   77221.661 ±(99.9%) 3439.111 B/op [Average]
[info]   (min, avg, max) = (76492.861, 77221.661, 78669.554), stdev = 893.126
[info]   CI (99.9%): [73782.550, 80660.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   671.545 ±(99.9%) 1.595 MB/sec [Average]
[info]   (min, avg, max) = (670.850, 671.545, 671.819), stdev = 0.414
[info]   CI (99.9%): [669.950, 673.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   69378.528 ±(99.9%) 2920.427 B/op [Average]
[info]   (min, avg, max) = (68798.282, 69378.528, 70276.902), stdev = 758.426
[info]   CI (99.9%): [66458.101, 72298.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.280 ±(99.9%) 7.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.280, 4.270), stdev = 1.909
[info]   CI (99.9%): [≈ 0, 8.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:11:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17463.231 ops/s
[info] # Warmup Iteration   2: 45764.414 ops/s
[info] # Warmup Iteration   3: 46903.116 ops/s
[info] # Warmup Iteration   4: 47396.122 ops/s
[info] # Warmup Iteration   5: 47550.165 ops/s
[info] Iteration   1: 47330.293 ops/s
[info]                  ·gc.alloc.rate:                   1447.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              48097.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44611.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 47271.874 ops/s
[info]                  ·gc.alloc.rate:                   1480.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              49282.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67044.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.386 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 47716.772 ops/s
[info]                  ·gc.alloc.rate:                   1480.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              48838.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44294.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 47790.715 ops/s
[info]                  ·gc.alloc.rate:                   1470.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              48425.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44136.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 47689.751 ops/s
[info]                  ·gc.alloc.rate:                   1478.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              48781.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44187.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   47559.881 ±(99.9%) 924.203 ops/s [Average]
[info]   (min, avg, max) = (47271.874, 47559.881, 47790.715), stdev = 240.012
[info]   CI (99.9%): [46635.678, 48484.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1471.420 ±(99.9%) 54.714 MB/sec [Average]
[info]   (min, avg, max) = (1447.053, 1471.420, 1480.669), stdev = 14.209
[info]   CI (99.9%): [1416.706, 1526.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48685.285 ±(99.9%) 1723.575 B/op [Average]
[info]   (min, avg, max) = (48097.774, 48685.285, 49282.030), stdev = 447.607
[info]   CI (99.9%): [46961.710, 50408.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.703 ±(99.9%) 1158.619 MB/sec [Average]
[info]   (min, avg, max) = (1339.058, 1475.703, 2013.944), stdev = 300.890
[info]   CI (99.9%): [317.084, 2634.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   48854.922 ±(99.9%) 39160.043 B/op [Average]
[info]   (min, avg, max) = (44136.714, 48854.922, 67044.104), stdev = 10169.739
[info]   CI (99.9%): [9694.879, 88014.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.112 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.741, 3.580), stdev = 1.587
[info]   CI (99.9%): [≈ 0, 6.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.448 ±(99.9%) 201.592 B/op [Average]
[info]   (min, avg, max) = (0.686, 24.448, 118.098), stdev = 52.353
[info]   CI (99.9%): [≈ 0, 226.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.79% complete, ETA 01:11:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24525.014 ops/s
[info] # Warmup Iteration   2: 73818.925 ops/s
[info] # Warmup Iteration   3: 74191.871 ops/s
[info] # Warmup Iteration   4: 75753.643 ops/s
[info] # Warmup Iteration   5: 76452.302 ops/s
[info] Iteration   1: 76803.790 ops/s
[info]                  ·gc.alloc.rate:                   1638.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              33578.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41164.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 77382.538 ops/s
[info]                  ·gc.alloc.rate:                   1638.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              33320.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27253.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 77410.083 ops/s
[info]                  ·gc.alloc.rate:                   1633.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              33201.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27222.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 77273.054 ops/s
[info]                  ·gc.alloc.rate:                   1673.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              34086.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40839.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.424 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 77597.916 ops/s
[info]                  ·gc.alloc.rate:                   1654.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              33547.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27102.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   77293.476 ±(99.9%) 1146.209 ops/s [Average]
[info]   (min, avg, max) = (76803.790, 77293.476, 77597.916), stdev = 297.667
[info]   CI (99.9%): [76147.267, 78439.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1647.698 ±(99.9%) 64.043 MB/sec [Average]
[info]   (min, avg, max) = (1633.204, 1647.698, 1673.940), stdev = 16.632
[info]   CI (99.9%): [1583.654, 1711.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33546.927 ±(99.9%) 1310.101 B/op [Average]
[info]   (min, avg, max) = (33201.219, 33546.927, 34086.579), stdev = 340.229
[info]   CI (99.9%): [32236.826, 34857.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606.024 ±(99.9%) 1410.677 MB/sec [Average]
[info]   (min, avg, max) = (1336.345, 1606.024, 2009.118), stdev = 366.348
[info]   CI (99.9%): [195.347, 3016.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32716.329 ±(99.9%) 29128.214 B/op [Average]
[info]   (min, avg, max) = (27102.388, 32716.329, 41164.123), stdev = 7564.505
[info]   CI (99.9%): [3588.115, 61844.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.767 ±(99.9%) 5.697 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.767, 3.400), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.608 ±(99.9%) 115.877 B/op [Average]
[info]   (min, avg, max) = (0.422, 15.608, 69.151), stdev = 30.093
[info]   CI (99.9%): [≈ 0, 131.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.99% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195086.989 ops/s
[info] # Warmup Iteration   2: 310477.232 ops/s
[info] # Warmup Iteration   3: 323936.709 ops/s
[info] # Warmup Iteration   4: 322871.459 ops/s
[info] # Warmup Iteration   5: 315805.862 ops/s
[info] Iteration   1: 312790.574 ops/s
[info]                  ·gc.alloc.rate:               613.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          3089.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3376.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 313113.233 ops/s
[info]                  ·gc.alloc.rate:               623.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          3135.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3373.430 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 320302.618 ops/s
[info]                  ·gc.alloc.rate:                   636.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              3127.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3301.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 319014.826 ops/s
[info]                  ·gc.alloc.rate:               630.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          3108.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3314.389 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 318709.958 ops/s
[info]                  ·gc.alloc.rate:               628.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          3101.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3319.143 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   316786.242 ±(99.9%) 13680.429 ops/s [Average]
[info]   (min, avg, max) = (312790.574, 316786.242, 320302.618), stdev = 3552.764
[info]   CI (99.9%): [303105.813, 330466.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   626.509 ±(99.9%) 32.368 MB/sec [Average]
[info]   (min, avg, max) = (613.943, 626.509, 636.592), stdev = 8.406
[info]   CI (99.9%): [594.141, 658.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3112.563 ±(99.9%) 72.472 B/op [Average]
[info]   (min, avg, max) = (3089.407, 3112.563, 3135.209), stdev = 18.821
[info]   CI (99.9%): [3040.091, 3185.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.614 ±(99.9%) 1.897 MB/sec [Average]
[info]   (min, avg, max) = (671.087, 671.614, 672.238), stdev = 0.493
[info]   CI (99.9%): [669.716, 673.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3336.990 ±(99.9%) 136.787 B/op [Average]
[info]   (min, avg, max) = (3301.032, 3336.990, 3376.957), stdev = 35.523
[info]   CI (99.9%): [3200.203, 3473.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.19% complete, ETA 01:10:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193454.777 ops/s
[info] # Warmup Iteration   2: 359988.004 ops/s
[info] # Warmup Iteration   3: 364369.594 ops/s
[info] # Warmup Iteration   4: 365528.771 ops/s
[info] # Warmup Iteration   5: 365103.029 ops/s
[info] Iteration   1: 361662.617 ops/s
[info]                  ·gc.alloc.rate:      12.252 MB/sec
[info]                  ·gc.alloc.rate.norm: 53.319 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 365212.879 ops/s
[info]                  ·gc.alloc.rate:      0.116 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.502 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 365374.308 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 365560.432 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 364866.825 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   364535.412 ±(99.9%) 6261.341 ops/s [Average]
[info]   (min, avg, max) = (361662.617, 364535.412, 365560.432), stdev = 1626.050
[info]   CI (99.9%): [358274.071, 370796.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.474 ±(99.9%) 21.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.474, 12.252), stdev = 5.467
[info]   CI (99.9%): [≈ 0, 23.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   10.765 ±(99.9%) 91.605 B/op [Average]
[info]   (min, avg, max) = (0.001, 10.765, 53.319), stdev = 23.790
[info]   CI (99.9%): [≈ 0, 102.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.39% complete, ETA 01:10:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14234.728 ops/s
[info] # Warmup Iteration   2: 64400.669 ops/s
[info] # Warmup Iteration   3: 63129.802 ops/s
[info] # Warmup Iteration   4: 65174.661 ops/s
[info] # Warmup Iteration   5: 64238.225 ops/s
[info] Iteration   1: 65360.828 ops/s
[info]                  ·gc.alloc.rate:               1493.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          35975.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32258.201 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 65124.580 ops/s
[info]                  ·gc.alloc.rate:                   1502.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              36302.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48586.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 66363.681 ops/s
[info]                  ·gc.alloc.rate:                   1522.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              36109.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31817.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.359 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 64657.713 ops/s
[info]                  ·gc.alloc.rate:               1513.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          36830.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32559.235 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 65863.514 ops/s
[info]                  ·gc.alloc.rate:               1526.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          36468.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31930.346 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   65474.063 ±(99.9%) 2542.941 ops/s [Average]
[info]   (min, avg, max) = (64657.713, 65474.063, 66363.681), stdev = 660.394
[info]   CI (99.9%): [62931.122, 68017.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1511.586 ±(99.9%) 52.160 MB/sec [Average]
[info]   (min, avg, max) = (1493.990, 1511.586, 1526.109), stdev = 13.546
[info]   CI (99.9%): [1459.426, 1563.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36337.442 ±(99.9%) 1283.258 B/op [Average]
[info]   (min, avg, max) = (35975.945, 36337.442, 36830.530), stdev = 333.258
[info]   CI (99.9%): [35054.183, 37620.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1473.084 ±(99.9%) 1156.603 MB/sec [Average]
[info]   (min, avg, max) = (1336.193, 1473.084, 2010.383), stdev = 300.366
[info]   CI (99.9%): [316.481, 2629.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35430.194 ±(99.9%) 28341.033 B/op [Average]
[info]   (min, avg, max) = (31817.158, 35430.194, 48586.028), stdev = 7360.076
[info]   CI (99.9%): [7089.161, 63771.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.770 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.937), stdev = 1.758
[info]   CI (99.9%): [≈ 0, 7.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.772 ±(99.9%) 160.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.772, 93.359), stdev = 41.696
[info]   CI (99.9%): [≈ 0, 179.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47.59% complete, ETA 01:10:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8519.021 ops/s
[info] # Warmup Iteration   2: 14722.563 ops/s
[info] # Warmup Iteration   3: 15150.126 ops/s
[info] # Warmup Iteration   4: 15054.032 ops/s
[info] # Warmup Iteration   5: 15039.810 ops/s
[info] Iteration   1: 15155.664 ops/s
[info]                  ·gc.alloc.rate:                   618.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              64275.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69660.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14597.173 ops/s
[info]                  ·gc.alloc.rate:                   595.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              64158.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72256.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.489 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15140.150 ops/s
[info]                  ·gc.alloc.rate:                   624.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              64876.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69665.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.492 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15143.547 ops/s
[info]                  ·gc.alloc.rate:               622.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          64722.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69577.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 15223.227 ops/s
[info]                  ·gc.alloc.rate:      606.841 MB/sec
[info]                  ·gc.alloc.rate.norm: 62737.100 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   15051.952 ±(99.9%) 987.531 ops/s [Average]
[info]   (min, avg, max) = (14597.173, 15051.952, 15223.227), stdev = 256.459
[info]   CI (99.9%): [14064.421, 16039.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   613.599 ±(99.9%) 47.340 MB/sec [Average]
[info]   (min, avg, max) = (595.291, 613.599, 624.145), stdev = 12.294
[info]   CI (99.9%): [566.259, 660.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   64154.108 ±(99.9%) 3260.735 B/op [Average]
[info]   (min, avg, max) = (62737.100, 64154.108, 64876.884), stdev = 846.803
[info]   CI (99.9%): [60893.373, 67414.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   536.184 ±(99.9%) 1154.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.184, 670.831), stdev = 299.737
[info]   CI (99.9%): [≈ 0, 1690.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   56231.832 ±(99.9%) 121122.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56231.832, 72256.145), stdev = 31455.063
[info]   CI (99.9%): [≈ 0, 177354.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 5.513 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.227), stdev = 1.432
[info]   CI (99.9%): [≈ 0, 6.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   69.211 ±(99.9%) 572.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.211, 335.073), stdev = 148.649
[info]   CI (99.9%): [≈ 0, 641.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.79% complete, ETA 01:09:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56156.691 ops/s
[info] # Warmup Iteration   2: 133293.876 ops/s
[info] # Warmup Iteration   3: 140384.453 ops/s
[info] # Warmup Iteration   4: 145333.325 ops/s
[info] # Warmup Iteration   5: 145536.466 ops/s
[info] Iteration   1: 143287.539 ops/s
[info]                  ·gc.alloc.rate:                   1871.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              20554.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22152.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 144893.667 ops/s
[info]                  ·gc.alloc.rate:                   1905.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              20685.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21877.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 144927.321 ops/s
[info]                  ·gc.alloc.rate:                   1889.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              20522.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14555.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 143436.145 ops/s
[info]                  ·gc.alloc.rate:                   1872.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              20544.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22037.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.457 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 145050.653 ops/s
[info]                  ·gc.alloc.rate:               1919.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          20829.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21807.235 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   144319.065 ±(99.9%) 3378.355 ops/s [Average]
[info]   (min, avg, max) = (143287.539, 144319.065, 145050.653), stdev = 877.348
[info]   CI (99.9%): [140940.710, 147697.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1891.628 ±(99.9%) 80.651 MB/sec [Average]
[info]   (min, avg, max) = (1871.252, 1891.628, 1919.555), stdev = 20.945
[info]   CI (99.9%): [1810.977, 1972.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20627.171 ±(99.9%) 500.698 B/op [Average]
[info]   (min, avg, max) = (20522.044, 20627.171, 20829.748), stdev = 130.030
[info]   CI (99.9%): [20126.473, 21127.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.030 ±(99.9%) 1157.542 MB/sec [Average]
[info]   (min, avg, max) = (1340.319, 1878.030, 2016.765), stdev = 300.610
[info]   CI (99.9%): [720.488, 3035.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20486.031 ±(99.9%) 12777.542 B/op [Average]
[info]   (min, avg, max) = (14555.015, 20486.031, 22152.499), stdev = 3318.287
[info]   CI (99.9%): [7708.489, 33263.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.789), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.255 ±(99.9%) 50.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.255, 30.640), stdev = 13.204
[info]   CI (99.9%): [≈ 0, 59.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47.99% complete, ETA 01:09:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.817 ops/s
[info] # Warmup Iteration   2: 798155.513 ops/s
[info] # Warmup Iteration   3: 842985.402 ops/s
[info] # Warmup Iteration   4: 833006.535 ops/s
[info] # Warmup Iteration   5: 840757.079 ops/s
[info] Iteration   1: 845975.117 ops/s
[info]                  ·gc.alloc.rate:      468.724 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 850720.502 ops/s
[info]                  ·gc.alloc.rate:               495.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          916.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1232.356 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 852332.810 ops/s
[info]                  ·gc.alloc.rate:                   497.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              918.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1230.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 855302.545 ops/s
[info]                  ·gc.alloc.rate:      473.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 853688.692 ops/s
[info]                  ·gc.alloc.rate:                   488.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              899.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1229.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   851603.933 ±(99.9%) 13752.411 ops/s [Average]
[info]   (min, avg, max) = (845975.117, 851603.933, 855302.545), stdev = 3571.457
[info]   CI (99.9%): [837851.522, 865356.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   484.668 ±(99.9%) 49.341 MB/sec [Average]
[info]   (min, avg, max) = (468.724, 484.668, 497.218), stdev = 12.814
[info]   CI (99.9%): [435.327, 534.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   895.697 ±(99.9%) 87.753 B/op [Average]
[info]   (min, avg, max) = (872.001, 895.697, 918.093), stdev = 22.789
[info]   CI (99.9%): [807.944, 983.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.824 ±(99.9%) 1405.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.824, 666.794), stdev = 364.988
[info]   CI (99.9%): [≈ 0, 1805.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   738.343 ±(99.9%) 2595.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 738.343, 1232.356), stdev = 674.013
[info]   CI (99.9%): [≈ 0, 3333.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.081), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.19% complete, ETA 01:09:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115698.110 ops/s
[info] # Warmup Iteration   2: 368959.073 ops/s
[info] # Warmup Iteration   3: 382290.195 ops/s
[info] # Warmup Iteration   4: 394806.615 ops/s
[info] # Warmup Iteration   5: 397152.947 ops/s
[info] Iteration   1: 396181.312 ops/s
[info]                  ·gc.alloc.rate:                   406.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              1615.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2032.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 394483.392 ops/s
[info]                  ·gc.alloc.rate:               404.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          1613.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2041.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 397448.208 ops/s
[info]                  ·gc.alloc.rate:      395.995 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 384227.003 ops/s
[info]                  ·gc.alloc.rate:               397.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          1627.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2728.613 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 383231.260 ops/s
[info]                  ·gc.alloc.rate:               401.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          1648.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2735.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   391114.235 ±(99.9%) 26308.731 ops/s [Average]
[info]   (min, avg, max) = (383231.260, 391114.235, 397448.208), stdev = 6832.294
[info]   CI (99.9%): [364805.504, 417422.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   401.223 ±(99.9%) 17.825 MB/sec [Average]
[info]   (min, avg, max) = (395.995, 401.223, 406.837), stdev = 4.629
[info]   CI (99.9%): [383.398, 419.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1614.699 ±(99.9%) 113.803 B/op [Average]
[info]   (min, avg, max) = (1568.001, 1614.699, 1648.669), stdev = 29.554
[info]   CI (99.9%): [1500.896, 1728.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.152 ±(99.9%) 1056.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.152, 666.189), stdev = 274.469
[info]   CI (99.9%): [≈ 0, 1528.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1907.595 ±(99.9%) 4319.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1907.595, 2735.732), stdev = 1121.632
[info]   CI (99.9%): [≈ 0, 6226.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.39% complete, ETA 01:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 595580.968 ops/s
[info] # Warmup Iteration   2: 1083586.475 ops/s
[info] # Warmup Iteration   3: 1119870.677 ops/s
[info] # Warmup Iteration   4: 1119858.135 ops/s
[info] # Warmup Iteration   5: 1126619.361 ops/s
[info] Iteration   1: 1123177.795 ops/s
[info]                  ·gc.alloc.rate:               403.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          565.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 716.918 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1124120.737 ops/s
[info]                  ·gc.alloc.rate:               403.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 716.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1128498.279 ops/s
[info]                  ·gc.alloc.rate:      390.079 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1157949.207 ops/s
[info]                  ·gc.alloc.rate:                   418.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              568.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     911.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1145437.685 ops/s
[info]                  ·gc.alloc.rate:               425.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          585.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 921.252 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1135836.741 ±(99.9%) 58793.481 ops/s [Average]
[info]   (min, avg, max) = (1123177.795, 1135836.741, 1157949.207), stdev = 15268.480
[info]   CI (99.9%): [1077043.260, 1194630.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   408.120 ±(99.9%) 54.316 MB/sec [Average]
[info]   (min, avg, max) = (390.079, 408.120, 425.980), stdev = 14.106
[info]   CI (99.9%): [353.804, 462.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   565.408 ±(99.9%) 56.573 B/op [Average]
[info]   (min, avg, max) = (544.000, 565.408, 585.268), stdev = 14.692
[info]   CI (99.9%): [508.835, 621.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   472.860 ±(99.9%) 1062.826 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.860, 670.521), stdev = 276.012
[info]   CI (99.9%): [≈ 0, 1535.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   653.159 ±(99.9%) 1457.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 653.159, 921.252), stdev = 378.546
[info]   CI (99.9%): [≈ 0, 2110.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.59% complete, ETA 01:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9117.807 ops/s
[info] # Warmup Iteration   2: 72717.838 ops/s
[info] # Warmup Iteration   3: 76633.305 ops/s
[info] # Warmup Iteration   4: 80524.464 ops/s
[info] # Warmup Iteration   5: 81104.955 ops/s
[info] Iteration   1: 81446.695 ops/s
[info]                  ·gc.alloc.rate:                   3260.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              63016.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64466.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.218 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 81626.644 ops/s
[info]                  ·gc.alloc.rate:                   3311.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              63856.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64457.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.401 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 80598.839 ops/s
[info]                  ·gc.alloc.rate:               3245.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          63381.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52408.638 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 81534.103 ops/s
[info]                  ·gc.alloc.rate:               3309.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          63888.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64968.610 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 79807.459 ops/s
[info]                  ·gc.alloc.rate:               3243.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          63957.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66619.728 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   81002.748 ±(99.9%) 3020.077 ops/s [Average]
[info]   (min, avg, max) = (79807.459, 81002.748, 81626.644), stdev = 784.304
[info]   CI (99.9%): [77982.671, 84022.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3274.369 ±(99.9%) 130.461 MB/sec [Average]
[info]   (min, avg, max) = (3243.665, 3274.369, 3311.802), stdev = 33.880
[info]   CI (99.9%): [3143.908, 3404.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63620.061 ±(99.9%) 1567.580 B/op [Average]
[info]   (min, avg, max) = (63016.588, 63620.061, 63957.686), stdev = 407.096
[info]   CI (99.9%): [62052.481, 65187.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3221.427 ±(99.9%) 1159.001 MB/sec [Average]
[info]   (min, avg, max) = (2683.879, 3221.427, 3378.672), stdev = 300.989
[info]   CI (99.9%): [2062.426, 4380.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62584.327 ±(99.9%) 22167.785 B/op [Average]
[info]   (min, avg, max) = (52408.638, 62584.327, 66619.728), stdev = 5756.903
[info]   CI (99.9%): [40416.542, 84752.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.167), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.724 ±(99.9%) 5.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.218), stdev = 1.405
[info]   CI (99.9%): [≈ 0, 6.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48.80% complete, ETA 01:08:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133049.431 ops/s
[info] # Warmup Iteration   2: 261639.840 ops/s
[info] # Warmup Iteration   3: 278915.579 ops/s
[info] # Warmup Iteration   4: 286175.932 ops/s
[info] # Warmup Iteration   5: 285404.598 ops/s
[info] Iteration   1: 281187.239 ops/s
[info]                  ·gc.alloc.rate:                   1388.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              7772.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7524.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 287910.804 ops/s
[info]                  ·gc.alloc.rate:                   1420.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              7761.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7352.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 287201.168 ops/s
[info]                  ·gc.alloc.rate:                   1416.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              7758.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7375.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 288017.905 ops/s
[info]                  ·gc.alloc.rate:                   1432.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              7824.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7347.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 279749.151 ops/s
[info]                  ·gc.alloc.rate:               1406.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          7911.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7551.423 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   284813.253 ±(99.9%) 15445.818 ops/s [Average]
[info]   (min, avg, max) = (279749.151, 284813.253, 288017.905), stdev = 4011.230
[info]   CI (99.9%): [269367.435, 300259.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1412.684 ±(99.9%) 62.886 MB/sec [Average]
[info]   (min, avg, max) = (1388.539, 1412.684, 1432.087), stdev = 16.331
[info]   CI (99.9%): [1349.798, 1475.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7805.702 ±(99.9%) 250.061 B/op [Average]
[info]   (min, avg, max) = (7758.339, 7805.702, 7911.457), stdev = 64.940
[info]   CI (99.9%): [7555.641, 8055.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.595 ±(99.9%) 5.632 MB/sec [Average]
[info]   (min, avg, max) = (1342.404, 1344.595, 1346.415), stdev = 1.463
[info]   CI (99.9%): [1338.963, 1350.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7430.200 ±(99.9%) 382.608 B/op [Average]
[info]   (min, avg, max) = (7347.450, 7430.200, 7551.423), stdev = 99.362
[info]   CI (99.9%): [7047.592, 7812.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.675 ±(99.9%) 4.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 2.853), stdev = 1.229
[info]   CI (99.9%): [≈ 0, 5.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.696 ±(99.9%) 25.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.696, 15.628), stdev = 6.732
[info]   CI (99.9%): [≈ 0, 29.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.00% complete, ETA 01:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68651.925 ops/s
[info] # Warmup Iteration   2: 250631.245 ops/s
[info] # Warmup Iteration   3: 270120.571 ops/s
[info] # Warmup Iteration   4: 261804.951 ops/s
[info] # Warmup Iteration   5: 262168.747 ops/s
[info] Iteration   1: 267733.527 ops/s
[info]                  ·gc.alloc.rate:               1615.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          9498.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7886.474 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 262259.964 ops/s
[info]                  ·gc.alloc.rate:                   1623.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              9739.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12080.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 267119.279 ops/s
[info]                  ·gc.alloc.rate:                   1614.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              9507.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7900.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 272560.404 ops/s
[info]                  ·gc.alloc.rate:               1641.470 MB/sec
[info]                  ·gc.alloc.rate.norm:          9478.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7728.107 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 272069.424 ops/s
[info]                  ·gc.alloc.rate:               1655.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          9578.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11607.042 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   268348.520 ±(99.9%) 16170.969 ops/s [Average]
[info]   (min, avg, max) = (262259.964, 268348.520, 272560.404), stdev = 4199.549
[info]   CI (99.9%): [252177.551, 284519.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1630.076 ±(99.9%) 69.084 MB/sec [Average]
[info]   (min, avg, max) = (1614.230, 1630.076, 1655.690), stdev = 17.941
[info]   CI (99.9%): [1560.992, 1699.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9560.499 ±(99.9%) 411.106 B/op [Average]
[info]   (min, avg, max) = (9478.134, 9560.499, 9739.047), stdev = 106.763
[info]   CI (99.9%): [9149.393, 9971.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.203 ±(99.9%) 1411.771 MB/sec [Average]
[info]   (min, avg, max) = (1338.392, 1608.203, 2013.363), stdev = 366.632
[info]   CI (99.9%): [196.433, 3019.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9440.583 ±(99.9%) 8476.011 B/op [Average]
[info]   (min, avg, max) = (7728.107, 9440.583, 12080.442), stdev = 2201.193
[info]   CI (99.9%): [964.572, 17916.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.227), stdev = 1.405
[info]   CI (99.9%): [≈ 0, 6.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.437 ±(99.9%) 32.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.437, 19.363), stdev = 8.433
[info]   CI (99.9%): [≈ 0, 36.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.20% complete, ETA 01:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.675 ops/s
[info] # Warmup Iteration   2: 1153053.722 ops/s
[info] # Warmup Iteration   3: 1236196.414 ops/s
[info] # Warmup Iteration   4: 1242188.394 ops/s
[info] # Warmup Iteration   5: 1230095.556 ops/s
[info] Iteration   1: 1251138.542 ops/s
[info]                  ·gc.alloc.rate:      426.088 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1239113.277 ops/s
[info]                  ·gc.alloc.rate:               438.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 845.268 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1237918.133 ops/s
[info]                  ·gc.alloc.rate:      421.600 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1231065.910 ops/s
[info]                  ·gc.alloc.rate:                   441.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     850.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1233556.889 ops/s
[info]                  ·gc.alloc.rate:               442.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 849.511 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1238558.550 ±(99.9%) 29835.056 ops/s [Average]
[info]   (min, avg, max) = (1231065.910, 1238558.550, 1251138.542), stdev = 7748.069
[info]   CI (99.9%): [1208723.494, 1268393.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   434.065 ±(99.9%) 36.815 MB/sec [Average]
[info]   (min, avg, max) = (421.600, 434.065, 442.541), stdev = 9.561
[info]   CI (99.9%): [397.251, 470.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   551.569 ±(99.9%) 55.870 B/op [Average]
[info]   (min, avg, max) = (536.000, 551.569, 564.606), stdev = 14.509
[info]   CI (99.9%): [495.699, 607.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.430 ±(99.9%) 1404.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.430, 665.851), stdev = 364.628
[info]   CI (99.9%): [≈ 0, 1803.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   509.112 ±(99.9%) 1789.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 509.112, 850.783), stdev = 464.758
[info]   CI (99.9%): [≈ 0, 2298.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.40% complete, ETA 01:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630958.177 ops/s
[info] # Warmup Iteration   2: 1489008.539 ops/s
[info] # Warmup Iteration   3: 1512295.051 ops/s
[info] # Warmup Iteration   4: 1557042.791 ops/s
[info] # Warmup Iteration   5: 1576090.549 ops/s
[info] Iteration   1: 1576184.229 ops/s
[info]                  ·gc.alloc.rate:               944.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          942.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 667.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1563813.492 ops/s
[info]                  ·gc.alloc.rate:               950.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          956.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1345.559 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1571715.562 ops/s
[info]                  ·gc.alloc.rate:                   933.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              933.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     669.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1571279.817 ops/s
[info]                  ·gc.alloc.rate:               948.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          949.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1341.113 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 1574478.726 ops/s
[info]                  ·gc.alloc.rate:               934.034 MB/sec
[info]                  ·gc.alloc.rate.norm:          933.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 669.878 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1571494.365 ±(99.9%) 18264.397 ops/s [Average]
[info]   (min, avg, max) = (1563813.492, 1571494.365, 1576184.229), stdev = 4743.206
[info]   CI (99.9%): [1553229.968, 1589758.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   941.985 ±(99.9%) 30.851 MB/sec [Average]
[info]   (min, avg, max) = (933.045, 941.985, 950.125), stdev = 8.012
[info]   CI (99.9%): [911.133, 972.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   943.243 ±(99.9%) 37.883 B/op [Average]
[info]   (min, avg, max) = (933.657, 943.243, 956.194), stdev = 9.838
[info]   CI (99.9%): [905.359, 981.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.786 ±(99.9%) 1411.255 MB/sec [Average]
[info]   (min, avg, max) = (668.198, 936.786, 1339.507), stdev = 366.498
[info]   CI (99.9%): [≈ 0, 2348.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   938.686 ±(99.9%) 1422.419 B/op [Average]
[info]   (min, avg, max) = (667.184, 938.686, 1345.559), stdev = 369.398
[info]   CI (99.9%): [≈ 0, 2361.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.60% complete, ETA 01:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1021777.111 ops/s
[info] # Warmup Iteration   2: 1791291.128 ops/s
[info] # Warmup Iteration   3: 1884072.477 ops/s
[info] # Warmup Iteration   4: 1900215.823 ops/s
[info] # Warmup Iteration   5: 1900275.010 ops/s
[info] Iteration   1: 1921675.655 ops/s
[info]                  ·gc.alloc.rate:                   672.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1913674.650 ops/s
[info]                  ·gc.alloc.rate:               677.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1917407.116 ops/s
[info]                  ·gc.alloc.rate:                   683.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1923070.461 ops/s
[info]                  ·gc.alloc.rate:               679.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1927083.412 ops/s
[info]                  ·gc.alloc.rate:               673.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 548.943 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1920582.259 ±(99.9%) 19957.358 ops/s [Average]
[info]   (min, avg, max) = (1913674.650, 1920582.259, 1927083.412), stdev = 5182.863
[info]   CI (99.9%): [1900624.900, 1940539.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   677.219 ±(99.9%) 17.606 MB/sec [Average]
[info]   (min, avg, max) = (672.080, 677.219, 683.366), stdev = 4.572
[info]   CI (99.9%): [659.613, 694.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   554.867 ±(99.9%) 18.114 B/op [Average]
[info]   (min, avg, max) = (549.925, 554.867, 560.809), stdev = 4.704
[info]   CI (99.9%): [536.754, 572.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.453 ±(99.9%) 2.041 MB/sec [Average]
[info]   (min, avg, max) = (670.921, 671.453, 672.262), stdev = 0.530
[info]   CI (99.9%): [669.412, 673.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   550.138 ±(99.9%) 4.622 B/op [Average]
[info]   (min, avg, max) = (548.943, 550.138, 551.685), stdev = 1.200
[info]   CI (99.9%): [545.516, 554.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.80% complete, ETA 01:07:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1089977.947 ops/s
[info] # Warmup Iteration   2: 1934342.420 ops/s
[info] # Warmup Iteration   3: 2053797.365 ops/s
[info] # Warmup Iteration   4: 1945358.855 ops/s
[info] # Warmup Iteration   5: 2011413.165 ops/s
[info] Iteration   1: 2054751.591 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2048085.416 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2021771.444 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1967689.084 ops/s
[info]                  ·gc.alloc.rate:      9.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.227 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2022656.049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2022990.717 ±(99.9%) 131970.482 ops/s [Average]
[info]   (min, avg, max) = (1967689.084, 2022990.717, 2054751.591), stdev = 34272.315
[info]   CI (99.9%): [1891020.235, 2154961.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.808 ±(99.9%) 15.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.808, 9.036), stdev = 4.041
[info]   CI (99.9%): [≈ 0, 17.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.446 ±(99.9%) 12.445 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.446, 7.227), stdev = 3.232
[info]   CI (99.9%): [≈ 0, 13.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.00% complete, ETA 01:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7166.061 ops/s
[info] # Warmup Iteration   2: 38142.941 ops/s
[info] # Warmup Iteration   3: 42053.461 ops/s
[info] # Warmup Iteration   4: 42271.150 ops/s
[info] # Warmup Iteration   5: 42404.302 ops/s
[info] Iteration   1: 42680.258 ops/s
[info]                  ·gc.alloc.rate:                   2124.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              78343.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74184.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 42450.610 ops/s
[info]                  ·gc.alloc.rate:                   2112.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              78331.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74362.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42914.328 ops/s
[info]                  ·gc.alloc.rate:                   2136.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              78339.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73462.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42547.275 ops/s
[info]                  ·gc.alloc.rate:                   2131.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              78845.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74159.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 42960.523 ops/s
[info]                  ·gc.alloc.rate:                   2152.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              78844.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73538.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   42710.599 ±(99.9%) 859.213 ops/s [Average]
[info]   (min, avg, max) = (42450.610, 42710.599, 42960.523), stdev = 223.135
[info]   CI (99.9%): [41851.386, 43569.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2131.361 ±(99.9%) 55.881 MB/sec [Average]
[info]   (min, avg, max) = (2112.798, 2131.361, 2152.056), stdev = 14.512
[info]   CI (99.9%): [2075.480, 2187.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78540.748 ±(99.9%) 1069.337 B/op [Average]
[info]   (min, avg, max) = (78331.424, 78540.748, 78845.357), stdev = 277.704
[info]   CI (99.9%): [77471.410, 79610.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2006.493 ±(99.9%) 12.642 MB/sec [Average]
[info]   (min, avg, max) = (2003.120, 2006.493, 2011.715), stdev = 3.283
[info]   CI (99.9%): [1993.852, 2019.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73941.206 ±(99.9%) 1581.926 B/op [Average]
[info]   (min, avg, max) = (73462.129, 73941.206, 74362.013), stdev = 410.821
[info]   CI (99.9%): [72359.280, 75523.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 6.857 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.833, 4.018), stdev = 1.781
[info]   CI (99.9%): [≈ 0, 7.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   30.707 ±(99.9%) 252.841 B/op [Average]
[info]   (min, avg, max) = (0.763, 30.707, 148.153), stdev = 65.662
[info]   CI (99.9%): [≈ 0, 283.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50.20% complete, ETA 01:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64575.781 ops/s
[info] # Warmup Iteration   2: 141381.881 ops/s
[info] # Warmup Iteration   3: 142513.717 ops/s
[info] # Warmup Iteration   4: 143770.380 ops/s
[info] # Warmup Iteration   5: 143427.759 ops/s
[info] Iteration   1: 143840.122 ops/s
[info]                  ·gc.alloc.rate:               1134.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          12415.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14701.741 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 143740.057 ops/s
[info]                  ·gc.alloc.rate:                   1138.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              12464.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14722.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 144257.460 ops/s
[info]                  ·gc.alloc.rate:                   1114.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              12159.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7336.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 143865.069 ops/s
[info]                  ·gc.alloc.rate:               1136.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          12434.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14720.845 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 143920.344 ops/s
[info]                  ·gc.alloc.rate:                   1125.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              12306.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14729.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   143924.610 ±(99.9%) 759.344 ops/s [Average]
[info]   (min, avg, max) = (143740.057, 143924.610, 144257.460), stdev = 197.199
[info]   CI (99.9%): [143165.266, 144683.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1129.941 ±(99.9%) 38.218 MB/sec [Average]
[info]   (min, avg, max) = (1114.533, 1129.941, 1138.370), stdev = 9.925
[info]   CI (99.9%): [1091.722, 1168.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12355.851 ±(99.9%) 480.764 B/op [Average]
[info]   (min, avg, max) = (12159.534, 12355.851, 12464.118), stdev = 124.853
[info]   CI (99.9%): [11875.086, 12836.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210.704 ±(99.9%) 1158.629 MB/sec [Average]
[info]   (min, avg, max) = (672.456, 1210.704, 1347.171), stdev = 300.892
[info]   CI (99.9%): [52.074, 2369.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13242.211 ±(99.9%) 12712.580 B/op [Average]
[info]   (min, avg, max) = (7336.485, 13242.211, 14729.278), stdev = 3301.417
[info]   CI (99.9%): [529.631, 25954.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.123), stdev = 1.392
[info]   CI (99.9%): [≈ 0, 5.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6.920 ±(99.9%) 58.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.920, 34.146), stdev = 15.220
[info]   CI (99.9%): [≈ 0, 65.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.40% complete, ETA 01:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6076.076 ops/s
[info] # Warmup Iteration   2: 13720.951 ops/s
[info] # Warmup Iteration   3: 15322.266 ops/s
[info] # Warmup Iteration   4: 15701.919 ops/s
[info] # Warmup Iteration   5: 15434.274 ops/s
[info] Iteration   1: 15508.127 ops/s
[info]                  ·gc.alloc.rate:                   1893.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              192160.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204685.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 15570.832 ops/s
[info]                  ·gc.alloc.rate:                   1926.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              194684.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203601.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15129.402 ops/s
[info]                  ·gc.alloc.rate:               1864.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          193948.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139422.080 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 15621.944 ops/s
[info]                  ·gc.alloc.rate:                   1912.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              192717.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202333.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15892.270 ops/s
[info]                  ·gc.alloc.rate:                   1978.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              195896.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199015.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   15544.515 ±(99.9%) 1056.762 ops/s [Average]
[info]   (min, avg, max) = (15129.402, 15544.515, 15892.270), stdev = 274.438
[info]   CI (99.9%): [14487.753, 16601.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1915.088 ±(99.9%) 162.750 MB/sec [Average]
[info]   (min, avg, max) = (1864.478, 1915.088, 1978.272), stdev = 42.266
[info]   CI (99.9%): [1752.338, 2077.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   193881.757 ±(99.9%) 5784.726 B/op [Average]
[info]   (min, avg, max) = (192160.762, 193881.757, 195896.944), stdev = 1502.275
[info]   CI (99.9%): [188097.030, 199666.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.970 ±(99.9%) 1157.446 MB/sec [Average]
[info]   (min, avg, max) = (1340.302, 1877.970, 2016.952), stdev = 300.585
[info]   CI (99.9%): [720.524, 3035.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   189811.742 ±(99.9%) 108776.853 B/op [Average]
[info]   (min, avg, max) = (139422.080, 189811.742, 204685.929), stdev = 28249.003
[info]   CI (99.9%): [81034.889, 298588.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.623), stdev = 1.137
[info]   CI (99.9%): [≈ 0, 5.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   77.619 ±(99.9%) 444.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77.619, 266.166), stdev = 115.340
[info]   CI (99.9%): [≈ 0, 521.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.60% complete, ETA 01:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29182.351 ops/s
[info] # Warmup Iteration   2: 93983.854 ops/s
[info] # Warmup Iteration   3: 98471.344 ops/s
[info] # Warmup Iteration   4: 100198.215 ops/s
[info] # Warmup Iteration   5: 98406.413 ops/s
[info] Iteration   1: 95603.181 ops/s
[info]                  ·gc.alloc.rate:               1288.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          21216.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21997.484 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 97727.321 ops/s
[info]                  ·gc.alloc.rate:               1319.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          21239.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21541.820 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 98856.486 ops/s
[info]                  ·gc.alloc.rate:                   1322.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              21058.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21306.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 96290.863 ops/s
[info]                  ·gc.alloc.rate:                   1313.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              21460.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21895.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.349 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 97892.943 ops/s
[info]                  ·gc.alloc.rate:                   1308.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              21032.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21483.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97274.159 ±(99.9%) 5039.435 ops/s [Average]
[info]   (min, avg, max) = (95603.181, 97274.159, 98856.486), stdev = 1308.725
[info]   CI (99.9%): [92234.723, 102313.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1310.401 ±(99.9%) 51.115 MB/sec [Average]
[info]   (min, avg, max) = (1288.841, 1310.401, 1322.730), stdev = 13.274
[info]   CI (99.9%): [1259.286, 1361.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21201.721 ±(99.9%) 661.047 B/op [Average]
[info]   (min, avg, max) = (21032.425, 21201.721, 21460.855), stdev = 171.672
[info]   CI (99.9%): [20540.674, 21862.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337.681 ±(99.9%) 5.704 MB/sec [Average]
[info]   (min, avg, max) = (1336.246, 1337.681, 1339.776), stdev = 1.481
[info]   CI (99.9%): [1331.977, 1343.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21644.976 ±(99.9%) 1120.226 B/op [Average]
[info]   (min, avg, max) = (21306.226, 21644.976, 21997.484), stdev = 290.919
[info]   CI (99.9%): [20524.750, 22765.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.060), stdev = 1.806
[info]   CI (99.9%): [≈ 0, 7.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.537 ±(99.9%) 113.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.537, 66.349), stdev = 29.525
[info]   CI (99.9%): [≈ 0, 127.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.80% complete, ETA 01:05:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135304.114 ops/s
[info] # Warmup Iteration   2: 240350.192 ops/s
[info] # Warmup Iteration   3: 247576.379 ops/s
[info] # Warmup Iteration   4: 245983.152 ops/s
[info] # Warmup Iteration   5: 248569.450 ops/s
[info] Iteration   1: 248418.797 ops/s
[info]                  ·gc.alloc.rate:               829.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          5257.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4254.098 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 248333.652 ops/s
[info]                  ·gc.alloc.rate:                   824.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              5225.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4255.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 254192.897 ops/s
[info]                  ·gc.alloc.rate:               841.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          5209.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4161.638 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 254189.384 ops/s
[info]                  ·gc.alloc.rate:               842.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          5216.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4161.621 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 252314.513 ops/s
[info]                  ·gc.alloc.rate:                   863.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8389.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   251489.849 ±(99.9%) 11336.037 ops/s [Average]
[info]   (min, avg, max) = (248333.652, 251489.849, 254192.897), stdev = 2943.933
[info]   CI (99.9%): [240153.811, 262825.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   840.332 ±(99.9%) 57.614 MB/sec [Average]
[info]   (min, avg, max) = (824.506, 840.332, 863.381), stdev = 14.962
[info]   CI (99.9%): [782.718, 897.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5258.653 ±(99.9%) 280.098 B/op [Average]
[info]   (min, avg, max) = (5209.608, 5258.653, 5384.606), stdev = 72.740
[info]   CI (99.9%): [4978.555, 5538.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.498 ±(99.9%) 1159.586 MB/sec [Average]
[info]   (min, avg, max) = (671.475, 806.498, 1345.195), stdev = 301.141
[info]   CI (99.9%): [≈ 0, 1966.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5044.494 ±(99.9%) 7202.628 B/op [Average]
[info]   (min, avg, max) = (4161.621, 5044.494, 8389.506), stdev = 1870.499
[info]   CI (99.9%): [≈ 0, 12247.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.264), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.00% complete, ETA 01:05:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1908.274 ops/s
[info] # Warmup Iteration   2: 10630.176 ops/s
[info] # Warmup Iteration   3: 12918.738 ops/s
[info] # Warmup Iteration   4: 12939.308 ops/s
[info] # Warmup Iteration   5: 12900.351 ops/s
[info] Iteration   1: 12910.022 ops/s
[info]                  ·gc.alloc.rate:                   2065.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              251771.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245008.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400.971 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 13021.449 ops/s
[info]                  ·gc.alloc.rate:                   2075.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              250828.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242517.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13021.226 ops/s
[info]                  ·gc.alloc.rate:               2092.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          252931.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 241793.268 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 12922.476 ops/s
[info]                  ·gc.alloc.rate:               2081.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          253539.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 243626.594 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 12990.574 ops/s
[info]                  ·gc.alloc.rate:               2122.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          257027.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2670.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 323327.055 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   12973.150 ±(99.9%) 206.473 ops/s [Average]
[info]   (min, avg, max) = (12910.022, 12973.150, 13021.449), stdev = 53.620
[info]   CI (99.9%): [12766.676, 13179.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2087.599 ±(99.9%) 84.618 MB/sec [Average]
[info]   (min, avg, max) = (2065.345, 2087.599, 2122.633), stdev = 21.975
[info]   CI (99.9%): [2002.981, 2172.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   253219.718 ±(99.9%) 9133.140 B/op [Average]
[info]   (min, avg, max) = (250828.444, 253219.718, 257027.851), stdev = 2371.848
[info]   CI (99.9%): [244086.577, 262352.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.545 ±(99.9%) 1146.590 MB/sec [Average]
[info]   (min, avg, max) = (2000.454, 2137.545, 2670.156), stdev = 297.766
[info]   CI (99.9%): [990.955, 3284.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   259254.731 ±(99.9%) 137999.673 B/op [Average]
[info]   (min, avg, max) = (241793.268, 259254.731, 323327.055), stdev = 35838.077
[info]   CI (99.9%): [121255.057, 397254.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 5.538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 3.289), stdev = 1.438
[info]   CI (99.9%): [≈ 0, 6.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   110.891 ±(99.9%) 674.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.891, 400.971), stdev = 175.251
[info]   CI (99.9%): [≈ 0, 785.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51.20% complete, ETA 01:05:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4942.057 ops/s
[info] # Warmup Iteration   2: 13241.825 ops/s
[info] # Warmup Iteration   3: 14166.245 ops/s
[info] # Warmup Iteration   4: 14246.691 ops/s
[info] # Warmup Iteration   5: 14190.867 ops/s
[info] Iteration   1: 14398.550 ops/s
[info]                  ·gc.alloc.rate:                   1803.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              197092.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220586.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 14386.924 ops/s
[info]                  ·gc.alloc.rate:                   1813.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              198425.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220660.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 375.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14399.272 ops/s
[info]                  ·gc.alloc.rate:                   1804.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              197270.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146707.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14244.974 ops/s
[info]                  ·gc.alloc.rate:                   1793.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              198058.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222182.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14543.796 ops/s
[info]                  ·gc.alloc.rate:                   1820.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              196929.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145110.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   14394.703 ±(99.9%) 407.258 ops/s [Average]
[info]   (min, avg, max) = (14244.974, 14394.703, 14543.796), stdev = 105.764
[info]   CI (99.9%): [13987.445, 14801.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1807.046 ±(99.9%) 40.280 MB/sec [Average]
[info]   (min, avg, max) = (1793.073, 1807.046, 1820.298), stdev = 10.461
[info]   CI (99.9%): [1766.766, 1847.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   197555.289 ±(99.9%) 2508.712 B/op [Average]
[info]   (min, avg, max) = (196929.094, 197555.289, 198425.558), stdev = 651.505
[info]   CI (99.9%): [195046.576, 200064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1746.045 ±(99.9%) 1421.045 MB/sec [Average]
[info]   (min, avg, max) = (1341.321, 1746.045, 2018.040), stdev = 369.041
[info]   CI (99.9%): [325.000, 3167.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   191049.485 ±(99.9%) 158708.351 B/op [Average]
[info]   (min, avg, max) = (145110.923, 191049.485, 222182.127), stdev = 41216.055
[info]   CI (99.9%): [32341.134, 349757.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.853 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.716, 3.435), stdev = 1.520
[info]   CI (99.9%): [≈ 0, 6.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   78.351 ±(99.9%) 640.285 B/op [Average]
[info]   (min, avg, max) = (2.253, 78.351, 375.754), stdev = 166.280
[info]   CI (99.9%): [≈ 0, 718.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.41% complete, ETA 01:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8652.839 ops/s
[info] # Warmup Iteration   2: 30332.348 ops/s
[info] # Warmup Iteration   3: 32409.069 ops/s
[info] # Warmup Iteration   4: 32004.478 ops/s
[info] # Warmup Iteration   5: 32612.989 ops/s
[info] Iteration   1: 32919.407 ops/s
[info]                  ·gc.alloc.rate:                   2741.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              131067.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128098.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.962 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 32560.108 ops/s
[info]                  ·gc.alloc.rate:                   2698.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              130452.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129478.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 32902.813 ops/s
[info]                  ·gc.alloc.rate:                   2767.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              132354.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128363.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 32716.471 ops/s
[info]                  ·gc.alloc.rate:               2751.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          132372.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129417.627 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 33027.969 ops/s
[info]                  ·gc.alloc.rate:               2778.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          132382.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128544.441 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   32825.354 ±(99.9%) 715.508 ops/s [Average]
[info]   (min, avg, max) = (32560.108, 32825.354, 33027.969), stdev = 185.815
[info]   CI (99.9%): [32109.845, 33540.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2747.431 ±(99.9%) 117.753 MB/sec [Average]
[info]   (min, avg, max) = (2698.816, 2747.431, 2778.080), stdev = 30.580
[info]   CI (99.9%): [2629.678, 2865.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   131725.998 ±(99.9%) 3497.714 B/op [Average]
[info]   (min, avg, max) = (130452.358, 131725.998, 132382.995), stdev = 908.345
[info]   CI (99.9%): [128228.284, 135223.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2685.895 ±(99.9%) 30.725 MB/sec [Average]
[info]   (min, avg, max) = (2678.660, 2685.895, 2697.527), stdev = 7.979
[info]   CI (99.9%): [2655.169, 2716.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128780.357 ±(99.9%) 2426.068 B/op [Average]
[info]   (min, avg, max) = (128098.067, 128780.357, 129478.077), stdev = 630.042
[info]   CI (99.9%): [126354.289, 131206.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.167), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.393 ±(99.9%) 12.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.393, 7.962), stdev = 3.270
[info]   CI (99.9%): [≈ 0, 14.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.61% complete, ETA 01:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21716.878 ops/s
[info] # Warmup Iteration   2: 102451.291 ops/s
[info] # Warmup Iteration   3: 103083.049 ops/s
[info] # Warmup Iteration   4: 106325.842 ops/s
[info] # Warmup Iteration   5: 104708.577 ops/s
[info] Iteration   1: 106791.895 ops/s
[info]                  ·gc.alloc.rate:               1491.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          21984.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19712.585 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 106147.309 ops/s
[info]                  ·gc.alloc.rate:                   1508.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              22365.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29774.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.926 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 106361.468 ops/s
[info]                  ·gc.alloc.rate:                   1506.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              22293.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19832.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 104093.612 ops/s
[info]                  ·gc.alloc.rate:               1478.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          22343.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20224.775 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 105624.518 ops/s
[info]                  ·gc.alloc.rate:               1497.724 MB/sec
[info]                  ·gc.alloc.rate.norm:          22316.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19891.390 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   105803.760 ±(99.9%) 4021.208 ops/s [Average]
[info]   (min, avg, max) = (104093.612, 105803.760, 106791.895), stdev = 1044.295
[info]   CI (99.9%): [101782.552, 109824.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1496.585 ±(99.9%) 47.419 MB/sec [Average]
[info]   (min, avg, max) = (1478.245, 1496.585, 1508.655), stdev = 12.315
[info]   CI (99.9%): [1449.166, 1544.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22260.782 ±(99.9%) 603.741 B/op [Average]
[info]   (min, avg, max) = (21984.612, 22260.782, 22365.669), stdev = 156.790
[info]   CI (99.9%): [21657.041, 22864.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.852 ±(99.9%) 1154.981 MB/sec [Average]
[info]   (min, avg, max) = (1334.960, 1471.852, 2008.399), stdev = 299.945
[info]   CI (99.9%): [316.872, 2626.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21887.141 ±(99.9%) 16993.516 B/op [Average]
[info]   (min, avg, max) = (19712.585, 21887.141, 29774.331), stdev = 4413.162
[info]   CI (99.9%): [4893.625, 38880.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.789), stdev = 1.688
[info]   CI (99.9%): [≈ 0, 7.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.398 ±(99.9%) 96.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.398, 56.063), stdev = 24.972
[info]   CI (99.9%): [≈ 0, 107.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.81% complete, ETA 01:04:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111646.621 ops/s
[info] # Warmup Iteration   2: 166662.911 ops/s
[info] # Warmup Iteration   3: 179371.692 ops/s
[info] # Warmup Iteration   4: 175278.004 ops/s
[info] # Warmup Iteration   5: 178859.435 ops/s
[info] Iteration   1: 179505.021 ops/s
[info]                  ·gc.alloc.rate:               588.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          5158.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5878.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 179705.907 ops/s
[info]                  ·gc.alloc.rate:               598.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          5244.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5871.998 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 179975.435 ops/s
[info]                  ·gc.alloc.rate:      586.841 MB/sec
[info]                  ·gc.alloc.rate.norm: 5131.699 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 179527.803 ops/s
[info]                  ·gc.alloc.rate:                   572.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              5017.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5886.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 178267.507 ops/s
[info]                  ·gc.alloc.rate:               581.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          5137.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5928.378 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   179396.335 ±(99.9%) 2535.687 ops/s [Average]
[info]   (min, avg, max) = (178267.507, 179396.335, 179975.435), stdev = 658.510
[info]   CI (99.9%): [176860.648, 181932.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.681 ±(99.9%) 37.356 MB/sec [Average]
[info]   (min, avg, max) = (572.330, 585.681, 598.924), stdev = 9.701
[info]   CI (99.9%): [548.325, 623.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5137.911 ±(99.9%) 312.925 B/op [Average]
[info]   (min, avg, max) = (5017.080, 5137.911, 5244.434), stdev = 81.266
[info]   CI (99.9%): [4824.987, 5450.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.816 ±(99.9%) 1155.539 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.816, 671.523), stdev = 300.090
[info]   CI (99.9%): [≈ 0, 1692.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4713.086 ±(99.9%) 10145.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4713.086, 5928.378), stdev = 2634.787
[info]   CI (99.9%): [≈ 0, 14858.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.365), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.01% complete, ETA 01:04:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109499.448 ops/s
[info] # Warmup Iteration   2: 187646.894 ops/s
[info] # Warmup Iteration   3: 193507.729 ops/s
[info] # Warmup Iteration   4: 193457.178 ops/s
[info] # Warmup Iteration   5: 193609.928 ops/s
[info] Iteration   1: 193572.075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 193549.715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 193616.052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 191885.090 ops/s
[info]                  ·gc.alloc.rate:      1.120 MB/sec
[info]                  ·gc.alloc.rate.norm: 9.181 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 193468.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   193218.341 ±(99.9%) 2877.299 ops/s [Average]
[info]   (min, avg, max) = (191885.090, 193218.341, 193616.052), stdev = 747.225
[info]   CI (99.9%): [190341.042, 196095.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.224 ±(99.9%) 1.927 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.224, 1.120), stdev = 0.501
[info]   CI (99.9%): [≈ 0, 2.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.838 ±(99.9%) 15.806 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.838, 9.181), stdev = 4.105
[info]   CI (99.9%): [≈ 0, 17.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.21% complete, ETA 01:03:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10092.573 ops/s
[info] # Warmup Iteration   2: 42199.306 ops/s
[info] # Warmup Iteration   3: 46836.362 ops/s
[info] # Warmup Iteration   4: 46016.350 ops/s
[info] # Warmup Iteration   5: 46413.470 ops/s
[info] Iteration   1: 46918.741 ops/s
[info]                  ·gc.alloc.rate:               3275.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          109886.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3341.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112084.073 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 47447.965 ops/s
[info]                  ·gc.alloc.rate:                   3365.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              111625.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111102.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.691 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 47144.393 ops/s
[info]                  ·gc.alloc.rate:               3319.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          110810.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89753.409 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 47347.569 ops/s
[info]                  ·gc.alloc.rate:               3360.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          111695.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3372.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112087.250 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 46795.196 ops/s
[info]                  ·gc.alloc.rate:                   3323.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              111771.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113727.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   47130.773 ±(99.9%) 1063.931 ops/s [Average]
[info]   (min, avg, max) = (46795.196, 47130.773, 47447.965), stdev = 276.300
[info]   CI (99.9%): [46066.842, 48194.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3328.802 ±(99.9%) 139.558 MB/sec [Average]
[info]   (min, avg, max) = (3275.770, 3328.802, 3365.293), stdev = 36.243
[info]   CI (99.9%): [3189.244, 3468.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111157.786 ±(99.9%) 3115.925 B/op [Average]
[info]   (min, avg, max) = (109886.989, 111157.786, 111771.197), stdev = 809.196
[info]   CI (99.9%): [108041.861, 114273.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3226.586 ±(99.9%) 1159.693 MB/sec [Average]
[info]   (min, avg, max) = (2688.628, 3226.586, 3381.434), stdev = 301.169
[info]   CI (99.9%): [2066.893, 4386.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107750.918 ±(99.9%) 38910.717 B/op [Average]
[info]   (min, avg, max) = (89753.409, 107750.918, 113727.736), stdev = 10104.990
[info]   CI (99.9%): [68840.201, 146661.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.278 ±(99.9%) 1.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.278, 0.700), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 1.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52.41% complete, ETA 01:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4510.138 ops/s
[info] # Warmup Iteration   2: 8788.943 ops/s
[info] # Warmup Iteration   3: 8740.752 ops/s
[info] # Warmup Iteration   4: 9095.371 ops/s
[info] # Warmup Iteration   5: 9029.489 ops/s
[info] Iteration   1: 9062.785 ops/s
[info]                  ·gc.alloc.rate:               964.951 MB/sec
[info]                  ·gc.alloc.rate.norm:          167577.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116714.085 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 9041.887 ops/s
[info]                  ·gc.alloc.rate:               973.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          169496.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117101.035 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9009.271 ops/s
[info]                  ·gc.alloc.rate:                   984.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              172016.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235033.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9063.002 ops/s
[info]                  ·gc.alloc.rate:               973.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          169001.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116829.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 9042.237 ops/s
[info]                  ·gc.alloc.rate:                   972.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              169302.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234318.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   9043.836 ±(99.9%) 84.529 ops/s [Average]
[info]   (min, avg, max) = (9009.271, 9043.836, 9063.002), stdev = 21.952
[info]   CI (99.9%): [8959.308, 9128.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   973.967 ±(99.9%) 27.198 MB/sec [Average]
[info]   (min, avg, max) = (964.951, 973.967, 984.772), stdev = 7.063
[info]   CI (99.9%): [946.769, 1001.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   169478.907 ±(99.9%) 6183.458 B/op [Average]
[info]   (min, avg, max) = (167577.152, 169478.907, 172016.344), stdev = 1605.824
[info]   CI (99.9%): [163295.449, 175662.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.959 ±(99.9%) 1420.308 MB/sec [Average]
[info]   (min, avg, max) = (672.069, 941.959, 1346.487), stdev = 368.849
[info]   CI (99.9%): [≈ 0, 2362.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   163999.314 ±(99.9%) 248440.466 B/op [Average]
[info]   (min, avg, max) = (116714.085, 163999.314, 235033.680), stdev = 64519.200
[info]   CI (99.9%): [≈ 0, 412439.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.176 ±(99.9%) 12.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.176, 7.246), stdev = 3.242
[info]   CI (99.9%): [≈ 0, 14.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.61% complete, ETA 01:03:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3020.665 ops/s
[info] # Warmup Iteration   2: 24898.293 ops/s
[info] # Warmup Iteration   3: 27321.034 ops/s
[info] # Warmup Iteration   4: 27896.124 ops/s
[info] # Warmup Iteration   5: 27177.123 ops/s
[info] Iteration   1: 27654.029 ops/s
[info]                  ·gc.alloc.rate:                   1452.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              82651.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76352.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 27408.739 ops/s
[info]                  ·gc.alloc.rate:                   1431.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              82189.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77073.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 28095.534 ops/s
[info]                  ·gc.alloc.rate:                   1472.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              82507.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75231.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 28270.269 ops/s
[info]                  ·gc.alloc.rate:                   1479.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              82328.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74649.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28265.498 ops/s
[info]                  ·gc.alloc.rate:               1493.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          83136.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74514.138 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   27938.814 ±(99.9%) 1495.354 ops/s [Average]
[info]   (min, avg, max) = (27408.739, 27938.814, 28270.269), stdev = 388.339
[info]   CI (99.9%): [26443.460, 29434.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1465.818 ±(99.9%) 92.988 MB/sec [Average]
[info]   (min, avg, max) = (1431.428, 1465.818, 1493.051), stdev = 24.149
[info]   CI (99.9%): [1372.830, 1558.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   82562.640 ±(99.9%) 1407.289 B/op [Average]
[info]   (min, avg, max) = (82189.284, 82562.640, 83136.254), stdev = 365.469
[info]   CI (99.9%): [81155.350, 83969.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1341.315 ±(99.9%) 7.159 MB/sec [Average]
[info]   (min, avg, max) = (1338.206, 1341.315, 1343.028), stdev = 1.859
[info]   CI (99.9%): [1334.156, 1348.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   75564.079 ±(99.9%) 4282.852 B/op [Average]
[info]   (min, avg, max) = (74514.138, 75564.079, 77073.052), stdev = 1112.243
[info]   CI (99.9%): [71281.228, 79846.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.581), stdev = 1.565
[info]   CI (99.9%): [≈ 0, 6.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   44.081 ±(99.9%) 337.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.081, 200.580), stdev = 87.685
[info]   CI (99.9%): [≈ 0, 381.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.81% complete, ETA 01:03:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5744.268 ops/s
[info] # Warmup Iteration   2: 24465.068 ops/s
[info] # Warmup Iteration   3: 28270.022 ops/s
[info] # Warmup Iteration   4: 28328.732 ops/s
[info] # Warmup Iteration   5: 28008.287 ops/s
[info] Iteration   1: 28429.205 ops/s
[info]                  ·gc.alloc.rate:                   1169.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              64716.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73942.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 28379.259 ops/s
[info]                  ·gc.alloc.rate:                   1161.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              64437.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74146.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28535.119 ops/s
[info]                  ·gc.alloc.rate:               1149.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          63405.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36888.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 28503.845 ops/s
[info]                  ·gc.alloc.rate:                   1162.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              64183.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73889.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 28557.199 ops/s
[info]                  ·gc.alloc.rate:                   1163.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              64106.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73791.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   28480.926 ±(99.9%) 287.454 ops/s [Average]
[info]   (min, avg, max) = (28379.259, 28480.926, 28557.199), stdev = 74.651
[info]   CI (99.9%): [28193.471, 28768.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1161.271 ±(99.9%) 27.243 MB/sec [Average]
[info]   (min, avg, max) = (1149.673, 1161.271, 1169.019), stdev = 7.075
[info]   CI (99.9%): [1134.028, 1188.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   64169.850 ±(99.9%) 1884.962 B/op [Average]
[info]   (min, avg, max) = (63405.614, 64169.850, 64716.462), stdev = 489.519
[info]   CI (99.9%): [62284.888, 66054.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.762 ±(99.9%) 1151.405 MB/sec [Average]
[info]   (min, avg, max) = (668.870, 1203.762, 1338.924), stdev = 299.016
[info]   CI (99.9%): [52.357, 2355.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   66531.654 ±(99.9%) 63810.363 B/op [Average]
[info]   (min, avg, max) = (36888.829, 66531.654, 74146.215), stdev = 16571.349
[info]   CI (99.9%): [2721.291, 130342.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.878 ±(99.9%) 7.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.878, 4.288), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 8.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48.419 ±(99.9%) 404.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.419, 236.335), stdev = 105.053
[info]   CI (99.9%): [≈ 0, 452.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.01% complete, ETA 01:02:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263501.273 ops/s
[info] # Warmup Iteration   2: 630329.349 ops/s
[info] # Warmup Iteration   3: 630111.538 ops/s
[info] # Warmup Iteration   4: 620093.411 ops/s
[info] # Warmup Iteration   5: 623410.300 ops/s
[info] Iteration   1: 634901.142 ops/s
[info]                  ·gc.alloc.rate:                   1687.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              4183.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3334.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 643522.861 ops/s
[info]                  ·gc.alloc.rate:                   1746.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              4271.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4938.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 643285.311 ops/s
[info]                  ·gc.alloc.rate:               1707.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          4178.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3285.550 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 640736.527 ops/s
[info]                  ·gc.alloc.rate:                   1733.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              4259.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4943.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 644727.172 ops/s
[info]                  ·gc.alloc.rate:               1716.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          4190.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3275.042 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   641434.602 ±(99.9%) 15135.574 ops/s [Average]
[info]   (min, avg, max) = (634901.142, 641434.602, 644727.172), stdev = 3930.661
[info]   CI (99.9%): [626299.028, 656570.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1718.476 ±(99.9%) 88.168 MB/sec [Average]
[info]   (min, avg, max) = (1687.567, 1718.476, 1746.484), stdev = 22.897
[info]   CI (99.9%): [1630.307, 1806.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4216.396 ±(99.9%) 173.410 B/op [Average]
[info]   (min, avg, max) = (4178.026, 4216.396, 4271.364), stdev = 45.034
[info]   CI (99.9%): [4042.986, 4389.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.287 ±(99.9%) 1418.188 MB/sec [Average]
[info]   (min, avg, max) = (1341.725, 1612.287, 2019.077), stdev = 368.299
[info]   CI (99.9%): [194.099, 3030.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3955.314 ±(99.9%) 3464.476 B/op [Average]
[info]   (min, avg, max) = (3275.042, 3955.314, 4943.134), stdev = 899.713
[info]   CI (99.9%): [490.838, 7419.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.613 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.289), stdev = 1.458
[info]   CI (99.9%): [≈ 0, 6.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.670 ±(99.9%) 13.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.670, 8.044), stdev = 3.565
[info]   CI (99.9%): [≈ 0, 15.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.21% complete, ETA 01:02:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1592.281 ops/s
[info] # Warmup Iteration   2: 19439.076 ops/s
[info] # Warmup Iteration   3: 23612.265 ops/s
[info] # Warmup Iteration   4: 22919.018 ops/s
[info] # Warmup Iteration   5: 23525.157 ops/s
[info] Iteration   1: 23239.865 ops/s
[info]                  ·gc.alloc.rate:               1745.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          118201.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90260.715 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 22834.244 ops/s
[info]                  ·gc.alloc.rate:                   1725.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              118933.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138125.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.435 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22869.567 ops/s
[info]                  ·gc.alloc.rate:                   1715.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              118038.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92191.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22919.568 ops/s
[info]                  ·gc.alloc.rate:                   1721.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              118187.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138259.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.859 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23218.484 ops/s
[info]                  ·gc.alloc.rate:               1743.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          118171.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91140.277 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   23016.345 ±(99.9%) 757.735 ops/s [Average]
[info]   (min, avg, max) = (22834.244, 23016.345, 23239.865), stdev = 196.781
[info]   CI (99.9%): [22258.610, 23774.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1730.267 ±(99.9%) 51.946 MB/sec [Average]
[info]   (min, avg, max) = (1715.659, 1730.267, 1745.449), stdev = 13.490
[info]   CI (99.9%): [1678.321, 1782.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118306.485 ±(99.9%) 1373.595 B/op [Average]
[info]   (min, avg, max) = (118038.204, 118306.485, 118933.859), stdev = 356.718
[info]   CI (99.9%): [116932.890, 119680.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1606.992 ±(99.9%) 1412.184 MB/sec [Average]
[info]   (min, avg, max) = (1332.858, 1606.992, 2013.327), stdev = 366.740
[info]   CI (99.9%): [194.808, 3019.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   109995.334 ±(99.9%) 99151.416 B/op [Average]
[info]   (min, avg, max) = (90260.715, 109995.334, 138259.432), stdev = 25749.308
[info]   CI (99.9%): [10843.918, 209146.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.521), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 0.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.022 ±(99.9%) 60.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.022, 35.815), stdev = 15.582
[info]   CI (99.9%): [≈ 0, 68.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 01:02:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5189.694 ops/s
[info] # Warmup Iteration   2: 25503.546 ops/s
[info] # Warmup Iteration   3: 29132.498 ops/s
[info] # Warmup Iteration   4: 28759.658 ops/s
[info] # Warmup Iteration   5: 29097.653 ops/s
[info] Iteration   1: 29324.190 ops/s
[info]                  ·gc.alloc.rate:                   1341.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              71987.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72078.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 29329.233 ops/s
[info]                  ·gc.alloc.rate:                   1338.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              71806.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72135.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 29290.236 ops/s
[info]                  ·gc.alloc.rate:                   1333.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              71671.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72231.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 29326.485 ops/s
[info]                  ·gc.alloc.rate:                   1348.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              72364.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72178.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 29339.160 ops/s
[info]                  ·gc.alloc.rate:               1360.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          72960.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71968.105 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   29321.861 ±(99.9%) 71.538 ops/s [Average]
[info]   (min, avg, max) = (29290.236, 29321.861, 29339.160), stdev = 18.578
[info]   CI (99.9%): [29250.323, 29393.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1344.364 ±(99.9%) 39.557 MB/sec [Average]
[info]   (min, avg, max) = (1333.875, 1344.364, 1360.106), stdev = 10.273
[info]   CI (99.9%): [1304.807, 1383.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   72158.211 ±(99.9%) 1997.905 B/op [Average]
[info]   (min, avg, max) = (71671.047, 72158.211, 72960.883), stdev = 518.850
[info]   CI (99.9%): [70160.306, 74156.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1343.622 ±(99.9%) 5.135 MB/sec [Average]
[info]   (min, avg, max) = (1341.599, 1343.622, 1344.933), stdev = 1.333
[info]   CI (99.9%): [1338.488, 1348.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   72118.602 ±(99.9%) 389.451 B/op [Average]
[info]   (min, avg, max) = (71968.105, 72118.602, 72231.656), stdev = 101.139
[info]   CI (99.9%): [71729.150, 72508.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.705), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   40.442 ±(99.9%) 341.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.442, 198.858), stdev = 88.558
[info]   CI (99.9%): [≈ 0, 381.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.61% complete, ETA 01:01:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24773.377 ops/s
[info] # Warmup Iteration   2: 71246.234 ops/s
[info] # Warmup Iteration   3: 73894.967 ops/s
[info] # Warmup Iteration   4: 75891.998 ops/s
[info] # Warmup Iteration   5: 75863.358 ops/s
[info] Iteration   1: 75771.181 ops/s
[info]                  ·gc.alloc.rate:                   2001.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              41570.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27887.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 76775.917 ops/s
[info]                  ·gc.alloc.rate:                   2044.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              41902.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41240.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 76542.491 ops/s
[info]                  ·gc.alloc.rate:               2034.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          41828.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41255.988 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 76611.277 ops/s
[info]                  ·gc.alloc.rate:               2049.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          42096.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41232.521 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 76809.905 ops/s
[info]                  ·gc.alloc.rate:               2055.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          42114.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41186.063 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   76502.154 ±(99.9%) 1630.867 ops/s [Average]
[info]   (min, avg, max) = (75771.181, 76502.154, 76809.905), stdev = 423.531
[info]   CI (99.9%): [74871.287, 78133.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2036.960 ±(99.9%) 82.302 MB/sec [Average]
[info]   (min, avg, max) = (2001.357, 2036.960, 2055.320), stdev = 21.374
[info]   CI (99.9%): [1954.658, 2119.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41902.680 ±(99.9%) 857.494 B/op [Average]
[info]   (min, avg, max) = (41570.524, 41902.680, 42114.457), stdev = 222.688
[info]   CI (99.9%): [41045.187, 42760.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1875.698 ±(99.9%) 1147.501 MB/sec [Average]
[info]   (min, avg, max) = (1342.628, 1875.698, 2011.746), stdev = 298.002
[info]   CI (99.9%): [728.197, 3023.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   38560.515 ±(99.9%) 22973.710 B/op [Average]
[info]   (min, avg, max) = (27887.954, 38560.515, 41255.988), stdev = 5966.200
[info]   CI (99.9%): [15586.805, 61534.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.761 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 2.852), stdev = 1.237
[info]   CI (99.9%): [≈ 0, 5.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.347 ±(99.9%) 98.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.347, 59.239), stdev = 25.679
[info]   CI (99.9%): [≈ 0, 114.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.82% complete, ETA 01:01:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61006.544 ops/s
[info] # Warmup Iteration   2: 165930.708 ops/s
[info] # Warmup Iteration   3: 176296.663 ops/s
[info] # Warmup Iteration   4: 174136.088 ops/s
[info] # Warmup Iteration   5: 176997.138 ops/s
[info] Iteration   1: 177720.307 ops/s
[info]                  ·gc.alloc.rate:                   1978.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              17525.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17809.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 177841.652 ops/s
[info]                  ·gc.alloc.rate:                   1979.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              17514.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17785.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.606 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 176838.760 ops/s
[info]                  ·gc.alloc.rate:                   1981.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              17633.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17853.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 177880.306 ops/s
[info]                  ·gc.alloc.rate:                   2007.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              17755.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17749.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 174518.521 ops/s
[info]                  ·gc.alloc.rate:               1970.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          17767.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18121.986 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   176959.909 ±(99.9%) 5505.835 ops/s [Average]
[info]   (min, avg, max) = (174518.521, 176959.909, 177880.306), stdev = 1429.848
[info]   CI (99.9%): [171454.074, 182465.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1983.412 ±(99.9%) 53.584 MB/sec [Average]
[info]   (min, avg, max) = (1970.094, 1983.412, 2007.030), stdev = 13.916
[info]   CI (99.9%): [1929.828, 2036.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17639.242 ±(99.9%) 465.206 B/op [Average]
[info]   (min, avg, max) = (17514.187, 17639.242, 17767.392), stdev = 120.812
[info]   CI (99.9%): [17174.036, 18104.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2008.626 ±(99.9%) 8.375 MB/sec [Average]
[info]   (min, avg, max) = (2006.267, 2008.626, 2010.984), stdev = 2.175
[info]   CI (99.9%): [2000.251, 2017.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17863.976 ±(99.9%) 574.126 B/op [Average]
[info]   (min, avg, max) = (17749.249, 17863.976, 18121.986), stdev = 149.099
[info]   CI (99.9%): [17289.850, 18438.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 5.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.102), stdev = 1.332
[info]   CI (99.9%): [≈ 0, 5.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.636 ±(99.9%) 45.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.636, 27.468), stdev = 11.794
[info]   CI (99.9%): [≈ 0, 52.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.02% complete, ETA 01:01:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 794961.002 ops/s
[info] # Warmup Iteration   2: 1387533.304 ops/s
[info] # Warmup Iteration   3: 1481470.486 ops/s
[info] # Warmup Iteration   4: 1526420.010 ops/s
[info] # Warmup Iteration   5: 1523486.236 ops/s
[info] Iteration   1: 1524609.866 ops/s
[info]                  ·gc.alloc.rate:               1296.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          1338.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1387.772 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1519050.684 ops/s
[info]                  ·gc.alloc.rate:                   1298.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1345.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1393.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1488872.316 ops/s
[info]                  ·gc.alloc.rate:               1286.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          1359.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1422.430 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1525022.905 ops/s
[info]                  ·gc.alloc.rate:                   1316.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1358.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1390.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1523288.325 ops/s
[info]                  ·gc.alloc.rate:                   1303.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              1346.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1388.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1516168.819 ±(99.9%) 59459.033 ops/s [Average]
[info]   (min, avg, max) = (1488872.316, 1516168.819, 1525022.905), stdev = 15441.322
[info]   CI (99.9%): [1456709.786, 1575627.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1300.233 ±(99.9%) 41.954 MB/sec [Average]
[info]   (min, avg, max) = (1286.553, 1300.233, 1316.450), stdev = 10.895
[info]   CI (99.9%): [1258.279, 1342.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1349.720 ±(99.9%) 35.614 B/op [Average]
[info]   (min, avg, max) = (1338.277, 1349.720, 1359.999), stdev = 9.249
[info]   CI (99.9%): [1314.105, 1385.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.262 ±(99.9%) 4.462 MB/sec [Average]
[info]   (min, avg, max) = (1344.246, 1345.262, 1347.087), stdev = 1.159
[info]   CI (99.9%): [1340.799, 1349.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1396.535 ±(99.9%) 56.356 B/op [Average]
[info]   (min, avg, max) = (1387.772, 1396.535, 1422.430), stdev = 14.635
[info]   CI (99.9%): [1340.179, 1452.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 5.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.956), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.619 ±(99.9%) 5.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.619, 3.051), stdev = 1.360
[info]   CI (99.9%): [≈ 0, 5.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.22% complete, ETA 01:01:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1072188.036 ops/s
[info] # Warmup Iteration   2: 1584047.446 ops/s
[info] # Warmup Iteration   3: 1739538.835 ops/s
[info] # Warmup Iteration   4: 1737420.261 ops/s
[info] # Warmup Iteration   5: 1737597.918 ops/s
[info] Iteration   1: 1737361.900 ops/s
[info]                  ·gc.alloc.rate:      0.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1737855.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1740079.914 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1738059.427 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1738506.440 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1738372.609 ±(99.9%) 4001.689 ops/s [Average]
[info]   (min, avg, max) = (1737361.900, 1738372.609, 1740079.914), stdev = 1039.226
[info]   CI (99.9%): [1734370.920, 1742374.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.008 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.007 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.42% complete, ETA 01:00:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31424.958 ops/s
[info] # Warmup Iteration   2: 142591.603 ops/s
[info] # Warmup Iteration   3: 152435.621 ops/s
[info] # Warmup Iteration   4: 157230.887 ops/s
[info] # Warmup Iteration   5: 156921.633 ops/s
[info] Iteration   1: 157201.317 ops/s
[info]                  ·gc.alloc.rate:                   2027.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              20299.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20095.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 158385.509 ops/s
[info]                  ·gc.alloc.rate:                   2043.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              20301.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19931.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 157483.137 ops/s
[info]                  ·gc.alloc.rate:                   2058.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              20568.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19992.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 157504.032 ops/s
[info]                  ·gc.alloc.rate:                   2020.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              20185.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20002.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 154548.866 ops/s
[info]                  ·gc.alloc.rate:               1995.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          20322.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20421.255 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   157024.572 ±(99.9%) 5597.581 ops/s [Average]
[info]   (min, avg, max) = (154548.866, 157024.572, 158385.509), stdev = 1453.674
[info]   CI (99.9%): [151426.992, 162622.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2028.980 ±(99.9%) 91.428 MB/sec [Average]
[info]   (min, avg, max) = (1995.656, 2028.980, 2058.325), stdev = 23.744
[info]   CI (99.9%): [1937.551, 2120.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20335.623 ±(99.9%) 542.667 B/op [Average]
[info]   (min, avg, max) = (20185.739, 20335.623, 20568.750), stdev = 140.929
[info]   CI (99.9%): [19792.956, 20878.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.212 ±(99.9%) 10.918 MB/sec [Average]
[info]   (min, avg, max) = (2000.694, 2004.212, 2007.268), stdev = 2.835
[info]   CI (99.9%): [1993.294, 2015.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20088.841 ±(99.9%) 750.092 B/op [Average]
[info]   (min, avg, max) = (19931.960, 20088.841, 20421.255), stdev = 194.796
[info]   CI (99.9%): [19338.749, 20838.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.751 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.456), stdev = 1.493
[info]   CI (99.9%): [≈ 0, 6.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.203 ±(99.9%) 57.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.203, 34.598), stdev = 14.953
[info]   CI (99.9%): [≈ 0, 65.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54.62% complete, ETA 01:00:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19328.590 ops/s
[info] # Warmup Iteration   2: 34994.567 ops/s
[info] # Warmup Iteration   3: 35242.140 ops/s
[info] # Warmup Iteration   4: 35129.506 ops/s
[info] # Warmup Iteration   5: 35438.377 ops/s
[info] Iteration   1: 35722.651 ops/s
[info]                  ·gc.alloc.rate:               763.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          33625.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29568.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 35535.137 ops/s
[info]                  ·gc.alloc.rate:               759.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          33640.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29739.304 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 35582.273 ops/s
[info]                  ·gc.alloc.rate:                   753.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              33325.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29698.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.921 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35524.257 ops/s
[info]                  ·gc.alloc.rate:               751.011 MB/sec
[info]                  ·gc.alloc.rate.norm:          33268.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29778.024 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 35374.235 ops/s
[info]                  ·gc.alloc.rate:               762.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          33926.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59810.237 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   35547.710 ±(99.9%) 481.718 ops/s [Average]
[info]   (min, avg, max) = (35374.235, 35547.710, 35722.651), stdev = 125.101
[info]   CI (99.9%): [35065.993, 36029.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   758.006 ±(99.9%) 21.176 MB/sec [Average]
[info]   (min, avg, max) = (751.011, 758.006, 763.309), stdev = 5.499
[info]   CI (99.9%): [736.831, 779.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   33557.296 ±(99.9%) 1028.165 B/op [Average]
[info]   (min, avg, max) = (33268.430, 33557.296, 33926.317), stdev = 267.011
[info]   CI (99.9%): [32529.131, 34585.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806.154 ±(99.9%) 1158.241 MB/sec [Average]
[info]   (min, avg, max) = (671.216, 806.154, 1344.226), stdev = 300.792
[info]   CI (99.9%): [≈ 0, 1964.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   35718.980 ±(99.9%) 51859.132 B/op [Average]
[info]   (min, avg, max) = (29568.974, 35718.980, 59810.237), stdev = 13467.652
[info]   CI (99.9%): [≈ 0, 87578.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.184 ±(99.9%) 1.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.184, 0.921), stdev = 0.412
[info]   CI (99.9%): [≈ 0, 1.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.673
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 01:00:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9415.161 ops/s
[info] # Warmup Iteration   2: 37320.757 ops/s
[info] # Warmup Iteration   3: 42831.550 ops/s
[info] # Warmup Iteration   4: 41769.675 ops/s
[info] # Warmup Iteration   5: 41759.227 ops/s
[info] Iteration   1: 41405.561 ops/s
[info]                  ·gc.alloc.rate:                   1528.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              58111.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50894.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 42033.907 ops/s
[info]                  ·gc.alloc.rate:               1548.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          57951.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50159.047 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 43280.687 ops/s
[info]                  ·gc.alloc.rate:                   1579.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              57437.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48738.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 43293.402 ops/s
[info]                  ·gc.alloc.rate:               1619.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          58859.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72841.657 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 43444.618 ops/s
[info]                  ·gc.alloc.rate:                   1597.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              57868.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48333.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   42691.635 ±(99.9%) 3530.582 ops/s [Average]
[info]   (min, avg, max) = (41405.561, 42691.635, 43444.618), stdev = 916.881
[info]   CI (99.9%): [39161.054, 46222.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1574.601 ±(99.9%) 140.899 MB/sec [Average]
[info]   (min, avg, max) = (1528.759, 1574.601, 1619.388), stdev = 36.591
[info]   CI (99.9%): [1433.703, 1715.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58045.637 ±(99.9%) 1996.946 B/op [Average]
[info]   (min, avg, max) = (57437.820, 58045.637, 58859.034), stdev = 518.601
[info]   CI (99.9%): [56048.691, 60042.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.456 ±(99.9%) 1146.576 MB/sec [Average]
[info]   (min, avg, max) = (1334.192, 1471.456, 2004.092), stdev = 297.762
[info]   CI (99.9%): [324.880, 2618.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   54193.440 ±(99.9%) 40340.429 B/op [Average]
[info]   (min, avg, max) = (48333.818, 54193.440, 72841.657), stdev = 10476.281
[info]   CI (99.9%): [13853.011, 94533.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.853 ±(99.9%) 7.259 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 4.226), stdev = 1.885
[info]   CI (99.9%): [≈ 0, 8.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.043 ±(99.9%) 263.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.043, 153.670), stdev = 68.552
[info]   CI (99.9%): [≈ 0, 295.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.02% complete, ETA 01:00:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460299.735 ops/s
[info] # Warmup Iteration   2: 661125.477 ops/s
[info] # Warmup Iteration   3: 759415.480 ops/s
[info] # Warmup Iteration   4: 739786.330 ops/s
[info] # Warmup Iteration   5: 773340.340 ops/s
[info] Iteration   1: 753519.213 ops/s
[info]                  ·gc.alloc.rate:                   1508.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              3150.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2810.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 763513.062 ops/s
[info]                  ·gc.alloc.rate:               1531.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          3156.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2773.669 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 774516.026 ops/s
[info]                  ·gc.alloc.rate:                   1577.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              3203.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4102.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 748091.935 ops/s
[info]                  ·gc.alloc.rate:               1512.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          3182.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2826.789 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 777696.947 ops/s
[info]                  ·gc.alloc.rate:               1558.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2716.389 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   763467.437 ±(99.9%) 49459.629 ops/s [Average]
[info]   (min, avg, max) = (748091.935, 763467.437, 777696.947), stdev = 12844.509
[info]   CI (99.9%): [714007.808, 812927.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1537.563 ±(99.9%) 113.803 MB/sec [Average]
[info]   (min, avg, max) = (1508.365, 1537.563, 1577.162), stdev = 29.554
[info]   CI (99.9%): [1423.760, 1651.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3169.257 ±(99.9%) 88.763 B/op [Average]
[info]   (min, avg, max) = (3150.499, 3169.257, 3203.486), stdev = 23.052
[info]   CI (99.9%): [3080.494, 3258.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.418 ±(99.9%) 1163.439 MB/sec [Average]
[info]   (min, avg, max) = (1342.419, 1479.418, 2019.899), stdev = 302.141
[info]   CI (99.9%): [315.979, 2642.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3046.032 ±(99.9%) 2280.548 B/op [Average]
[info]   (min, avg, max) = (2716.389, 3046.032, 4102.763), stdev = 592.251
[info]   CI (99.9%): [765.484, 5326.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 5.335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 3.103), stdev = 1.385
[info]   CI (99.9%): [≈ 0, 5.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.269 ±(99.9%) 10.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.269, 6.303), stdev = 2.814
[info]   CI (99.9%): [≈ 0, 12.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.22% complete, ETA 00:59:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1605.127 ops/s
[info] # Warmup Iteration   2: 27449.997 ops/s
[info] # Warmup Iteration   3: 32333.824 ops/s
[info] # Warmup Iteration   4: 32345.659 ops/s
[info] # Warmup Iteration   5: 31169.932 ops/s
[info] Iteration   1: 31795.070 ops/s
[info]                  ·gc.alloc.rate:                   2256.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              111710.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132737.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.096 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 31310.875 ops/s
[info]                  ·gc.alloc.rate:                   2221.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              111659.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101321.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 31441.926 ops/s
[info]                  ·gc.alloc.rate:               2230.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          111667.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101076.605 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 32280.644 ops/s
[info]                  ·gc.alloc.rate:                   2302.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              112256.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98615.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 32270.752 ops/s
[info]                  ·gc.alloc.rate:               2330.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          113589.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131798.892 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   31819.853 ±(99.9%) 1741.474 ops/s [Average]
[info]   (min, avg, max) = (31310.875, 31819.853, 32280.644), stdev = 452.255
[info]   CI (99.9%): [30078.380, 33561.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2268.344 ±(99.9%) 179.747 MB/sec [Average]
[info]   (min, avg, max) = (2221.474, 2268.344, 2330.129), stdev = 46.680
[info]   CI (99.9%): [2088.597, 2448.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112176.536 ±(99.9%) 3191.041 B/op [Average]
[info]   (min, avg, max) = (111659.004, 112176.536, 113589.538), stdev = 828.703
[info]   CI (99.9%): [108985.496, 115367.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2288.605 ±(99.9%) 1420.551 MB/sec [Average]
[info]   (min, avg, max) = (2015.812, 2288.605, 2703.668), stdev = 368.913
[info]   CI (99.9%): [868.054, 3709.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   113109.996 ±(99.9%) 67478.508 B/op [Average]
[info]   (min, avg, max) = (98615.574, 113109.996, 132737.191), stdev = 17523.954
[info]   CI (99.9%): [45631.489, 180588.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 1.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.749), stdev = 0.331
[info]   CI (99.9%): [≈ 0, 1.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.831 ±(99.9%) 63.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.831, 37.096), stdev = 16.367
[info]   CI (99.9%): [≈ 0, 70.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55.42% complete, ETA 00:59:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3050.405 ops/s
[info] # Warmup Iteration   2: 36293.684 ops/s
[info] # Warmup Iteration   3: 40235.440 ops/s
[info] # Warmup Iteration   4: 40838.912 ops/s
[info] # Warmup Iteration   5: 41180.347 ops/s
[info] Iteration   1: 41239.161 ops/s
[info]                  ·gc.alloc.rate:                   1715.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              65462.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50958.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41110.330 ops/s
[info]                  ·gc.alloc.rate:                   1736.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              66460.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76749.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40878.043 ops/s
[info]                  ·gc.alloc.rate:               1713.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          65966.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51527.265 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 40284.800 ops/s
[info]                  ·gc.alloc.rate:                   1716.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              67061.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78608.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 41251.563 ops/s
[info]                  ·gc.alloc.rate:               1716.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          65469.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51261.005 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   40952.779 ±(99.9%) 1549.724 ops/s [Average]
[info]   (min, avg, max) = (40284.800, 40952.779, 41251.563), stdev = 402.458
[info]   CI (99.9%): [39403.056, 42502.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1719.589 ±(99.9%) 35.705 MB/sec [Average]
[info]   (min, avg, max) = (1713.739, 1719.589, 1736.068), stdev = 9.273
[info]   CI (99.9%): [1683.883, 1755.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   66083.965 ±(99.9%) 2636.145 B/op [Average]
[info]   (min, avg, max) = (65462.164, 66083.965, 67061.350), stdev = 684.599
[info]   CI (99.9%): [63447.820, 68720.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1606.927 ±(99.9%) 1411.573 MB/sec [Average]
[info]   (min, avg, max) = (1335.470, 1606.927, 2012.119), stdev = 366.581
[info]   CI (99.9%): [195.355, 3018.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   61820.830 ±(99.9%) 55806.092 B/op [Average]
[info]   (min, avg, max) = (50958.145, 61820.830, 78608.717), stdev = 14492.665
[info]   CI (99.9%): [6014.739, 117626.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.481 ±(99.9%) 1.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.481, 0.813), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 2.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.62% complete, ETA 00:59:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109779.774 ops/s
[info] # Warmup Iteration   2: 361173.015 ops/s
[info] # Warmup Iteration   3: 356992.371 ops/s
[info] # Warmup Iteration   4: 382483.994 ops/s
[info] # Warmup Iteration   5: 380725.249 ops/s
[info] Iteration   1: 382149.634 ops/s
[info]                  ·gc.alloc.rate:               1079.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          4447.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2751.707 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 380981.004 ops/s
[info]                  ·gc.alloc.rate:               1093.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          4516.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5525.802 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 381793.720 ops/s
[info]                  ·gc.alloc.rate:               1091.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          4500.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5519.356 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 382620.803 ops/s
[info]                  ·gc.alloc.rate:               1090.657 MB/sec
[info]                  ·gc.alloc.rate.norm:          4485.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2756.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 376367.671 ops/s
[info]                  ·gc.alloc.rate:                   1087.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              4546.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5606.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   380782.566 ±(99.9%) 9779.631 ops/s [Average]
[info]   (min, avg, max) = (376367.671, 380782.566, 382620.803), stdev = 2539.739
[info]   CI (99.9%): [371002.935, 390562.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1088.615 ±(99.9%) 20.818 MB/sec [Average]
[info]   (min, avg, max) = (1079.935, 1088.615, 1093.661), stdev = 5.406
[info]   CI (99.9%): [1067.798, 1109.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4499.133 ±(99.9%) 140.489 B/op [Average]
[info]   (min, avg, max) = (4447.634, 4499.133, 4546.057), stdev = 36.485
[info]   CI (99.9%): [4358.644, 4639.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.222 ±(99.9%) 1413.266 MB/sec [Average]
[info]   (min, avg, max) = (668.145, 1071.222, 1340.620), stdev = 367.021
[info]   CI (99.9%): [≈ 0, 2484.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4431.900 ±(99.9%) 5899.311 B/op [Average]
[info]   (min, avg, max) = (2751.707, 4431.900, 5606.219), stdev = 1532.032
[info]   CI (99.9%): [≈ 0, 10331.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.414), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.855 ±(99.9%) 24.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.855, 14.277), stdev = 6.385
[info]   CI (99.9%): [≈ 0, 27.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.82% complete, ETA 00:59:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1150400.129 ops/s
[info] # Warmup Iteration   2: 1852470.817 ops/s
[info] # Warmup Iteration   3: 1950879.570 ops/s
[info] # Warmup Iteration   4: 1932892.877 ops/s
[info] # Warmup Iteration   5: 1974776.956 ops/s
[info] Iteration   1: 1930533.089 ops/s
[info]                  ·gc.alloc.rate:               1161.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          946.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1095.889 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1912843.392 ops/s
[info]                  ·gc.alloc.rate:               1133.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          932.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 553.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1911716.329 ops/s
[info]                  ·gc.alloc.rate:                   1170.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              963.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1108.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1944340.755 ops/s
[info]                  ·gc.alloc.rate:                   1177.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              953.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1089.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1988873.665 ops/s
[info]                  ·gc.alloc.rate:                   1188.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              940.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     532.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1937661.446 ±(99.9%) 121877.638 ops/s [Average]
[info]   (min, avg, max) = (1911716.329, 1937661.446, 1988873.665), stdev = 31651.236
[info]   CI (99.9%): [1815783.808, 2059539.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1166.123 ±(99.9%) 80.235 MB/sec [Average]
[info]   (min, avg, max) = (1133.218, 1166.123, 1188.147), stdev = 20.837
[info]   CI (99.9%): [1085.888, 1246.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   947.124 ±(99.9%) 46.036 B/op [Average]
[info]   (min, avg, max) = (932.149, 947.124, 963.414), stdev = 11.955
[info]   CI (99.9%): [901.088, 993.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.714 ±(99.9%) 1418.289 MB/sec [Average]
[info]   (min, avg, max) = (673.005, 1076.714, 1346.797), stdev = 368.325
[info]   CI (99.9%): [≈ 0, 2495.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   876.099 ±(99.9%) 1170.556 B/op [Average]
[info]   (min, avg, max) = (532.943, 876.099, 1108.076), stdev = 303.990
[info]   CI (99.9%): [≈ 0, 2046.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 4.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.519), stdev = 1.096
[info]   CI (99.9%): [≈ 0, 4.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.464 ±(99.9%) 3.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.464, 2.039), stdev = 0.887
[info]   CI (99.9%): [≈ 0, 3.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.200, 6.000), stdev = 2.490
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.02% complete, ETA 00:58:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1346143.161 ops/s
[info] # Warmup Iteration   2: 2229404.355 ops/s
[info] # Warmup Iteration   3: 2257678.028 ops/s
[info] # Warmup Iteration   4: 2257727.039 ops/s
[info] # Warmup Iteration   5: 2249921.577 ops/s
[info] Iteration   1: 2251452.584 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2249768.104 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2250665.966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2260034.519 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2253529.644 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2253090.163 ±(99.9%) 15877.977 ops/s [Average]
[info]   (min, avg, max) = (2249768.104, 2253090.163, 2260034.519), stdev = 4123.460
[info]   CI (99.9%): [2237212.186, 2268968.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.22% complete, ETA 00:58:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86065.246 ops/s
[info] # Warmup Iteration   2: 233781.719 ops/s
[info] # Warmup Iteration   3: 244244.951 ops/s
[info] # Warmup Iteration   4: 236887.390 ops/s
[info] # Warmup Iteration   5: 245170.718 ops/s
[info] Iteration   1: 248367.679 ops/s
[info]                  ·gc.alloc.rate:               1647.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          10437.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12651.450 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 249847.808 ops/s
[info]                  ·gc.alloc.rate:                   1655.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              10428.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8384.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 249720.587 ops/s
[info]                  ·gc.alloc.rate:               1664.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          10491.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8401.338 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 249246.241 ops/s
[info]                  ·gc.alloc.rate:               1677.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          10594.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12655.162 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 246373.335 ops/s
[info]                  ·gc.alloc.rate:                   1645.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              10509.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8549.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   248711.130 ±(99.9%) 5506.767 ops/s [Average]
[info]   (min, avg, max) = (246373.335, 248711.130, 249847.808), stdev = 1430.090
[info]   CI (99.9%): [243204.363, 254217.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1658.208 ±(99.9%) 51.636 MB/sec [Average]
[info]   (min, avg, max) = (1645.134, 1658.208, 1677.849), stdev = 13.410
[info]   CI (99.9%): [1606.573, 1709.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10492.310 ±(99.9%) 255.684 B/op [Average]
[info]   (min, avg, max) = (10428.860, 10492.310, 10594.063), stdev = 66.400
[info]   CI (99.9%): [10236.626, 10747.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1600.746 ±(99.9%) 1405.568 MB/sec [Average]
[info]   (min, avg, max) = (1331.212, 1600.746, 2004.279), stdev = 365.022
[info]   CI (99.9%): [195.178, 3006.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10128.256 ±(99.9%) 8879.338 B/op [Average]
[info]   (min, avg, max) = (8384.244, 10128.256, 12655.162), stdev = 2305.936
[info]   CI (99.9%): [1248.918, 19007.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.133), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56.43% complete, ETA 00:58:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30662.603 ops/s
[info] # Warmup Iteration   2: 49925.310 ops/s
[info] # Warmup Iteration   3: 52012.439 ops/s
[info] # Warmup Iteration   4: 50432.266 ops/s
[info] # Warmup Iteration   5: 51256.961 ops/s
[info] Iteration   1: 53001.944 ops/s
[info]                  ·gc.alloc.rate:                   577.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              17153.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19920.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 53266.873 ops/s
[info]                  ·gc.alloc.rate:      555.349 MB/sec
[info]                  ·gc.alloc.rate.norm: 16408.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 53086.596 ops/s
[info]                  ·gc.alloc.rate:               579.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          17177.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19888.421 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 53078.467 ops/s
[info]                  ·gc.alloc.rate:                   572.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              16983.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19910.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 53095.833 ops/s
[info]                  ·gc.alloc.rate:               573.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          16987.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19904.422 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   53105.943 ±(99.9%) 375.046 ops/s [Average]
[info]   (min, avg, max) = (53001.944, 53105.943, 53266.873), stdev = 97.398
[info]   CI (99.9%): [52730.897, 53480.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   571.688 ±(99.9%) 36.853 MB/sec [Average]
[info]   (min, avg, max) = (555.349, 571.688, 579.447), stdev = 9.571
[info]   CI (99.9%): [534.836, 608.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16942.057 ±(99.9%) 1201.029 B/op [Average]
[info]   (min, avg, max) = (16408.008, 16942.057, 17177.595), stdev = 311.903
[info]   CI (99.9%): [15741.028, 18143.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   536.971 ±(99.9%) 1155.871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.971, 671.614), stdev = 300.176
[info]   CI (99.9%): [≈ 0, 1692.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   15924.790 ±(99.9%) 34279.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15924.790, 19920.313), stdev = 8902.236
[info]   CI (99.9%): [≈ 0, 50204.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.371 ±(99.9%) 2.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.236), stdev = 0.553
[info]   CI (99.9%): [≈ 0, 2.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.63% complete, ETA 00:57:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19257.397 ops/s
[info] # Warmup Iteration   2: 70029.887 ops/s
[info] # Warmup Iteration   3: 71113.647 ops/s
[info] # Warmup Iteration   4: 73712.938 ops/s
[info] # Warmup Iteration   5: 73819.235 ops/s
[info] Iteration   1: 72981.367 ops/s
[info]                  ·gc.alloc.rate:                   1624.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              35038.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43405.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 72589.074 ops/s
[info]                  ·gc.alloc.rate:                   1612.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              34952.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29110.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 73199.356 ops/s
[info]                  ·gc.alloc.rate:                   1611.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              34643.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28831.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 73129.174 ops/s
[info]                  ·gc.alloc.rate:                   1637.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              35232.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43194.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.240 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 73305.968 ops/s
[info]                  ·gc.alloc.rate:               1615.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          34665.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28689.319 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   73040.988 ±(99.9%) 1073.447 ops/s [Average]
[info]   (min, avg, max) = (72589.074, 73040.988, 73305.968), stdev = 278.771
[info]   CI (99.9%): [71967.541, 74114.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1620.236 ±(99.9%) 41.426 MB/sec [Average]
[info]   (min, avg, max) = (1611.512, 1620.236, 1637.049), stdev = 10.758
[info]   CI (99.9%): [1578.810, 1661.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34906.508 ±(99.9%) 969.540 B/op [Average]
[info]   (min, avg, max) = (34643.525, 34906.508, 35232.981), stdev = 251.787
[info]   CI (99.9%): [33936.968, 35876.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.149 ±(99.9%) 1412.125 MB/sec [Average]
[info]   (min, avg, max) = (1336.895, 1608.149, 2012.736), stdev = 366.724
[info]   CI (99.9%): [196.023, 3020.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34646.223 ±(99.9%) 30426.229 B/op [Average]
[info]   (min, avg, max) = (28689.319, 34646.223, 43405.154), stdev = 7901.595
[info]   CI (99.9%): [4219.994, 65072.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.332), stdev = 1.429
[info]   CI (99.9%): [≈ 0, 6.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17.666 ±(99.9%) 119.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.666, 72.216), stdev = 30.984
[info]   CI (99.9%): [≈ 0, 136.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.362
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.83% complete, ETA 00:57:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16016.730 ops/s
[info] # Warmup Iteration   2: 81222.354 ops/s
[info] # Warmup Iteration   3: 83729.504 ops/s
[info] # Warmup Iteration   4: 87299.743 ops/s
[info] # Warmup Iteration   5: 86557.395 ops/s
[info] Iteration   1: 86428.372 ops/s
[info]                  ·gc.alloc.rate:                   1134.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              20666.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24273.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 85019.175 ops/s
[info]                  ·gc.alloc.rate:               1095.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          20271.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12344.168 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 86333.190 ops/s
[info]                  ·gc.alloc.rate:                   1125.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              20506.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24336.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.759 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 86397.503 ops/s
[info]                  ·gc.alloc.rate:                   1149.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              20942.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24341.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 85496.153 ops/s
[info]                  ·gc.alloc.rate:                   1099.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              20233.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12311.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.858 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   85934.878 ±(99.9%) 2471.024 ops/s [Average]
[info]   (min, avg, max) = (85019.175, 85934.878, 86428.372), stdev = 641.717
[info]   CI (99.9%): [83463.854, 88405.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1120.775 ±(99.9%) 89.886 MB/sec [Average]
[info]   (min, avg, max) = (1095.111, 1120.775, 1149.633), stdev = 23.343
[info]   CI (99.9%): [1030.889, 1210.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20523.983 ±(99.9%) 1128.888 B/op [Average]
[info]   (min, avg, max) = (20233.131, 20523.983, 20942.196), stdev = 293.169
[info]   CI (99.9%): [19395.095, 21652.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.034 ±(99.9%) 1406.796 MB/sec [Average]
[info]   (min, avg, max) = (666.849, 1068.034, 1336.253), stdev = 365.340
[info]   CI (99.9%): [≈ 0, 2474.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19521.569 ±(99.9%) 25286.706 B/op [Average]
[info]   (min, avg, max) = (12311.807, 19521.569, 24341.748), stdev = 6566.877
[info]   CI (99.9%): [≈ 0, 44808.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.392), stdev = 1.955
[info]   CI (99.9%): [≈ 0, 8.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.475 ±(99.9%) 138.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.475, 80.858), stdev = 35.992
[info]   CI (99.9%): [≈ 0, 155.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.03% complete, ETA 00:57:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50541.504 ops/s
[info] # Warmup Iteration   2: 94481.761 ops/s
[info] # Warmup Iteration   3: 96086.929 ops/s
[info] # Warmup Iteration   4: 98963.402 ops/s
[info] # Warmup Iteration   5: 98388.393 ops/s
[info] Iteration   1: 98674.343 ops/s
[info]                  ·gc.alloc.rate:                   1228.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              19593.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21420.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 97299.604 ops/s
[info]                  ·gc.alloc.rate:               1224.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          19799.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21733.988 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 99139.309 ops/s
[info]                  ·gc.alloc.rate:                   1204.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              19128.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10669.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 98456.433 ops/s
[info]                  ·gc.alloc.rate:                   1210.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              19351.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21500.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 98410.956 ops/s
[info]                  ·gc.alloc.rate:                   1210.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21498.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   98396.129 ±(99.9%) 2608.754 ops/s [Average]
[info]   (min, avg, max) = (97299.604, 98396.129, 99139.309), stdev = 677.485
[info]   CI (99.9%): [95787.376, 101004.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1215.669 ±(99.9%) 38.893 MB/sec [Average]
[info]   (min, avg, max) = (1204.940, 1215.669, 1228.411), stdev = 10.100
[info]   CI (99.9%): [1176.777, 1254.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19443.534 ±(99.9%) 994.854 B/op [Average]
[info]   (min, avg, max) = (19128.135, 19443.534, 19799.661), stdev = 258.360
[info]   CI (99.9%): [18448.680, 20438.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.765 ±(99.9%) 1157.294 MB/sec [Average]
[info]   (min, avg, max) = (672.134, 1209.765, 1345.051), stdev = 300.546
[info]   CI (99.9%): [52.470, 2367.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19364.614 ±(99.9%) 18721.337 B/op [Average]
[info]   (min, avg, max) = (10669.973, 19364.614, 21733.988), stdev = 4861.872
[info]   CI (99.9%): [643.277, 38085.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 4.928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 2.956), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.914 ±(99.9%) 78.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.914, 47.255), stdev = 20.460
[info]   CI (99.9%): [≈ 0, 89.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.23% complete, ETA 00:57:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6855.694 ops/s
[info] # Warmup Iteration   2: 39461.178 ops/s
[info] # Warmup Iteration   3: 45079.816 ops/s
[info] # Warmup Iteration   4: 44659.700 ops/s
[info] # Warmup Iteration   5: 45522.214 ops/s
[info] Iteration   1: 45367.207 ops/s
[info]                  ·gc.alloc.rate:                   2124.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              73676.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69665.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 44982.056 ops/s
[info]                  ·gc.alloc.rate:                   2092.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              73225.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70016.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 45759.398 ops/s
[info]                  ·gc.alloc.rate:               2125.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          73115.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68730.538 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 45759.898 ops/s
[info]                  ·gc.alloc.rate:               2153.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          74047.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68766.406 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 45859.209 ops/s
[info]                  ·gc.alloc.rate:               2158.608 MB/sec
[info]                  ·gc.alloc.rate.norm:          74083.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68733.784 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   45545.554 ±(99.9%) 1414.018 ops/s [Average]
[info]   (min, avg, max) = (44982.056, 45545.554, 45859.209), stdev = 367.216
[info]   CI (99.9%): [44131.536, 46959.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2131.007 ±(99.9%) 101.252 MB/sec [Average]
[info]   (min, avg, max) = (2092.883, 2131.007, 2158.608), stdev = 26.295
[info]   CI (99.9%): [2029.755, 2232.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73629.664 ±(99.9%) 1733.083 B/op [Average]
[info]   (min, avg, max) = (73115.383, 73629.664, 74083.383), stdev = 450.076
[info]   CI (99.9%): [71896.581, 75362.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.149 ±(99.9%) 15.976 MB/sec [Average]
[info]   (min, avg, max) = (1998.424, 2002.149, 2008.961), stdev = 4.149
[info]   CI (99.9%): [1986.173, 2018.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69182.633 ±(99.9%) 2364.565 B/op [Average]
[info]   (min, avg, max) = (68730.538, 69182.633, 70016.945), stdev = 614.070
[info]   CI (99.9%): [66818.068, 71547.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.941 ±(99.9%) 7.795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.941, 4.561), stdev = 2.024
[info]   CI (99.9%): [≈ 0, 8.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   32.652 ±(99.9%) 270.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.652, 158.160), stdev = 70.196
[info]   CI (99.9%): [≈ 0, 302.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57.43% complete, ETA 00:56:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20366.191 ops/s
[info] # Warmup Iteration   2: 76618.263 ops/s
[info] # Warmup Iteration   3: 78553.907 ops/s
[info] # Warmup Iteration   4: 80950.650 ops/s
[info] # Warmup Iteration   5: 80478.754 ops/s
[info] Iteration   1: 80751.189 ops/s
[info]                  ·gc.alloc.rate:                   1456.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              28388.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26174.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 80260.167 ops/s
[info]                  ·gc.alloc.rate:                   1454.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              28526.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26347.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 80562.274 ops/s
[info]                  ·gc.alloc.rate:                   1486.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              29036.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39392.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 80647.099 ops/s
[info]                  ·gc.alloc.rate:               1460.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          28510.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26181.576 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 80684.671 ops/s
[info]                  ·gc.alloc.rate:                   1472.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              28728.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26118.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   80581.080 ±(99.9%) 739.096 ops/s [Average]
[info]   (min, avg, max) = (80260.167, 80581.080, 80751.189), stdev = 191.941
[info]   CI (99.9%): [79841.984, 81320.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1466.272 ±(99.9%) 50.978 MB/sec [Average]
[info]   (min, avg, max) = (1454.738, 1466.272, 1486.339), stdev = 13.239
[info]   CI (99.9%): [1415.294, 1517.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28638.315 ±(99.9%) 977.646 B/op [Average]
[info]   (min, avg, max) = (28388.913, 28638.315, 29036.566), stdev = 253.891
[info]   CI (99.9%): [27660.669, 29615.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1476.714 ±(99.9%) 1161.867 MB/sec [Average]
[info]   (min, avg, max) = (1338.973, 1476.714, 2016.461), stdev = 301.733
[info]   CI (99.9%): [314.847, 2638.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28842.957 ±(99.9%) 22711.834 B/op [Average]
[info]   (min, avg, max) = (26118.567, 28842.957, 39392.851), stdev = 5898.191
[info]   CI (99.9%): [6131.123, 51554.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.685), stdev = 1.626
[info]   CI (99.9%): [≈ 0, 7.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   15.209 ±(99.9%) 122.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.209, 71.983), stdev = 31.764
[info]   CI (99.9%): [≈ 0, 137.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.63% complete, ETA 00:56:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33218.222 ops/s
[info] # Warmup Iteration   2: 109876.980 ops/s
[info] # Warmup Iteration   3: 110915.769 ops/s
[info] # Warmup Iteration   4: 112591.992 ops/s
[info] # Warmup Iteration   5: 112468.400 ops/s
[info] Iteration   1: 109587.242 ops/s
[info]                  ·gc.alloc.rate:                   1041.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              14954.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9604.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.598 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 111958.582 ops/s
[info]                  ·gc.alloc.rate:               1078.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          15157.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18822.732 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 112144.916 ops/s
[info]                  ·gc.alloc.rate:               1085.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          15227.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18800.866 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 117114.858 ops/s
[info]                  ·gc.alloc.rate:               1118.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          15035.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9005.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 112447.960 ops/s
[info]                  ·gc.alloc.rate:                   1089.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              15250.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18768.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   112650.712 ±(99.9%) 10561.129 ops/s [Average]
[info]   (min, avg, max) = (109587.242, 112650.712, 117114.858), stdev = 2742.692
[info]   CI (99.9%): [102089.583, 123211.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1082.582 ±(99.9%) 107.074 MB/sec [Average]
[info]   (min, avg, max) = (1041.275, 1082.582, 1118.808), stdev = 27.807
[info]   CI (99.9%): [975.508, 1189.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15124.963 ±(99.9%) 488.534 B/op [Average]
[info]   (min, avg, max) = (14954.064, 15124.963, 15250.338), stdev = 126.871
[info]   CI (99.9%): [14636.429, 15613.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1071.697 ±(99.9%) 1413.968 MB/sec [Average]
[info]   (min, avg, max) = (668.802, 1071.697, 1340.913), stdev = 367.203
[info]   CI (99.9%): [≈ 0, 2485.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15000.564 ±(99.9%) 20036.833 B/op [Average]
[info]   (min, avg, max) = (9005.493, 15000.564, 18822.732), stdev = 5203.502
[info]   CI (99.9%): [≈ 0, 35037.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.664), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.376 ±(99.9%) 88.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.376, 51.281), stdev = 22.868
[info]   CI (99.9%): [≈ 0, 98.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.83% complete, ETA 00:56:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146780.374 ops/s
[info] # Warmup Iteration   2: 290328.022 ops/s
[info] # Warmup Iteration   3: 313474.481 ops/s
[info] # Warmup Iteration   4: 312212.740 ops/s
[info] # Warmup Iteration   5: 313886.478 ops/s
[info] Iteration   1: 314745.227 ops/s
[info]                  ·gc.alloc.rate:               487.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          2439.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2558.282 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 313448.575 ops/s
[info]                  ·gc.alloc.rate:               482.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          2423.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3346.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 310348.738 ops/s
[info]                  ·gc.alloc.rate:      460.911 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.876 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 313759.886 ops/s
[info]                  ·gc.alloc.rate:                   480.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              2409.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3343.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 313087.176 ops/s
[info]                  ·gc.alloc.rate:               489.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          2458.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3353.715 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   313077.920 ±(99.9%) 6336.298 ops/s [Average]
[info]   (min, avg, max) = (310348.738, 313077.920, 314745.227), stdev = 1645.516
[info]   CI (99.9%): [306741.623, 319414.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   480.151 ±(99.9%) 43.706 MB/sec [Average]
[info]   (min, avg, max) = (460.911, 480.151, 489.142), stdev = 11.350
[info]   CI (99.9%): [436.444, 523.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2413.488 ±(99.9%) 179.681 B/op [Average]
[info]   (min, avg, max) = (2336.876, 2413.488, 2458.975), stdev = 46.663
[info]   CI (99.9%): [2233.806, 2593.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.344 ±(99.9%) 1111.838 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.344, 667.124), stdev = 288.741
[info]   CI (99.9%): [≈ 0, 1614.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2520.320 ±(99.9%) 5582.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2520.320, 3353.715), stdev = 1449.789
[info]   CI (99.9%): [≈ 0, 8102.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.209), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.03% complete, ETA 00:56:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465579.531 ops/s
[info] # Warmup Iteration   2: 688976.398 ops/s
[info] # Warmup Iteration   3: 718947.051 ops/s
[info] # Warmup Iteration   4: 691092.263 ops/s
[info] # Warmup Iteration   5: 705556.100 ops/s
[info] Iteration   1: 706464.667 ops/s
[info]                  ·gc.alloc.rate:                   895.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              1994.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 701551.727 ops/s
[info]                  ·gc.alloc.rate:               905.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          2030.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3011.286 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 708833.551 ops/s
[info]                  ·gc.alloc.rate:                   894.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              1986.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1490.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 706360.943 ops/s
[info]                  ·gc.alloc.rate:               892.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          1986.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1496.853 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 720202.254 ops/s
[info]                  ·gc.alloc.rate:               931.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          2035.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2936.953 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   708682.628 ±(99.9%) 26808.605 ops/s [Average]
[info]   (min, avg, max) = (701551.727, 708682.628, 720202.254), stdev = 6962.109
[info]   CI (99.9%): [681874.024, 735491.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   903.864 ±(99.9%) 63.396 MB/sec [Average]
[info]   (min, avg, max) = (892.131, 903.864, 931.862), stdev = 16.464
[info]   CI (99.9%): [840.468, 967.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2006.918 ±(99.9%) 94.089 B/op [Average]
[info]   (min, avg, max) = (1986.663, 2006.918, 2035.869), stdev = 24.435
[info]   CI (99.9%): [1912.829, 2101.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.241 ±(99.9%) 1417.287 MB/sec [Average]
[info]   (min, avg, max) = (670.791, 940.241, 1344.308), stdev = 368.065
[info]   CI (99.9%): [≈ 0, 2357.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2086.085 ±(99.9%) 3123.218 B/op [Average]
[info]   (min, avg, max) = (1490.913, 2086.085, 3011.286), stdev = 811.090
[info]   CI (99.9%): [≈ 0, 5209.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.046), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.23% complete, ETA 00:55:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 529462.640 ops/s
[info] # Warmup Iteration   2: 716372.980 ops/s
[info] # Warmup Iteration   3: 756415.703 ops/s
[info] # Warmup Iteration   4: 761692.494 ops/s
[info] # Warmup Iteration   5: 764143.099 ops/s
[info] Iteration   1: 762964.611 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 757555.916 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 762541.323 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 766747.717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 766658.683 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   763293.650 ±(99.9%) 14516.708 ops/s [Average]
[info]   (min, avg, max) = (757555.916, 763293.650, 766747.717), stdev = 3769.943
[info]   CI (99.9%): [748776.942, 777810.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.43% complete, ETA 00:55:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90206.310 ops/s
[info] # Warmup Iteration   2: 239590.748 ops/s
[info] # Warmup Iteration   3: 249929.121 ops/s
[info] # Warmup Iteration   4: 249525.813 ops/s
[info] # Warmup Iteration   5: 246145.008 ops/s
[info] Iteration   1: 249316.410 ops/s
[info]                  ·gc.alloc.rate:               831.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          5247.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8431.366 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 251683.513 ops/s
[info]                  ·gc.alloc.rate:               827.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          5174.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4177.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 251597.425 ops/s
[info]                  ·gc.alloc.rate:               824.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          5159.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4183.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 243300.436 ops/s
[info]                  ·gc.alloc.rate:                   796.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              5150.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4326.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 245241.149 ops/s
[info]                  ·gc.alloc.rate:               802.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          5148.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4294.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   248227.787 ±(99.9%) 14622.361 ops/s [Average]
[info]   (min, avg, max) = (243300.436, 248227.787, 251683.513), stdev = 3797.381
[info]   CI (99.9%): [233605.426, 262850.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   816.426 ±(99.9%) 61.445 MB/sec [Average]
[info]   (min, avg, max) = (796.316, 816.426, 831.219), stdev = 15.957
[info]   CI (99.9%): [754.980, 877.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5176.090 ±(99.9%) 158.100 B/op [Average]
[info]   (min, avg, max) = (5148.421, 5176.090, 5247.278), stdev = 41.058
[info]   CI (99.9%): [5017.990, 5334.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.113 ±(99.9%) 1148.392 MB/sec [Average]
[info]   (min, avg, max) = (668.108, 802.113, 1335.609), stdev = 298.234
[info]   CI (99.9%): [≈ 0, 1950.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5082.684 ±(99.9%) 7212.745 B/op [Average]
[info]   (min, avg, max) = (4177.876, 5082.684, 8431.366), stdev = 1873.127
[info]   CI (99.9%): [≈ 0, 12295.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58.63% complete, ETA 00:55:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18004.544 ops/s
[info] # Warmup Iteration   2: 25841.420 ops/s
[info] # Warmup Iteration   3: 26496.716 ops/s
[info] # Warmup Iteration   4: 26680.308 ops/s
[info] # Warmup Iteration   5: 26695.630 ops/s
[info] Iteration   1: 26783.181 ops/s
[info]                  ·gc.alloc.rate:                   376.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              22121.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30062.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26715.228 ops/s
[info]                  ·gc.alloc.rate:               370.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          21802.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30137.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 26817.408 ops/s
[info]                  ·gc.alloc.rate:      359.370 MB/sec
[info]                  ·gc.alloc.rate.norm: 21088.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26688.629 ops/s
[info]                  ·gc.alloc.rate:                   377.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              22246.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39538.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26807.270 ops/s
[info]                  ·gc.alloc.rate:      359.367 MB/sec
[info]                  ·gc.alloc.rate.norm: 21088.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   26762.343 ±(99.9%) 220.686 ops/s [Average]
[info]   (min, avg, max) = (26688.629, 26762.343, 26817.408), stdev = 57.311
[info]   CI (99.9%): [26541.657, 26983.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   368.533 ±(99.9%) 33.888 MB/sec [Average]
[info]   (min, avg, max) = (359.367, 368.533, 377.242), stdev = 8.801
[info]   CI (99.9%): [334.645, 402.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   21669.342 ±(99.9%) 2136.202 B/op [Average]
[info]   (min, avg, max) = (21088.016, 21669.342, 22246.560), stdev = 554.765
[info]   CI (99.9%): [19533.140, 23805.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   338.763 ±(99.9%) 1216.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.763, 670.462), stdev = 315.968
[info]   CI (99.9%): [≈ 0, 1555.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   19947.587 ±(99.9%) 71671.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19947.587, 39538.146), stdev = 18612.791
[info]   CI (99.9%): [≈ 0, 91618.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.490 ±(99.9%) 2.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.490, 1.228), stdev = 0.671
[info]   CI (99.9%): [≈ 0, 3.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.84% complete, ETA 00:55:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16657.583 ops/s
[info] # Warmup Iteration   2: 118349.165 ops/s
[info] # Warmup Iteration   3: 120736.879 ops/s
[info] # Warmup Iteration   4: 123588.698 ops/s
[info] # Warmup Iteration   5: 123796.801 ops/s
[info] Iteration   1: 125227.416 ops/s
[info]                  ·gc.alloc.rate:                   1740.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              21872.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16831.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 123145.858 ops/s
[info]                  ·gc.alloc.rate:                   1738.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              22219.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25690.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 123612.233 ops/s
[info]                  ·gc.alloc.rate:               1743.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          22196.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17031.260 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 124337.204 ops/s
[info]                  ·gc.alloc.rate:               1769.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          22392.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25347.150 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 125345.070 ops/s
[info]                  ·gc.alloc.rate:                   1750.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              21977.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16770.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   124333.556 ±(99.9%) 3729.907 ops/s [Average]
[info]   (min, avg, max) = (123145.858, 124333.556, 125345.070), stdev = 968.645
[info]   CI (99.9%): [120603.649, 128063.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1748.371 ±(99.9%) 47.836 MB/sec [Average]
[info]   (min, avg, max) = (1738.510, 1748.371, 1769.119), stdev = 12.423
[info]   CI (99.9%): [1700.535, 1796.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22131.523 ±(99.9%) 795.728 B/op [Average]
[info]   (min, avg, max) = (21872.431, 22131.523, 22392.408), stdev = 206.648
[info]   CI (99.9%): [21335.796, 22927.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1605.071 ±(99.9%) 1410.541 MB/sec [Average]
[info]   (min, avg, max) = (1335.520, 1605.071, 2010.108), stdev = 366.313
[info]   CI (99.9%): [194.530, 3015.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20334.053 ±(99.9%) 18234.386 B/op [Average]
[info]   (min, avg, max) = (16770.591, 20334.053, 25690.167), stdev = 4735.412
[info]   CI (99.9%): [2099.667, 38568.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.914), stdev = 1.743
[info]   CI (99.9%): [≈ 0, 7.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.161 ±(99.9%) 85.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.161, 50.018), stdev = 22.282
[info]   CI (99.9%): [≈ 0, 95.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.04% complete, ETA 00:54:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58691.473 ops/s
[info] # Warmup Iteration   2: 168706.141 ops/s
[info] # Warmup Iteration   3: 177912.858 ops/s
[info] # Warmup Iteration   4: 185929.042 ops/s
[info] # Warmup Iteration   5: 185961.289 ops/s
[info] Iteration   1: 185018.747 ops/s
[info]                  ·gc.alloc.rate:                   1136.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              9668.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11364.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 186828.262 ops/s
[info]                  ·gc.alloc.rate:               1123.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          9464.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5628.304 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 186153.789 ops/s
[info]                  ·gc.alloc.rate:                   1133.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              9582.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11309.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 182226.747 ops/s
[info]                  ·gc.alloc.rate:                   1107.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              9567.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11563.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 184030.889 ops/s
[info]                  ·gc.alloc.rate:                   1104.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              9443.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5728.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   184851.687 ±(99.9%) 6993.517 ops/s [Average]
[info]   (min, avg, max) = (182226.747, 184851.687, 186828.262), stdev = 1816.194
[info]   CI (99.9%): [177858.169, 191845.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1121.129 ±(99.9%) 56.407 MB/sec [Average]
[info]   (min, avg, max) = (1104.253, 1121.129, 1136.554), stdev = 14.649
[info]   CI (99.9%): [1064.722, 1177.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9545.271 ±(99.9%) 354.511 B/op [Average]
[info]   (min, avg, max) = (9443.734, 9545.271, 9668.349), stdev = 92.065
[info]   CI (99.9%): [9190.760, 9899.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.091 ±(99.9%) 1409.882 MB/sec [Average]
[info]   (min, avg, max) = (668.217, 1070.091, 1338.912), stdev = 366.142
[info]   CI (99.9%): [≈ 0, 2479.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9118.671 ±(99.9%) 12099.889 B/op [Average]
[info]   (min, avg, max) = (5628.304, 9118.671, 11563.780), stdev = 3142.303
[info]   CI (99.9%): [≈ 0, 21218.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.393), stdev = 1.504
[info]   CI (99.9%): [≈ 0, 6.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.017 ±(99.9%) 49.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.017, 29.018), stdev = 12.860
[info]   CI (99.9%): [≈ 0, 55.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.24% complete, ETA 00:54:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257132.386 ops/s
[info] # Warmup Iteration   2: 491247.551 ops/s
[info] # Warmup Iteration   3: 524097.476 ops/s
[info] # Warmup Iteration   4: 524724.566 ops/s
[info] # Warmup Iteration   5: 520124.993 ops/s
[info] Iteration   1: 515698.248 ops/s
[info]                  ·gc.alloc.rate:                   353.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              1077.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1561.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 525402.535 ops/s
[info]                  ·gc.alloc.rate:      341.836 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 523301.854 ops/s
[info]                  ·gc.alloc.rate:               362.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          1089.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2013.499 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 524430.538 ops/s
[info]                  ·gc.alloc.rate:      341.302 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 523541.772 ops/s
[info]                  ·gc.alloc.rate:                   359.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              1079.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2012.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.387 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   522474.990 ±(99.9%) 14930.949 ops/s [Average]
[info]   (min, avg, max) = (515698.248, 522474.990, 525402.535), stdev = 3877.520
[info]   CI (99.9%): [507544.040, 537405.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   351.583 ±(99.9%) 37.515 MB/sec [Average]
[info]   (min, avg, max) = (341.302, 351.583, 362.399), stdev = 9.743
[info]   CI (99.9%): [314.067, 389.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1059.034 ±(99.9%) 124.460 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1059.034, 1089.928), stdev = 32.322
[info]   CI (99.9%): [934.574, 1183.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.166 ±(99.9%) 1324.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.166, 669.744), stdev = 344.016
[info]   CI (99.9%): [≈ 0, 1694.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1117.484 ±(99.9%) 3991.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1117.484, 2013.499), stdev = 1036.650
[info]   CI (99.9%): [≈ 0, 5109.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 5.371 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 3.124), stdev = 1.395
[info]   CI (99.9%): [≈ 0, 5.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.890 ±(99.9%) 16.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.890, 9.387), stdev = 4.191
[info]   CI (99.9%): [≈ 0, 18.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.44% complete, ETA 00:54:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2286.169 ops/s
[info] # Warmup Iteration   2: 53289.454 ops/s
[info] # Warmup Iteration   3: 64922.097 ops/s
[info] # Warmup Iteration   4: 61917.412 ops/s
[info] # Warmup Iteration   5: 61114.762 ops/s
[info] Iteration   1: 61158.324 ops/s
[info]                  ·gc.alloc.rate:                   2461.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              63338.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68996.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.177 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 61601.007 ops/s
[info]                  ·gc.alloc.rate:                   2450.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              62591.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51476.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60827.525 ops/s
[info]                  ·gc.alloc.rate:                   2433.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              62964.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69686.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.155 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 60205.129 ops/s
[info]                  ·gc.alloc.rate:                   2422.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              63322.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52912.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.633 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 60875.345 ops/s
[info]                  ·gc.alloc.rate:               2476.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          64033.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69886.697 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   60933.466 ±(99.9%) 1964.628 ops/s [Average]
[info]   (min, avg, max) = (60205.129, 60933.466, 61601.007), stdev = 510.208
[info]   CI (99.9%): [58968.837, 62898.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2448.840 ±(99.9%) 83.454 MB/sec [Average]
[info]   (min, avg, max) = (2422.330, 2448.840, 2476.799), stdev = 21.673
[info]   CI (99.9%): [2365.386, 2532.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63249.963 ±(99.9%) 2057.910 B/op [Average]
[info]   (min, avg, max) = (62591.237, 63249.963, 64033.320), stdev = 534.433
[info]   CI (99.9%): [61192.053, 65307.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2423.393 ±(99.9%) 1419.781 MB/sec [Average]
[info]   (min, avg, max) = (2015.111, 2423.393, 2703.207), stdev = 368.713
[info]   CI (99.9%): [1003.612, 3843.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62591.710 ±(99.9%) 36622.704 B/op [Average]
[info]   (min, avg, max) = (51476.539, 62591.710, 69886.697), stdev = 9510.800
[info]   CI (99.9%): [25969.006, 99214.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.229 ±(99.9%) 1.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.978), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.899 ±(99.9%) 41.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.899, 25.177), stdev = 10.811
[info]   CI (99.9%): [≈ 0, 47.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59.64% complete, ETA 00:53:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39065.172 ops/s
[info] # Warmup Iteration   2: 154350.764 ops/s
[info] # Warmup Iteration   3: 157798.177 ops/s
[info] # Warmup Iteration   4: 161659.522 ops/s
[info] # Warmup Iteration   5: 159557.163 ops/s
[info] Iteration   1: 159033.501 ops/s
[info]                  ·gc.alloc.rate:                   1762.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              17443.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19968.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 159612.510 ops/s
[info]                  ·gc.alloc.rate:                   1764.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              17397.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13268.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 162115.988 ops/s
[info]                  ·gc.alloc.rate:                   1794.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              17420.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19543.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.606 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 164337.541 ops/s
[info]                  ·gc.alloc.rate:                   1804.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              17276.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12836.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 164053.857 ops/s
[info]                  ·gc.alloc.rate:                   1826.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              17518.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19285.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   161830.679 ±(99.9%) 9442.474 ops/s [Average]
[info]   (min, avg, max) = (159033.501, 161830.679, 164337.541), stdev = 2452.181
[info]   CI (99.9%): [152388.205, 171273.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1790.306 ±(99.9%) 104.228 MB/sec [Average]
[info]   (min, avg, max) = (1762.521, 1790.306, 1826.013), stdev = 27.068
[info]   CI (99.9%): [1686.078, 1894.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17411.170 ±(99.9%) 338.280 B/op [Average]
[info]   (min, avg, max) = (17276.455, 17411.170, 17518.117), stdev = 87.850
[info]   CI (99.9%): [17072.891, 17749.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.438 ±(99.9%) 1414.456 MB/sec [Average]
[info]   (min, avg, max) = (1340.505, 1745.438, 2017.704), stdev = 367.330
[info]   CI (99.9%): [330.981, 3159.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16980.502 ±(99.9%) 13852.172 B/op [Average]
[info]   (min, avg, max) = (12836.139, 16980.502, 19968.544), stdev = 3597.365
[info]   CI (99.9%): [3128.330, 30832.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.754 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.720, 3.393), stdev = 1.494
[info]   CI (99.9%): [≈ 0, 6.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7.094 ±(99.9%) 56.760 B/op [Average]
[info]   (min, avg, max) = (0.206, 7.094, 33.459), stdev = 14.740
[info]   CI (99.9%): [≈ 0, 63.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.84% complete, ETA 00:53:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68325.451 ops/s
[info] # Warmup Iteration   2: 171744.000 ops/s
[info] # Warmup Iteration   3: 181346.799 ops/s
[info] # Warmup Iteration   4: 183708.719 ops/s
[info] # Warmup Iteration   5: 183897.929 ops/s
[info] Iteration   1: 184124.661 ops/s
[info]                  ·gc.alloc.rate:                   1182.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              10110.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5728.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 180554.982 ops/s
[info]                  ·gc.alloc.rate:                   1172.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              10217.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11688.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 180873.199 ops/s
[info]                  ·gc.alloc.rate:                   1186.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              10323.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11676.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 183950.264 ops/s
[info]                  ·gc.alloc.rate:                   1224.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              10467.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11468.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 181289.393 ops/s
[info]                  ·gc.alloc.rate:                   1169.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              10154.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5829.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   182158.500 ±(99.9%) 6684.729 ops/s [Average]
[info]   (min, avg, max) = (180554.982, 182158.500, 184124.661), stdev = 1736.003
[info]   CI (99.9%): [175473.771, 188843.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1187.265 ±(99.9%) 84.974 MB/sec [Average]
[info]   (min, avg, max) = (1169.803, 1187.265, 1224.656), stdev = 22.068
[info]   CI (99.9%): [1102.290, 1272.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10254.690 ±(99.9%) 552.407 B/op [Average]
[info]   (min, avg, max) = (10110.134, 10254.690, 10467.642), stdev = 143.458
[info]   CI (99.9%): [9702.283, 10807.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.351 ±(99.9%) 1414.832 MB/sec [Average]
[info]   (min, avg, max) = (670.177, 1073.351, 1342.324), stdev = 367.427
[info]   CI (99.9%): [≈ 0, 2488.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9278.158 ±(99.9%) 12306.163 B/op [Average]
[info]   (min, avg, max) = (5728.057, 9278.158, 11688.263), stdev = 3195.871
[info]   CI (99.9%): [≈ 0, 21584.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.649 ±(99.9%) 5.013 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.649, 2.975), stdev = 1.302
[info]   CI (99.9%): [≈ 0, 5.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.555 ±(99.9%) 42.839 B/op [Average]
[info]   (min, avg, max) = (0.178, 5.555, 25.427), stdev = 11.125
[info]   CI (99.9%): [≈ 0, 48.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.04% complete, ETA 00:53:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155453.086 ops/s
[info] # Warmup Iteration   2: 537384.642 ops/s
[info] # Warmup Iteration   3: 543636.503 ops/s
[info] # Warmup Iteration   4: 533731.631 ops/s
[info] # Warmup Iteration   5: 545695.023 ops/s
[info] Iteration   1: 552025.705 ops/s
[info]                  ·gc.alloc.rate:      544.404 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 549609.538 ops/s
[info]                  ·gc.alloc.rate:               557.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          1597.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1910.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 548514.955 ops/s
[info]                  ·gc.alloc.rate:               554.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          1591.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1914.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 548151.483 ops/s
[info]                  ·gc.alloc.rate:                   565.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1622.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1917.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 548942.853 ops/s
[info]                  ·gc.alloc.rate:               560.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          1607.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1914.624 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   549448.907 ±(99.9%) 5927.164 ops/s [Average]
[info]   (min, avg, max) = (548151.483, 549448.907, 552025.705), stdev = 1539.266
[info]   CI (99.9%): [543521.743, 555376.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   556.582 ±(99.9%) 30.118 MB/sec [Average]
[info]   (min, avg, max) = (544.404, 556.582, 565.176), stdev = 7.821
[info]   CI (99.9%): [526.464, 586.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1594.340 ±(99.9%) 101.870 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1594.340, 1622.751), stdev = 26.455
[info]   CI (99.9%): [1492.470, 1696.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.970 ±(99.9%) 1149.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.970, 667.782), stdev = 298.498
[info]   CI (99.9%): [≈ 0, 1683.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1531.341 ±(99.9%) 3296.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1531.341, 1917.358), stdev = 856.049
[info]   CI (99.9%): [≈ 0, 4827.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:53:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674846.199 ops/s
[info] # Warmup Iteration   2: 1057900.156 ops/s
[info] # Warmup Iteration   3: 1142794.056 ops/s
[info] # Warmup Iteration   4: 1147796.833 ops/s
[info] # Warmup Iteration   5: 1084098.630 ops/s
[info] Iteration   1: 1152972.887 ops/s
[info]                  ·gc.alloc.rate:                   875.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1194.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1129224.056 ops/s
[info]                  ·gc.alloc.rate:               855.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          1192.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 935.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1151065.937 ops/s
[info]                  ·gc.alloc.rate:                   887.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1837.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1157585.218 ops/s
[info]                  ·gc.alloc.rate:               873.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          1187.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 913.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1155646.772 ops/s
[info]                  ·gc.alloc.rate:                   883.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     915.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1149298.974 ±(99.9%) 44264.760 ops/s [Average]
[info]   (min, avg, max) = (1129224.056, 1149298.974, 1157585.218), stdev = 11495.418
[info]   CI (99.9%): [1105034.214, 1193563.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   874.959 ±(99.9%) 46.308 MB/sec [Average]
[info]   (min, avg, max) = (855.998, 874.959, 887.154), stdev = 12.026
[info]   CI (99.9%): [828.651, 921.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1198.005 ±(99.9%) 38.248 B/op [Average]
[info]   (min, avg, max) = (1187.192, 1198.005, 1212.687), stdev = 9.933
[info]   CI (99.9%): [1159.757, 1236.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.295 ±(99.9%) 1157.422 MB/sec [Average]
[info]   (min, avg, max) = (671.438, 806.295, 1343.987), stdev = 300.579
[info]   CI (99.9%): [≈ 0, 1963.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1103.763 ±(99.9%) 1579.047 B/op [Average]
[info]   (min, avg, max) = (913.837, 1103.763, 1837.149), stdev = 410.074
[info]   CI (99.9%): [≈ 0, 2682.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.028), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.44% complete, ETA 00:52:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 793497.031 ops/s
[info] # Warmup Iteration   2: 1243317.457 ops/s
[info] # Warmup Iteration   3: 1256927.534 ops/s
[info] # Warmup Iteration   4: 1262414.238 ops/s
[info] # Warmup Iteration   5: 1262320.934 ops/s
[info] Iteration   1: 1262244.106 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1226447.478 ops/s
[info]                  ·gc.alloc.rate:      9.556 MB/sec
[info]                  ·gc.alloc.rate.norm: 12.260 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1262968.086 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1262863.677 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1262885.301 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1255481.730 ±(99.9%) 62508.330 ops/s [Average]
[info]   (min, avg, max) = (1226447.478, 1255481.730, 1262968.086), stdev = 16233.215
[info]   CI (99.9%): [1192973.400, 1317990.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.911 ±(99.9%) 16.455 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.911, 9.556), stdev = 4.273
[info]   CI (99.9%): [≈ 0, 18.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.452 ±(99.9%) 21.113 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 2.452, 12.260), stdev = 5.483
[info]   CI (99.9%): [≈ 0, 23.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.64% complete, ETA 00:52:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105779.456 ops/s
[info] # Warmup Iteration   2: 341505.888 ops/s
[info] # Warmup Iteration   3: 343797.954 ops/s
[info] # Warmup Iteration   4: 347043.640 ops/s
[info] # Warmup Iteration   5: 350778.411 ops/s
[info] Iteration   1: 353494.100 ops/s
[info]                  ·gc.alloc.rate:                   1003.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              4468.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5937.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 354764.736 ops/s
[info]                  ·gc.alloc.rate:               981.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          4355.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2961.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 351420.657 ops/s
[info]                  ·gc.alloc.rate:               986.583 MB/sec
[info]                  ·gc.alloc.rate.norm:          4416.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5983.177 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 356112.701 ops/s
[info]                  ·gc.alloc.rate:                   983.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              4348.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2954.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 356674.869 ops/s
[info]                  ·gc.alloc.rate:               995.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          4391.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2951.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   354493.413 ±(99.9%) 8144.571 ops/s [Average]
[info]   (min, avg, max) = (351420.657, 354493.413, 356674.869), stdev = 2115.119
[info]   CI (99.9%): [346348.842, 362637.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   990.260 ±(99.9%) 34.792 MB/sec [Average]
[info]   (min, avg, max) = (981.832, 990.260, 1003.576), stdev = 9.035
[info]   CI (99.9%): [955.467, 1025.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4396.262 ±(99.9%) 187.685 B/op [Average]
[info]   (min, avg, max) = (4348.877, 4396.262, 4468.296), stdev = 48.741
[info]   CI (99.9%): [4208.577, 4583.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   934.974 ±(99.9%) 1406.342 MB/sec [Average]
[info]   (min, avg, max) = (667.476, 934.974, 1336.553), stdev = 365.223
[info]   CI (99.9%): [≈ 0, 2341.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4157.476 ±(99.9%) 6337.600 B/op [Average]
[info]   (min, avg, max) = (2951.177, 4157.476, 5983.177), stdev = 1645.854
[info]   CI (99.9%): [≈ 0, 10495.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.276), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60.84% complete, ETA 00:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28583.937 ops/s
[info] # Warmup Iteration   2: 44534.645 ops/s
[info] # Warmup Iteration   3: 44689.057 ops/s
[info] # Warmup Iteration   4: 44911.623 ops/s
[info] # Warmup Iteration   5: 45059.773 ops/s
[info] Iteration   1: 45117.358 ops/s
[info]                  ·gc.alloc.rate:                   354.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              12378.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17846.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.452 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 45318.505 ops/s
[info]                  ·gc.alloc.rate:      338.624 MB/sec
[info]                  ·gc.alloc.rate.norm: 11760.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 45046.076 ops/s
[info]                  ·gc.alloc.rate:               349.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          12212.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17874.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 45284.660 ops/s
[info]                  ·gc.alloc.rate:      338.431 MB/sec
[info]                  ·gc.alloc.rate.norm: 11760.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45143.351 ops/s
[info]                  ·gc.alloc.rate:               362.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          12629.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23386.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   45181.990 ±(99.9%) 444.579 ops/s [Average]
[info]   (min, avg, max) = (45046.076, 45181.990, 45318.505), stdev = 115.456
[info]   CI (99.9%): [44737.411, 45626.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   348.751 ±(99.9%) 39.940 MB/sec [Average]
[info]   (min, avg, max) = (338.431, 348.751, 362.259), stdev = 10.372
[info]   CI (99.9%): [308.811, 388.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12148.175 ±(99.9%) 1479.655 B/op [Average]
[info]   (min, avg, max) = (11760.010, 12148.175, 12629.769), stdev = 384.262
[info]   CI (99.9%): [10668.519, 13627.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   338.814 ±(99.9%) 1216.974 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.814, 670.789), stdev = 316.044
[info]   CI (99.9%): [≈ 0, 1555.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11821.577 ±(99.9%) 42452.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11821.577, 23386.327), stdev = 11024.826
[info]   CI (99.9%): [≈ 0, 54274.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.290 ±(99.9%) 2.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.290, 1.452), stdev = 0.650
[info]   CI (99.9%): [≈ 0, 2.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.04% complete, ETA 00:52:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180.255 ops/s
[info] # Warmup Iteration   2: 554.501 ops/s
[info] # Warmup Iteration   3: 603.485 ops/s
[info] # Warmup Iteration   4: 611.612 ops/s
[info] # Warmup Iteration   5: 609.843 ops/s
[info] Iteration   1: 606.060 ops/s
[info]                  ·gc.alloc.rate:               1295.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          3363099.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3468765.417 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 607.860 ops/s
[info]                  ·gc.alloc.rate:                   1293.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              3348329.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3463060.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 607.750 ops/s
[info]                  ·gc.alloc.rate:                   1290.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              3340884.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3464784.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 592.259 ops/s
[info]                  ·gc.alloc.rate:                   1270.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              3374419.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3554195.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14974.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 604.305 ops/s
[info]                  ·gc.alloc.rate:                   1307.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              3404367.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3466366.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   603.647 ±(99.9%) 25.142 ops/s [Average]
[info]   (min, avg, max) = (592.259, 603.647, 607.860), stdev = 6.529
[info]   CI (99.9%): [578.504, 628.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1291.660 ±(99.9%) 52.274 MB/sec [Average]
[info]   (min, avg, max) = (1270.340, 1291.660, 1307.748), stdev = 13.575
[info]   CI (99.9%): [1239.386, 1343.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3366220.151 ±(99.9%) 96154.161 B/op [Average]
[info]   (min, avg, max) = (3340884.605, 3366220.151, 3404367.881), stdev = 24970.930
[info]   CI (99.9%): [3270065.990, 3462374.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1336.540 ±(99.9%) 11.026 MB/sec [Average]
[info]   (min, avg, max) = (1331.564, 1336.540, 1338.390), stdev = 2.863
[info]   CI (99.9%): [1325.514, 1347.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3483434.524 ±(99.9%) 152532.205 B/op [Average]
[info]   (min, avg, max) = (3463060.211, 3483434.524, 3554195.211), stdev = 39612.129
[info]   CI (99.9%): [3330902.319, 3635966.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.152 ±(99.9%) 9.655 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.152, 5.637), stdev = 2.507
[info]   CI (99.9%): [≈ 0, 10.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3059.872 ±(99.9%) 25649.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3059.872, 14974.921), stdev = 6661.211
[info]   CI (99.9%): [≈ 0, 28709.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.24% complete, ETA 00:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83.942 ops/s
[info] # Warmup Iteration   2: 465.853 ops/s
[info] # Warmup Iteration   3: 597.146 ops/s
[info] # Warmup Iteration   4: 594.962 ops/s
[info] # Warmup Iteration   5: 587.506 ops/s
[info] Iteration   1: 577.684 ops/s
[info]                  ·gc.alloc.rate:               1210.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          3298190.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1811424.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 583.008 ops/s
[info]                  ·gc.alloc.rate:                   1235.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              3331843.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3587422.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 584.265 ops/s
[info]                  ·gc.alloc.rate:               1236.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          3327360.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3583978.995 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 573.495 ops/s
[info]                  ·gc.alloc.rate:                   1223.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              3358117.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3655401.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15870.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 572.327 ops/s
[info]                  ·gc.alloc.rate:                   1220.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              3355230.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3654461.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 514.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   578.156 ±(99.9%) 20.806 ops/s [Average]
[info]   (min, avg, max) = (572.327, 578.156, 584.265), stdev = 5.403
[info]   CI (99.9%): [557.350, 598.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1225.315 ±(99.9%) 41.072 MB/sec [Average]
[info]   (min, avg, max) = (1210.693, 1225.315, 1236.044), stdev = 10.666
[info]   CI (99.9%): [1184.243, 1266.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3334148.381 ±(99.9%) 93598.889 B/op [Average]
[info]   (min, avg, max) = (3298190.145, 3334148.381, 3358117.561), stdev = 24307.334
[info]   CI (99.9%): [3240549.492, 3427747.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1197.621 ±(99.9%) 1146.659 MB/sec [Average]
[info]   (min, avg, max) = (664.934, 1197.621, 1332.284), stdev = 297.784
[info]   CI (99.9%): [50.963, 2344.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3258537.740 ±(99.9%) 3117875.430 B/op [Average]
[info]   (min, avg, max) = (1811424.111, 3258537.740, 3655401.700), stdev = 809702.348
[info]   CI (99.9%): [140662.310, 6376413.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.203 ±(99.9%) 9.867 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.203, 5.784), stdev = 2.562
[info]   CI (99.9%): [≈ 0, 11.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3299.423 ±(99.9%) 27071.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3299.423, 15870.216), stdev = 7030.474
[info]   CI (99.9%): [≈ 0, 30371.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.45% complete, ETA 00:51:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18415.996 ops/s
[info] # Warmup Iteration   2: 42546.262 ops/s
[info] # Warmup Iteration   3: 41882.442 ops/s
[info] # Warmup Iteration   4: 41922.970 ops/s
[info] # Warmup Iteration   5: 42982.613 ops/s
[info] Iteration   1: 42509.571 ops/s
[info]                  ·gc.alloc.rate:               713.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          26425.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24786.407 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 42833.463 ops/s
[info]                  ·gc.alloc.rate:               720.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          26474.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24623.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 43028.178 ops/s
[info]                  ·gc.alloc.rate:                   724.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              26511.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24512.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.761 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42281.186 ops/s
[info]                  ·gc.alloc.rate:                   711.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              26467.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24944.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.775 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42291.791 ops/s
[info]                  ·gc.alloc.rate:               708.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          26357.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24940.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   42588.838 ±(99.9%) 1280.059 ops/s [Average]
[info]   (min, avg, max) = (42281.186, 42588.838, 43028.178), stdev = 332.427
[info]   CI (99.9%): [41308.779, 43868.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   715.807 ±(99.9%) 26.130 MB/sec [Average]
[info]   (min, avg, max) = (708.309, 715.807, 724.899), stdev = 6.786
[info]   CI (99.9%): [689.677, 741.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26447.162 ±(99.9%) 226.030 B/op [Average]
[info]   (min, avg, max) = (26357.622, 26447.162, 26511.531), stdev = 58.699
[info]   CI (99.9%): [26221.132, 26673.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.144 ±(99.9%) 1.000 MB/sec [Average]
[info]   (min, avg, max) = (669.718, 670.144, 670.416), stdev = 0.260
[info]   CI (99.9%): [669.144, 671.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24761.443 ±(99.9%) 738.800 B/op [Average]
[info]   (min, avg, max) = (24512.419, 24761.443, 24944.841), stdev = 191.864
[info]   CI (99.9%): [24022.643, 25500.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.307 ±(99.9%) 1.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.307, 0.775), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:51:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168.853 ops/s
[info] # Warmup Iteration   2: 503.763 ops/s
[info] # Warmup Iteration   3: 574.699 ops/s
[info] # Warmup Iteration   4: 574.988 ops/s
[info] # Warmup Iteration   5: 579.052 ops/s
[info] Iteration   1: 574.814 ops/s
[info]                  ·gc.alloc.rate:               1274.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          3488362.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3647220.870 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 583.207 ops/s
[info]                  ·gc.alloc.rate:                   1279.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              3449763.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3592809.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 583.448 ops/s
[info]                  ·gc.alloc.rate:                   1286.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              3466758.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3594604.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 581.149 ops/s
[info]                  ·gc.alloc.rate:                   1293.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              3500604.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3610560.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16496.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 572.734 ops/s
[info]                  ·gc.alloc.rate:                   1253.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              3444039.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1824485.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.373 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   579.070 ±(99.9%) 19.145 ops/s [Average]
[info]   (min, avg, max) = (572.734, 579.070, 583.448), stdev = 4.972
[info]   CI (99.9%): [559.926, 598.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1277.205 ±(99.9%) 58.185 MB/sec [Average]
[info]   (min, avg, max) = (1253.406, 1277.205, 1293.146), stdev = 15.111
[info]   CI (99.9%): [1219.020, 1335.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3469905.632 ±(99.9%) 93685.286 B/op [Average]
[info]   (min, avg, max) = (3444039.065, 3469905.632, 3500604.605), stdev = 24329.771
[info]   CI (99.9%): [3376220.346, 3563590.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1199.146 ±(99.9%) 1151.957 MB/sec [Average]
[info]   (min, avg, max) = (663.994, 1199.146, 1333.764), stdev = 299.160
[info]   CI (99.9%): [47.188, 2351.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3253936.218 ±(99.9%) 3078151.317 B/op [Average]
[info]   (min, avg, max) = (1824485.640, 3253936.218, 3647220.870), stdev = 799386.122
[info]   CI (99.9%): [175784.900, 6332087.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.235 ±(99.9%) 10.458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.235, 6.094), stdev = 2.716
[info]   CI (99.9%): [≈ 0, 11.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3344.639 ±(99.9%) 28311.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3344.639, 16496.605), stdev = 7352.283
[info]   CI (99.9%): [≈ 0, 31655.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.200, 10.000), stdev = 3.633
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61.85% complete, ETA 00:51:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179.243 ops/s
[info] # Warmup Iteration   2: 549.830 ops/s
[info] # Warmup Iteration   3: 596.213 ops/s
[info] # Warmup Iteration   4: 600.021 ops/s
[info] # Warmup Iteration   5: 594.395 ops/s
[info] Iteration   1: 605.876 ops/s
[info]                  ·gc.alloc.rate:                   1291.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              3354294.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3481410.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 602.096 ops/s
[info]                  ·gc.alloc.rate:                   1277.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              3335544.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3498731.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 609.790 ops/s
[info]                  ·gc.alloc.rate:               1290.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          3329427.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3458581.823 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 608.325 ops/s
[info]                  ·gc.alloc.rate:                   1299.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              3359670.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3464260.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13397.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 592.267 ops/s
[info]                  ·gc.alloc.rate:               1291.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          3430481.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3543585.673 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   603.671 ±(99.9%) 26.989 ops/s [Average]
[info]   (min, avg, max) = (592.267, 603.671, 609.790), stdev = 7.009
[info]   CI (99.9%): [576.682, 630.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1289.933 ±(99.9%) 30.832 MB/sec [Average]
[info]   (min, avg, max) = (1277.118, 1289.933, 1299.258), stdev = 8.007
[info]   CI (99.9%): [1259.101, 1320.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3361883.650 ±(99.9%) 155407.504 B/op [Average]
[info]   (min, avg, max) = (3329427.344, 3361883.650, 3430481.565), stdev = 40358.835
[info]   CI (99.9%): [3206476.146, 3517291.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1338.833 ±(99.9%) 9.726 MB/sec [Average]
[info]   (min, avg, max) = (1334.348, 1338.833, 1340.294), stdev = 2.526
[info]   CI (99.9%): [1329.107, 1348.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3489314.076 ±(99.9%) 131552.927 B/op [Average]
[info]   (min, avg, max) = (3458581.823, 3489314.076, 3543585.673), stdev = 34163.877
[info]   CI (99.9%): [3357761.149, 3620867.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1.045 ±(99.9%) 8.905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.045, 5.181), stdev = 2.312
[info]   CI (99.9%): [≈ 0, 9.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2701.234 ±(99.9%) 23025.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2701.234, 13397.754), stdev = 5979.598
[info]   CI (99.9%): [≈ 0, 25726.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62.05% complete, ETA 00:50:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5650.109 ops/s
[info] # Warmup Iteration   2: 13194.258 ops/s
[info] # Warmup Iteration   3: 14052.539 ops/s
[info] # Warmup Iteration   4: 14197.063 ops/s
[info] # Warmup Iteration   5: 14104.069 ops/s
[info] Iteration   1: 14282.069 ops/s
[info]                  ·gc.alloc.rate:               1145.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          126255.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147028.192 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 14165.417 ops/s
[info]                  ·gc.alloc.rate:                   1127.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              125262.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148353.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 14024.488 ops/s
[info]                  ·gc.alloc.rate:               1121.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          125883.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74941.002 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 13940.142 ops/s
[info]                  ·gc.alloc.rate:               1126.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          127200.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150860.178 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 13986.415 ops/s
[info]                  ·gc.alloc.rate:                   1138.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              128042.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150439.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 592.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14079.706 ±(99.9%) 542.953 ops/s [Average]
[info]   (min, avg, max) = (13940.142, 14079.706, 14282.069), stdev = 141.003
[info]   CI (99.9%): [13536.753, 14622.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1131.939 ±(99.9%) 37.585 MB/sec [Average]
[info]   (min, avg, max) = (1121.795, 1131.939, 1145.791), stdev = 9.761
[info]   CI (99.9%): [1094.354, 1169.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126528.920 ±(99.9%) 4235.013 B/op [Average]
[info]   (min, avg, max) = (125262.711, 126528.920, 128042.951), stdev = 1099.819
[info]   CI (99.9%): [122293.907, 130763.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1202.137 ±(99.9%) 1150.147 MB/sec [Average]
[info]   (min, avg, max) = (667.829, 1202.137, 1337.133), stdev = 298.690
[info]   CI (99.9%): [51.990, 2352.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   134324.361 ±(99.9%) 127968.036 B/op [Average]
[info]   (min, avg, max) = (74941.002, 134324.361, 150860.178), stdev = 33232.893
[info]   CI (99.9%): [6356.325, 262292.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.058 ±(99.9%) 9.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.058, 5.267), stdev = 2.353
[info]   CI (99.9%): [≈ 0, 10.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   118.989 ±(99.9%) 1019.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.989, 592.630), stdev = 264.776
[info]   CI (99.9%): [≈ 0, 1138.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.25% complete, ETA 00:50:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8042.582 ops/s
[info] # Warmup Iteration   2: 17657.815 ops/s
[info] # Warmup Iteration   3: 17790.611 ops/s
[info] # Warmup Iteration   4: 17599.230 ops/s
[info] # Warmup Iteration   5: 17893.588 ops/s
[info] Iteration   1: 17795.954 ops/s
[info]                  ·gc.alloc.rate:                   1091.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              96487.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117794.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 17750.802 ops/s
[info]                  ·gc.alloc.rate:               1069.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          94788.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59061.395 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 17805.910 ops/s
[info]                  ·gc.alloc.rate:                   1093.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              96664.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117875.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 17833.304 ops/s
[info]                  ·gc.alloc.rate:                   1108.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              97825.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117697.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 17916.920 ops/s
[info]                  ·gc.alloc.rate:                   1074.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              94371.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58631.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 464.457 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   17820.578 ±(99.9%) 236.854 ops/s [Average]
[info]   (min, avg, max) = (17750.802, 17820.578, 17916.920), stdev = 61.510
[info]   CI (99.9%): [17583.724, 18057.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1087.537 ±(99.9%) 61.272 MB/sec [Average]
[info]   (min, avg, max) = (1069.204, 1087.537, 1108.864), stdev = 15.912
[info]   CI (99.9%): [1026.265, 1148.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   96027.260 ±(99.9%) 5488.546 B/op [Average]
[info]   (min, avg, max) = (94371.124, 96027.260, 97825.045), stdev = 1425.358
[info]   CI (99.9%): [90538.714, 101515.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.802 ±(99.9%) 1405.727 MB/sec [Average]
[info]   (min, avg, max) = (666.205, 1066.802, 1334.120), stdev = 365.063
[info]   CI (99.9%): [≈ 0, 2472.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94212.090 ±(99.9%) 124317.162 B/op [Average]
[info]   (min, avg, max) = (58631.314, 94212.090, 117875.746), stdev = 32284.772
[info]   CI (99.9%): [≈ 0, 218529.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.083 ±(99.9%) 9.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.083, 5.288), stdev = 2.351
[info]   CI (99.9%): [≈ 0, 10.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   95.099 ±(99.9%) 795.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.099, 464.457), stdev = 206.484
[info]   CI (99.9%): [≈ 0, 890.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.45% complete, ETA 00:50:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128968.144 ops/s
[info] # Warmup Iteration   2: 202295.306 ops/s
[info] # Warmup Iteration   3: 202301.244 ops/s
[info] # Warmup Iteration   4: 206289.935 ops/s
[info] # Warmup Iteration   5: 206394.987 ops/s
[info] Iteration   1: 205700.615 ops/s
[info]                  ·gc.alloc.rate:               763.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          5837.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5127.436 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 207149.726 ops/s
[info]                  ·gc.alloc.rate:               771.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          5860.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5091.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 207007.155 ops/s
[info]                  ·gc.alloc.rate:                   783.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              5953.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10192.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 202228.508 ops/s
[info]                  ·gc.alloc.rate:               748.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5218.124 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 201911.661 ops/s
[info]                  ·gc.alloc.rate:                   754.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              5877.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5228.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   204799.533 ±(99.9%) 9847.213 ops/s [Average]
[info]   (min, avg, max) = (201911.661, 204799.533, 207149.726), stdev = 2557.290
[info]   CI (99.9%): [194952.320, 214646.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   764.088 ±(99.9%) 53.150 MB/sec [Average]
[info]   (min, avg, max) = (748.425, 764.088, 783.129), stdev = 13.803
[info]   CI (99.9%): [710.939, 817.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5870.784 ±(99.9%) 193.762 B/op [Average]
[info]   (min, avg, max) = (5824.904, 5870.784, 5953.024), stdev = 50.319
[info]   CI (99.9%): [5677.022, 6064.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.557 ±(99.9%) 1154.336 MB/sec [Average]
[info]   (min, avg, max) = (670.265, 804.557, 1340.815), stdev = 299.777
[info]   CI (99.9%): [≈ 0, 1958.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6171.615 ±(99.9%) 8657.817 B/op [Average]
[info]   (min, avg, max) = (5091.329, 6171.615, 10192.322), stdev = 2248.408
[info]   CI (99.9%): [≈ 0, 14829.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.162), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.65% complete, ETA 00:49:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143414.973 ops/s
[info] # Warmup Iteration   2: 222049.366 ops/s
[info] # Warmup Iteration   3: 233474.189 ops/s
[info] # Warmup Iteration   4: 233095.037 ops/s
[info] # Warmup Iteration   5: 232797.454 ops/s
[info] Iteration   1: 231836.766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 231917.722 ops/s
[info]                  ·gc.alloc.rate:      0.048 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.329 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 232055.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 224793.875 ops/s
[info]                  ·gc.alloc.rate:      9.091 MB/sec
[info]                  ·gc.alloc.rate.norm: 63.646 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 231854.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   230491.597 ±(99.9%) 12269.245 ops/s [Average]
[info]   (min, avg, max) = (224793.875, 230491.597, 232055.525), stdev = 3186.284
[info]   CI (99.9%): [218222.352, 242760.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.828 ±(99.9%) 15.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.828, 9.091), stdev = 4.060
[info]   CI (99.9%): [≈ 0, 17.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12.796 ±(99.9%) 109.459 B/op [Average]
[info]   (min, avg, max) = (0.002, 12.796, 63.646), stdev = 28.426
[info]   CI (99.9%): [≈ 0, 122.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.85% complete, ETA 00:49:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6458.399 ops/s
[info] # Warmup Iteration   2: 16335.321 ops/s
[info] # Warmup Iteration   3: 17431.257 ops/s
[info] # Warmup Iteration   4: 17083.314 ops/s
[info] # Warmup Iteration   5: 17559.231 ops/s
[info] Iteration   1: 17704.395 ops/s
[info]                  ·gc.alloc.rate:                   1148.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              102118.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118577.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 17535.981 ops/s
[info]                  ·gc.alloc.rate:                   1147.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              102929.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119780.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 17684.075 ops/s
[info]                  ·gc.alloc.rate:               1138.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          101291.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59400.336 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 17733.646 ops/s
[info]                  ·gc.alloc.rate:               1143.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          101481.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118465.797 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 17705.411 ops/s
[info]                  ·gc.alloc.rate:                   1153.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              102564.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118778.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 527.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   17672.702 ±(99.9%) 302.039 ops/s [Average]
[info]   (min, avg, max) = (17535.981, 17672.702, 17733.646), stdev = 78.439
[info]   CI (99.9%): [17370.663, 17974.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1146.296 ±(99.9%) 22.487 MB/sec [Average]
[info]   (min, avg, max) = (1138.209, 1146.296, 1153.785), stdev = 5.840
[info]   CI (99.9%): [1123.808, 1168.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   102077.037 ±(99.9%) 2680.306 B/op [Average]
[info]   (min, avg, max) = (101291.492, 102077.037, 102929.570), stdev = 696.067
[info]   CI (99.9%): [99396.731, 104757.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1201.499 ±(99.9%) 1149.521 MB/sec [Average]
[info]   (min, avg, max) = (667.480, 1201.499, 1336.183), stdev = 298.527
[info]   CI (99.9%): [51.978, 2351.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107000.412 ±(99.9%) 102482.316 B/op [Average]
[info]   (min, avg, max) = (59400.336, 107000.412, 119780.034), stdev = 26614.332
[info]   CI (99.9%): [4518.096, 209482.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.199 ±(99.9%) 10.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.932), stdev = 2.646
[info]   CI (99.9%): [≈ 0, 11.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   106.588 ±(99.9%) 905.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.588, 527.352), stdev = 235.220
[info]   CI (99.9%): [≈ 0, 1012.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63.05% complete, ETA 00:49:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4305.230 ops/s
[info] # Warmup Iteration   2: 6701.920 ops/s
[info] # Warmup Iteration   3: 6999.800 ops/s
[info] # Warmup Iteration   4: 7023.644 ops/s
[info] # Warmup Iteration   5: 7021.655 ops/s
[info] Iteration   1: 7061.815 ops/s
[info]                  ·gc.alloc.rate:               987.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          220021.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149351.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6979.923 ops/s
[info]                  ·gc.alloc.rate:                   988.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              222962.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302167.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7061.968 ops/s
[info]                  ·gc.alloc.rate:               981.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          218599.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149351.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 7010.089 ops/s
[info]                  ·gc.alloc.rate:                   997.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              223843.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     300874.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7021.684 ops/s
[info]                  ·gc.alloc.rate:               984.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          220543.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150201.831 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   7027.096 ±(99.9%) 135.668 ops/s [Average]
[info]   (min, avg, max) = (6979.923, 7027.096, 7061.968), stdev = 35.232
[info]   CI (99.9%): [6891.428, 7162.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   987.683 ±(99.9%) 23.273 MB/sec [Average]
[info]   (min, avg, max) = (981.049, 987.683, 997.039), stdev = 6.044
[info]   CI (99.9%): [964.410, 1010.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   221194.061 ±(99.9%) 8321.802 B/op [Average]
[info]   (min, avg, max) = (218599.113, 221194.061, 223843.836), stdev = 2161.146
[info]   CI (99.9%): [212872.259, 229515.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   938.221 ±(99.9%) 1413.143 MB/sec [Average]
[info]   (min, avg, max) = (670.114, 938.221, 1340.326), stdev = 366.989
[info]   CI (99.9%): [≈ 0, 2351.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   210389.366 ±(99.9%) 320349.250 B/op [Average]
[info]   (min, avg, max) = (149351.190, 210389.366, 302167.704), stdev = 83193.683
[info]   CI (99.9%): [≈ 0, 530738.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.747 ±(99.9%) 19.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.747, 9.386), stdev = 5.130
[info]   CI (99.9%): [≈ 0, 23.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.25% complete, ETA 00:49:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 801455.342 ops/s
[info] # Warmup Iteration   2: 1501755.396 ops/s
[info] # Warmup Iteration   3: 1554419.157 ops/s
[info] # Warmup Iteration   4: 1553270.726 ops/s
[info] # Warmup Iteration   5: 1551902.732 ops/s
[info] Iteration   1: 1494265.651 ops/s
[info]                  ·gc.alloc.rate:               72.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          76.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 538.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1558858.080 ops/s
[info]                  ·gc.alloc.rate:      63.418 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1557164.025 ops/s
[info]                  ·gc.alloc.rate:      63.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1559745.136 ops/s
[info]                  ·gc.alloc.rate:      63.426 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1559876.906 ops/s
[info]                  ·gc.alloc.rate:      63.430 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1545981.960 ±(99.9%) 111401.202 ops/s [Average]
[info]   (min, avg, max) = (1494265.651, 1545981.960, 1559876.906), stdev = 28930.538
[info]   CI (99.9%): [1434580.758, 1657383.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   65.256 ±(99.9%) 15.989 MB/sec [Average]
[info]   (min, avg, max) = (63.324, 65.256, 72.684), stdev = 4.152
[info]   CI (99.9%): [49.267, 81.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   66.505 ±(99.9%) 21.566 B/op [Average]
[info]   (min, avg, max) = (64.000, 66.505, 76.524), stdev = 5.601
[info]   CI (99.9%): [44.939, 88.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.361 ±(99.9%) 881.361 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.361, 511.806), stdev = 228.887
[info]   CI (99.9%): [≈ 0, 983.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   107.769 ±(99.9%) 927.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.769, 538.845), stdev = 240.979
[info]   CI (99.9%): [≈ 0, 1035.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.45% complete, ETA 00:48:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2387.120 ops/s
[info] # Warmup Iteration   2: 66850.389 ops/s
[info] # Warmup Iteration   3: 75529.472 ops/s
[info] # Warmup Iteration   4: 75463.762 ops/s
[info] # Warmup Iteration   5: 76424.041 ops/s
[info] Iteration   1: 76363.732 ops/s
[info]                  ·gc.alloc.rate:               3252.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          67014.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3366.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69362.287 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 74869.852 ops/s
[info]                  ·gc.alloc.rate:                   3191.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              67092.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56741.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 76510.271 ops/s
[info]                  ·gc.alloc.rate:               3286.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          67603.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3382.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69565.677 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 76604.218 ops/s
[info]                  ·gc.alloc.rate:               3265.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          67055.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2712.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55696.405 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 76006.957 ops/s
[info]                  ·gc.alloc.rate:                   3267.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              67651.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70279.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   76071.006 ±(99.9%) 2729.500 ops/s [Average]
[info]   (min, avg, max) = (74869.852, 76071.006, 76604.218), stdev = 708.843
[info]   CI (99.9%): [73341.506, 78800.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3252.754 ±(99.9%) 139.484 MB/sec [Average]
[info]   (min, avg, max) = (3191.785, 3252.754, 3286.671), stdev = 36.224
[info]   CI (99.9%): [3113.269, 3392.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67283.627 ±(99.9%) 1214.802 B/op [Average]
[info]   (min, avg, max) = (67014.946, 67283.627, 67651.081), stdev = 315.480
[info]   CI (99.9%): [66068.826, 68498.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3110.884 ±(99.9%) 1424.754 MB/sec [Average]
[info]   (min, avg, max) = (2699.337, 3110.884, 3394.651), stdev = 370.004
[info]   CI (99.9%): [1686.130, 4535.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64328.960 ±(99.9%) 28574.093 B/op [Average]
[info]   (min, avg, max) = (55696.405, 64328.960, 70279.338), stdev = 7420.601
[info]   CI (99.9%): [35754.867, 92903.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.174 ±(99.9%) 0.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.174, 0.438), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.65% complete, ETA 00:48:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 561754.406 ops/s
[info] # Warmup Iteration   2: 1800031.980 ops/s
[info] # Warmup Iteration   3: 1828161.511 ops/s
[info] # Warmup Iteration   4: 1829490.428 ops/s
[info] # Warmup Iteration   5: 1852436.202 ops/s
[info] Iteration   1: 1805731.604 ops/s
[info]                  ·gc.alloc.rate:               990.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          863.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1163.540 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1840428.691 ops/s
[info]                  ·gc.alloc.rate:               977.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          835.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 571.386 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1834757.867 ops/s
[info]                  ·gc.alloc.rate:                   994.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              852.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1146.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1855092.073 ops/s
[info]                  ·gc.alloc.rate:               996.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          845.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 567.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1839864.702 ops/s
[info]                  ·gc.alloc.rate:                   1004.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              858.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1145.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1835174.987 ±(99.9%) 69774.581 ops/s [Average]
[info]   (min, avg, max) = (1805731.604, 1835174.987, 1855092.073), stdev = 18120.237
[info]   CI (99.9%): [1765400.407, 1904949.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   992.735 ±(99.9%) 37.570 MB/sec [Average]
[info]   (min, avg, max) = (977.674, 992.735, 1004.264), stdev = 9.757
[info]   CI (99.9%): [955.165, 1030.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   851.320 ±(99.9%) 42.179 B/op [Average]
[info]   (min, avg, max) = (835.958, 851.320, 863.620), stdev = 10.954
[info]   CI (99.9%): [809.142, 893.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.723 ±(99.9%) 1410.238 MB/sec [Average]
[info]   (min, avg, max) = (668.251, 1069.723, 1339.206), stdev = 366.234
[info]   CI (99.9%): [≈ 0, 2479.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   918.907 ±(99.9%) 1228.865 B/op [Average]
[info]   (min, avg, max) = (567.426, 918.907, 1163.540), stdev = 319.132
[info]   CI (99.9%): [≈ 0, 2147.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.054), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.86% complete, ETA 00:48:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1189102.547 ops/s
[info] # Warmup Iteration   2: 2066955.845 ops/s
[info] # Warmup Iteration   3: 2188762.709 ops/s
[info] # Warmup Iteration   4: 2255360.929 ops/s
[info] # Warmup Iteration   5: 2258937.235 ops/s
[info] Iteration   1: 2257923.213 ops/s
[info]                  ·gc.alloc.rate:               655.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.810 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2253946.393 ops/s
[info]                  ·gc.alloc.rate:               653.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          456.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.649 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2219879.540 ops/s
[info]                  ·gc.alloc.rate:               645.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 476.053 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2262563.537 ops/s
[info]                  ·gc.alloc.rate:                   652.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              453.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2255725.348 ops/s
[info]                  ·gc.alloc.rate:                   648.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2250007.606 ±(99.9%) 66030.831 ops/s [Average]
[info]   (min, avg, max) = (2219879.540, 2250007.606, 2262563.537), stdev = 17147.997
[info]   CI (99.9%): [2183976.776, 2316038.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   651.139 ±(99.9%) 16.139 MB/sec [Average]
[info]   (min, avg, max) = (645.204, 651.139, 655.869), stdev = 4.191
[info]   CI (99.9%): [635.000, 667.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   455.402 ±(99.9%) 8.074 B/op [Average]
[info]   (min, avg, max) = (452.622, 455.402, 457.313), stdev = 2.097
[info]   CI (99.9%): [447.328, 463.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.579 ±(99.9%) 1.575 MB/sec [Average]
[info]   (min, avg, max) = (671.156, 671.579, 672.169), stdev = 0.409
[info]   CI (99.9%): [670.004, 673.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   469.712 ±(99.9%) 13.948 B/op [Average]
[info]   (min, avg, max) = (467.069, 469.712, 476.053), stdev = 3.622
[info]   CI (99.9%): [455.764, 483.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.06% complete, ETA 00:48:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1373274.341 ops/s
[info] # Warmup Iteration   2: 2222282.510 ops/s
[info] # Warmup Iteration   3: 2395854.391 ops/s
[info] # Warmup Iteration   4: 2392707.477 ops/s
[info] # Warmup Iteration   5: 2394979.183 ops/s
[info] Iteration   1: 2396481.720 ops/s
[info]                  ·gc.alloc.rate:      24.364 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2306991.192 ops/s
[info]                  ·gc.alloc.rate:      42.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 28.873 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2400993.999 ops/s
[info]                  ·gc.alloc.rate:      24.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2401088.241 ops/s
[info]                  ·gc.alloc.rate:      24.413 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2400780.302 ops/s
[info]                  ·gc.alloc.rate:      24.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2381267.091 ±(99.9%) 160058.864 ops/s [Average]
[info]   (min, avg, max) = (2306991.192, 2381267.091, 2401088.241), stdev = 41566.779
[info]   CI (99.9%): [2221208.227, 2541325.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   27.983 ±(99.9%) 30.867 MB/sec [Average]
[info]   (min, avg, max) = (24.364, 27.983, 42.323), stdev = 8.016
[info]   CI (99.9%): [≈ 0, 58.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   18.575 ±(99.9%) 22.168 B/op [Average]
[info]   (min, avg, max) = (16.000, 18.575, 28.873), stdev = 5.757
[info]   CI (99.9%): [≈ 0, 40.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.26% complete, ETA 00:47:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11959.021 ops/s
[info] # Warmup Iteration   2: 47813.845 ops/s
[info] # Warmup Iteration   3: 49810.333 ops/s
[info] # Warmup Iteration   4: 50598.381 ops/s
[info] # Warmup Iteration   5: 50781.221 ops/s
[info] Iteration   1: 50602.613 ops/s
[info]                  ·gc.alloc.rate:                   2196.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              68294.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62386.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 50464.884 ops/s
[info]                  ·gc.alloc.rate:                   2178.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              67952.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62368.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 51797.052 ops/s
[info]                  ·gc.alloc.rate:                   2222.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              67491.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60762.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 50972.082 ops/s
[info]                  ·gc.alloc.rate:                   2198.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              67899.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61829.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 51375.012 ops/s
[info]                  ·gc.alloc.rate:                   2242.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              68704.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81993.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.638 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   51042.329 ±(99.9%) 2119.615 ops/s [Average]
[info]   (min, avg, max) = (50464.884, 51042.329, 51797.052), stdev = 550.457
[info]   CI (99.9%): [48922.714, 53161.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2207.768 ±(99.9%) 95.856 MB/sec [Average]
[info]   (min, avg, max) = (2178.848, 2207.768, 2242.689), stdev = 24.893
[info]   CI (99.9%): [2111.912, 2303.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68068.434 ±(99.9%) 1755.104 B/op [Average]
[info]   (min, avg, max) = (67491.185, 68068.434, 68704.607), stdev = 455.795
[info]   CI (99.9%): [66313.330, 69823.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.105 ±(99.9%) 1161.099 MB/sec [Average]
[info]   (min, avg, max) = (1999.821, 2137.105, 2676.487), stdev = 301.534
[info]   CI (99.9%): [976.007, 3298.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65868.462 ±(99.9%) 34804.097 B/op [Average]
[info]   (min, avg, max) = (60762.960, 65868.462, 81993.974), stdev = 9038.513
[info]   CI (99.9%): [31064.365, 100672.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 7.216 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.874, 4.227), stdev = 1.874
[info]   CI (99.9%): [≈ 0, 8.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.182 ±(99.9%) 224.432 B/op [Average]
[info]   (min, avg, max) = (0.638, 27.182, 131.440), stdev = 58.284
[info]   CI (99.9%): [≈ 0, 251.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.46% complete, ETA 00:47:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50459.953 ops/s
[info] # Warmup Iteration   2: 796843.684 ops/s
[info] # Warmup Iteration   3: 851725.002 ops/s
[info] # Warmup Iteration   4: 862574.714 ops/s
[info] # Warmup Iteration   5: 858220.309 ops/s
[info] Iteration   1: 857413.800 ops/s
[info]                  ·gc.alloc.rate:                   2772.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              5089.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4913.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 863269.311 ops/s
[info]                  ·gc.alloc.rate:                   2790.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              5087.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4877.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 882189.759 ops/s
[info]                  ·gc.alloc.rate:               2879.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          5133.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3348.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5968.719 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 883753.114 ops/s
[info]                  ·gc.alloc.rate:               2869.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          5110.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4789.318 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 880961.058 ops/s
[info]                  ·gc.alloc.rate:               2861.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          5111.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4817.395 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   873517.408 ±(99.9%) 47150.225 ops/s [Average]
[info]   (min, avg, max) = (857413.800, 873517.408, 883753.114), stdev = 12244.764
[info]   CI (99.9%): [826367.183, 920667.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2834.885 ±(99.9%) 189.691 MB/sec [Average]
[info]   (min, avg, max) = (2772.838, 2834.885, 2879.553), stdev = 49.262
[info]   CI (99.9%): [2645.195, 3024.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5106.430 ±(99.9%) 72.937 B/op [Average]
[info]   (min, avg, max) = (5087.461, 5106.430, 5133.386), stdev = 18.941
[info]   CI (99.9%): [5033.493, 5179.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2817.362 ±(99.9%) 1143.013 MB/sec [Average]
[info]   (min, avg, max) = (2675.573, 2817.362, 3348.130), stdev = 296.837
[info]   CI (99.9%): [1674.349, 3960.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5073.201 ±(99.9%) 1936.773 B/op [Average]
[info]   (min, avg, max) = (4789.318, 5073.201, 5968.719), stdev = 502.974
[info]   CI (99.9%): [3136.427, 7009.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.115), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.66% complete, ETA 00:47:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.566 ops/s
[info] # Warmup Iteration   2: 4460958.874 ops/s
[info] # Warmup Iteration   3: 5045372.220 ops/s
[info] # Warmup Iteration   4: 5060714.687 ops/s
[info] # Warmup Iteration   5: 5090380.607 ops/s
[info] Iteration   1: 5097734.989 ops/s
[info]                  ·gc.alloc.rate:      310.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5079202.985 ops/s
[info]                  ·gc.alloc.rate:                   325.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5099735.679 ops/s
[info]                  ·gc.alloc.rate:      311.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5078976.479 ops/s
[info]                  ·gc.alloc.rate:               326.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          101.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 206.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 4936058.449 ops/s
[info]                  ·gc.alloc.rate:      301.216 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5058341.716 ±(99.9%) 265941.772 ops/s [Average]
[info]   (min, avg, max) = (4936058.449, 5058341.716, 5099735.679), stdev = 69064.234
[info]   CI (99.9%): [4792399.944, 5324283.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   315.014 ±(99.9%) 41.315 MB/sec [Average]
[info]   (min, avg, max) = (301.216, 315.014, 326.291), stdev = 10.729
[info]   CI (99.9%): [273.698, 356.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.002 ±(99.9%) 10.492 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.002, 101.108), stdev = 2.725
[info]   CI (99.9%): [87.510, 108.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.434 ±(99.9%) 1258.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.434, 665.510), stdev = 326.938
[info]   CI (99.9%): [≈ 0, 1494.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   72.950 ±(99.9%) 390.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.950, 206.222), stdev = 101.304
[info]   CI (99.9%): [≈ 0, 463.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.86% complete, ETA 00:46:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14720.069 ops/s
[info] # Warmup Iteration   2: 748594.910 ops/s
[info] # Warmup Iteration   3: 968141.488 ops/s
[info] # Warmup Iteration   4: 972771.474 ops/s
[info] # Warmup Iteration   5: 978062.877 ops/s
[info] Iteration   1: 980313.877 ops/s
[info]                  ·gc.alloc.rate:                   1139.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              1827.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1070.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 973951.533 ops/s
[info]                  ·gc.alloc.rate:                   1149.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2157.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 956094.078 ops/s
[info]                  ·gc.alloc.rate:               1123.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          1849.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2199.785 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 961369.391 ops/s
[info]                  ·gc.alloc.rate:               1113.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          1821.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1094.363 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 942657.277 ops/s
[info]                  ·gc.alloc.rate:                   1106.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              1845.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2233.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   962877.231 ±(99.9%) 57237.723 ops/s [Average]
[info]   (min, avg, max) = (942657.277, 962877.231, 980313.877), stdev = 14864.455
[info]   CI (99.9%): [905639.509, 1020114.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1126.265 ±(99.9%) 69.082 MB/sec [Average]
[info]   (min, avg, max) = (1106.041, 1126.265, 1149.395), stdev = 17.940
[info]   CI (99.9%): [1057.183, 1195.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1840.332 ±(99.9%) 56.715 B/op [Average]
[info]   (min, avg, max) = (1821.920, 1840.332, 1856.554), stdev = 14.729
[info]   CI (99.9%): [1783.617, 1897.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.201 ±(99.9%) 1410.717 MB/sec [Average]
[info]   (min, avg, max) = (667.119, 1069.201, 1338.140), stdev = 366.359
[info]   CI (99.9%): [≈ 0, 2479.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1751.040 ±(99.9%) 2352.688 B/op [Average]
[info]   (min, avg, max) = (1070.545, 1751.040, 2233.277), stdev = 610.986
[info]   CI (99.9%): [≈ 0, 4103.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 7.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 4.196), stdev = 1.869
[info]   CI (99.9%): [≈ 0, 8.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.424 ±(99.9%) 12.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.424, 7.003), stdev = 3.119
[info]   CI (99.9%): [≈ 0, 13.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.06% complete, ETA 00:46:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3022371.798 ops/s
[info] # Warmup Iteration   2: 8108494.141 ops/s
[info] # Warmup Iteration   3: 8451778.922 ops/s
[info] # Warmup Iteration   4: 8486522.784 ops/s
[info] # Warmup Iteration   5: 8801879.656 ops/s
[info] Iteration   1: 8494320.998 ops/s
[info]                  ·gc.alloc.rate:               400.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.791 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 8538130.615 ops/s
[info]                  ·gc.alloc.rate:               401.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          73.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 8835252.198 ops/s
[info]                  ·gc.alloc.rate:      404.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8789495.923 ops/s
[info]                  ·gc.alloc.rate:                   426.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              76.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8625336.457 ops/s
[info]                  ·gc.alloc.rate:               412.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122.587 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8656507.238 ±(99.9%) 580556.472 ops/s [Average]
[info]   (min, avg, max) = (8494320.998, 8656507.238, 8835252.198), stdev = 150768.672
[info]   CI (99.9%): [8075950.766, 9237063.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   408.970 ±(99.9%) 42.482 MB/sec [Average]
[info]   (min, avg, max) = (400.228, 408.970, 426.790), stdev = 11.032
[info]   CI (99.9%): [366.488, 451.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.348 ±(99.9%) 6.316 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.348, 76.411), stdev = 1.640
[info]   CI (99.9%): [68.032, 80.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.437 ±(99.9%) 1064.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.437, 671.892), stdev = 276.503
[info]   CI (99.9%): [≈ 0, 1538.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   86.396 ±(99.9%) 193.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.396, 122.587), stdev = 50.140
[info]   CI (99.9%): [≈ 0, 279.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.26% complete, ETA 00:46:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6796.681 ops/s
[info] # Warmup Iteration   2: 123808.526 ops/s
[info] # Warmup Iteration   3: 454477.988 ops/s
[info] # Warmup Iteration   4: 487421.243 ops/s
[info] # Warmup Iteration   5: 485621.182 ops/s
[info] Iteration   1: 490708.785 ops/s
[info]                  ·gc.alloc.rate:                   2179.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              6992.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6436.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 491956.491 ops/s
[info]                  ·gc.alloc.rate:                   2215.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              7087.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8584.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 484038.718 ops/s
[info]                  ·gc.alloc.rate:               2154.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          7004.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6550.703 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 494213.533 ops/s
[info]                  ·gc.alloc.rate:               2198.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          7001.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6422.719 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 488982.081 ops/s
[info]                  ·gc.alloc.rate:               2202.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          7087.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6503.159 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   489979.922 ±(99.9%) 14745.393 ops/s [Average]
[info]   (min, avg, max) = (484038.718, 489979.922, 494213.533), stdev = 3829.332
[info]   CI (99.9%): [475234.529, 504725.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2190.268 ±(99.9%) 91.511 MB/sec [Average]
[info]   (min, avg, max) = (2154.331, 2190.268, 2215.370), stdev = 23.765
[info]   CI (99.9%): [2098.757, 2281.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7034.515 ±(99.9%) 185.936 B/op [Average]
[info]   (min, avg, max) = (6992.096, 7034.515, 7087.210), stdev = 48.287
[info]   CI (99.9%): [6848.579, 7220.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2148.601 ±(99.9%) 1151.065 MB/sec [Average]
[info]   (min, avg, max) = (2006.624, 2148.601, 2683.254), stdev = 298.928
[info]   CI (99.9%): [997.536, 3299.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6899.350 ±(99.9%) 3631.858 B/op [Average]
[info]   (min, avg, max) = (6422.719, 6899.350, 8584.020), stdev = 943.182
[info]   CI (99.9%): [3267.492, 10531.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.291 ±(99.9%) 2.465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.436), stdev = 0.640
[info]   CI (99.9%): [≈ 0, 2.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.932 ±(99.9%) 7.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.595), stdev = 2.048
[info]   CI (99.9%): [≈ 0, 8.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65.46% complete, ETA 00:46:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115304.172 ops/s
[info] # Warmup Iteration   2: 1258717.013 ops/s
[info] # Warmup Iteration   3: 1270365.776 ops/s
[info] # Warmup Iteration   4: 1337053.881 ops/s
[info] # Warmup Iteration   5: 1349408.998 ops/s
[info] Iteration   1: 1321291.388 ops/s
[info]                  ·gc.alloc.rate:                   1867.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2403.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1353193.638 ops/s
[info]                  ·gc.alloc.rate:                   1924.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              2237.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2346.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1343322.864 ops/s
[info]                  ·gc.alloc.rate:                   1883.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              2206.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1572.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1337217.124 ops/s
[info]                  ·gc.alloc.rate:               1902.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          2238.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2368.537 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1334526.755 ops/s
[info]                  ·gc.alloc.rate:               1911.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          2254.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2373.846 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   1337910.354 ±(99.9%) 45193.559 ops/s [Average]
[info]   (min, avg, max) = (1321291.388, 1337910.354, 1353193.638), stdev = 11736.624
[info]   CI (99.9%): [1292716.794, 1383103.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1897.896 ±(99.9%) 85.831 MB/sec [Average]
[info]   (min, avg, max) = (1867.888, 1897.896, 1924.122), stdev = 22.290
[info]   CI (99.9%): [1812.065, 1983.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2232.342 ±(99.9%) 68.367 B/op [Average]
[info]   (min, avg, max) = (2206.534, 2232.342, 2254.122), stdev = 17.755
[info]   CI (99.9%): [2163.975, 2300.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1880.853 ±(99.9%) 1158.593 MB/sec [Average]
[info]   (min, avg, max) = (1342.636, 1880.853, 2018.037), stdev = 300.883
[info]   CI (99.9%): [722.260, 3039.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2213.102 ±(99.9%) 1380.881 B/op [Average]
[info]   (min, avg, max) = (1572.635, 2213.102, 2403.779), stdev = 358.610
[info]   CI (99.9%): [832.221, 3593.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.123), stdev = 1.362
[info]   CI (99.9%): [≈ 0, 5.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.809 ±(99.9%) 6.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.809, 3.632), stdev = 1.584
[info]   CI (99.9%): [≈ 0, 6.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.66% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 891.334 ops/s
[info] # Warmup Iteration   2: 4032.776 ops/s
[info] # Warmup Iteration   3: 4089.434 ops/s
[info] # Warmup Iteration   4: 4572.628 ops/s
[info] # Warmup Iteration   5: 4573.423 ops/s
[info] Iteration   1: 4640.225 ops/s
[info]                  ·gc.alloc.rate:                   2302.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              780854.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     680297.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1490.512 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 4622.003 ops/s
[info]                  ·gc.alloc.rate:                   2344.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              798311.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     907722.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.377 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4622.566 ops/s
[info]                  ·gc.alloc.rate:                   2305.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              784828.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     680531.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4605.365 ops/s
[info]                  ·gc.alloc.rate:                   2323.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              794078.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     684215.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4643.745 ops/s
[info]                  ·gc.alloc.rate:                   2370.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              802965.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     906922.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.381 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4626.781 ±(99.9%) 59.894 ops/s [Average]
[info]   (min, avg, max) = (4605.365, 4626.781, 4643.745), stdev = 15.554
[info]   CI (99.9%): [4566.887, 4686.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2329.190 ±(99.9%) 109.546 MB/sec [Average]
[info]   (min, avg, max) = (2302.260, 2329.190, 2370.193), stdev = 28.449
[info]   CI (99.9%): [2219.643, 2438.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   792207.880 ±(99.9%) 35492.136 B/op [Average]
[info]   (min, avg, max) = (780854.952, 792207.880, 802965.833), stdev = 9217.195
[info]   CI (99.9%): [756715.744, 827700.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2269.956 ±(99.9%) 1411.216 MB/sec [Average]
[info]   (min, avg, max) = (1998.971, 2269.956, 2677.052), stdev = 366.488
[info]   CI (99.9%): [858.740, 3681.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   771937.823 ±(99.9%) 475934.731 B/op [Average]
[info]   (min, avg, max) = (680297.853, 771937.823, 907722.507), stdev = 123598.738
[info]   CI (99.9%): [296003.093, 1247872.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.037 ±(99.9%) 7.274 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.037, 4.395), stdev = 1.889
[info]   CI (99.9%): [≈ 0, 8.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   351.940 ±(99.9%) 2467.032 B/op [Average]
[info]   (min, avg, max) = (7.087, 351.940, 1490.512), stdev = 640.680
[info]   CI (99.9%): [≈ 0, 2818.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.86% complete, ETA 00:45:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 861.492 ops/s
[info] # Warmup Iteration   2: 5373.307 ops/s
[info] # Warmup Iteration   3: 6946.756 ops/s
[info] # Warmup Iteration   4: 7080.206 ops/s
[info] # Warmup Iteration   5: 7082.364 ops/s
[info] Iteration   1: 7078.390 ops/s
[info]                  ·gc.alloc.rate:                   2402.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              534263.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     445866.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.758 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7058.010 ops/s
[info]                  ·gc.alloc.rate:                   2408.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              536900.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     597807.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.772 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7114.260 ops/s
[info]                  ·gc.alloc.rate:               2414.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          534129.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 445821.626 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 7092.761 ops/s
[info]                  ·gc.alloc.rate:               2447.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          543127.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 597750.401 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7097.569 ops/s
[info]                  ·gc.alloc.rate:               2422.536 MB/sec
[info]                  ·gc.alloc.rate.norm:          537198.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 448957.142 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   7088.198 ±(99.9%) 81.580 ops/s [Average]
[info]   (min, avg, max) = (7058.010, 7088.198, 7114.260), stdev = 21.186
[info]   CI (99.9%): [7006.618, 7169.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2419.233 ±(99.9%) 67.710 MB/sec [Average]
[info]   (min, avg, max) = (2402.829, 2419.233, 2447.815), stdev = 17.584
[info]   CI (99.9%): [2351.523, 2486.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   537124.095 ±(99.9%) 14049.601 B/op [Average]
[info]   (min, avg, max) = (534129.622, 537124.095, 543127.984), stdev = 3648.637
[info]   CI (99.9%): [523074.494, 551173.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2284.167 ±(99.9%) 1419.038 MB/sec [Average]
[info]   (min, avg, max) = (2005.268, 2284.167, 2693.992), stdev = 368.520
[info]   CI (99.9%): [865.129, 3703.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   507240.653 ±(99.9%) 318291.873 B/op [Average]
[info]   (min, avg, max) = (445821.626, 507240.653, 597807.139), stdev = 82659.389
[info]   CI (99.9%): [188948.780, 825532.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.208 ±(99.9%) 1.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.208, 0.853), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 1.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.306 ±(99.9%) 316.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.306, 189.758), stdev = 82.207
[info]   CI (99.9%): [≈ 0, 362.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.06% complete, ETA 00:45:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24351.300 ops/s
[info] # Warmup Iteration   2: 44084.527 ops/s
[info] # Warmup Iteration   3: 44789.894 ops/s
[info] # Warmup Iteration   4: 46273.033 ops/s
[info] # Warmup Iteration   5: 45173.271 ops/s
[info] Iteration   1: 46598.160 ops/s
[info]                  ·gc.alloc.rate:               766.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          25882.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22657.197 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 46533.221 ops/s
[info]                  ·gc.alloc.rate:               774.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          26178.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22710.885 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 46534.185 ops/s
[info]                  ·gc.alloc.rate:                   770.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              26054.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22710.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 46138.418 ops/s
[info]                  ·gc.alloc.rate:                   776.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              26487.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45835.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.420 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 46548.049 ops/s
[info]                  ·gc.alloc.rate:               765.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          25886.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22726.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   46470.407 ±(99.9%) 721.877 ops/s [Average]
[info]   (min, avg, max) = (46138.418, 46470.407, 46598.160), stdev = 187.469
[info]   CI (99.9%): [45748.529, 47192.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   770.604 ±(99.9%) 18.090 MB/sec [Average]
[info]   (min, avg, max) = (765.636, 770.604, 776.523), stdev = 4.698
[info]   CI (99.9%): [752.514, 788.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26097.885 ±(99.9%) 964.896 B/op [Average]
[info]   (min, avg, max) = (25882.373, 26097.885, 26487.310), stdev = 250.580
[info]   CI (99.9%): [25132.989, 27062.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.969 ±(99.9%) 1157.602 MB/sec [Average]
[info]   (min, avg, max) = (670.973, 805.969, 1343.744), stdev = 300.626
[info]   CI (99.9%): [≈ 0, 1963.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27327.972 ±(99.9%) 39838.524 B/op [Average]
[info]   (min, avg, max) = (22657.197, 27327.972, 45835.290), stdev = 10345.938
[info]   CI (99.9%): [≈ 0, 67166.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.425 ±(99.9%) 2.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 1.420), stdev = 0.634
[info]   CI (99.9%): [≈ 0, 2.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.27% complete, ETA 00:45:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1435.383 ops/s
[info] # Warmup Iteration   2: 4132.746 ops/s
[info] # Warmup Iteration   3: 4417.056 ops/s
[info] # Warmup Iteration   4: 4600.256 ops/s
[info] # Warmup Iteration   5: 4599.742 ops/s
[info] Iteration   1: 4600.133 ops/s
[info]                  ·gc.alloc.rate:               1006.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          344269.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 228585.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 4582.086 ops/s
[info]                  ·gc.alloc.rate:                   1015.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              348785.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459195.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4599.948 ops/s
[info]                  ·gc.alloc.rate:               997.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          341398.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 228813.368 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 4604.572 ops/s
[info]                  ·gc.alloc.rate:               994.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          340046.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 228564.981 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4585.146 ops/s
[info]                  ·gc.alloc.rate:                   1017.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              349247.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459580.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4594.377 ±(99.9%) 38.717 ops/s [Average]
[info]   (min, avg, max) = (4582.086, 4594.377, 4604.572), stdev = 10.055
[info]   CI (99.9%): [4555.660, 4633.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1006.400 ±(99.9%) 39.104 MB/sec [Average]
[info]   (min, avg, max) = (994.919, 1006.400, 1017.491), stdev = 10.155
[info]   CI (99.9%): [967.296, 1045.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   344749.436 ±(99.9%) 16119.978 B/op [Average]
[info]   (min, avg, max) = (340046.305, 344749.436, 349247.958), stdev = 4186.307
[info]   CI (99.9%): [328629.458, 360869.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   936.314 ±(99.9%) 1411.913 MB/sec [Average]
[info]   (min, avg, max) = (668.119, 936.314, 1338.932), stdev = 366.669
[info]   CI (99.9%): [≈ 0, 2348.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   320947.991 ±(99.9%) 486636.812 B/op [Average]
[info]   (min, avg, max) = (228564.981, 320947.991, 459580.846), stdev = 126378.035
[info]   CI (99.9%): [≈ 0, 807584.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.718 ±(99.9%) 30.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.718, 14.300), stdev = 7.830
[info]   CI (99.9%): [≈ 0, 35.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.47% complete, ETA 00:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1154.338 ops/s
[info] # Warmup Iteration   2: 4339.829 ops/s
[info] # Warmup Iteration   3: 4859.587 ops/s
[info] # Warmup Iteration   4: 4972.212 ops/s
[info] # Warmup Iteration   5: 4986.176 ops/s
[info] Iteration   1: 5006.184 ops/s
[info]                  ·gc.alloc.rate:                   661.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              207929.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207956.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5000.501 ops/s
[info]                  ·gc.alloc.rate:               653.564 MB/sec
[info]                  ·gc.alloc.rate.norm:          205666.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 208163.928 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5038.541 ops/s
[info]                  ·gc.alloc.rate:               667.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          208471.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 207218.590 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5017.076 ops/s
[info]                  ·gc.alloc.rate:                   655.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              205561.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208127.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4977.349 ops/s
[info]                  ·gc.alloc.rate:                   656.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              207441.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210283.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5007.930 ±(99.9%) 86.406 ops/s [Average]
[info]   (min, avg, max) = (4977.349, 5007.930, 5038.541), stdev = 22.439
[info]   CI (99.9%): [4921.524, 5094.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   658.792 ±(99.9%) 21.974 MB/sec [Average]
[info]   (min, avg, max) = (653.564, 658.792, 667.518), stdev = 5.707
[info]   CI (99.9%): [636.818, 680.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   207014.199 ±(99.9%) 5119.863 B/op [Average]
[info]   (min, avg, max) = (205561.569, 207014.199, 208471.994), stdev = 1329.612
[info]   CI (99.9%): [201894.336, 212134.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.027 ±(99.9%) 5.838 MB/sec [Average]
[info]   (min, avg, max) = (661.500, 663.027, 665.109), stdev = 1.516
[info]   CI (99.9%): [657.189, 668.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   208349.895 ±(99.9%) 4415.352 B/op [Average]
[info]   (min, avg, max) = (207218.590, 208349.895, 210283.819), stdev = 1146.653
[info]   CI (99.9%): [203934.543, 212765.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.931 ±(99.9%) 13.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.931, 6.581), stdev = 3.589
[info]   CI (99.9%): [≈ 0, 17.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.67% complete, ETA 00:44:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4025.845 ops/s
[info] # Warmup Iteration   2: 6168.276 ops/s
[info] # Warmup Iteration   3: 6527.345 ops/s
[info] # Warmup Iteration   4: 6416.957 ops/s
[info] # Warmup Iteration   5: 6528.996 ops/s
[info] Iteration   1: 6510.490 ops/s
[info]                  ·gc.alloc.rate:               332.046 MB/sec
[info]                  ·gc.alloc.rate.norm:          80256.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123664.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6551.704 ops/s
[info]                  ·gc.alloc.rate:      320.156 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6529.569 ops/s
[info]                  ·gc.alloc.rate:               333.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          80384.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123305.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6571.449 ops/s
[info]                  ·gc.alloc.rate:      321.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6517.730 ops/s
[info]                  ·gc.alloc.rate:                   342.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              82731.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161869.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6536.188 ±(99.9%) 96.822 ops/s [Average]
[info]   (min, avg, max) = (6510.490, 6536.188, 6571.449), stdev = 25.144
[info]   CI (99.9%): [6439.367, 6633.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   329.923 ±(99.9%) 36.221 MB/sec [Average]
[info]   (min, avg, max) = (320.156, 329.923, 342.703), stdev = 9.407
[info]   CI (99.9%): [293.702, 366.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79436.102 ±(99.9%) 9675.226 B/op [Average]
[info]   (min, avg, max) = (76904.066, 79436.102, 82731.239), stdev = 2512.625
[info]   CI (99.9%): [69760.876, 89111.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.771 ±(99.9%) 1216.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.771, 670.525), stdev = 315.982
[info]   CI (99.9%): [≈ 0, 1555.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81768.020 ±(99.9%) 293692.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81768.020, 161869.899), stdev = 76270.937
[info]   CI (99.9%): [≈ 0, 375460.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.010 ±(99.9%) 17.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.010, 10.052), stdev = 4.495
[info]   CI (99.9%): [≈ 0, 19.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.87% complete, ETA 00:44:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4169.504 ops/s
[info] # Warmup Iteration   2: 6337.319 ops/s
[info] # Warmup Iteration   3: 6721.605 ops/s
[info] # Warmup Iteration   4: 6710.393 ops/s
[info] # Warmup Iteration   5: 6712.188 ops/s
[info] Iteration   1: 6729.892 ops/s
[info]                  ·gc.alloc.rate:      279.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 65384.087 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6659.667 ops/s
[info]                  ·gc.alloc.rate:               303.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          71790.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120898.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6755.175 ops/s
[info]                  ·gc.alloc.rate:      280.659 MB/sec
[info]                  ·gc.alloc.rate.norm: 65384.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6698.386 ops/s
[info]                  ·gc.alloc.rate:                   300.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              70615.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120194.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6732.544 ops/s
[info]                  ·gc.alloc.rate:      280.501 MB/sec
[info]                  ·gc.alloc.rate.norm: 65573.845 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6715.133 ±(99.9%) 142.542 ops/s [Average]
[info]   (min, avg, max) = (6659.667, 6715.133, 6755.175), stdev = 37.018
[info]   CI (99.9%): [6572.591, 6857.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   289.036 ±(99.9%) 46.524 MB/sec [Average]
[info]   (min, avg, max) = (279.607, 289.036, 303.799), stdev = 12.082
[info]   CI (99.9%): [242.512, 335.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   67749.614 ±(99.9%) 12247.712 B/op [Average]
[info]   (min, avg, max) = (65384.064, 67749.614, 71790.158), stdev = 3180.692
[info]   CI (99.9%): [55501.902, 79997.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.657 ±(99.9%) 1079.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.657, 511.671), stdev = 280.238
[info]   CI (99.9%): [≈ 0, 1283.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   48218.740 ±(99.9%) 254245.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48218.740, 120898.719), stdev = 66026.698
[info]   CI (99.9%): [≈ 0, 302464.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1.956 ±(99.9%) 16.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.956, 9.781), stdev = 4.374
[info]   CI (99.9%): [≈ 0, 18.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.07% complete, ETA 00:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1798.938 ops/s
[info] # Warmup Iteration   2: 6481.579 ops/s
[info] # Warmup Iteration   3: 7953.569 ops/s
[info] # Warmup Iteration   4: 8001.540 ops/s
[info] # Warmup Iteration   5: 8014.349 ops/s
[info] Iteration   1: 7996.882 ops/s
[info]                  ·gc.alloc.rate:                   1695.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              333718.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     395493.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 8027.597 ops/s
[info]                  ·gc.alloc.rate:                   1694.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              332182.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262894.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 601.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8075.360 ops/s
[info]                  ·gc.alloc.rate:                   1719.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              335123.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391414.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7910.945 ops/s
[info]                  ·gc.alloc.rate:                   1690.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              336248.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265821.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7842.912 ops/s
[info]                  ·gc.alloc.rate:                   1675.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              336188.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     401920.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7970.739 ±(99.9%) 359.044 ops/s [Average]
[info]   (min, avg, max) = (7842.912, 7970.739, 8075.360), stdev = 93.242
[info]   CI (99.9%): [7611.696, 8329.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1695.018 ±(99.9%) 61.117 MB/sec [Average]
[info]   (min, avg, max) = (1675.314, 1695.018, 1719.444), stdev = 15.872
[info]   CI (99.9%): [1633.901, 1756.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   334692.369 ±(99.9%) 6694.497 B/op [Average]
[info]   (min, avg, max) = (332182.946, 334692.369, 336248.312), stdev = 1738.540
[info]   CI (99.9%): [327997.873, 341386.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1739.582 ±(99.9%) 1409.531 MB/sec [Average]
[info]   (min, avg, max) = (1336.298, 1739.582, 2009.560), stdev = 366.051
[info]   CI (99.9%): [330.051, 3149.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   343509.054 ±(99.9%) 278628.786 B/op [Average]
[info]   (min, avg, max) = (262894.942, 343509.054, 401920.718), stdev = 72359.011
[info]   CI (99.9%): [64880.268, 622137.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 5.009 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.841, 3.068), stdev = 1.301
[info]   CI (99.9%): [≈ 0, 5.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   164.827 ±(99.9%) 981.824 B/op [Average]
[info]   (min, avg, max) = (4.177, 164.827, 601.532), stdev = 254.977
[info]   CI (99.9%): [≈ 0, 1146.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.033
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.27% complete, ETA 00:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.793 ops/s
[info] # Warmup Iteration   2: 16930.277 ops/s
[info] # Warmup Iteration   3: 18840.876 ops/s
[info] # Warmup Iteration   4: 19311.461 ops/s
[info] # Warmup Iteration   5: 19302.480 ops/s
[info] Iteration   1: 19418.460 ops/s
[info]                  ·gc.alloc.rate:      479.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19195.064 ops/s
[info]                  ·gc.alloc.rate:                   501.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              41099.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54509.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 19347.819 ops/s
[info]                  ·gc.alloc.rate:                   501.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              40790.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54078.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.181 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19303.834 ops/s
[info]                  ·gc.alloc.rate:               500.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          40801.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54229.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 19416.332 ops/s
[info]                  ·gc.alloc.rate:      479.281 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   19336.302 ±(99.9%) 356.522 ops/s [Average]
[info]   (min, avg, max) = (19195.064, 19336.302, 19418.460), stdev = 92.588
[info]   CI (99.9%): [18979.780, 19692.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   492.359 ±(99.9%) 46.117 MB/sec [Average]
[info]   (min, avg, max) = (479.213, 492.359, 501.472), stdev = 11.976
[info]   CI (99.9%): [446.242, 538.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   40071.123 ±(99.9%) 4381.624 B/op [Average]
[info]   (min, avg, max) = (38832.022, 40071.123, 41099.277), stdev = 1137.894
[info]   CI (99.9%): [35689.499, 44452.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   398.991 ±(99.9%) 1402.511 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.991, 665.149), stdev = 364.228
[info]   CI (99.9%): [≈ 0, 1801.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   32563.557 ±(99.9%) 114467.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32563.557, 54509.785), stdev = 29726.727
[info]   CI (99.9%): [≈ 0, 147030.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.578 ±(99.9%) 3.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.578, 1.707), stdev = 0.812
[info]   CI (99.9%): [≈ 0, 3.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.47% complete, ETA 00:43:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3445.728 ops/s
[info] # Warmup Iteration   2: 13679.165 ops/s
[info] # Warmup Iteration   3: 15812.402 ops/s
[info] # Warmup Iteration   4: 15872.328 ops/s
[info] # Warmup Iteration   5: 15830.644 ops/s
[info] Iteration   1: 15560.304 ops/s
[info]                  ·gc.alloc.rate:               422.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          42765.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51744.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15999.078 ops/s
[info]                  ·gc.alloc.rate:      425.291 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15783.420 ops/s
[info]                  ·gc.alloc.rate:               454.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          45281.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65893.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 15942.460 ops/s
[info]                  ·gc.alloc.rate:               442.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          43725.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65231.870 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 15920.680 ops/s
[info]                  ·gc.alloc.rate:      423.174 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15841.188 ±(99.9%) 677.258 ops/s [Average]
[info]   (min, avg, max) = (15560.304, 15841.188, 15999.078), stdev = 175.882
[info]   CI (99.9%): [15163.931, 16518.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   433.718 ±(99.9%) 54.506 MB/sec [Average]
[info]   (min, avg, max) = (422.992, 433.718, 454.192), stdev = 14.155
[info]   CI (99.9%): [379.212, 488.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43087.379 ±(99.9%) 5605.738 B/op [Average]
[info]   (min, avg, max) = (41832.027, 43087.379, 45281.568), stdev = 1455.792
[info]   CI (99.9%): [37481.641, 48693.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.707 ±(99.9%) 1310.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.707, 660.934), stdev = 340.242
[info]   CI (99.9%): [≈ 0, 1676.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   36573.966 ±(99.9%) 130387.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36573.966, 65893.031), stdev = 33861.302
[info]   CI (99.9%): [≈ 0, 166961.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67.67% complete, ETA 00:43:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13166.092 ops/s
[info] # Warmup Iteration   2: 22822.502 ops/s
[info] # Warmup Iteration   3: 23140.744 ops/s
[info] # Warmup Iteration   4: 22510.396 ops/s
[info] # Warmup Iteration   5: 23194.337 ops/s
[info] Iteration   1: 22912.463 ops/s
[info]                  ·gc.alloc.rate:               437.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          30038.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35141.664 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 22356.199 ops/s
[info]                  ·gc.alloc.rate:      417.253 MB/sec
[info]                  ·gc.alloc.rate.norm: 29371.329 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22815.625 ops/s
[info]                  ·gc.alloc.rate:               432.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          29823.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46273.545 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 23097.303 ops/s
[info]                  ·gc.alloc.rate:                   448.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              30559.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45708.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.255 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23366.606 ops/s
[info]                  ·gc.alloc.rate:      429.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 28933.592 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22909.639 ±(99.9%) 1439.722 ops/s [Average]
[info]   (min, avg, max) = (22356.199, 22909.639, 23366.606), stdev = 373.891
[info]   CI (99.9%): [21469.917, 24349.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   433.023 ±(99.9%) 43.784 MB/sec [Average]
[info]   (min, avg, max) = (417.253, 433.023, 448.480), stdev = 11.371
[info]   CI (99.9%): [389.239, 476.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29745.202 ±(99.9%) 2399.338 B/op [Average]
[info]   (min, avg, max) = (28933.592, 29745.202, 30559.019), stdev = 623.100
[info]   CI (99.9%): [27345.864, 32144.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.647 ±(99.9%) 1326.707 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.647, 670.835), stdev = 344.542
[info]   CI (99.9%): [≈ 0, 1697.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25424.776 ±(99.9%) 90987.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25424.776, 46273.545), stdev = 23629.240
[info]   CI (99.9%): [≈ 0, 116412.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.851 ±(99.9%) 7.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.851, 4.255), stdev = 1.903
[info]   CI (99.9%): [≈ 0, 8.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67.87% complete, ETA 00:42:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95.746 ops/s
[info] # Warmup Iteration   2: 2759.205 ops/s
[info] # Warmup Iteration   3: 3977.360 ops/s
[info] # Warmup Iteration   4: 4126.315 ops/s
[info] # Warmup Iteration   5: 4195.662 ops/s
[info] Iteration   1: 4210.356 ops/s
[info]                  ·gc.alloc.rate:                   2694.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1007366.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1000528.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 599.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 4224.785 ops/s
[info]                  ·gc.alloc.rate:                   2689.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              1001938.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     998951.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4227.601 ops/s
[info]                  ·gc.alloc.rate:                   2705.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              1007053.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1000225.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.742 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4109.260 ops/s
[info]                  ·gc.alloc.rate:                   2646.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1013459.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1031486.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.942 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4117.416 ops/s
[info]                  ·gc.alloc.rate:                   2624.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1002900.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     773767.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.955 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4177.883 ±(99.9%) 228.550 ops/s [Average]
[info]   (min, avg, max) = (4109.260, 4177.883, 4227.601), stdev = 59.354
[info]   CI (99.9%): [3949.334, 4406.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2672.102 ±(99.9%) 134.717 MB/sec [Average]
[info]   (min, avg, max) = (2624.243, 2672.102, 2705.232), stdev = 34.986
[info]   CI (99.9%): [2537.385, 2806.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1006543.742 ±(99.9%) 17566.046 B/op [Average]
[info]   (min, avg, max) = (1001938.455, 1006543.742, 1013459.390), stdev = 4561.846
[info]   CI (99.9%): [988977.697, 1024109.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2552.672 ±(99.9%) 1136.791 MB/sec [Average]
[info]   (min, avg, max) = (2024.680, 2552.672, 2693.282), stdev = 295.221
[info]   CI (99.9%): [1415.881, 3689.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   960991.877 ±(99.9%) 406448.122 B/op [Average]
[info]   (min, avg, max) = (773767.116, 960991.877, 1031486.583), stdev = 105553.287
[info]   CI (99.9%): [554543.755, 1367440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.395 ±(99.9%) 2.613 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.395, 1.603), stdev = 0.679
[info]   CI (99.9%): [≈ 0, 3.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   147.843 ±(99.9%) 976.779 B/op [Average]
[info]   (min, avg, max) = (7.955, 147.843, 599.035), stdev = 253.666
[info]   CI (99.9%): [≈ 0, 1124.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68.07% complete, ETA 00:42:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3311.814 ops/s
[info] # Warmup Iteration   2: 9233.593 ops/s
[info] # Warmup Iteration   3: 9457.687 ops/s
[info] # Warmup Iteration   4: 9472.077 ops/s
[info] # Warmup Iteration   5: 9555.075 ops/s
[info] Iteration   1: 9861.448 ops/s
[info]                  ·gc.alloc.rate:               1246.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          198887.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 214094.897 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 9891.379 ops/s
[info]                  ·gc.alloc.rate:               1230.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          195808.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106775.856 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9560.786 ops/s
[info]                  ·gc.alloc.rate:                   1215.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              200044.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220998.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.853 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9856.512 ops/s
[info]                  ·gc.alloc.rate:                   1238.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              197690.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214469.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9917.787 ops/s
[info]                  ·gc.alloc.rate:                   1245.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              197615.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212960.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   9817.583 ±(99.9%) 560.896 ops/s [Average]
[info]   (min, avg, max) = (9560.786, 9817.583, 9917.787), stdev = 145.663
[info]   CI (99.9%): [9256.686, 10378.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1235.178 ±(99.9%) 49.329 MB/sec [Average]
[info]   (min, avg, max) = (1215.275, 1235.178, 1246.359), stdev = 12.811
[info]   CI (99.9%): [1185.849, 1284.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   198009.150 ±(99.9%) 6092.697 B/op [Average]
[info]   (min, avg, max) = (195808.108, 198009.150, 200044.266), stdev = 1582.254
[info]   CI (99.9%): [191916.453, 204101.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1208.143 ±(99.9%) 1156.052 MB/sec [Average]
[info]   (min, avg, max) = (671.088, 1208.143, 1343.196), stdev = 300.223
[info]   CI (99.9%): [52.091, 2364.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   193859.770 ±(99.9%) 187846.273 B/op [Average]
[info]   (min, avg, max) = (106775.856, 193859.770, 220998.110), stdev = 48783.081
[info]   CI (99.9%): [6013.496, 381706.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.748 ±(99.9%) 5.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.748, 3.093), stdev = 1.336
[info]   CI (99.9%): [≈ 0, 5.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   119.306 ±(99.9%) 821.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 119.306, 493.876), stdev = 213.289
[info]   CI (99.9%): [≈ 0, 940.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.27% complete, ETA 00:42:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2751.950 ops/s
[info] # Warmup Iteration   2: 9251.855 ops/s
[info] # Warmup Iteration   3: 10222.563 ops/s
[info] # Warmup Iteration   4: 10151.235 ops/s
[info] # Warmup Iteration   5: 10208.094 ops/s
[info] Iteration   1: 10184.737 ops/s
[info]                  ·gc.alloc.rate:                   2200.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              339983.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     413944.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 10255.546 ops/s
[info]                  ·gc.alloc.rate:                   2187.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              335665.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307713.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10244.123 ops/s
[info]                  ·gc.alloc.rate:                   2185.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              335772.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307938.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10176.107 ops/s
[info]                  ·gc.alloc.rate:                   2185.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              338080.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310174.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10134.553 ops/s
[info]                  ·gc.alloc.rate:               2176.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          338046.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312214.125 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10199.013 ±(99.9%) 193.632 ops/s [Average]
[info]   (min, avg, max) = (10134.553, 10199.013, 10255.546), stdev = 50.286
[info]   CI (99.9%): [10005.382, 10392.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2187.121 ±(99.9%) 32.205 MB/sec [Average]
[info]   (min, avg, max) = (2176.764, 2187.121, 2200.105), stdev = 8.363
[info]   CI (99.9%): [2154.916, 2219.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   337509.728 ±(99.9%) 6982.546 B/op [Average]
[info]   (min, avg, max) = (335665.817, 337509.728, 339983.375), stdev = 1813.345
[info]   CI (99.9%): [330527.181, 344492.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2140.827 ±(99.9%) 1157.894 MB/sec [Average]
[info]   (min, avg, max) = (2004.345, 2140.827, 2678.721), stdev = 300.701
[info]   CI (99.9%): [982.933, 3298.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   330396.879 ±(99.9%) 179980.223 B/op [Average]
[info]   (min, avg, max) = (307713.148, 330396.879, 413944.084), stdev = 46740.292
[info]   CI (99.9%): [150416.656, 510377.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.776 ±(99.9%) 6.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.776, 3.673), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 7.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   119.909 ±(99.9%) 964.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 119.909, 567.548), stdev = 250.385
[info]   CI (99.9%): [≈ 0, 1084.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.47% complete, ETA 00:42:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.801 ops/s
[info] # Warmup Iteration   2: 52427.307 ops/s
[info] # Warmup Iteration   3: 59238.581 ops/s
[info] # Warmup Iteration   4: 59093.628 ops/s
[info] # Warmup Iteration   5: 59756.770 ops/s
[info] Iteration   1: 59712.509 ops/s
[info]                  ·gc.alloc.rate:               576.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          15205.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17504.944 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 59043.620 ops/s
[info]                  ·gc.alloc.rate:                   564.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              15046.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17702.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58639.394 ops/s
[info]                  ·gc.alloc.rate:                   570.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              15317.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17843.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.997 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 58586.253 ops/s
[info]                  ·gc.alloc.rate:               563.497 MB/sec
[info]                  ·gc.alloc.rate.norm:          15137.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17860.134 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 58834.501 ops/s
[info]                  ·gc.alloc.rate:      549.974 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   58963.256 ±(99.9%) 1755.566 ops/s [Average]
[info]   (min, avg, max) = (58586.253, 58963.256, 59712.509), stdev = 455.915
[info]   CI (99.9%): [57207.689, 60718.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   565.113 ±(99.9%) 38.659 MB/sec [Average]
[info]   (min, avg, max) = (549.974, 565.113, 576.929), stdev = 10.040
[info]   CI (99.9%): [526.454, 603.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15083.948 ±(99.9%) 887.013 B/op [Average]
[info]   (min, avg, max) = (14712.007, 15083.948, 15317.827), stdev = 230.354
[info]   CI (99.9%): [14196.935, 15970.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.587 ±(99.9%) 1144.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.587, 664.832), stdev = 297.166
[info]   CI (99.9%): [≈ 0, 1675.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14182.344 ±(99.9%) 30533.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14182.344, 17860.134), stdev = 7929.452
[info]   CI (99.9%): [≈ 0, 44715.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.223 ±(99.9%) 1.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.223, 0.997), stdev = 0.436
[info]   CI (99.9%): [≈ 0, 1.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.67% complete, ETA 00:41:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16038.847 ops/s
[info] # Warmup Iteration   2: 44056.767 ops/s
[info] # Warmup Iteration   3: 45525.557 ops/s
[info] # Warmup Iteration   4: 46187.224 ops/s
[info] # Warmup Iteration   5: 46261.704 ops/s
[info] Iteration   1: 46346.666 ops/s
[info]                  ·gc.alloc.rate:                   687.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              23335.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22462.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 46204.156 ops/s
[info]                  ·gc.alloc.rate:               677.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          23055.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22600.283 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 46388.649 ops/s
[info]                  ·gc.alloc.rate:                   690.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              23407.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22510.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46502.636 ops/s
[info]                  ·gc.alloc.rate:               682.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          23105.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22511.355 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 46198.991 ops/s
[info]                  ·gc.alloc.rate:               681.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          23210.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22658.972 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   46328.220 ±(99.9%) 496.513 ops/s [Average]
[info]   (min, avg, max) = (46198.991, 46328.220, 46502.636), stdev = 128.943
[info]   CI (99.9%): [45831.707, 46824.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   683.703 ±(99.9%) 19.561 MB/sec [Average]
[info]   (min, avg, max) = (677.014, 683.703, 690.057), stdev = 5.080
[info]   CI (99.9%): [664.141, 703.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23222.781 ±(99.9%) 573.785 B/op [Average]
[info]   (min, avg, max) = (23055.032, 23222.781, 23407.136), stdev = 149.010
[info]   CI (99.9%): [22648.997, 23796.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.851 ±(99.9%) 5.995 MB/sec [Average]
[info]   (min, avg, max) = (661.472, 663.851, 665.267), stdev = 1.557
[info]   CI (99.9%): [657.856, 669.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22548.695 ±(99.9%) 305.006 B/op [Average]
[info]   (min, avg, max) = (22462.699, 22548.695, 22658.972), stdev = 79.209
[info]   CI (99.9%): [22243.689, 22853.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 2.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.424, 1.414), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68.88% complete, ETA 00:41:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41857.394 ops/s
[info] # Warmup Iteration   2: 83828.358 ops/s
[info] # Warmup Iteration   3: 88633.250 ops/s
[info] # Warmup Iteration   4: 89525.631 ops/s
[info] # Warmup Iteration   5: 89114.905 ops/s
[info] Iteration   1: 85123.795 ops/s
[info]                  ·gc.alloc.rate:               658.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          12169.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12402.406 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 85017.848 ops/s
[info]                  ·gc.alloc.rate:               665.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          12318.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12430.344 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 85274.988 ops/s
[info]                  ·gc.alloc.rate:      641.201 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 86901.282 ops/s
[info]                  ·gc.alloc.rate:                   675.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              12231.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12160.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 87687.240 ops/s
[info]                  ·gc.alloc.rate:               677.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          12152.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12051.636 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   86001.031 ±(99.9%) 4683.356 ops/s [Average]
[info]   (min, avg, max) = (85017.848, 86001.031, 87687.240), stdev = 1216.253
[info]   CI (99.9%): [81317.675, 90684.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   663.512 ±(99.9%) 56.446 MB/sec [Average]
[info]   (min, avg, max) = (641.201, 663.512, 677.163), stdev = 14.659
[info]   CI (99.9%): [607.065, 719.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12140.738 ±(99.9%) 710.312 B/op [Average]
[info]   (min, avg, max) = (11832.005, 12140.738, 12318.557), stdev = 184.466
[info]   CI (99.9%): [11430.427, 12851.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.094 ±(99.9%) 1156.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.094, 671.564), stdev = 300.245
[info]   CI (99.9%): [≈ 0, 1693.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9808.973 ±(99.9%) 21123.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9808.973, 12430.344), stdev = 5485.721
[info]   CI (99.9%): [≈ 0, 30932.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.377), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.08% complete, ETA 00:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48090.911 ops/s
[info] # Warmup Iteration   2: 102357.707 ops/s
[info] # Warmup Iteration   3: 103666.728 ops/s
[info] # Warmup Iteration   4: 105443.983 ops/s
[info] # Warmup Iteration   5: 105404.144 ops/s
[info] Iteration   1: 105520.998 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 105409.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 105195.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105048.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 105119.219 ops/s
[info]                  ·gc.alloc.rate:      0.040 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.604 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   105258.753 ±(99.9%) 768.530 ops/s [Average]
[info]   (min, avg, max) = (105048.133, 105258.753, 105520.998), stdev = 199.585
[info]   CI (99.9%): [104490.223, 106027.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.008 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.124 ±(99.9%) 1.034 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.124, 0.604), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.28% complete, ETA 00:41:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 787.446 ops/s
[info] # Warmup Iteration   2: 6429.009 ops/s
[info] # Warmup Iteration   3: 7588.290 ops/s
[info] # Warmup Iteration   4: 7609.293 ops/s
[info] # Warmup Iteration   5: 7629.028 ops/s
[info] Iteration   1: 7559.862 ops/s
[info]                  ·gc.alloc.rate:                   2378.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              495099.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     417641.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.682 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7595.384 ops/s
[info]                  ·gc.alloc.rate:                   2427.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              503024.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     555964.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7620.456 ops/s
[info]                  ·gc.alloc.rate:                   2410.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              497801.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416637.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7635.525 ops/s
[info]                  ·gc.alloc.rate:               2456.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          506203.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 555592.875 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 7630.193 ops/s
[info]                  ·gc.alloc.rate:                   2427.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              500734.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     417946.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7608.284 ±(99.9%) 119.949 ops/s [Average]
[info]   (min, avg, max) = (7559.862, 7608.284, 7635.525), stdev = 31.150
[info]   CI (99.9%): [7488.335, 7728.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2420.117 ±(99.9%) 109.031 MB/sec [Average]
[info]   (min, avg, max) = (2378.798, 2420.117, 2456.066), stdev = 28.315
[info]   CI (99.9%): [2311.085, 2529.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   500572.640 ±(99.9%) 16716.752 B/op [Average]
[info]   (min, avg, max) = (495099.300, 500572.640, 506203.720), stdev = 4341.287
[info]   CI (99.9%): [483855.888, 517289.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2285.833 ±(99.9%) 1418.970 MB/sec [Average]
[info]   (min, avg, max) = (2006.637, 2285.833, 2695.699), stdev = 368.502
[info]   CI (99.9%): [866.863, 3704.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   472756.653 ±(99.9%) 291840.967 B/op [Average]
[info]   (min, avg, max) = (416637.682, 472756.653, 555964.740), stdev = 75790.172
[info]   CI (99.9%): [180915.685, 764597.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.171 ±(99.9%) 1.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.666), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.494 ±(99.9%) 226.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.494, 138.682), stdev = 58.912
[info]   CI (99.9%): [≈ 0, 262.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69.48% complete, ETA 00:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2282.788 ops/s
[info] # Warmup Iteration   2: 4498.546 ops/s
[info] # Warmup Iteration   3: 4502.110 ops/s
[info] # Warmup Iteration   4: 4582.530 ops/s
[info] # Warmup Iteration   5: 4586.228 ops/s
[info] Iteration   1: 4574.811 ops/s
[info]                  ·gc.alloc.rate:                   485.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              167089.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175984.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4583.853 ops/s
[info]                  ·gc.alloc.rate:               490.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          168427.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229840.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 4598.278 ops/s
[info]                  ·gc.alloc.rate:      471.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 161176.094 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4586.549 ops/s
[info]                  ·gc.alloc.rate:                   486.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              166736.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229690.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.454 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4589.175 ops/s
[info]                  ·gc.alloc.rate:               496.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          170269.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229818.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   4586.533 ±(99.9%) 32.759 ops/s [Average]
[info]   (min, avg, max) = (4574.811, 4586.533, 4598.278), stdev = 8.507
[info]   CI (99.9%): [4553.775, 4619.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   485.992 ±(99.9%) 36.420 MB/sec [Average]
[info]   (min, avg, max) = (471.014, 485.992, 496.580), stdev = 9.458
[info]   CI (99.9%): [449.572, 522.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   166739.853 ±(99.9%) 13112.761 B/op [Average]
[info]   (min, avg, max) = (161176.094, 166739.853, 170269.603), stdev = 3405.342
[info]   CI (99.9%): [153627.092, 179852.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   504.177 ±(99.9%) 1116.895 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.177, 670.251), stdev = 290.054
[info]   CI (99.9%): [≈ 0, 1621.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   173066.839 ±(99.9%) 383186.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 173066.839, 229840.541), stdev = 99512.403
[info]   CI (99.9%): [≈ 0, 556253.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5.496 ±(99.9%) 39.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.496, 23.454), stdev = 10.189
[info]   CI (99.9%): [≈ 0, 44.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.68% complete, ETA 00:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 744347.678 ops/s
[info] # Warmup Iteration   2: 7764769.396 ops/s
[info] # Warmup Iteration   3: 8402443.081 ops/s
[info] # Warmup Iteration   4: 8523627.446 ops/s
[info] # Warmup Iteration   5: 8474655.473 ops/s
[info] Iteration   1: 8535129.914 ops/s
[info]                  ·gc.alloc.rate:                   4698.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              866.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4709.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8531228.368 ops/s
[info]                  ·gc.alloc.rate:                   4671.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4052.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8487145.507 ops/s
[info]                  ·gc.alloc.rate:               4673.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          866.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4743.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 879.658 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 8507746.761 ops/s
[info]                  ·gc.alloc.rate:                   4689.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              867.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     879.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 8459414.561 ops/s
[info]                  ·gc.alloc.rate:                   4634.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4081.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   8504133.022 ±(99.9%) 121712.340 ops/s [Average]
[info]   (min, avg, max) = (8459414.561, 8504133.022, 8535129.914), stdev = 31608.308
[info]   CI (99.9%): [8382420.682, 8625845.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4673.529 ±(99.9%) 94.705 MB/sec [Average]
[info]   (min, avg, max) = (4634.207, 4673.529, 4698.008), stdev = 24.595
[info]   CI (99.9%): [4578.824, 4768.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   864.817 ±(99.9%) 10.204 B/op [Average]
[info]   (min, avg, max) = (861.859, 864.817, 867.234), stdev = 2.650
[info]   CI (99.9%): [854.613, 875.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4468.714 ±(99.9%) 1413.553 MB/sec [Average]
[info]   (min, avg, max) = (4052.800, 4468.714, 4756.225), stdev = 367.095
[info]   CI (99.9%): [3055.162, 5882.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   826.882 ±(99.9%) 259.221 B/op [Average]
[info]   (min, avg, max) = (747.671, 826.882, 879.658), stdev = 67.319
[info]   CI (99.9%): [567.661, 1086.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 10.000), stdev = 1.414
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69.88% complete, ETA 00:40:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.687 ops/s
[info] # Warmup Iteration   2: 33788965.990 ops/s
[info] # Warmup Iteration   3: 38353802.178 ops/s
[info] # Warmup Iteration   4: 35792383.778 ops/s
[info] # Warmup Iteration   5: 38166300.239 ops/s
[info] Iteration   1: 38167032.583 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38143230.970 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38164521.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38169281.150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37986595.418 ops/s
[info]                  ·gc.alloc.rate:      0.325 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38126132.422 ±(99.9%) 303024.702 ops/s [Average]
[info]   (min, avg, max) = (37986595.418, 38126132.422, 38169281.150), stdev = 78694.553
[info]   CI (99.9%): [37823107.720, 38429157.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.065 ±(99.9%) 0.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.065, 0.325), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.08% complete, ETA 00:40:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603038.300 ops/s
[info] # Warmup Iteration   2: 9775225.797 ops/s
[info] # Warmup Iteration   3: 10315974.022 ops/s
[info] # Warmup Iteration   4: 9950059.502 ops/s
[info] # Warmup Iteration   5: 10203621.760 ops/s
[info] Iteration   1: 10198488.190 ops/s
[info]                  ·gc.alloc.rate:                   3513.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              542.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4011.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     619.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 10225412.059 ops/s
[info]                  ·gc.alloc.rate:                   3512.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              540.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10235376.878 ops/s
[info]                  ·gc.alloc.rate:               3516.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          540.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3366.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517.568 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 10119353.075 ops/s
[info]                  ·gc.alloc.rate:                   3476.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              540.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     525.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 10255469.332 ops/s
[info]                  ·gc.alloc.rate:               3523.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          540.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3386.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 519.698 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10206819.907 ±(99.9%) 204191.259 ops/s [Average]
[info]   (min, avg, max) = (10119353.075, 10206819.907, 10255469.332), stdev = 53027.822
[info]   CI (99.9%): [10002628.648, 10411011.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3508.486 ±(99.9%) 69.913 MB/sec [Average]
[info]   (min, avg, max) = (3476.876, 3508.486, 3523.239), stdev = 18.156
[info]   CI (99.9%): [3438.573, 3578.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   540.951 ±(99.9%) 2.948 B/op [Average]
[info]   (min, avg, max) = (540.469, 540.951, 542.299), stdev = 0.766
[info]   CI (99.9%): [538.003, 543.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3499.579 ±(99.9%) 1102.900 MB/sec [Average]
[info]   (min, avg, max) = (3355.540, 3499.579, 4011.527), stdev = 286.420
[info]   CI (99.9%): [2396.678, 4602.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   539.608 ±(99.9%) 171.606 B/op [Average]
[info]   (min, avg, max) = (516.345, 539.608, 619.090), stdev = 44.566
[info]   CI (99.9%): [368.002, 711.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.28% complete, ETA 00:39:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17662787.756 ops/s
[info] # Warmup Iteration   2: 47199035.926 ops/s
[info] # Warmup Iteration   3: 48962380.732 ops/s
[info] # Warmup Iteration   4: 48841927.117 ops/s
[info] # Warmup Iteration   5: 48937177.747 ops/s
[info] Iteration   1: 48958659.190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48659057.602 ops/s
[info]                  ·gc.alloc.rate:      9.894 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.320 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48946830.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48960075.354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48800616.681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48865047.788 ±(99.9%) 513252.726 ops/s [Average]
[info]   (min, avg, max) = (48659057.602, 48865047.788, 48960075.354), stdev = 133290.103
[info]   CI (99.9%): [48351795.062, 49378300.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1.979 ±(99.9%) 17.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.979, 9.894), stdev = 4.425
[info]   CI (99.9%): [≈ 0, 19.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.064 ±(99.9%) 0.551 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.064, 0.320), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.48% complete, ETA 00:39:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5403788.518 ops/s
[info] # Warmup Iteration   2: 30352068.361 ops/s
[info] # Warmup Iteration   3: 30726283.777 ops/s
[info] # Warmup Iteration   4: 31588067.626 ops/s
[info] # Warmup Iteration   5: 31762598.428 ops/s
[info] Iteration   1: 31623808.233 ops/s
[info]                  ·gc.alloc.rate:               828.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.420 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 30816113.507 ops/s
[info]                  ·gc.alloc.rate:               809.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 30111774.904 ops/s
[info]                  ·gc.alloc.rate:                   799.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 31681146.073 ops/s
[info]                  ·gc.alloc.rate:                   819.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 31503458.105 ops/s
[info]                  ·gc.alloc.rate:               815.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.629 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31147260.164 ±(99.9%) 2598041.352 ops/s [Average]
[info]   (min, avg, max) = (30111774.904, 31147260.164, 31681146.073), stdev = 674703.089
[info]   CI (99.9%): [28549218.813, 33745301.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   814.597 ±(99.9%) 41.848 MB/sec [Average]
[info]   (min, avg, max) = (799.353, 814.597, 828.463), stdev = 10.868
[info]   CI (99.9%): [772.749, 856.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.160 ±(99.9%) 1.729 B/op [Average]
[info]   (min, avg, max) = (40.708, 41.160, 41.779), stdev = 0.449
[info]   CI (99.9%): [39.432, 42.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.900 ±(99.9%) 1157.475 MB/sec [Average]
[info]   (min, avg, max) = (671.507, 806.900, 1344.615), stdev = 300.593
[info]   CI (99.9%): [≈ 0, 1964.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   41.012 ±(99.9%) 63.013 B/op [Average]
[info]   (min, avg, max) = (33.407, 41.012, 70.278), stdev = 16.364
[info]   CI (99.9%): [≈ 0, 104.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70.68% complete, ETA 00:39:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 960620.004 ops/s
[info] # Warmup Iteration   2: 8297205.060 ops/s
[info] # Warmup Iteration   3: 9033494.516 ops/s
[info] # Warmup Iteration   4: 9183850.442 ops/s
[info] # Warmup Iteration   5: 9209662.328 ops/s
[info] Iteration   1: 9200018.662 ops/s
[info]                  ·gc.alloc.rate:               3870.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          662.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3348.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 572.865 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 9124062.889 ops/s
[info]                  ·gc.alloc.rate:                   3869.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              667.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4033.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     695.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 9229425.276 ops/s
[info]                  ·gc.alloc.rate:               3887.117 MB/sec
[info]                  ·gc.alloc.rate.norm:          662.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3374.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 575.393 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 9250574.786 ops/s
[info]                  ·gc.alloc.rate:                   3923.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              667.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4060.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 9281093.222 ops/s
[info]                  ·gc.alloc.rate:                   3909.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              662.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9217034.967 ±(99.9%) 230357.843 ops/s [Average]
[info]   (min, avg, max) = (9124062.889, 9217034.967, 9281093.222), stdev = 59823.200
[info]   CI (99.9%): [8986677.124, 9447392.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3892.079 ±(99.9%) 91.432 MB/sec [Average]
[info]   (min, avg, max) = (3869.630, 3892.079, 3923.346), stdev = 23.745
[info]   CI (99.9%): [3800.646, 3983.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   664.602 ±(99.9%) 10.256 B/op [Average]
[info]   (min, avg, max) = (662.204, 664.602, 667.512), stdev = 2.663
[info]   CI (99.9%): [654.346, 674.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3641.795 ±(99.9%) 1426.689 MB/sec [Average]
[info]   (min, avg, max) = (3348.665, 3641.795, 4060.837), stdev = 370.506
[info]   CI (99.9%): [2215.107, 5068.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   622.017 ±(99.9%) 250.806 B/op [Average]
[info]   (min, avg, max) = (572.865, 622.017, 695.764), stdev = 65.133
[info]   CI (99.9%): [371.211, 872.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.140
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70.88% complete, ETA 00:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3552773.204 ops/s
[info] # Warmup Iteration   2: 9679904.660 ops/s
[info] # Warmup Iteration   3: 11600246.782 ops/s
[info] # Warmup Iteration   4: 11446706.063 ops/s
[info] # Warmup Iteration   5: 11448463.481 ops/s
[info] Iteration   1: 11539258.603 ops/s
[info]                  ·gc.alloc.rate:                   4979.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              678.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5404.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 11540849.599 ops/s
[info]                  ·gc.alloc.rate:                   4940.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4743.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 11708331.822 ops/s
[info]                  ·gc.alloc.rate:                   5011.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4754.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     638.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 11680611.609 ops/s
[info]                  ·gc.alloc.rate:                   5001.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4759.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     641.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 11653265.068 ops/s
[info]                  ·gc.alloc.rate:                   4986.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4763.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     643.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   11624463.340 ±(99.9%) 306042.598 ops/s [Average]
[info]   (min, avg, max) = (11539258.603, 11624463.340, 11708331.822), stdev = 79478.291
[info]   CI (99.9%): [11318420.742, 11930505.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4983.788 ±(99.9%) 104.931 MB/sec [Average]
[info]   (min, avg, max) = (4940.669, 4983.788, 5011.655), stdev = 27.250
[info]   CI (99.9%): [4878.857, 5088.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   674.624 ±(99.9%) 8.988 B/op [Average]
[info]   (min, avg, max) = (673.427, 674.624, 678.791), stdev = 2.334
[info]   CI (99.9%): [665.637, 683.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   4884.967 ±(99.9%) 1118.266 MB/sec [Average]
[info]   (min, avg, max) = (4743.579, 4884.967, 5404.305), stdev = 290.410
[info]   CI (99.9%): [3766.701, 6003.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   661.386 ±(99.9%) 162.625 B/op [Average]
[info]   (min, avg, max) = (638.920, 661.386, 736.756), stdev = 42.233
[info]   CI (99.9%): [498.761, 824.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.407 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.291), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.015, 0.040), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.000, 12.000), stdev = 1.225
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.08% complete, ETA 00:38:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2403937.389 ops/s
[info] # Warmup Iteration   2: 13174363.208 ops/s
[info] # Warmup Iteration   3: 13885225.794 ops/s
[info] # Warmup Iteration   4: 13802538.111 ops/s
[info] # Warmup Iteration   5: 13862525.256 ops/s
[info] Iteration   1: 13188264.423 ops/s
[info]                  ·gc.alloc.rate:                   1618.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              193.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 13740811.145 ops/s
[info]                  ·gc.alloc.rate:                   1645.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13768785.867 ops/s
[info]                  ·gc.alloc.rate:                   1662.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              190.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13728552.145 ops/s
[info]                  ·gc.alloc.rate:                   1670.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              191.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13791237.361 ops/s
[info]                  ·gc.alloc.rate:                   1652.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   13643530.188 ±(99.9%) 984488.549 ops/s [Average]
[info]   (min, avg, max) = (13188264.423, 13643530.188, 13791237.361), stdev = 255668.550
[info]   CI (99.9%): [12659041.640, 14628018.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1649.752 ±(99.9%) 77.731 MB/sec [Average]
[info]   (min, avg, max) = (1618.056, 1649.752, 1670.878), stdev = 20.186
[info]   CI (99.9%): [1572.021, 1727.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   190.333 ±(99.9%) 7.669 B/op [Average]
[info]   (min, avg, max) = (188.465, 190.333, 193.092), stdev = 1.992
[info]   CI (99.9%): [182.664, 198.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1610.214 ±(99.9%) 1412.792 MB/sec [Average]
[info]   (min, avg, max) = (1340.266, 1610.214, 2013.107), stdev = 366.898
[info]   CI (99.9%): [197.422, 3023.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   186.231 ±(99.9%) 173.336 B/op [Average]
[info]   (min, avg, max) = (152.953, 186.231, 240.236), stdev = 45.015
[info]   CI (99.9%): [12.895, 359.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 4.896 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.666, 2.935), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 5.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.076 ±(99.9%) 0.561 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.076, 0.336), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.29% complete, ETA 00:38:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.658 ops/s
[info] # Warmup Iteration   2: 37824032.495 ops/s
[info] # Warmup Iteration   3: 39825975.400 ops/s
[info] # Warmup Iteration   4: 41444666.060 ops/s
[info] # Warmup Iteration   5: 42497211.715 ops/s
[info] Iteration   1: 41974266.778 ops/s
[info]                  ·gc.alloc.rate:               869.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.979 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 42387865.418 ops/s
[info]                  ·gc.alloc.rate:                   899.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42669872.919 ops/s
[info]                  ·gc.alloc.rate:               885.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.595 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 42533831.295 ops/s
[info]                  ·gc.alloc.rate:                   880.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42465296.067 ops/s
[info]                  ·gc.alloc.rate:               888.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.738 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42406226.495 ±(99.9%) 1011862.410 ops/s [Average]
[info]   (min, avg, max) = (41974266.778, 42406226.495, 42669872.919), stdev = 262777.455
[info]   CI (99.9%): [41394364.085, 43418088.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   884.698 ±(99.9%) 41.484 MB/sec [Average]
[info]   (min, avg, max) = (869.799, 884.698, 899.320), stdev = 10.773
[info]   CI (99.9%): [843.214, 926.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.832 ±(99.9%) 1.303 B/op [Average]
[info]   (min, avg, max) = (32.588, 32.832, 33.387), stdev = 0.338
[info]   CI (99.9%): [31.529, 34.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.267 ±(99.9%) 1147.153 MB/sec [Average]
[info]   (min, avg, max) = (666.219, 800.267, 1333.187), stdev = 297.912
[info]   CI (99.9%): [≈ 0, 1947.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   29.701 ±(99.9%) 42.609 B/op [Average]
[info]   (min, avg, max) = (24.595, 29.701, 49.494), stdev = 11.065
[info]   CI (99.9%): [≈ 0, 72.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.49% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1575201.891 ops/s
[info] # Warmup Iteration   2: 12189457.349 ops/s
[info] # Warmup Iteration   3: 13105056.846 ops/s
[info] # Warmup Iteration   4: 13041862.516 ops/s
[info] # Warmup Iteration   5: 13127524.315 ops/s
[info] Iteration   1: 13214641.380 ops/s
[info]                  ·gc.alloc.rate:                   2721.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13217888.235 ops/s
[info]                  ·gc.alloc.rate:                   2712.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13228276.228 ops/s
[info]                  ·gc.alloc.rate:                   2728.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 13107974.318 ops/s
[info]                  ·gc.alloc.rate:                   2706.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13227774.841 ops/s
[info]                  ·gc.alloc.rate:               2718.266 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320.116 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13199311.000 ±(99.9%) 197959.227 ops/s [Average]
[info]   (min, avg, max) = (13107974.318, 13199311.000, 13228276.228), stdev = 51409.383
[info]   CI (99.9%): [13001351.774, 13397270.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2717.545 ±(99.9%) 32.935 MB/sec [Average]
[info]   (min, avg, max) = (2706.087, 2717.545, 2728.538), stdev = 8.553
[info]   CI (99.9%): [2684.610, 2750.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   323.957 ±(99.9%) 3.121 B/op [Average]
[info]   (min, avg, max) = (323.005, 323.957, 324.779), stdev = 0.810
[info]   CI (99.9%): [320.836, 327.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2682.467 ±(99.9%) 29.145 MB/sec [Average]
[info]   (min, avg, max) = (2674.871, 2682.467, 2692.273), stdev = 7.569
[info]   CI (99.9%): [2653.322, 2711.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   319.779 ±(99.9%) 6.658 B/op [Average]
[info]   (min, avg, max) = (318.472, 319.779, 322.661), stdev = 1.729
[info]   CI (99.9%): [313.121, 326.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71.69% complete, ETA 00:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16491492.235 ops/s
[info] # Warmup Iteration   2: 47046887.701 ops/s
[info] # Warmup Iteration   3: 48833655.720 ops/s
[info] # Warmup Iteration   4: 49052047.327 ops/s
[info] # Warmup Iteration   5: 47783742.757 ops/s
[info] Iteration   1: 46778563.099 ops/s
[info]                  ·gc.alloc.rate:               1003.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45.185 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 47243574.167 ops/s
[info]                  ·gc.alloc.rate:               977.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22.382 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 47169351.669 ops/s
[info]                  ·gc.alloc.rate:                   990.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 49210549.357 ops/s
[info]                  ·gc.alloc.rate:               1027.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.496 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 48867856.330 ops/s
[info]                  ·gc.alloc.rate:               1021.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.337 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   47853978.925 ±(99.9%) 4247095.462 ops/s [Average]
[info]   (min, avg, max) = (46778563.099, 47853978.925, 49210549.357), stdev = 1102957.204
[info]   CI (99.9%): [43606883.463, 52101074.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1003.854 ±(99.9%) 80.939 MB/sec [Average]
[info]   (min, avg, max) = (977.145, 1003.854, 1027.339), stdev = 21.020
[info]   CI (99.9%): [922.915, 1084.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   33.017 ±(99.9%) 1.721 B/op [Average]
[info]   (min, avg, max) = (32.551, 33.017, 33.752), stdev = 0.447
[info]   CI (99.9%): [31.295, 34.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.383 ±(99.9%) 1417.776 MB/sec [Average]
[info]   (min, avg, max) = (671.866, 1075.383, 1345.708), stdev = 368.192
[info]   CI (99.9%): [≈ 0, 2493.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   35.449 ±(99.9%) 47.580 B/op [Average]
[info]   (min, avg, max) = (21.496, 35.449, 45.185), stdev = 12.356
[info]   CI (99.9%): [≈ 0, 83.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 2.049
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71.89% complete, ETA 00:37:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24574065.011 ops/s
[info] # Warmup Iteration   2: 60802838.664 ops/s
[info] # Warmup Iteration   3: 62581480.897 ops/s
[info] # Warmup Iteration   4: 62592699.281 ops/s
[info] # Warmup Iteration   5: 62254805.051 ops/s
[info] Iteration   1: 62560076.689 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62545105.162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 62549568.087 ops/s
[info]                  ·gc.alloc.rate:      0.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 62600457.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 62525243.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   62556090.207 ±(99.9%) 107180.632 ops/s [Average]
[info]   (min, avg, max) = (62525243.867, 62556090.207, 62600457.231), stdev = 27834.470
[info]   CI (99.9%): [62448909.576, 62663270.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.101 ±(99.9%) 0.865 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.101, 0.502), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 0.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.09% complete, ETA 00:37:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4556426.190 ops/s
[info] # Warmup Iteration   2: 17102593.488 ops/s
[info] # Warmup Iteration   3: 17821775.484 ops/s
[info] # Warmup Iteration   4: 17903779.427 ops/s
[info] # Warmup Iteration   5: 17882373.880 ops/s
[info] Iteration   1: 17954510.528 ops/s
[info]                  ·gc.alloc.rate:               1682.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          147.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.432 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17933967.581 ops/s
[info]                  ·gc.alloc.rate:                   1706.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              149.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17496976.387 ops/s
[info]                  ·gc.alloc.rate:               1652.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          148.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120.982 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17899629.961 ops/s
[info]                  ·gc.alloc.rate:                   1687.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17864213.863 ops/s
[info]                  ·gc.alloc.rate:               1716.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          151.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.352 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17829859.664 ±(99.9%) 728666.778 ops/s [Average]
[info]   (min, avg, max) = (17496976.387, 17829859.664, 17954510.528), stdev = 189232.448
[info]   CI (99.9%): [17101192.886, 18558526.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1689.140 ±(99.9%) 94.679 MB/sec [Average]
[info]   (min, avg, max) = (1652.530, 1689.140, 1716.000), stdev = 24.588
[info]   CI (99.9%): [1594.461, 1783.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   149.090 ±(99.9%) 5.441 B/op [Average]
[info]   (min, avg, max) = (147.506, 149.090, 151.185), stdev = 1.413
[info]   CI (99.9%): [143.649, 154.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1614.183 ±(99.9%) 1424.355 MB/sec [Average]
[info]   (min, avg, max) = (1339.676, 1614.183, 2024.361), stdev = 369.900
[info]   CI (99.9%): [189.828, 3038.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   142.391 ±(99.9%) 123.621 B/op [Average]
[info]   (min, avg, max) = (117.432, 142.391, 178.352), stdev = 32.104
[info]   CI (99.9%): [18.770, 266.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.29% complete, ETA 00:37:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 385406.665 ops/s
[info] # Warmup Iteration   2: 2642372.276 ops/s
[info] # Warmup Iteration   3: 2737868.021 ops/s
[info] # Warmup Iteration   4: 2760404.077 ops/s
[info] # Warmup Iteration   5: 2701781.142 ops/s
[info] Iteration   1: 2752918.194 ops/s
[info]                  ·gc.alloc.rate:                   2234.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              1275.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1531.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2769079.869 ops/s
[info]                  ·gc.alloc.rate:                   2217.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              1259.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1141.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2774603.013 ops/s
[info]                  ·gc.alloc.rate:                   2224.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1138.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2776945.654 ops/s
[info]                  ·gc.alloc.rate:                   2238.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1139.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2776348.007 ops/s
[info]                  ·gc.alloc.rate:               2239.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          1269.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1141.407 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2769978.947 ±(99.9%) 38619.846 ops/s [Average]
[info]   (min, avg, max) = (2752918.194, 2769978.947, 2776945.654), stdev = 10029.451
[info]   CI (99.9%): [2731359.102, 2808598.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2230.738 ±(99.9%) 37.737 MB/sec [Average]
[info]   (min, avg, max) = (2217.102, 2230.738, 2239.521), stdev = 9.800
[info]   CI (99.9%): [2193.001, 2268.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1267.136 ±(99.9%) 25.067 B/op [Average]
[info]   (min, avg, max) = (1259.915, 1267.136, 1275.903), stdev = 6.510
[info]   CI (99.9%): [1242.069, 1292.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2144.631 ±(99.9%) 1157.105 MB/sec [Average]
[info]   (min, avg, max) = (2008.057, 2144.631, 2682.164), stdev = 300.497
[info]   CI (99.9%): [987.526, 3301.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1218.639 ±(99.9%) 674.155 B/op [Average]
[info]   (min, avg, max) = (1138.940, 1218.639, 1531.815), stdev = 175.076
[info]   CI (99.9%): [544.484, 1892.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.730 ±(99.9%) 6.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.730, 3.588), stdev = 1.598
[info]   CI (99.9%): [≈ 0, 6.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.417 ±(99.9%) 3.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.417, 2.049), stdev = 0.913
[info]   CI (99.9%): [≈ 0, 3.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72.49% complete, ETA 00:36:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2991758.845 ops/s
[info] # Warmup Iteration   2: 10945878.016 ops/s
[info] # Warmup Iteration   3: 11656330.817 ops/s
[info] # Warmup Iteration   4: 11585794.704 ops/s
[info] # Warmup Iteration   5: 11632989.550 ops/s
[info] Iteration   1: 11685705.613 ops/s
[info]                  ·gc.alloc.rate:                   2262.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11422527.102 ops/s
[info]                  ·gc.alloc.rate:                   2226.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     277.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11532561.879 ops/s
[info]                  ·gc.alloc.rate:                   2273.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              310.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 11609513.641 ops/s
[info]                  ·gc.alloc.rate:               2263.984 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 273.458 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 11557166.651 ops/s
[info]                  ·gc.alloc.rate:                   2253.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   11561494.977 ±(99.9%) 374830.090 ops/s [Average]
[info]   (min, avg, max) = (11422527.102, 11561494.977, 11685705.613), stdev = 97342.184
[info]   CI (99.9%): [11186664.887, 11936325.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2255.980 ±(99.9%) 69.330 MB/sec [Average]
[info]   (min, avg, max) = (2226.415, 2255.980, 2273.450), stdev = 18.005
[info]   CI (99.9%): [2186.650, 2325.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   307.080 ±(99.9%) 7.738 B/op [Average]
[info]   (min, avg, max) = (304.641, 307.080, 310.245), stdev = 2.010
[info]   CI (99.9%): [299.342, 314.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2151.646 ±(99.9%) 1150.479 MB/sec [Average]
[info]   (min, avg, max) = (2015.292, 2151.646, 2686.101), stdev = 298.776
[info]   CI (99.9%): [1001.167, 3302.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   292.934 ±(99.9%) 158.689 B/op [Average]
[info]   (min, avg, max) = (271.936, 292.934, 366.557), stdev = 41.211
[info]   CI (99.9%): [134.245, 451.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.040), stdev = 1.346
[info]   CI (99.9%): [≈ 0, 5.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.409), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 0.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.69% complete, ETA 00:36:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59459.306 ops/s
[info] # Warmup Iteration   2: 160281.211 ops/s
[info] # Warmup Iteration   3: 162454.319 ops/s
[info] # Warmup Iteration   4: 169879.020 ops/s
[info] # Warmup Iteration   5: 171246.431 ops/s
[info] Iteration   1: 171359.404 ops/s
[info]                  ·gc.alloc.rate:                   3249.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              29847.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30811.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 171937.768 ops/s
[info]                  ·gc.alloc.rate:                   3260.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              29847.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24604.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 171511.034 ops/s
[info]                  ·gc.alloc.rate:                   3280.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              30106.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30912.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 171108.966 ops/s
[info]                  ·gc.alloc.rate:               3273.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          30104.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31073.661 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 171400.773 ops/s
[info]                  ·gc.alloc.rate:               3251.927 MB/sec
[info]                  ·gc.alloc.rate.norm:          29862.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24870.558 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   171463.589 ±(99.9%) 1167.410 ops/s [Average]
[info]   (min, avg, max) = (171108.966, 171463.589, 171937.768), stdev = 303.173
[info]   CI (99.9%): [170296.180, 172630.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3263.304 ±(99.9%) 51.740 MB/sec [Average]
[info]   (min, avg, max) = (3249.886, 3263.304, 3280.959), stdev = 13.437
[info]   CI (99.9%): [3211.564, 3315.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29953.677 ±(99.9%) 535.249 B/op [Average]
[info]   (min, avg, max) = (29847.254, 29953.677, 30106.731), stdev = 139.002
[info]   CI (99.9%): [29418.428, 30488.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3099.662 ±(99.9%) 1411.999 MB/sec [Average]
[info]   (min, avg, max) = (2687.952, 3099.662, 3378.347), stdev = 366.692
[info]   CI (99.9%): [1687.663, 4511.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28454.552 ±(99.9%) 13076.189 B/op [Average]
[info]   (min, avg, max) = (24604.297, 28454.552, 31073.661), stdev = 3395.845
[info]   CI (99.9%): [15378.363, 41530.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.191 ±(99.9%) 0.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.382), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72.89% complete, ETA 00:36:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 804.706 ops/s
[info] # Warmup Iteration   2: 25084.736 ops/s
[info] # Warmup Iteration   3: 32956.511 ops/s
[info] # Warmup Iteration   4: 33489.296 ops/s
[info] # Warmup Iteration   5: 33275.939 ops/s
[info] Iteration   1: 34005.681 ops/s
[info]                  ·gc.alloc.rate:                   2558.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              118432.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124119.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 33553.598 ops/s
[info]                  ·gc.alloc.rate:                   2512.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              117853.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126139.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.953 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34168.021 ops/s
[info]                  ·gc.alloc.rate:               2558.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          117821.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93142.318 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 33837.955 ops/s
[info]                  ·gc.alloc.rate:               2574.573 MB/sec
[info]                  ·gc.alloc.rate.norm:          119744.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125646.328 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 33600.264 ops/s
[info]                  ·gc.alloc.rate:               2558.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          119804.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126801.347 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   33833.104 ±(99.9%) 1008.386 ops/s [Average]
[info]   (min, avg, max) = (33553.598, 33833.104, 34168.021), stdev = 261.875
[info]   CI (99.9%): [32824.718, 34841.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2552.566 ±(99.9%) 89.785 MB/sec [Average]
[info]   (min, avg, max) = (2512.761, 2552.566, 2574.573), stdev = 23.317
[info]   CI (99.9%): [2462.781, 2642.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118731.152 ±(99.9%) 3785.634 B/op [Average]
[info]   (min, avg, max) = (117821.136, 118731.152, 119804.184), stdev = 983.117
[info]   CI (99.9%): [114945.518, 122516.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2560.580 ±(99.9%) 1159.559 MB/sec [Average]
[info]   (min, avg, max) = (2022.205, 2560.580, 2708.012), stdev = 301.134
[info]   CI (99.9%): [1401.021, 3720.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   119169.800 ±(99.9%) 56155.088 B/op [Average]
[info]   (min, avg, max) = (93142.318, 119169.800, 126801.347), stdev = 14583.298
[info]   CI (99.9%): [63014.712, 175324.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.952 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.562), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.593 ±(99.9%) 44.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.593, 26.012), stdev = 11.446
[info]   CI (99.9%): [≈ 0, 49.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.09% complete, ETA 00:35:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46937.908 ops/s
[info] # Warmup Iteration   2: 135228.055 ops/s
[info] # Warmup Iteration   3: 143892.314 ops/s
[info] # Warmup Iteration   4: 145002.192 ops/s
[info] # Warmup Iteration   5: 141821.080 ops/s
[info] Iteration   1: 144207.275 ops/s
[info]                  ·gc.alloc.rate:               1250.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          13647.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14577.289 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 144731.456 ops/s
[info]                  ·gc.alloc.rate:                   1248.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              13574.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14531.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 145625.341 ops/s
[info]                  ·gc.alloc.rate:                   1254.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              13555.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14456.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 145467.692 ops/s
[info]                  ·gc.alloc.rate:                   1251.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              13542.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7243.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.964 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 146109.877 ops/s
[info]                  ·gc.alloc.rate:                   1269.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              13672.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14401.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.606 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   145228.328 ±(99.9%) 2908.112 ops/s [Average]
[info]   (min, avg, max) = (144207.275, 145228.328, 146109.877), stdev = 755.227
[info]   CI (99.9%): [142320.216, 148136.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1254.797 ±(99.9%) 32.301 MB/sec [Average]
[info]   (min, avg, max) = (1248.322, 1254.797, 1269.309), stdev = 8.388
[info]   CI (99.9%): [1222.496, 1287.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13598.458 ±(99.9%) 223.731 B/op [Average]
[info]   (min, avg, max) = (13542.532, 13598.458, 13672.945), stdev = 58.102
[info]   CI (99.9%): [13374.727, 13822.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.192 ±(99.9%) 1148.894 MB/sec [Average]
[info]   (min, avg, max) = (669.463, 1203.192, 1337.597), stdev = 298.364
[info]   CI (99.9%): [54.298, 2352.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13041.853 ±(99.9%) 12484.675 B/op [Average]
[info]   (min, avg, max) = (7243.239, 13041.853, 14577.289), stdev = 3242.230
[info]   CI (99.9%): [557.178, 25526.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.601), stdev = 1.561
[info]   CI (99.9%): [≈ 0, 6.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.049 ±(99.9%) 65.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.049, 38.964), stdev = 16.885
[info]   CI (99.9%): [≈ 0, 74.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.29% complete, ETA 00:35:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189334.492 ops/s
[info] # Warmup Iteration   2: 411475.041 ops/s
[info] # Warmup Iteration   3: 433644.318 ops/s
[info] # Warmup Iteration   4: 422768.792 ops/s
[info] # Warmup Iteration   5: 443320.035 ops/s
[info] Iteration   1: 444544.919 ops/s
[info]                  ·gc.alloc.rate:                   1779.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              6299.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7144.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 446888.708 ops/s
[info]                  ·gc.alloc.rate:                   1787.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              6295.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4741.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 445028.877 ops/s
[info]                  ·gc.alloc.rate:                   1794.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              6346.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7126.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 443929.348 ops/s
[info]                  ·gc.alloc.rate:               1764.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          6254.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4756.336 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 433341.086 ops/s
[info]                  ·gc.alloc.rate:               1762.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          6400.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7311.635 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   442746.588 ±(99.9%) 20688.243 ops/s [Average]
[info]   (min, avg, max) = (433341.086, 442746.588, 446888.708), stdev = 5372.671
[info]   CI (99.9%): [422058.344, 463434.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1777.691 ±(99.9%) 54.798 MB/sec [Average]
[info]   (min, avg, max) = (1762.677, 1777.691, 1794.842), stdev = 14.231
[info]   CI (99.9%): [1722.894, 1832.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6319.100 ±(99.9%) 216.088 B/op [Average]
[info]   (min, avg, max) = (6254.095, 6319.100, 6400.518), stdev = 56.117
[info]   CI (99.9%): [6103.012, 6535.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.002 ±(99.9%) 1416.460 MB/sec [Average]
[info]   (min, avg, max) = (1341.576, 1747.002, 2018.045), stdev = 367.850
[info]   CI (99.9%): [330.542, 3163.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6216.099 ±(99.9%) 5165.127 B/op [Average]
[info]   (min, avg, max) = (4741.354, 6216.099, 7311.635), stdev = 1341.367
[info]   CI (99.9%): [1050.972, 11381.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 2.977), stdev = 1.312
[info]   CI (99.9%): [≈ 0, 5.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.229 ±(99.9%) 17.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.229, 10.484), stdev = 4.619
[info]   CI (99.9%): [≈ 0, 20.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.49% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231144.477 ops/s
[info] # Warmup Iteration   2: 470954.359 ops/s
[info] # Warmup Iteration   3: 478324.528 ops/s
[info] # Warmup Iteration   4: 482538.807 ops/s
[info] # Warmup Iteration   5: 470975.986 ops/s
[info] Iteration   1: 481909.064 ops/s
[info]                  ·gc.alloc.rate:                   1386.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              4528.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4389.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 483534.625 ops/s
[info]                  ·gc.alloc.rate:                   1389.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              4524.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4377.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 481971.734 ops/s
[info]                  ·gc.alloc.rate:                   1372.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              4481.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4395.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 482650.031 ops/s
[info]                  ·gc.alloc.rate:                   1386.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              4522.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4386.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 479248.801 ops/s
[info]                  ·gc.alloc.rate:               1391.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          4568.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4412.519 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   481862.851 ±(99.9%) 6167.563 ops/s [Average]
[info]   (min, avg, max) = (479248.801, 481862.851, 483534.625), stdev = 1601.697
[info]   CI (99.9%): [475695.288, 488030.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1385.412 ±(99.9%) 29.150 MB/sec [Average]
[info]   (min, avg, max) = (1372.314, 1385.412, 1391.151), stdev = 7.570
[info]   CI (99.9%): [1356.263, 1414.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4525.154 ±(99.9%) 119.111 B/op [Average]
[info]   (min, avg, max) = (4481.515, 4525.154, 4568.786), stdev = 30.933
[info]   CI (99.9%): [4406.043, 4644.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1344.731 ±(99.9%) 3.652 MB/sec [Average]
[info]   (min, avg, max) = (1343.569, 1344.731, 1345.897), stdev = 0.948
[info]   CI (99.9%): [1341.079, 1348.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4392.264 ±(99.9%) 50.028 B/op [Average]
[info]   (min, avg, max) = (4377.550, 4392.264, 4412.519), stdev = 12.992
[info]   CI (99.9%): [4342.235, 4442.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 4.344 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.602), stdev = 1.128
[info]   CI (99.9%): [≈ 0, 4.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1.971 ±(99.9%) 14.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.971, 8.497), stdev = 3.684
[info]   CI (99.9%): [≈ 0, 16.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.69% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9060.348 ops/s
[info] # Warmup Iteration   2: 50746.727 ops/s
[info] # Warmup Iteration   3: 62690.034 ops/s
[info] # Warmup Iteration   4: 64863.121 ops/s
[info] # Warmup Iteration   5: 64886.268 ops/s
[info] Iteration   1: 64842.586 ops/s
[info]                  ·gc.alloc.rate:                   1532.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              37187.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32386.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 62860.044 ops/s
[info]                  ·gc.alloc.rate:                   1507.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              37725.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50228.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 63422.146 ops/s
[info]                  ·gc.alloc.rate:                   1503.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              37303.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33277.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 64053.646 ops/s
[info]                  ·gc.alloc.rate:                   1532.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              37632.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33011.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 63343.347 ops/s
[info]                  ·gc.alloc.rate:               1514.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          37641.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33415.540 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   63704.354 ±(99.9%) 2945.430 ops/s [Average]
[info]   (min, avg, max) = (62860.044, 63704.354, 64842.586), stdev = 764.919
[info]   CI (99.9%): [60758.923, 66649.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1517.975 ±(99.9%) 52.333 MB/sec [Average]
[info]   (min, avg, max) = (1503.310, 1517.975, 1532.260), stdev = 13.591
[info]   CI (99.9%): [1465.642, 1570.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37497.761 ±(99.9%) 912.317 B/op [Average]
[info]   (min, avg, max) = (37187.156, 37497.761, 37725.010), stdev = 236.926
[info]   CI (99.9%): [36585.444, 38410.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.244 ±(99.9%) 1146.623 MB/sec [Average]
[info]   (min, avg, max) = (1334.454, 1474.244, 2006.869), stdev = 297.774
[info]   CI (99.9%): [327.622, 2620.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36463.886 ±(99.9%) 29667.390 B/op [Average]
[info]   (min, avg, max) = (32386.513, 36463.886, 50228.040), stdev = 7704.527
[info]   CI (99.9%): [6796.496, 66131.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.666), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.124 ±(99.9%) 26.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.124, 16.531), stdev = 7.001
[info]   CI (99.9%): [≈ 0, 31.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.90% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64862.877 ops/s
[info] # Warmup Iteration   2: 284067.023 ops/s
[info] # Warmup Iteration   3: 300443.864 ops/s
[info] # Warmup Iteration   4: 317279.914 ops/s
[info] # Warmup Iteration   5: 318818.228 ops/s
[info] Iteration   1: 318817.105 ops/s
[info]                  ·gc.alloc.rate:                   2383.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              11766.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13262.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 319628.634 ops/s
[info]                  ·gc.alloc.rate:                   2373.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              11683.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9895.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 320020.313 ops/s
[info]                  ·gc.alloc.rate:               2377.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          11693.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9880.945 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 318390.135 ops/s
[info]                  ·gc.alloc.rate:                   2404.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13260.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 318429.670 ops/s
[info]                  ·gc.alloc.rate:               2380.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          11766.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9966.307 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   319057.171 ±(99.9%) 2823.430 ops/s [Average]
[info]   (min, avg, max) = (318390.135, 319057.171, 320020.313), stdev = 733.236
[info]   CI (99.9%): [316233.742, 321880.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2383.984 ±(99.9%) 47.464 MB/sec [Average]
[info]   (min, avg, max) = (2373.014, 2383.984, 2404.918), stdev = 12.326
[info]   CI (99.9%): [2336.520, 2431.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11759.607 ±(99.9%) 315.229 B/op [Average]
[info]   (min, avg, max) = (11683.049, 11759.607, 11888.028), stdev = 81.864
[info]   CI (99.9%): [11444.378, 12074.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2280.935 ±(99.9%) 1418.844 MB/sec [Average]
[info]   (min, avg, max) = (2009.239, 2280.935, 2686.528), stdev = 368.469
[info]   CI (99.9%): [862.090, 3699.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11253.171 ±(99.9%) 7060.551 B/op [Average]
[info]   (min, avg, max) = (9880.945, 11253.171, 13262.333), stdev = 1833.603
[info]   CI (99.9%): [4192.620, 18313.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 5.905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.476), stdev = 1.533
[info]   CI (99.9%): [≈ 0, 6.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.637 ±(99.9%) 29.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.637, 17.162), stdev = 7.570
[info]   CI (99.9%): [≈ 0, 32.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.10% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105245.109 ops/s
[info] # Warmup Iteration   2: 456907.910 ops/s
[info] # Warmup Iteration   3: 475967.440 ops/s
[info] # Warmup Iteration   4: 485955.118 ops/s
[info] # Warmup Iteration   5: 484771.603 ops/s
[info] Iteration   1: 484863.435 ops/s
[info]                  ·gc.alloc.rate:                   1288.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              4182.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4333.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 484759.016 ops/s
[info]                  ·gc.alloc.rate:                   1281.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              4161.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4338.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 484744.917 ops/s
[info]                  ·gc.alloc.rate:               1280.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          4154.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4342.968 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 473020.693 ops/s
[info]                  ·gc.alloc.rate:                   1235.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              4109.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2226.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.645 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 481460.506 ops/s
[info]                  ·gc.alloc.rate:                   1281.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              4190.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4369.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   481769.713 ±(99.9%) 19634.494 ops/s [Average]
[info]   (min, avg, max) = (473020.693, 481769.713, 484863.435), stdev = 5099.016
[info]   CI (99.9%): [462135.219, 501404.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1273.560 ±(99.9%) 82.224 MB/sec [Average]
[info]   (min, avg, max) = (1235.794, 1273.560, 1288.401), stdev = 21.353
[info]   CI (99.9%): [1191.336, 1355.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4159.765 ±(99.9%) 121.421 B/op [Average]
[info]   (min, avg, max) = (4109.830, 4159.765, 4190.554), stdev = 31.533
[info]   CI (99.9%): [4038.344, 4281.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.042 ±(99.9%) 1148.616 MB/sec [Average]
[info]   (min, avg, max) = (669.444, 1203.042, 1337.958), stdev = 298.292
[info]   CI (99.9%): [54.426, 2351.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3922.100 ±(99.9%) 3650.630 B/op [Average]
[info]   (min, avg, max) = (2226.344, 3922.100, 4369.212), stdev = 948.057
[info]   CI (99.9%): [271.470, 7572.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 6.932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.103), stdev = 1.800
[info]   CI (99.9%): [≈ 0, 7.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.946 ±(99.9%) 23.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.946, 13.645), stdev = 5.989
[info]   CI (99.9%): [≈ 0, 26.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.30% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704983.063 ops/s
[info] # Warmup Iteration   2: 1281101.453 ops/s
[info] # Warmup Iteration   3: 1310529.257 ops/s
[info] # Warmup Iteration   4: 1299880.212 ops/s
[info] # Warmup Iteration   5: 1323150.985 ops/s
[info] Iteration   1: 1313381.178 ops/s
[info]                  ·gc.alloc.rate:                   2655.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              3181.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3219.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1322808.253 ops/s
[info]                  ·gc.alloc.rate:                   2688.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              3198.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3196.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1328654.330 ops/s
[info]                  ·gc.alloc.rate:                   2700.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              3198.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3187.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1302780.926 ops/s
[info]                  ·gc.alloc.rate:                   2649.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              3200.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3258.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1329989.673 ops/s
[info]                  ·gc.alloc.rate:                   2678.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              3168.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2398.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1319522.872 ±(99.9%) 43977.672 ops/s [Average]
[info]   (min, avg, max) = (1302780.926, 1319522.872, 1329989.673), stdev = 11420.862
[info]   CI (99.9%): [1275545.200, 1363500.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2674.425 ±(99.9%) 83.345 MB/sec [Average]
[info]   (min, avg, max) = (2649.756, 2674.425, 2700.584), stdev = 21.645
[info]   CI (99.9%): [2591.079, 2757.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3189.567 ±(99.9%) 53.512 B/op [Average]
[info]   (min, avg, max) = (3168.767, 3189.567, 3200.237), stdev = 13.897
[info]   CI (99.9%): [3136.056, 3243.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2557.922 ±(99.9%) 1141.942 MB/sec [Average]
[info]   (min, avg, max) = (2027.485, 2557.922, 2697.723), stdev = 296.559
[info]   CI (99.9%): [1415.980, 3699.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3052.074 ±(99.9%) 1410.753 B/op [Average]
[info]   (min, avg, max) = (2398.505, 3052.074, 3258.169), stdev = 366.368
[info]   CI (99.9%): [1641.321, 4462.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.494 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.312), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.100 ±(99.9%) 0.592 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.100, 0.374), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.50% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12460.192 ops/s
[info] # Warmup Iteration   2: 88422.860 ops/s
[info] # Warmup Iteration   3: 98213.263 ops/s
[info] # Warmup Iteration   4: 103903.997 ops/s
[info] # Warmup Iteration   5: 102982.241 ops/s
[info] Iteration   1: 104707.461 ops/s
[info]                  ·gc.alloc.rate:                   3485.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              52391.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50172.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.877 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 102651.323 ops/s
[info]                  ·gc.alloc.rate:                   3447.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              52848.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51301.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 105518.910 ops/s
[info]                  ·gc.alloc.rate:               3542.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          52817.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50111.272 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 105465.782 ops/s
[info]                  ·gc.alloc.rate:               3539.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          52813.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50316.816 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 104405.359 ops/s
[info]                  ·gc.alloc.rate:               3505.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          52845.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3382.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50991.342 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   104549.767 ±(99.9%) 4485.683 ops/s [Average]
[info]   (min, avg, max) = (102651.323, 104549.767, 105518.910), stdev = 1164.918
[info]   CI (99.9%): [100064.084, 109035.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3504.091 ±(99.9%) 152.362 MB/sec [Average]
[info]   (min, avg, max) = (3447.455, 3504.091, 3542.575), stdev = 39.568
[info]   CI (99.9%): [3351.729, 3656.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52743.343 ±(99.9%) 759.691 B/op [Average]
[info]   (min, avg, max) = (52391.559, 52743.343, 52848.620), stdev = 197.289
[info]   CI (99.9%): [51983.652, 53503.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3360.012 ±(99.9%) 70.084 MB/sec [Average]
[info]   (min, avg, max) = (3337.914, 3360.012, 3382.707), stdev = 18.200
[info]   CI (99.9%): [3289.928, 3430.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50578.639 ±(99.9%) 2060.680 B/op [Average]
[info]   (min, avg, max) = (50111.272, 50578.639, 51301.755), stdev = 535.152
[info]   CI (99.9%): [48517.959, 52639.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.439 ±(99.9%) 3.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.439, 1.877), stdev = 0.816
[info]   CI (99.9%): [≈ 0, 3.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74.70% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203302.256 ops/s
[info] # Warmup Iteration   2: 579862.478 ops/s
[info] # Warmup Iteration   3: 590558.929 ops/s
[info] # Warmup Iteration   4: 595351.864 ops/s
[info] # Warmup Iteration   5: 599109.107 ops/s
[info] Iteration   1: 601960.752 ops/s
[info]                  ·gc.alloc.rate:                   2714.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              7095.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7018.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 602544.571 ops/s
[info]                  ·gc.alloc.rate:                   2732.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              7133.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7010.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 602551.422 ops/s
[info]                  ·gc.alloc.rate:               2732.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          7135.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7022.301 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 603845.346 ops/s
[info]                  ·gc.alloc.rate:               2710.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          7064.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5265.937 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 604039.240 ops/s
[info]                  ·gc.alloc.rate:               2738.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          7135.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7032.891 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   602988.266 ±(99.9%) 3488.296 ops/s [Average]
[info]   (min, avg, max) = (601960.752, 602988.266, 604039.240), stdev = 905.899
[info]   CI (99.9%): [599499.970, 606476.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2725.620 ±(99.9%) 47.786 MB/sec [Average]
[info]   (min, avg, max) = (2710.570, 2725.620, 2738.938), stdev = 12.410
[info]   CI (99.9%): [2677.834, 2773.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7112.825 ±(99.9%) 122.415 B/op [Average]
[info]   (min, avg, max) = (7064.746, 7112.825, 7135.270), stdev = 31.791
[info]   CI (99.9%): [6990.410, 7235.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2555.795 ±(99.9%) 1152.687 MB/sec [Average]
[info]   (min, avg, max) = (2020.411, 2555.795, 2699.639), stdev = 299.349
[info]   CI (99.9%): [1403.108, 3708.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6670.076 ±(99.9%) 3022.674 B/op [Average]
[info]   (min, avg, max) = (5265.937, 6670.076, 7032.891), stdev = 784.979
[info]   CI (99.9%): [3647.401, 9692.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.208), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.120 ±(99.9%) 0.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.544), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.90% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96179.836 ops/s
[info] # Warmup Iteration   2: 319203.618 ops/s
[info] # Warmup Iteration   3: 336781.772 ops/s
[info] # Warmup Iteration   4: 342903.621 ops/s
[info] # Warmup Iteration   5: 337877.169 ops/s
[info] Iteration   1: 343489.301 ops/s
[info]                  ·gc.alloc.rate:               1182.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          5419.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6144.107 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 338758.793 ops/s
[info]                  ·gc.alloc.rate:                   1167.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              5424.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6234.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 337352.252 ops/s
[info]                  ·gc.alloc.rate:               1145.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          5345.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3131.242 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 336246.788 ops/s
[info]                  ·gc.alloc.rate:                   1168.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              5470.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6286.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 345741.897 ops/s
[info]                  ·gc.alloc.rate:                   1199.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              5460.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6116.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   340317.806 ±(99.9%) 15792.026 ops/s [Average]
[info]   (min, avg, max) = (336246.788, 340317.806, 345741.897), stdev = 4101.139
[info]   CI (99.9%): [324525.780, 356109.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1172.880 ±(99.9%) 76.709 MB/sec [Average]
[info]   (min, avg, max) = (1145.801, 1172.880, 1199.513), stdev = 19.921
[info]   CI (99.9%): [1096.171, 1249.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5423.913 ±(99.9%) 189.551 B/op [Average]
[info]   (min, avg, max) = (5345.415, 5423.913, 5470.534), stdev = 49.226
[info]   CI (99.9%): [5234.362, 5613.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.167 ±(99.9%) 1155.893 MB/sec [Average]
[info]   (min, avg, max) = (671.188, 1208.167, 1343.572), stdev = 300.182
[info]   CI (99.9%): [52.274, 2364.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5582.492 ±(99.9%) 5283.059 B/op [Average]
[info]   (min, avg, max) = (3131.242, 5582.492, 6286.161), stdev = 1371.994
[info]   CI (99.9%): [299.433, 10865.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.372), stdev = 1.497
[info]   CI (99.9%): [≈ 0, 6.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.167 ±(99.9%) 26.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.167, 15.351), stdev = 6.812
[info]   CI (99.9%): [≈ 0, 29.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.10% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215505.521 ops/s
[info] # Warmup Iteration   2: 756396.866 ops/s
[info] # Warmup Iteration   3: 821952.462 ops/s
[info] # Warmup Iteration   4: 840366.750 ops/s
[info] # Warmup Iteration   5: 830974.969 ops/s
[info] Iteration   1: 838884.083 ops/s
[info]                  ·gc.alloc.rate:               627.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          1177.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1250.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 821380.719 ops/s
[info]                  ·gc.alloc.rate:               616.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          1181.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1277.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 828516.452 ops/s
[info]                  ·gc.alloc.rate:                   621.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              1180.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1267.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 831293.048 ops/s
[info]                  ·gc.alloc.rate:      613.297 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.989 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 833304.334 ops/s
[info]                  ·gc.alloc.rate:               605.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          1143.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1260.029 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   830675.727 ±(99.9%) 24785.663 ops/s [Average]
[info]   (min, avg, max) = (821380.719, 830675.727, 838884.083), stdev = 6436.758
[info]   CI (99.9%): [805890.064, 855461.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   616.991 ±(99.9%) 32.750 MB/sec [Average]
[info]   (min, avg, max) = (605.369, 616.991, 627.865), stdev = 8.505
[info]   CI (99.9%): [584.241, 649.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168.881 ±(99.9%) 63.867 B/op [Average]
[info]   (min, avg, max) = (1143.266, 1168.881, 1181.428), stdev = 16.586
[info]   CI (99.9%): [1105.014, 1232.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.524 ±(99.9%) 1148.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.524, 667.196), stdev = 298.249
[info]   CI (99.9%): [≈ 0, 1681.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1010.972 ±(99.9%) 2176.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1010.972, 1277.093), stdev = 565.235
[info]   CI (99.9%): [≈ 0, 3187.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.30% complete, ETA 00:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1160806.986 ops/s
[info] # Warmup Iteration   2: 1968203.174 ops/s
[info] # Warmup Iteration   3: 2079492.132 ops/s
[info] # Warmup Iteration   4: 2125290.746 ops/s
[info] # Warmup Iteration   5: 2125662.709 ops/s
[info] Iteration   1: 2035811.347 ops/s
[info]                  ·gc.alloc.rate:               972.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 519.136 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2073174.364 ops/s
[info]                  ·gc.alloc.rate:                   1003.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              761.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1020.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2097572.466 ops/s
[info]                  ·gc.alloc.rate:                   986.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              740.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     504.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2113417.368 ops/s
[info]                  ·gc.alloc.rate:               1004.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 500.783 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2129243.160 ops/s
[info]                  ·gc.alloc.rate:               1013.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 994.593 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2089843.741 ±(99.9%) 141024.163 ops/s [Average]
[info]   (min, avg, max) = (2035811.347, 2089843.741, 2129243.160), stdev = 36623.527
[info]   CI (99.9%): [1948819.578, 2230867.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   995.855 ±(99.9%) 63.104 MB/sec [Average]
[info]   (min, avg, max) = (972.091, 995.855, 1013.068), stdev = 16.388
[info]   CI (99.9%): [932.751, 1058.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.964 ±(99.9%) 29.826 B/op [Average]
[info]   (min, avg, max) = (740.059, 749.964, 761.543), stdev = 7.746
[info]   CI (99.9%): [720.138, 779.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.215 ±(99.9%) 1418.405 MB/sec [Average]
[info]   (min, avg, max) = (671.520, 941.215, 1345.707), stdev = 368.355
[info]   CI (99.9%): [≈ 0, 2359.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   707.834 ±(99.9%) 1053.678 B/op [Average]
[info]   (min, avg, max) = (500.783, 707.834, 1020.071), stdev = 273.637
[info]   CI (99.9%): [≈ 0, 1761.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75.50% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1225768.231 ops/s
[info] # Warmup Iteration   2: 2219901.857 ops/s
[info] # Warmup Iteration   3: 2357485.978 ops/s
[info] # Warmup Iteration   4: 2351295.930 ops/s
[info] # Warmup Iteration   5: 2348970.965 ops/s
[info] Iteration   1: 2351641.243 ops/s
[info]                  ·gc.alloc.rate:      0.083 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2292019.187 ops/s
[info]                  ·gc.alloc.rate:      17.713 MB/sec
[info]                  ·gc.alloc.rate.norm: 12.160 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2349180.344 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2328719.705 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2349598.929 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2334231.882 ±(99.9%) 97699.120 ops/s [Average]
[info]   (min, avg, max) = (2292019.187, 2334231.882, 2351641.243), stdev = 25372.151
[info]   CI (99.9%): [2236532.761, 2431931.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.560 ±(99.9%) 30.468 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.560, 17.713), stdev = 7.912
[info]   CI (99.9%): [≈ 0, 34.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.443 ±(99.9%) 20.916 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.443, 12.160), stdev = 5.432
[info]   CI (99.9%): [≈ 0, 23.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.70% complete, ETA 00:32:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116697.169 ops/s
[info] # Warmup Iteration   2: 478442.111 ops/s
[info] # Warmup Iteration   3: 471372.526 ops/s
[info] # Warmup Iteration   4: 476784.220 ops/s
[info] # Warmup Iteration   5: 485430.140 ops/s
[info] Iteration   1: 486005.508 ops/s
[info]                  ·gc.alloc.rate:               719.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          2327.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2163.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 475496.757 ops/s
[info]                  ·gc.alloc.rate:               711.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          2355.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2213.832 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 475110.257 ops/s
[info]                  ·gc.alloc.rate:                   704.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              2332.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2215.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 469707.481 ops/s
[info]                  ·gc.alloc.rate:               693.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          2323.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2242.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 463305.241 ops/s
[info]                  ·gc.alloc.rate:                   685.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2273.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   473925.049 ±(99.9%) 32238.691 ops/s [Average]
[info]   (min, avg, max) = (463305.241, 473925.049, 486005.508), stdev = 8372.286
[info]   CI (99.9%): [441686.358, 506163.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   702.861 ±(99.9%) 51.891 MB/sec [Average]
[info]   (min, avg, max) = (685.769, 702.861, 719.141), stdev = 13.476
[info]   CI (99.9%): [650.970, 754.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2333.661 ±(99.9%) 48.610 B/op [Average]
[info]   (min, avg, max) = (2323.386, 2333.661, 2355.450), stdev = 12.624
[info]   CI (99.9%): [2285.050, 2382.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.963 ±(99.9%) 1.267 MB/sec [Average]
[info]   (min, avg, max) = (668.464, 668.963, 669.342), stdev = 0.329
[info]   CI (99.9%): [667.696, 670.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2221.706 ±(99.9%) 155.426 B/op [Average]
[info]   (min, avg, max) = (2163.796, 2221.706, 2273.162), stdev = 40.364
[info]   CI (99.9%): [2066.280, 2377.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.071), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75.90% complete, ETA 00:32:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78487.811 ops/s
[info] # Warmup Iteration   2: 156226.935 ops/s
[info] # Warmup Iteration   3: 156438.085 ops/s
[info] # Warmup Iteration   4: 154287.219 ops/s
[info] # Warmup Iteration   5: 160559.277 ops/s
[info] Iteration   1: 160592.913 ops/s
[info]                  ·gc.alloc.rate:                   970.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              9510.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13160.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 160966.904 ops/s
[info]                  ·gc.alloc.rate:               948.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          9268.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6571.715 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 160041.160 ops/s
[info]                  ·gc.alloc.rate:                   943.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              9277.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6609.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 160353.464 ops/s
[info]                  ·gc.alloc.rate:                   968.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              9501.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13200.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 161040.260 ops/s
[info]                  ·gc.alloc.rate:               958.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          9366.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6575.450 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   160598.940 ±(99.9%) 1612.650 ops/s [Average]
[info]   (min, avg, max) = (160041.160, 160598.940, 161040.260), stdev = 418.800
[info]   CI (99.9%): [158986.290, 162211.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   957.822 ±(99.9%) 45.392 MB/sec [Average]
[info]   (min, avg, max) = (943.616, 957.822, 970.454), stdev = 11.788
[info]   CI (99.9%): [912.430, 1003.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9385.169 ±(99.9%) 450.234 B/op [Average]
[info]   (min, avg, max) = (9268.876, 9385.169, 9510.266), stdev = 116.924
[info]   CI (99.9%): [8934.934, 9835.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.091 ±(99.9%) 1416.107 MB/sec [Average]
[info]   (min, avg, max) = (672.250, 941.091, 1344.924), stdev = 367.758
[info]   CI (99.9%): [≈ 0, 2357.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9223.665 ±(99.9%) 13909.950 B/op [Average]
[info]   (min, avg, max) = (6571.715, 9223.665, 13200.614), stdev = 3612.370
[info]   CI (99.9%): [≈ 0, 23133.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.164 ±(99.9%) 0.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.409), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.10% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7193.471 ops/s
[info] # Warmup Iteration   2: 53933.877 ops/s
[info] # Warmup Iteration   3: 57081.172 ops/s
[info] # Warmup Iteration   4: 58327.713 ops/s
[info] # Warmup Iteration   5: 55436.124 ops/s
[info] Iteration   1: 58811.245 ops/s
[info]                  ·gc.alloc.rate:                   2055.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              55016.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53909.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 59361.526 ops/s
[info]                  ·gc.alloc.rate:                   2066.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              54767.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53340.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 59502.872 ops/s
[info]                  ·gc.alloc.rate:                   2083.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              55098.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53071.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.652 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 59405.459 ops/s
[info]                  ·gc.alloc.rate:               2065.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          54716.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53157.689 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 58612.824 ops/s
[info]                  ·gc.alloc.rate:               2065.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          55468.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53957.276 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59138.785 ±(99.9%) 1536.892 ops/s [Average]
[info]   (min, avg, max) = (58612.824, 59138.785, 59502.872), stdev = 399.126
[info]   CI (99.9%): [57601.893, 60675.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2067.235 ±(99.9%) 37.940 MB/sec [Average]
[info]   (min, avg, max) = (2055.909, 2067.235, 2083.134), stdev = 9.853
[info]   CI (99.9%): [2029.295, 2105.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55013.357 ±(99.9%) 1161.233 B/op [Average]
[info]   (min, avg, max) = (54716.136, 55013.357, 55468.998), stdev = 301.568
[info]   CI (99.9%): [53852.125, 56174.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2009.849 ±(99.9%) 13.661 MB/sec [Average]
[info]   (min, avg, max) = (2006.502, 2009.849, 2014.535), stdev = 3.548
[info]   CI (99.9%): [1996.188, 2023.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53487.284 ±(99.9%) 1612.930 B/op [Average]
[info]   (min, avg, max) = (53071.936, 53487.284, 53957.276), stdev = 418.873
[info]   CI (99.9%): [51874.355, 55100.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 5.641 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.373), stdev = 1.465
[info]   CI (99.9%): [≈ 0, 6.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.588 ±(99.9%) 150.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.588, 90.250), stdev = 39.212
[info]   CI (99.9%): [≈ 0, 171.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.31% complete, ETA 00:31:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19446.487 ops/s
[info] # Warmup Iteration   2: 81636.799 ops/s
[info] # Warmup Iteration   3: 91480.760 ops/s
[info] # Warmup Iteration   4: 94883.238 ops/s
[info] # Warmup Iteration   5: 93395.840 ops/s
[info] Iteration   1: 95005.067 ops/s
[info]                  ·gc.alloc.rate:                   1740.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              28832.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22146.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 95389.253 ops/s
[info]                  ·gc.alloc.rate:                   1761.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              29051.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33114.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 96190.358 ops/s
[info]                  ·gc.alloc.rate:                   1761.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              28814.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21842.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 93598.040 ops/s
[info]                  ·gc.alloc.rate:                   1740.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              29253.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33602.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 93489.412 ops/s
[info]                  ·gc.alloc.rate:               1725.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          29051.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22434.081 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   94734.426 ±(99.9%) 4500.156 ops/s [Average]
[info]   (min, avg, max) = (93489.412, 94734.426, 96190.358), stdev = 1168.676
[info]   CI (99.9%): [90234.270, 99234.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1745.892 ±(99.9%) 59.492 MB/sec [Average]
[info]   (min, avg, max) = (1725.677, 1745.892, 1761.859), stdev = 15.450
[info]   CI (99.9%): [1686.400, 1805.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29000.626 ±(99.9%) 699.560 B/op [Average]
[info]   (min, avg, max) = (28814.297, 29000.626, 29253.422), stdev = 181.674
[info]   CI (99.9%): [28301.066, 29700.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1602.305 ±(99.9%) 1409.304 MB/sec [Average]
[info]   (min, avg, max) = (1332.615, 1602.305, 2007.382), stdev = 365.992
[info]   CI (99.9%): [193.001, 3011.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26628.110 ±(99.9%) 23681.959 B/op [Average]
[info]   (min, avg, max) = (21842.381, 26628.110, 33602.820), stdev = 6150.129
[info]   CI (99.9%): [2946.151, 50310.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 7.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 4.372), stdev = 1.935
[info]   CI (99.9%): [≈ 0, 8.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.047 ±(99.9%) 122.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.047, 72.126), stdev = 31.914
[info]   CI (99.9%): [≈ 0, 137.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 3.421
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.51% complete, ETA 00:31:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56814.652 ops/s
[info] # Warmup Iteration   2: 152484.282 ops/s
[info] # Warmup Iteration   3: 158358.567 ops/s
[info] # Warmup Iteration   4: 165446.074 ops/s
[info] # Warmup Iteration   5: 165505.959 ops/s
[info] Iteration   1: 166169.663 ops/s
[info]                  ·gc.alloc.rate:                   2626.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              24870.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25426.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.746 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 164568.687 ops/s
[info]                  ·gc.alloc.rate:                   2615.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              25007.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25642.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 164761.023 ops/s
[info]                  ·gc.alloc.rate:               2619.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          25011.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25613.915 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 166807.226 ops/s
[info]                  ·gc.alloc.rate:               2636.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          24877.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19044.676 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 166190.841 ops/s
[info]                  ·gc.alloc.rate:               2654.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          25138.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25540.020 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   165699.488 ±(99.9%) 3777.266 ops/s [Average]
[info]   (min, avg, max) = (164568.687, 165699.488, 166807.226), stdev = 980.944
[info]   CI (99.9%): [161922.222, 169476.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2630.539 ±(99.9%) 59.809 MB/sec [Average]
[info]   (min, avg, max) = (2615.462, 2630.539, 2654.321), stdev = 15.532
[info]   CI (99.9%): [2570.730, 2690.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24980.891 ±(99.9%) 427.944 B/op [Average]
[info]   (min, avg, max) = (24870.373, 24980.891, 25138.283), stdev = 111.136
[info]   CI (99.9%): [24552.947, 25408.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2553.028 ±(99.9%) 1150.629 MB/sec [Average]
[info]   (min, avg, max) = (2018.598, 2553.028, 2696.740), stdev = 298.815
[info]   CI (99.9%): [1402.399, 3703.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24253.427 ±(99.9%) 11216.840 B/op [Average]
[info]   (min, avg, max) = (19044.676, 24253.427, 25642.306), stdev = 2912.978
[info]   CI (99.9%): [13036.587, 35470.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.396), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.789 ±(99.9%) 6.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.789, 3.746), stdev = 1.655
[info]   CI (99.9%): [≈ 0, 7.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:31:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1960.199 ops/s
[info] # Warmup Iteration   2: 29253.861 ops/s
[info] # Warmup Iteration   3: 34769.938 ops/s
[info] # Warmup Iteration   4: 34239.139 ops/s
[info] # Warmup Iteration   5: 32783.547 ops/s
[info] Iteration   1: 34881.444 ops/s
[info]                  ·gc.alloc.rate:                   2313.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              104378.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90800.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34749.007 ops/s
[info]                  ·gc.alloc.rate:                   2295.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              103984.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91326.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.771 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34461.357 ops/s
[info]                  ·gc.alloc.rate:                   2301.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              105114.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123063.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.901 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 34114.908 ops/s
[info]                  ·gc.alloc.rate:                   2266.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              104499.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93437.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34075.679 ops/s
[info]                  ·gc.alloc.rate:               2289.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          105731.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93701.423 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   34456.479 ±(99.9%) 1398.836 ops/s [Average]
[info]   (min, avg, max) = (34075.679, 34456.479, 34881.444), stdev = 363.273
[info]   CI (99.9%): [33057.643, 35855.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2293.271 ±(99.9%) 67.822 MB/sec [Average]
[info]   (min, avg, max) = (2266.033, 2293.271, 2313.342), stdev = 17.613
[info]   CI (99.9%): [2225.448, 2361.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   104741.534 ±(99.9%) 2642.845 B/op [Average]
[info]   (min, avg, max) = (103984.258, 104741.534, 105731.990), stdev = 686.339
[info]   CI (99.9%): [102098.689, 107384.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2155.729 ±(99.9%) 1160.783 MB/sec [Average]
[info]   (min, avg, max) = (2012.415, 2155.729, 2694.848), stdev = 301.452
[info]   CI (99.9%): [994.946, 3316.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   98465.746 ±(99.9%) 53172.972 B/op [Average]
[info]   (min, avg, max) = (90800.244, 98465.746, 123063.016), stdev = 13808.852
[info]   CI (99.9%): [45292.774, 151638.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.789 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.500), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.219 ±(99.9%) 35.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.219, 22.542), stdev = 9.232
[info]   CI (99.9%): [≈ 0, 41.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.91% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44433.945 ops/s
[info] # Warmup Iteration   2: 151419.705 ops/s
[info] # Warmup Iteration   3: 159987.073 ops/s
[info] # Warmup Iteration   4: 160203.556 ops/s
[info] # Warmup Iteration   5: 160230.780 ops/s
[info] Iteration   1: 161664.953 ops/s
[info]                  ·gc.alloc.rate:               1070.912 MB/sec
[info]                  ·gc.alloc.rate.norm:          10423.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6491.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 160246.964 ops/s
[info]                  ·gc.alloc.rate:                   1078.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              10587.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13111.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 159915.217 ops/s
[info]                  ·gc.alloc.rate:                   1072.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              10557.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13151.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 160996.670 ops/s
[info]                  ·gc.alloc.rate:               1078.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          10544.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6538.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 160711.233 ops/s
[info]                  ·gc.alloc.rate:                   1085.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              10626.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13101.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   160707.007 ±(99.9%) 2611.744 ops/s [Average]
[info]   (min, avg, max) = (159915.217, 160707.007, 161664.953), stdev = 678.262
[info]   CI (99.9%): [158095.263, 163318.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1077.192 ±(99.9%) 21.470 MB/sec [Average]
[info]   (min, avg, max) = (1070.912, 1077.192, 1085.194), stdev = 5.576
[info]   CI (99.9%): [1055.722, 1098.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10547.844 ±(99.9%) 293.395 B/op [Average]
[info]   (min, avg, max) = (10423.862, 10547.844, 10626.663), stdev = 76.194
[info]   CI (99.9%): [10254.449, 10841.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.128 ±(99.9%) 1410.506 MB/sec [Average]
[info]   (min, avg, max) = (666.923, 1069.128, 1337.948), stdev = 366.304
[info]   CI (99.9%): [≈ 0, 2479.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10478.816 ±(99.9%) 13934.407 B/op [Average]
[info]   (min, avg, max) = (6491.586, 10478.816, 13151.618), stdev = 3618.721
[info]   CI (99.9%): [≈ 0, 24413.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.893), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 7.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.706 ±(99.9%) 65.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.706, 38.120), stdev = 17.002
[info]   CI (99.9%): [≈ 0, 73.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.11% complete, ETA 00:30:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255015.546 ops/s
[info] # Warmup Iteration   2: 438778.700 ops/s
[info] # Warmup Iteration   3: 436077.312 ops/s
[info] # Warmup Iteration   4: 455423.703 ops/s
[info] # Warmup Iteration   5: 453537.259 ops/s
[info] Iteration   1: 455098.582 ops/s
[info]                  ·gc.alloc.rate:                   521.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              1804.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1769.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 454349.768 ops/s
[info]                  ·gc.alloc.rate:               526.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          1823.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2322.442 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 457741.677 ops/s
[info]                  ·gc.alloc.rate:                   524.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              1804.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2305.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 454191.677 ops/s
[info]                  ·gc.alloc.rate:      500.985 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 458390.119 ops/s
[info]                  ·gc.alloc.rate:               527.324 MB/sec
[info]                  ·gc.alloc.rate.norm:          1810.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2303.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   455954.365 ±(99.9%) 7590.153 ops/s [Average]
[info]   (min, avg, max) = (454191.677, 455954.365, 458390.119), stdev = 1971.139
[info]   CI (99.9%): [448364.212, 463544.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   520.350 ±(99.9%) 42.449 MB/sec [Average]
[info]   (min, avg, max) = (500.985, 520.350, 527.324), stdev = 11.024
[info]   CI (99.9%): [477.902, 562.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1795.848 ±(99.9%) 132.286 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1795.848, 1823.674), stdev = 34.354
[info]   CI (99.9%): [1663.562, 1928.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.741 ±(99.9%) 1118.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.741, 670.816), stdev = 290.431
[info]   CI (99.9%): [≈ 0, 1623.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1740.005 ±(99.9%) 3852.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1740.005, 2322.442), stdev = 1000.532
[info]   CI (99.9%): [≈ 0, 5592.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.072), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.31% complete, ETA 00:30:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271864.745 ops/s
[info] # Warmup Iteration   2: 491387.517 ops/s
[info] # Warmup Iteration   3: 498720.022 ops/s
[info] # Warmup Iteration   4: 497986.399 ops/s
[info] # Warmup Iteration   5: 499636.297 ops/s
[info] Iteration   1: 482862.619 ops/s
[info]                  ·gc.alloc.rate:      4.909 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 500788.169 ops/s
[info]                  ·gc.alloc.rate:      5.091 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 499483.393 ops/s
[info]                  ·gc.alloc.rate:      5.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 500709.148 ops/s
[info]                  ·gc.alloc.rate:      5.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 501528.303 ops/s
[info]                  ·gc.alloc.rate:      5.099 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   497074.326 ±(99.9%) 30721.930 ops/s [Average]
[info]   (min, avg, max) = (482862.619, 497074.326, 501528.303), stdev = 7978.388
[info]   CI (99.9%): [466352.397, 527796.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.054 ±(99.9%) 0.312 MB/sec [Average]
[info]   (min, avg, max) = (4.909, 5.054, 5.099), stdev = 0.081
[info]   CI (99.9%): [4.741, 5.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.51% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12335.123 ops/s
[info] # Warmup Iteration   2: 55571.092 ops/s
[info] # Warmup Iteration   3: 62967.486 ops/s
[info] # Warmup Iteration   4: 65261.863 ops/s
[info] # Warmup Iteration   5: 63839.472 ops/s
[info] Iteration   1: 65038.002 ops/s
[info]                  ·gc.alloc.rate:                   1361.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              32944.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32304.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 65211.389 ops/s
[info]                  ·gc.alloc.rate:               1356.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          32741.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32250.521 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 62706.729 ops/s
[info]                  ·gc.alloc.rate:                        1315.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                   33014.294 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.011 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.270 B/op
[info]                  ·gc.churn.Metaspace:                   0.032 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1351.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          33912.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      118.083 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              39.000 ms
[info] Iteration   4: 64806.343 ops/s
[info]                  ·gc.alloc.rate:                   1359.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              33012.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32434.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 65566.198 ops/s
[info]                  ·gc.alloc.rate:               1373.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          32959.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31996.471 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   64665.732 ±(99.9%) 4349.962 ops/s [Average]
[info]   (min, avg, max) = (62706.729, 64665.732, 65566.198), stdev = 1129.671
[info]   CI (99.9%): [60315.770, 69015.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1353.381 ±(99.9%) 84.489 MB/sec [Average]
[info]   (min, avg, max) = (1315.761, 1353.381, 1373.278), stdev = 21.942
[info]   CI (99.9%): [1268.891, 1437.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32934.535 ±(99.9%) 431.449 B/op [Average]
[info]   (min, avg, max) = (32741.906, 32934.535, 33014.294), stdev = 112.046
[info]   CI (99.9%): [32503.086, 33365.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.002 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.054 ±(99.9%) 0.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.270), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.006 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.162 ±(99.9%) 1.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.812), stdev = 0.363
[info]   CI (99.9%): [≈ 0, 1.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1338.383 ±(99.9%) 28.736 MB/sec [Average]
[info]   (min, avg, max) = (1333.154, 1338.383, 1351.538), stdev = 7.463
[info]   CI (99.9%): [1309.648, 1367.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32579.480 ±(99.9%) 2932.972 B/op [Average]
[info]   (min, avg, max) = (31996.471, 32579.480, 33912.001), stdev = 761.684
[info]   CI (99.9%): [29646.508, 35512.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 8.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.706), stdev = 2.098
[info]   CI (99.9%): [≈ 0, 9.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23.919 ±(99.9%) 202.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.919, 118.083), stdev = 52.641
[info]   CI (99.9%): [≈ 0, 226.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 39.000), stdev = 15.264
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77.71% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219644.359 ops/s
[info] # Warmup Iteration   2: 2667721.587 ops/s
[info] # Warmup Iteration   3: 2901607.073 ops/s
[info] # Warmup Iteration   4: 2913411.933 ops/s
[info] # Warmup Iteration   5: 2907748.339 ops/s
[info] Iteration   1: 2914864.513 ops/s
[info]                  ·gc.alloc.rate:                   3748.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              2023.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1819.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2915748.799 ops/s
[info]                  ·gc.alloc.rate:                   3749.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              2024.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1825.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2909575.029 ops/s
[info]                  ·gc.alloc.rate:                   3771.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              2039.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2200.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2910763.026 ops/s
[info]                  ·gc.alloc.rate:                   3744.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              2024.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1836.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2919716.469 ops/s
[info]                  ·gc.alloc.rate:                   3756.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              2024.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1832.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2914133.567 ±(99.9%) 15694.960 ops/s [Average]
[info]   (min, avg, max) = (2909575.029, 2914133.567, 2919716.469), stdev = 4075.931
[info]   CI (99.9%): [2898438.607, 2929828.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3754.264 ±(99.9%) 40.931 MB/sec [Average]
[info]   (min, avg, max) = (3744.444, 3754.264, 3771.706), stdev = 10.630
[info]   CI (99.9%): [3713.333, 3795.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2027.292 ±(99.9%) 25.649 B/op [Average]
[info]   (min, avg, max) = (2023.482, 2027.292, 2039.164), stdev = 6.661
[info]   CI (99.9%): [2001.644, 2052.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3523.728 ±(99.9%) 1176.229 MB/sec [Average]
[info]   (min, avg, max) = (3371.565, 3523.728, 4069.782), stdev = 305.463
[info]   CI (99.9%): [2347.499, 4699.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1902.891 ±(99.9%) 640.711 B/op [Average]
[info]   (min, avg, max) = (1819.787, 1902.891, 2200.318), stdev = 166.391
[info]   CI (99.9%): [1262.181, 2543.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.083), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.022, 0.045), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77.91% complete, ETA 00:29:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.601 ops/s
[info] # Warmup Iteration   2: 785775.327 ops/s
[info] # Warmup Iteration   3: 779680.110 ops/s
[info] # Warmup Iteration   4: 818839.397 ops/s
[info] # Warmup Iteration   5: 819817.200 ops/s
[info] Iteration   1: 824583.312 ops/s
[info]                  ·gc.alloc.rate:      477.884 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 820751.803 ops/s
[info]                  ·gc.alloc.rate:               487.809 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1275.483 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 801309.610 ops/s
[info]                  ·gc.alloc.rate:                   488.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              959.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1306.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 799996.340 ops/s
[info]                  ·gc.alloc.rate:                   486.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1309.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 795640.553 ops/s
[info]                  ·gc.alloc.rate:      461.038 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   808456.324 ±(99.9%) 50871.852 ops/s [Average]
[info]   (min, avg, max) = (795640.553, 808456.324, 824583.312), stdev = 13211.258
[info]   CI (99.9%): [757584.472, 859328.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   480.358 ±(99.9%) 44.716 MB/sec [Average]
[info]   (min, avg, max) = (461.038, 480.358, 488.437), stdev = 11.613
[info]   CI (99.9%): [435.642, 525.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   935.177 ±(99.9%) 89.253 B/op [Average]
[info]   (min, avg, max) = (912.001, 935.177, 959.331), stdev = 23.179
[info]   CI (99.9%): [845.924, 1024.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.260 ±(99.9%) 1403.457 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.260, 665.828), stdev = 364.473
[info]   CI (99.9%): [≈ 0, 1802.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   778.369 ±(99.9%) 2736.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 778.369, 1309.901), stdev = 710.677
[info]   CI (99.9%): [≈ 0, 3514.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.11% complete, ETA 00:29:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19036.231 ops/s
[info] # Warmup Iteration   2: 230572.033 ops/s
[info] # Warmup Iteration   3: 325753.849 ops/s
[info] # Warmup Iteration   4: 337179.226 ops/s
[info] # Warmup Iteration   5: 344670.225 ops/s
[info] Iteration   1: 343891.728 ops/s
[info]                  ·gc.alloc.rate:               802.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          3672.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3050.065 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 339898.653 ops/s
[info]                  ·gc.alloc.rate:               796.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          3686.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3087.740 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 336347.846 ops/s
[info]                  ·gc.alloc.rate:               790.402 MB/sec
[info]                  ·gc.alloc.rate.norm:          3696.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3120.344 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 340883.324 ops/s
[info]                  ·gc.alloc.rate:                   798.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              3684.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3081.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 337948.983 ops/s
[info]                  ·gc.alloc.rate:               794.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          3697.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6220.085 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   339794.107 ±(99.9%) 11105.122 ops/s [Average]
[info]   (min, avg, max) = (336347.846, 339794.107, 343891.728), stdev = 2883.965
[info]   CI (99.9%): [328688.984, 350899.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   796.340 ±(99.9%) 17.494 MB/sec [Average]
[info]   (min, avg, max) = (790.402, 796.340, 802.621), stdev = 4.543
[info]   CI (99.9%): [778.846, 813.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3687.551 ±(99.9%) 39.461 B/op [Average]
[info]   (min, avg, max) = (3672.321, 3687.551, 3697.353), stdev = 10.248
[info]   CI (99.9%): [3648.090, 3727.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.870 ±(99.9%) 1151.935 MB/sec [Average]
[info]   (min, avg, max) = (666.621, 800.870, 1336.012), stdev = 299.154
[info]   CI (99.9%): [≈ 0, 1952.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3712.006 ±(99.9%) 5399.683 B/op [Average]
[info]   (min, avg, max) = (3050.065, 3712.006, 6220.085), stdev = 1402.281
[info]   CI (99.9%): [≈ 0, 9111.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78.31% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343882.682 ops/s
[info] # Warmup Iteration   2: 667878.291 ops/s
[info] # Warmup Iteration   3: 747082.913 ops/s
[info] # Warmup Iteration   4: 746071.611 ops/s
[info] # Warmup Iteration   5: 744044.508 ops/s
[info] Iteration   1: 748719.652 ops/s
[info]                  ·gc.alloc.rate:               682.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          1434.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1411.484 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 742045.879 ops/s
[info]                  ·gc.alloc.rate:               683.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          1449.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1424.195 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 755793.381 ops/s
[info]                  ·gc.alloc.rate:               689.608 MB/sec
[info]                  ·gc.alloc.rate.norm:          1435.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1399.620 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 755154.969 ops/s
[info]                  ·gc.alloc.rate:               694.798 MB/sec
[info]                  ·gc.alloc.rate.norm:          1447.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1400.835 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 740112.561 ops/s
[info]                  ·gc.alloc.rate:                   679.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              1444.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1430.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   748365.288 ±(99.9%) 27863.629 ops/s [Average]
[info]   (min, avg, max) = (740112.561, 748365.288, 755793.381), stdev = 7236.096
[info]   CI (99.9%): [720501.660, 776228.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   685.923 ±(99.9%) 23.849 MB/sec [Average]
[info]   (min, avg, max) = (679.377, 685.923, 694.798), stdev = 6.193
[info]   CI (99.9%): [662.075, 709.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1442.387 ±(99.9%) 26.073 B/op [Average]
[info]   (min, avg, max) = (1434.939, 1442.387, 1449.062), stdev = 6.771
[info]   CI (99.9%): [1416.313, 1468.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672.083 ±(99.9%) 2.311 MB/sec [Average]
[info]   (min, avg, max) = (671.473, 672.083, 672.848), stdev = 0.600
[info]   CI (99.9%): [669.772, 674.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1413.370 ±(99.9%) 53.347 B/op [Average]
[info]   (min, avg, max) = (1399.620, 1413.370, 1430.714), stdev = 13.854
[info]   CI (99.9%): [1360.023, 1466.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.51% complete, ETA 00:28:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1009098.715 ops/s
[info] # Warmup Iteration   2: 2438913.730 ops/s
[info] # Warmup Iteration   3: 3387864.514 ops/s
[info] # Warmup Iteration   4: 3323353.443 ops/s
[info] # Warmup Iteration   5: 3323669.908 ops/s
[info] Iteration   1: 3318889.375 ops/s
[info]                  ·gc.alloc.rate:                   2004.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3347250.496 ops/s
[info]                  ·gc.alloc.rate:                   2007.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              943.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3385606.942 ops/s
[info]                  ·gc.alloc.rate:                   2045.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     937.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3403289.524 ops/s
[info]                  ·gc.alloc.rate:               2069.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          956.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932.638 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3353700.194 ops/s
[info]                  ·gc.alloc.rate:                   2041.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     947.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3361747.306 ±(99.9%) 127809.390 ops/s [Average]
[info]   (min, avg, max) = (3318889.375, 3361747.306, 3403289.524), stdev = 33191.693
[info]   CI (99.9%): [3233937.916, 3489556.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2033.754 ±(99.9%) 105.433 MB/sec [Average]
[info]   (min, avg, max) = (2004.957, 2033.754, 2069.494), stdev = 27.381
[info]   CI (99.9%): [1928.321, 2139.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   952.009 ±(99.9%) 21.760 B/op [Average]
[info]   (min, avg, max) = (943.765, 952.009, 957.713), stdev = 5.651
[info]   CI (99.9%): [930.250, 973.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   1884.322 ±(99.9%) 1156.407 MB/sec [Average]
[info]   (min, avg, max) = (1347.112, 1884.322, 2021.696), stdev = 300.315
[info]   CI (99.9%): [727.915, 3040.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   881.885 ±(99.9%) 536.408 B/op [Average]
[info]   (min, avg, max) = (633.329, 881.885, 958.742), stdev = 139.303
[info]   CI (99.9%): [345.478, 1418.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.545 ±(99.9%) 3.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.061), stdev = 0.888
[info]   CI (99.9%): [≈ 0, 3.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.258 ±(99.9%) 1.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 0.977), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.71% complete, ETA 00:28:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1332160.240 ops/s
[info] # Warmup Iteration   2: 4808627.384 ops/s
[info] # Warmup Iteration   3: 8271719.847 ops/s
[info] # Warmup Iteration   4: 8260245.446 ops/s
[info] # Warmup Iteration   5: 8184623.376 ops/s
[info] Iteration   1: 8295027.973 ops/s
[info]                  ·gc.alloc.rate:                   911.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              172.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8138888.564 ops/s
[info]                  ·gc.alloc.rate:               916.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          177.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 259.944 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 8296296.696 ops/s
[info]                  ·gc.alloc.rate:               900.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          170.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127.632 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 8278212.613 ops/s
[info]                  ·gc.alloc.rate:               898.363 MB/sec
[info]                  ·gc.alloc.rate.norm:          170.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8294046.893 ops/s
[info]                  ·gc.alloc.rate:               915.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          173.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 255.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8260494.548 ±(99.9%) 263298.294 ops/s [Average]
[info]   (min, avg, max) = (8138888.564, 8260494.548, 8296296.696), stdev = 68377.731
[info]   CI (99.9%): [7997196.254, 8523792.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   908.380 ±(99.9%) 32.379 MB/sec [Average]
[info]   (min, avg, max) = (898.363, 908.380, 916.382), stdev = 8.409
[info]   CI (99.9%): [876.001, 940.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   173.083 ±(99.9%) 10.123 B/op [Average]
[info]   (min, avg, max) = (170.800, 173.083, 177.202), stdev = 2.629
[info]   CI (99.9%): [162.960, 183.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   941.530 ±(99.9%) 1419.086 MB/sec [Average]
[info]   (min, avg, max) = (671.600, 941.530, 1346.198), stdev = 368.532
[info]   CI (99.9%): [≈ 0, 2360.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   179.672 ±(99.9%) 274.367 B/op [Average]
[info]   (min, avg, max) = (127.404, 179.672, 259.944), stdev = 71.252
[info]   CI (99.9%): [≈ 0, 454.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78.92% complete, ETA 00:28:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603.763 ops/s
[info] # Warmup Iteration   2: 57547.616 ops/s
[info] # Warmup Iteration   3: 179484.228 ops/s
[info] # Warmup Iteration   4: 210550.714 ops/s
[info] # Warmup Iteration   5: 218273.853 ops/s
[info] Iteration   1: 219078.334 ops/s
[info]                  ·gc.alloc.rate:                   1942.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              13956.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9614.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 222002.918 ops/s
[info]                  ·gc.alloc.rate:                   1971.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              13973.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14255.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 220345.549 ops/s
[info]                  ·gc.alloc.rate:                   1949.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              13921.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14388.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.420 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 218408.873 ops/s
[info]                  ·gc.alloc.rate:                   1940.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              13986.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14521.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.350 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 216635.466 ops/s
[info]                  ·gc.alloc.rate:               1940.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          14097.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14654.501 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   219294.228 ±(99.9%) 7783.103 ops/s [Average]
[info]   (min, avg, max) = (216635.466, 219294.228, 222002.918), stdev = 2021.247
[info]   CI (99.9%): [211511.125, 227077.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1948.840 ±(99.9%) 49.676 MB/sec [Average]
[info]   (min, avg, max) = (1940.494, 1948.840, 1971.077), stdev = 12.901
[info]   CI (99.9%): [1899.164, 1998.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13987.146 ±(99.9%) 255.687 B/op [Average]
[info]   (min, avg, max) = (13921.455, 13987.146, 14097.595), stdev = 66.401
[info]   CI (99.9%): [13731.459, 14242.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1879.142 ±(99.9%) 1164.280 MB/sec [Average]
[info]   (min, avg, max) = (1338.280, 1879.142, 2017.150), stdev = 302.360
[info]   CI (99.9%): [714.862, 3043.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13486.693 ±(99.9%) 8355.016 B/op [Average]
[info]   (min, avg, max) = (9614.431, 13486.693, 14654.501), stdev = 2169.771
[info]   CI (99.9%): [5131.677, 21841.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 1.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.041), stdev = 0.433
[info]   CI (99.9%): [≈ 0, 2.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.460 ±(99.9%) 11.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.460, 7.379), stdev = 3.072
[info]   CI (99.9%): [≈ 0, 14.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79.12% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87000.017 ops/s
[info] # Warmup Iteration   2: 286456.669 ops/s
[info] # Warmup Iteration   3: 309362.854 ops/s
[info] # Warmup Iteration   4: 326256.612 ops/s
[info] # Warmup Iteration   5: 323670.605 ops/s
[info] Iteration   1: 326314.131 ops/s
[info]                  ·gc.alloc.rate:                   642.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              3101.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3233.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 326403.825 ops/s
[info]                  ·gc.alloc.rate:               643.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          3102.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3233.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 318529.569 ops/s
[info]                  ·gc.alloc.rate:               629.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          3109.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3314.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 319207.187 ops/s
[info]                  ·gc.alloc.rate:               638.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          3146.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3307.407 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 319279.818 ops/s
[info]                  ·gc.alloc.rate:                   623.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3308.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   321946.906 ±(99.9%) 15550.405 ops/s [Average]
[info]   (min, avg, max) = (318529.569, 321946.906, 326403.825), stdev = 4038.391
[info]   CI (99.9%): [306396.501, 337497.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   635.540 ±(99.9%) 33.687 MB/sec [Average]
[info]   (min, avg, max) = (623.525, 635.540, 643.401), stdev = 8.748
[info]   CI (99.9%): [601.853, 669.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3106.512 ±(99.9%) 101.432 B/op [Average]
[info]   (min, avg, max) = (3072.969, 3106.512, 3146.455), stdev = 26.342
[info]   CI (99.9%): [3005.081, 3207.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   670.840 ±(99.9%) 1.254 MB/sec [Average]
[info]   (min, avg, max) = (670.504, 670.840, 671.253), stdev = 0.326
[info]   CI (99.9%): [669.586, 672.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3279.427 ±(99.9%) 161.851 B/op [Average]
[info]   (min, avg, max) = (3233.074, 3279.427, 3314.570), stdev = 42.032
[info]   CI (99.9%): [3117.576, 3441.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.103), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.32% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 871668.383 ops/s
[info] # Warmup Iteration   2: 1454686.212 ops/s
[info] # Warmup Iteration   3: 1584256.059 ops/s
[info] # Warmup Iteration   4: 1572239.982 ops/s
[info] # Warmup Iteration   5: 1586992.127 ops/s
[info] Iteration   1: 1586288.355 ops/s
[info]                  ·gc.alloc.rate:      88.695 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1586224.229 ops/s
[info]                  ·gc.alloc.rate:      88.695 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1587093.535 ops/s
[info]                  ·gc.alloc.rate:      88.751 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1571875.357 ops/s
[info]                  ·gc.alloc.rate:      87.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1575885.832 ops/s
[info]                  ·gc.alloc.rate:                   104.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              103.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     510.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1581473.461 ±(99.9%) 27274.647 ops/s [Average]
[info]   (min, avg, max) = (1571875.357, 1581473.461, 1587093.535), stdev = 7083.139
[info]   CI (99.9%): [1554198.815, 1608748.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   91.627 ±(99.9%) 26.897 MB/sec [Average]
[info]   (min, avg, max) = (87.889, 91.627, 104.106), stdev = 6.985
[info]   CI (99.9%): [64.730, 118.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   91.196 ±(99.9%) 27.517 B/op [Average]
[info]   (min, avg, max) = (88.000, 91.196, 103.979), stdev = 7.146
[info]   CI (99.9%): [63.680, 118.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.314 ±(99.9%) 880.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.314, 511.572), stdev = 228.782
[info]   CI (99.9%): [≈ 0, 983.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   102.190 ±(99.9%) 879.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.190, 510.948), stdev = 228.503
[info]   CI (99.9%): [≈ 0, 982.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.141 ±(99.9%) 1.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.704), stdev = 0.315
[info]   CI (99.9%): [≈ 0, 1.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.141 ±(99.9%) 1.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.703), stdev = 0.314
[info]   CI (99.9%): [≈ 0, 1.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79.52% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6358.763 ops/s
[info] # Warmup Iteration   2: 56256.002 ops/s
[info] # Warmup Iteration   3: 72063.849 ops/s
[info] # Warmup Iteration   4: 73226.121 ops/s
[info] # Warmup Iteration   5: 74032.450 ops/s
[info] Iteration   1: 74442.213 ops/s
[info]                  ·gc.alloc.rate:               3244.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          68601.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56844.227 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 72758.279 ops/s
[info]                  ·gc.alloc.rate:                   3228.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              69831.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72920.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 72261.092 ops/s
[info]                  ·gc.alloc.rate:               3207.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          69866.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73653.643 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 74495.470 ops/s
[info]                  ·gc.alloc.rate:               3276.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          69217.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2711.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57268.360 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 73733.990 ops/s
[info]                  ·gc.alloc.rate:               3271.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          69822.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3393.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72440.606 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   73538.209 ±(99.9%) 3856.040 ops/s [Average]
[info]   (min, avg, max) = (72261.092, 73538.209, 74495.470), stdev = 1001.401
[info]   CI (99.9%): [69682.169, 77394.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3245.743 ±(99.9%) 111.432 MB/sec [Average]
[info]   (min, avg, max) = (3207.833, 3245.743, 3276.701), stdev = 28.938
[info]   CI (99.9%): [3134.312, 3357.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69467.753 ±(99.9%) 2135.065 B/op [Average]
[info]   (min, avg, max) = (68601.354, 69467.753, 69866.222), stdev = 554.470
[info]   CI (99.9%): [67332.688, 71602.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3109.262 ±(99.9%) 1439.816 MB/sec [Average]
[info]   (min, avg, max) = (2688.658, 3109.262, 3393.847), stdev = 373.916
[info]   CI (99.9%): [1669.446, 4549.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66625.377 ±(99.9%) 33682.732 B/op [Average]
[info]   (min, avg, max) = (56844.227, 66625.377, 73653.643), stdev = 8747.299
[info]   CI (99.9%): [32942.644, 100308.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.090 ±(99.9%) 0.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.450), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.72% complete, ETA 00:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 509024.347 ops/s
[info] # Warmup Iteration   2: 1562448.617 ops/s
[info] # Warmup Iteration   3: 1572785.008 ops/s
[info] # Warmup Iteration   4: 1567750.575 ops/s
[info] # Warmup Iteration   5: 1575892.701 ops/s
[info] Iteration   1: 1568827.306 ops/s
[info]                  ·gc.alloc.rate:               855.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          857.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 669.954 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1558039.247 ops/s
[info]                  ·gc.alloc.rate:               833.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          841.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 674.593 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1582570.160 ops/s
[info]                  ·gc.alloc.rate:               847.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          842.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 664.783 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1583560.859 ops/s
[info]                  ·gc.alloc.rate:               846.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          840.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 664.367 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1575545.684 ops/s
[info]                  ·gc.alloc.rate:                   856.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              855.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1336.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1573708.651 ±(99.9%) 40766.154 ops/s [Average]
[info]   (min, avg, max) = (1558039.247, 1573708.651, 1583560.859), stdev = 10586.841
[info]   CI (99.9%): [1532942.497, 1614474.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   847.561 ±(99.9%) 35.588 MB/sec [Average]
[info]   (min, avg, max) = (833.235, 847.561, 856.375), stdev = 9.242
[info]   CI (99.9%): [811.972, 883.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   847.493 ±(99.9%) 32.220 B/op [Average]
[info]   (min, avg, max) = (840.469, 847.493, 857.820), stdev = 8.368
[info]   CI (99.9%): [815.273, 879.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.166 ±(99.9%) 1152.891 MB/sec [Average]
[info]   (min, avg, max) = (667.796, 802.166, 1337.752), stdev = 299.402
[info]   CI (99.9%): [≈ 0, 1955.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   801.969 ±(99.9%) 1149.973 B/op [Average]
[info]   (min, avg, max) = (664.367, 801.969, 1336.148), stdev = 298.644
[info]   CI (99.9%): [≈ 0, 1951.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.92% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 976335.398 ops/s
[info] # Warmup Iteration   2: 1638176.355 ops/s
[info] # Warmup Iteration   3: 1647461.434 ops/s
[info] # Warmup Iteration   4: 1661798.687 ops/s
[info] # Warmup Iteration   5: 1665217.861 ops/s
[info] Iteration   1: 1666599.945 ops/s
[info]                  ·gc.alloc.rate:               477.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.152 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1676069.564 ops/s
[info]                  ·gc.alloc.rate:               500.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          469.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 629.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1723684.885 ops/s
[info]                  ·gc.alloc.rate:      481.899 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1711597.809 ops/s
[info]                  ·gc.alloc.rate:                   494.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              454.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     616.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1720010.361 ops/s
[info]                  ·gc.alloc.rate:               502.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          459.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 614.130 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1699592.513 ±(99.9%) 101574.132 ops/s [Average]
[info]   (min, avg, max) = (1666599.945, 1699592.513, 1723684.885), stdev = 26378.479
[info]   CI (99.9%): [1598018.381, 1801166.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   491.473 ±(99.9%) 42.458 MB/sec [Average]
[info]   (min, avg, max) = (477.909, 491.473, 502.459), stdev = 11.026
[info]   CI (99.9%): [449.014, 533.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   455.133 ±(99.9%) 42.220 B/op [Average]
[info]   (min, avg, max) = (440.000, 455.133, 469.866), stdev = 10.964
[info]   CI (99.9%): [412.913, 497.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.801 ±(99.9%) 1118.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.801, 671.397), stdev = 290.484
[info]   CI (99.9%): [≈ 0, 1623.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   468.680 ±(99.9%) 1034.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 468.680, 629.609), stdev = 268.690
[info]   CI (99.9%): [≈ 0, 1503.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.12% complete, ETA 00:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 725274.487 ops/s
[info] # Warmup Iteration   2: 1767658.946 ops/s
[info] # Warmup Iteration   3: 1767921.561 ops/s
[info] # Warmup Iteration   4: 1801861.011 ops/s
[info] # Warmup Iteration   5: 1803024.575 ops/s
[info] Iteration   1: 1796951.360 ops/s
[info]                  ·gc.alloc.rate:      20.164 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.657 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1803024.409 ops/s
[info]                  ·gc.alloc.rate:      18.338 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1783277.301 ops/s
[info]                  ·gc.alloc.rate:      18.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1808672.190 ops/s
[info]                  ·gc.alloc.rate:      18.391 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1808364.983 ops/s
[info]                  ·gc.alloc.rate:      18.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1800058.049 ±(99.9%) 40534.904 ops/s [Average]
[info]   (min, avg, max) = (1783277.301, 1800058.049, 1808672.190), stdev = 10526.786
[info]   CI (99.9%): [1759523.144, 1840592.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.682 ±(99.9%) 3.215 MB/sec [Average]
[info]   (min, avg, max) = (18.133, 18.682, 20.164), stdev = 0.835
[info]   CI (99.9%): [15.467, 21.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.332 ±(99.9%) 2.853 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.332, 17.657), stdev = 0.741
[info]   CI (99.9%): [13.479, 19.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.32% complete, ETA 00:26:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9697.032 ops/s
[info] # Warmup Iteration   2: 45610.809 ops/s
[info] # Warmup Iteration   3: 50072.041 ops/s
[info] # Warmup Iteration   4: 50064.489 ops/s
[info] # Warmup Iteration   5: 50677.823 ops/s
[info] Iteration   1: 51954.113 ops/s
[info]                  ·gc.alloc.rate:                   2237.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              67774.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60820.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 51773.897 ops/s
[info]                  ·gc.alloc.rate:                   2258.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              68644.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81119.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.633 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 51950.802 ops/s
[info]                  ·gc.alloc.rate:               2226.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          67449.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60600.715 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 51508.369 ops/s
[info]                  ·gc.alloc.rate:               2234.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          68284.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61182.877 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 51303.293 ops/s
[info]                  ·gc.alloc.rate:               2225.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          68260.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61561.335 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   51698.095 ±(99.9%) 1101.004 ops/s [Average]
[info]   (min, avg, max) = (51303.293, 51698.095, 51954.113), stdev = 285.927
[info]   CI (99.9%): [50597.091, 52799.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2236.585 ±(99.9%) 51.971 MB/sec [Average]
[info]   (min, avg, max) = (2225.153, 2236.585, 2258.804), stdev = 13.497
[info]   CI (99.9%): [2184.614, 2288.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68082.702 ±(99.9%) 1810.195 B/op [Average]
[info]   (min, avg, max) = (67449.654, 68082.702, 68644.786), stdev = 470.102
[info]   CI (99.9%): [66272.507, 69892.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.387 ±(99.9%) 1145.009 MB/sec [Average]
[info]   (min, avg, max) = (2000.481, 2137.387, 2669.283), stdev = 297.355
[info]   CI (99.9%): [992.378, 3282.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65056.896 ±(99.9%) 34603.900 B/op [Average]
[info]   (min, avg, max) = (60600.715, 65056.896, 81119.199), stdev = 8986.523
[info]   CI (99.9%): [30452.996, 99660.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 7.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 4.289), stdev = 1.916
[info]   CI (99.9%): [≈ 0, 8.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.107 ±(99.9%) 223.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.107, 129.904), stdev = 58.025
[info]   CI (99.9%): [≈ 0, 249.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.52% complete, ETA 00:26:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134344.810 ops/s
[info] # Warmup Iteration   2: 267497.842 ops/s
[info] # Warmup Iteration   3: 269144.727 ops/s
[info] # Warmup Iteration   4: 269611.015 ops/s
[info] # Warmup Iteration   5: 273435.931 ops/s
[info] Iteration   1: 255376.821 ops/s
[info]                  ·gc.alloc.rate:                   1044.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              6437.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8280.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 274558.713 ops/s
[info]                  ·gc.alloc.rate:               1099.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          6301.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3852.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 271526.870 ops/s
[info]                  ·gc.alloc.rate:               1092.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          6331.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7791.827 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 273426.457 ops/s
[info]                  ·gc.alloc.rate:               1084.059 MB/sec
[info]                  ·gc.alloc.rate.norm:          6238.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3872.637 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 273587.497 ops/s
[info]                  ·gc.alloc.rate:                   1098.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              6319.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7740.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   269695.272 ±(99.9%) 31110.308 ops/s [Average]
[info]   (min, avg, max) = (255376.821, 269695.272, 274558.713), stdev = 8079.248
[info]   CI (99.9%): [238584.964, 300805.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1083.911 ±(99.9%) 87.194 MB/sec [Average]
[info]   (min, avg, max) = (1044.958, 1083.911, 1099.795), stdev = 22.644
[info]   CI (99.9%): [996.716, 1171.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6325.555 ±(99.9%) 276.820 B/op [Average]
[info]   (min, avg, max) = (6238.357, 6325.555, 6437.025), stdev = 71.889
[info]   CI (99.9%): [6048.735, 6602.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.869 ±(99.9%) 1417.263 MB/sec [Average]
[info]   (min, avg, max) = (672.402, 1075.869, 1345.506), stdev = 368.059
[info]   CI (99.9%): [≈ 0, 2493.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6307.686 ±(99.9%) 8632.689 B/op [Average]
[info]   (min, avg, max) = (3852.771, 6307.686, 8280.392), stdev = 2241.882
[info]   CI (99.9%): [≈ 0, 14940.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.550 ±(99.9%) 4.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.550, 2.727), stdev = 1.217
[info]   CI (99.9%): [≈ 0, 5.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.163 ±(99.9%) 26.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.163, 15.688), stdev = 7.002
[info]   CI (99.9%): [≈ 0, 30.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.72% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 843.535 ops/s
[info] # Warmup Iteration   2: 31578.587 ops/s
[info] # Warmup Iteration   3: 39801.094 ops/s
[info] # Warmup Iteration   4: 38524.724 ops/s
[info] # Warmup Iteration   5: 39809.083 ops/s
[info] Iteration   1: 39852.979 ops/s
[info]                  ·gc.alloc.rate:               2036.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          80439.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79248.249 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 39851.132 ops/s
[info]                  ·gc.alloc.rate:                   2062.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              81426.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79462.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 39950.186 ops/s
[info]                  ·gc.alloc.rate:                   2040.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              80389.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79425.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 40051.394 ops/s
[info]                  ·gc.alloc.rate:                   2045.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              80392.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79329.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.454 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 40089.078 ops/s
[info]                  ·gc.alloc.rate:               2074.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          81458.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79398.347 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   39958.954 ±(99.9%) 423.617 ops/s [Average]
[info]   (min, avg, max) = (39851.132, 39958.954, 40089.078), stdev = 110.012
[info]   CI (99.9%): [39535.337, 40382.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2052.109 ±(99.9%) 61.907 MB/sec [Average]
[info]   (min, avg, max) = (2036.827, 2052.109, 2074.897), stdev = 16.077
[info]   CI (99.9%): [1990.202, 2114.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80821.417 ±(99.9%) 2184.671 B/op [Average]
[info]   (min, avg, max) = (80389.852, 80821.417, 81458.158), stdev = 567.352
[info]   CI (99.9%): [78636.745, 83006.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.325 ±(99.9%) 23.112 MB/sec [Average]
[info]   (min, avg, max) = (2006.661, 2015.325, 2022.430), stdev = 6.002
[info]   CI (99.9%): [1992.214, 2038.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79372.846 ±(99.9%) 327.047 B/op [Average]
[info]   (min, avg, max) = (79248.249, 79372.846, 79462.688), stdev = 84.933
[info]   CI (99.9%): [79045.799, 79699.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.217 ±(99.9%) 1.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.217, 1.000), stdev = 0.438
[info]   CI (99.9%): [≈ 0, 1.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.547 ±(99.9%) 66.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.547, 39.462), stdev = 17.311
[info]   CI (99.9%): [≈ 0, 75.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.92% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36711.630 ops/s
[info] # Warmup Iteration   2: 108672.709 ops/s
[info] # Warmup Iteration   3: 112056.011 ops/s
[info] # Warmup Iteration   4: 112442.822 ops/s
[info] # Warmup Iteration   5: 113410.352 ops/s
[info] Iteration   1: 113095.179 ops/s
[info]                  ·gc.alloc.rate:                   1139.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              15848.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18587.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 109305.992 ops/s
[info]                  ·gc.alloc.rate:                   1099.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              15830.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19250.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 113190.162 ops/s
[info]                  ·gc.alloc.rate:               1119.691 MB/sec
[info]                  ·gc.alloc.rate.norm:          15568.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9299.105 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 113394.329 ops/s
[info]                  ·gc.alloc.rate:               1148.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          15938.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18574.986 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 113611.771 ops/s
[info]                  ·gc.alloc.rate:                   1137.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              15753.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18548.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   112519.487 ±(99.9%) 6959.502 ops/s [Average]
[info]   (min, avg, max) = (109305.992, 112519.487, 113611.771), stdev = 1807.360
[info]   CI (99.9%): [105559.985, 119478.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1128.868 ±(99.9%) 74.005 MB/sec [Average]
[info]   (min, avg, max) = (1099.913, 1128.868, 1148.340), stdev = 19.219
[info]   CI (99.9%): [1054.863, 1202.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15788.090 ±(99.9%) 536.151 B/op [Average]
[info]   (min, avg, max) = (15568.564, 15788.090, 15938.796), stdev = 139.237
[info]   CI (99.9%): [15251.939, 16324.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.932 ±(99.9%) 1151.937 MB/sec [Average]
[info]   (min, avg, max) = (668.792, 1203.932, 1339.098), stdev = 299.154
[info]   CI (99.9%): [51.994, 2355.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16852.317 ±(99.9%) 16298.480 B/op [Average]
[info]   (min, avg, max) = (9299.105, 16852.317, 19250.926), stdev = 4232.663
[info]   CI (99.9%): [553.837, 33150.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.935), stdev = 1.753
[info]   CI (99.9%): [≈ 0, 7.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.077 ±(99.9%) 93.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.077, 54.505), stdev = 24.278
[info]   CI (99.9%): [≈ 0, 104.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.12% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170566.462 ops/s
[info] # Warmup Iteration   2: 297367.771 ops/s
[info] # Warmup Iteration   3: 299648.286 ops/s
[info] # Warmup Iteration   4: 297399.936 ops/s
[info] # Warmup Iteration   5: 298658.838 ops/s
[info] Iteration   1: 307728.784 ops/s
[info]                  ·gc.alloc.rate:                   437.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              2236.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2616.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 308346.054 ops/s
[info]                  ·gc.alloc.rate:      415.350 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 306027.733 ops/s
[info]                  ·gc.alloc.rate:               426.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          2191.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3449.894 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 304617.819 ops/s
[info]                  ·gc.alloc.rate:      410.309 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 303359.146 ops/s
[info]                  ·gc.alloc.rate:                   424.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              2199.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3480.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   306015.907 ±(99.9%) 8025.776 ops/s [Average]
[info]   (min, avg, max) = (303359.146, 306015.907, 308346.054), stdev = 2084.269
[info]   CI (99.9%): [297990.131, 314041.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   422.636 ±(99.9%) 40.007 MB/sec [Average]
[info]   (min, avg, max) = (410.309, 422.636, 437.206), stdev = 10.390
[info]   CI (99.9%): [382.629, 462.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2173.476 ±(99.9%) 198.779 B/op [Average]
[info]   (min, avg, max) = (2120.001, 2173.476, 2236.087), stdev = 51.622
[info]   CI (99.9%): [1974.697, 2372.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.705 ±(99.9%) 1326.947 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.705, 671.118), stdev = 344.604
[info]   CI (99.9%): [≈ 0, 1697.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1909.353 ±(99.9%) 6843.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1909.353, 3480.311), stdev = 1777.117
[info]   CI (99.9%): [≈ 0, 8752.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.213), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.33% complete, ETA 00:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208196.449 ops/s
[info] # Warmup Iteration   2: 360158.234 ops/s
[info] # Warmup Iteration   3: 366678.677 ops/s
[info] # Warmup Iteration   4: 366578.482 ops/s
[info] # Warmup Iteration   5: 366358.355 ops/s
[info] Iteration   1: 366666.061 ops/s
[info]                  ·gc.alloc.rate:      3.728 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 366544.443 ops/s
[info]                  ·gc.alloc.rate:      3.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 366538.438 ops/s
[info]                  ·gc.alloc.rate:      3.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 366310.951 ops/s
[info]                  ·gc.alloc.rate:      3.724 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 365761.546 ops/s
[info]                  ·gc.alloc.rate:      3.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   366364.288 ±(99.9%) 1388.361 ops/s [Average]
[info]   (min, avg, max) = (365761.546, 366364.288, 366666.061), stdev = 360.553
[info]   CI (99.9%): [364975.927, 367752.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.725 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (3.719, 3.725, 3.728), stdev = 0.004
[info]   CI (99.9%): [3.711, 3.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.002), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.53% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7240.346 ops/s
[info] # Warmup Iteration   2: 43553.498 ops/s
[info] # Warmup Iteration   3: 52270.421 ops/s
[info] # Warmup Iteration   4: 52424.557 ops/s
[info] # Warmup Iteration   5: 52198.895 ops/s
[info] Iteration   1: 52387.590 ops/s
[info]                  ·gc.alloc.rate:                   1394.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              41890.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39965.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52879.521 ops/s
[info]                  ·gc.alloc.rate:               1399.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          41641.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39671.776 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 53314.911 ops/s
[info]                  ·gc.alloc.rate:                   1422.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              41972.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39428.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 53189.736 ops/s
[info]                  ·gc.alloc.rate:                   1419.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              42011.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39597.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 53309.980 ops/s
[info]                  ·gc.alloc.rate:                   1448.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              42735.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59336.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   53016.348 ±(99.9%) 1515.366 ops/s [Average]
[info]   (min, avg, max) = (52387.590, 53016.348, 53314.911), stdev = 393.536
[info]   CI (99.9%): [51500.982, 54531.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1416.781 ±(99.9%) 82.675 MB/sec [Average]
[info]   (min, avg, max) = (1394.311, 1416.781, 1448.170), stdev = 21.470
[info]   CI (99.9%): [1334.107, 1499.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   42050.464 ±(99.9%) 1576.255 B/op [Average]
[info]   (min, avg, max) = (41641.533, 42050.464, 42735.970), stdev = 409.348
[info]   CI (99.9%): [40474.209, 43626.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.672 ±(99.9%) 1164.695 MB/sec [Average]
[info]   (min, avg, max) = (1330.219, 1469.672, 2010.715), stdev = 302.468
[info]   CI (99.9%): [304.977, 2634.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   43599.893 ±(99.9%) 33883.257 B/op [Average]
[info]   (min, avg, max) = (39428.283, 43599.893, 59336.864), stdev = 8799.374
[info]   CI (99.9%): [9716.636, 77483.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.520), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 0.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.701 ±(99.9%) 25.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.701, 15.398), stdev = 6.575
[info]   CI (99.9%): [≈ 0, 29.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81.73% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8237.084 ops/s
[info] # Warmup Iteration   2: 67569.240 ops/s
[info] # Warmup Iteration   3: 68914.936 ops/s
[info] # Warmup Iteration   4: 73735.141 ops/s
[info] # Warmup Iteration   5: 73204.677 ops/s
[info] Iteration   1: 73766.749 ops/s
[info]                  ·gc.alloc.rate:                   1588.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              33884.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42934.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 73770.671 ops/s
[info]                  ·gc.alloc.rate:                   1580.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              33717.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28651.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 74028.586 ops/s
[info]                  ·gc.alloc.rate:                   1599.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              33983.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28551.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 74269.669 ops/s
[info]                  ·gc.alloc.rate:                   1630.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              34537.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42574.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73744.556 ops/s
[info]                  ·gc.alloc.rate:                   1579.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              33702.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28546.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   73916.046 ±(99.9%) 883.441 ops/s [Average]
[info]   (min, avg, max) = (73744.556, 73916.046, 74269.669), stdev = 229.427
[info]   CI (99.9%): [73032.605, 74799.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1595.572 ±(99.9%) 81.343 MB/sec [Average]
[info]   (min, avg, max) = (1579.093, 1595.572, 1630.568), stdev = 21.125
[info]   CI (99.9%): [1514.228, 1676.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33965.160 ±(99.9%) 1312.692 B/op [Average]
[info]   (min, avg, max) = (33702.732, 33965.160, 34537.737), stdev = 340.902
[info]   CI (99.9%): [32652.469, 35277.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.390 ±(99.9%) 1413.672 MB/sec [Average]
[info]   (min, avg, max) = (1337.510, 1609.390, 2013.109), stdev = 367.126
[info]   CI (99.9%): [195.718, 3023.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34251.517 ±(99.9%) 29893.258 B/op [Average]
[info]   (min, avg, max) = (28546.607, 34251.517, 42934.470), stdev = 7763.184
[info]   CI (99.9%): [4358.259, 64144.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.240 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.766, 3.665), stdev = 1.621
[info]   CI (99.9%): [≈ 0, 7.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.287 ±(99.9%) 132.615 B/op [Average]
[info]   (min, avg, max) = (0.444, 16.287, 77.893), stdev = 34.440
[info]   CI (99.9%): [≈ 0, 148.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.93% complete, ETA 00:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25825.424 ops/s
[info] # Warmup Iteration   2: 129041.816 ops/s
[info] # Warmup Iteration   3: 130337.497 ops/s
[info] # Warmup Iteration   4: 130958.486 ops/s
[info] # Warmup Iteration   5: 132657.420 ops/s
[info] Iteration   1: 135181.617 ops/s
[info]                  ·gc.alloc.rate:               674.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          7853.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7747.812 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 134860.524 ops/s
[info]                  ·gc.alloc.rate:               680.460 MB/sec
[info]                  ·gc.alloc.rate.norm:          7939.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7766.308 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 134538.544 ops/s
[info]                  ·gc.alloc.rate:                   672.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              7871.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7796.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 134684.608 ops/s
[info]                  ·gc.alloc.rate:               679.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          7944.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7788.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 134854.833 ops/s
[info]                  ·gc.alloc.rate:                   678.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              7920.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7786.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   134824.025 ±(99.9%) 925.538 ops/s [Average]
[info]   (min, avg, max) = (134538.544, 134824.025, 135181.617), stdev = 240.359
[info]   CI (99.9%): [133898.487, 135749.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   677.350 ±(99.9%) 12.947 MB/sec [Average]
[info]   (min, avg, max) = (672.953, 677.350, 680.460), stdev = 3.362
[info]   CI (99.9%): [664.404, 690.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7905.877 ±(99.9%) 159.068 B/op [Average]
[info]   (min, avg, max) = (7853.047, 7905.877, 7944.504), stdev = 41.309
[info]   CI (99.9%): [7746.809, 8064.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.314 ±(99.9%) 2.924 MB/sec [Average]
[info]   (min, avg, max) = (665.562, 666.314, 667.365), stdev = 0.759
[info]   CI (99.9%): [663.389, 669.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7777.066 ±(99.9%) 76.169 B/op [Average]
[info]   (min, avg, max) = (7747.812, 7777.066, 7796.582), stdev = 19.781
[info]   CI (99.9%): [7700.897, 7853.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.244), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.13% complete, ETA 00:23:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82620.633 ops/s
[info] # Warmup Iteration   2: 252921.158 ops/s
[info] # Warmup Iteration   3: 258388.000 ops/s
[info] # Warmup Iteration   4: 260439.745 ops/s
[info] # Warmup Iteration   5: 260533.902 ops/s
[info] Iteration   1: 259924.818 ops/s
[info]                  ·gc.alloc.rate:               1128.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          6832.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8133.327 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 261549.115 ops/s
[info]                  ·gc.alloc.rate:               1094.573 MB/sec
[info]                  ·gc.alloc.rate.norm:          6586.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4042.559 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 260354.074 ops/s
[info]                  ·gc.alloc.rate:                   1109.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              6707.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8130.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 262230.558 ops/s
[info]                  ·gc.alloc.rate:               1106.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          6639.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4038.105 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 261065.182 ops/s
[info]                  ·gc.alloc.rate:                   1102.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              6647.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8114.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   261024.749 ±(99.9%) 3545.010 ops/s [Average]
[info]   (min, avg, max) = (259924.818, 261024.749, 262230.558), stdev = 920.628
[info]   CI (99.9%): [257479.740, 264569.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1108.310 ±(99.9%) 48.478 MB/sec [Average]
[info]   (min, avg, max) = (1094.573, 1108.310, 1128.454), stdev = 12.590
[info]   CI (99.9%): [1059.831, 1156.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6682.575 ±(99.9%) 361.758 B/op [Average]
[info]   (min, avg, max) = (6586.527, 6682.575, 6832.116), stdev = 93.947
[info]   CI (99.9%): [6320.817, 7044.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.787 ±(99.9%) 1418.310 MB/sec [Average]
[info]   (min, avg, max) = (671.807, 1075.787, 1345.875), stdev = 368.331
[info]   CI (99.9%): [≈ 0, 2494.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6491.623 ±(99.9%) 8616.681 B/op [Average]
[info]   (min, avg, max) = (4038.105, 6491.623, 8133.327), stdev = 2237.725
[info]   CI (99.9%): [≈ 0, 15108.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.579 ±(99.9%) 4.894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.852), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 5.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.489 ±(99.9%) 29.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.489, 17.193), stdev = 7.662
[info]   CI (99.9%): [≈ 0, 32.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.33% complete, ETA 00:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 589.715 ops/s
[info] # Warmup Iteration   2: 24408.282 ops/s
[info] # Warmup Iteration   3: 31669.036 ops/s
[info] # Warmup Iteration   4: 31391.568 ops/s
[info] # Warmup Iteration   5: 31229.290 ops/s
[info] Iteration   1: 31782.827 ops/s
[info]                  ·gc.alloc.rate:                   1713.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              84844.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99170.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 31444.501 ops/s
[info]                  ·gc.alloc.rate:                   1677.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              83942.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66982.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 31913.294 ops/s
[info]                  ·gc.alloc.rate:                   1724.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              85058.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99226.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 31353.506 ops/s
[info]                  ·gc.alloc.rate:               1683.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          84503.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67444.045 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31387.350 ops/s
[info]                  ·gc.alloc.rate:               1697.440 MB/sec
[info]                  ·gc.alloc.rate.norm:          85109.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101190.106 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   31576.296 ±(99.9%) 979.701 ops/s [Average]
[info]   (min, avg, max) = (31353.506, 31576.296, 31913.294), stdev = 254.425
[info]   CI (99.9%): [30596.595, 32555.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1699.402 ±(99.9%) 76.212 MB/sec [Average]
[info]   (min, avg, max) = (1677.503, 1699.402, 1724.832), stdev = 19.792
[info]   CI (99.9%): [1623.190, 1775.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84691.849 ±(99.9%) 1855.482 B/op [Average]
[info]   (min, avg, max) = (83942.852, 84691.849, 85109.382), stdev = 481.863
[info]   CI (99.9%): [82836.367, 86547.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1743.092 ±(99.9%) 1412.737 MB/sec [Average]
[info]   (min, avg, max) = (1338.563, 1743.092, 2018.157), stdev = 366.883
[info]   CI (99.9%): [330.355, 3155.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86802.826 ±(99.9%) 68934.644 B/op [Average]
[info]   (min, avg, max) = (66982.168, 86802.826, 101190.106), stdev = 17902.108
[info]   CI (99.9%): [17868.182, 155737.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.204 ±(99.9%) 1.667 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.978), stdev = 0.433
[info]   CI (99.9%): [≈ 0, 1.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.065 ±(99.9%) 82.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.065, 48.250), stdev = 21.353
[info]   CI (99.9%): [≈ 0, 92.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.53% complete, ETA 00:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48380.549 ops/s
[info] # Warmup Iteration   2: 172300.206 ops/s
[info] # Warmup Iteration   3: 173010.530 ops/s
[info] # Warmup Iteration   4: 180020.952 ops/s
[info] # Warmup Iteration   5: 180521.556 ops/s
[info] Iteration   1: 176851.157 ops/s
[info]                  ·gc.alloc.rate:                   999.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              8887.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5937.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 177051.516 ops/s
[info]                  ·gc.alloc.rate:               994.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          8843.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5936.453 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 174060.812 ops/s
[info]                  ·gc.alloc.rate:                   1006.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              9098.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12082.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 180339.131 ops/s
[info]                  ·gc.alloc.rate:                   1023.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              8929.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5834.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 179982.572 ops/s
[info]                  ·gc.alloc.rate:               1022.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          8945.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11697.123 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   177657.038 ±(99.9%) 9920.673 ops/s [Average]
[info]   (min, avg, max) = (174060.812, 177657.038, 180339.131), stdev = 2576.367
[info]   CI (99.9%): [167736.364, 187577.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1009.294 ±(99.9%) 50.907 MB/sec [Average]
[info]   (min, avg, max) = (994.956, 1009.294, 1023.248), stdev = 13.220
[info]   CI (99.9%): [958.388, 1060.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8940.717 ±(99.9%) 371.403 B/op [Average]
[info]   (min, avg, max) = (8843.646, 8940.717, 9098.076), stdev = 96.452
[info]   CI (99.9%): [8569.314, 9312.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.557 ±(99.9%) 1410.866 MB/sec [Average]
[info]   (min, avg, max) = (667.493, 935.557, 1337.553), stdev = 366.397
[info]   CI (99.9%): [≈ 0, 2346.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8297.465 ±(99.9%) 12639.167 B/op [Average]
[info]   (min, avg, max) = (5834.014, 8297.465, 12082.298), stdev = 3282.352
[info]   CI (99.9%): [≈ 0, 20936.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.185 ±(99.9%) 0.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.376), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 0.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.73% complete, ETA 00:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250956.944 ops/s
[info] # Warmup Iteration   2: 454332.429 ops/s
[info] # Warmup Iteration   3: 479385.259 ops/s
[info] # Warmup Iteration   4: 482181.112 ops/s
[info] # Warmup Iteration   5: 466796.022 ops/s
[info] Iteration   1: 483369.352 ops/s
[info]                  ·gc.alloc.rate:               1459.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          4751.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6564.214 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 472181.304 ops/s
[info]                  ·gc.alloc.rate:                   1422.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              4742.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4485.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 485570.952 ops/s
[info]                  ·gc.alloc.rate:                   1462.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              4738.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4361.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 479947.954 ops/s
[info]                  ·gc.alloc.rate:                   1457.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              4780.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4403.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 484218.969 ops/s
[info]                  ·gc.alloc.rate:                   1470.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              4779.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4364.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   481057.706 ±(99.9%) 20712.092 ops/s [Average]
[info]   (min, avg, max) = (472181.304, 481057.706, 485570.952), stdev = 5378.865
[info]   CI (99.9%): [460345.614, 501769.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1454.529 ±(99.9%) 70.613 MB/sec [Average]
[info]   (min, avg, max) = (1422.888, 1454.529, 1470.397), stdev = 18.338
[info]   CI (99.9%): [1383.916, 1525.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4758.574 ±(99.9%) 77.849 B/op [Average]
[info]   (min, avg, max) = (4738.886, 4758.574, 4780.897), stdev = 20.217
[info]   CI (99.9%): [4680.726, 4836.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.661 ±(99.9%) 1156.710 MB/sec [Average]
[info]   (min, avg, max) = (1342.918, 1478.661, 2016.016), stdev = 300.394
[info]   CI (99.9%): [321.951, 2635.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4835.925 ±(99.9%) 3725.217 B/op [Average]
[info]   (min, avg, max) = (4361.375, 4835.925, 6564.214), stdev = 967.427
[info]   CI (99.9%): [1110.708, 8561.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 4.796 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.831), stdev = 1.246
[info]   CI (99.9%): [≈ 0, 5.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.958 ±(99.9%) 15.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.958, 9.176), stdev = 4.036
[info]   CI (99.9%): [≈ 0, 17.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.93% complete, ETA 00:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264800.075 ops/s
[info] # Warmup Iteration   2: 509036.143 ops/s
[info] # Warmup Iteration   3: 518099.938 ops/s
[info] # Warmup Iteration   4: 525550.181 ops/s
[info] # Warmup Iteration   5: 528087.293 ops/s
[info] Iteration   1: 518565.562 ops/s
[info]                  ·gc.alloc.rate:               971.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          2948.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2037.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 527403.216 ops/s
[info]                  ·gc.alloc.rate:               991.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          2959.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2004.821 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 530178.693 ops/s
[info]                  ·gc.alloc.rate:                   1003.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              2978.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3989.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 515996.986 ops/s
[info]                  ·gc.alloc.rate:               973.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          2969.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2050.099 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 513516.638 ops/s
[info]                  ·gc.alloc.rate:               969.742 MB/sec
[info]                  ·gc.alloc.rate.norm:          2972.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4124.241 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   521132.219 ±(99.9%) 28041.012 ops/s [Average]
[info]   (min, avg, max) = (513516.638, 521132.219, 530178.693), stdev = 7282.162
[info]   CI (99.9%): [493091.207, 549173.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   982.027 ±(99.9%) 56.985 MB/sec [Average]
[info]   (min, avg, max) = (969.742, 982.027, 1003.412), stdev = 14.799
[info]   CI (99.9%): [925.042, 1039.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2965.688 ±(99.9%) 45.039 B/op [Average]
[info]   (min, avg, max) = (2948.975, 2965.688, 2978.573), stdev = 11.696
[info]   CI (99.9%): [2920.649, 3010.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   941.012 ±(99.9%) 1419.248 MB/sec [Average]
[info]   (min, avg, max) = (671.469, 941.012, 1345.597), stdev = 368.574
[info]   CI (99.9%): [≈ 0, 2360.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2841.296 ±(99.9%) 4277.140 B/op [Average]
[info]   (min, avg, max) = (2004.821, 2841.296, 4124.241), stdev = 1110.760
[info]   CI (99.9%): [≈ 0, 7118.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.13% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12391.466 ops/s
[info] # Warmup Iteration   2: 61341.149 ops/s
[info] # Warmup Iteration   3: 63437.830 ops/s
[info] # Warmup Iteration   4: 67945.005 ops/s
[info] # Warmup Iteration   5: 66886.616 ops/s
[info] Iteration   1: 66599.664 ops/s
[info]                  ·gc.alloc.rate:                   1476.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              34887.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31388.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 67484.222 ops/s
[info]                  ·gc.alloc.rate:                   1493.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              34817.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30993.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 67903.239 ops/s
[info]                  ·gc.alloc.rate:               1528.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          35402.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46295.445 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 68283.359 ops/s
[info]                  ·gc.alloc.rate:                   1532.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              35309.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30752.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 66797.408 ops/s
[info]                  ·gc.alloc.rate:                   1488.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              35079.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31500.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   67413.579 ±(99.9%) 2752.200 ops/s [Average]
[info]   (min, avg, max) = (66599.664, 67413.579, 68283.359), stdev = 714.738
[info]   CI (99.9%): [64661.379, 70165.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1503.749 ±(99.9%) 95.571 MB/sec [Average]
[info]   (min, avg, max) = (1476.617, 1503.749, 1532.007), stdev = 24.819
[info]   CI (99.9%): [1408.178, 1599.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35099.336 ±(99.9%) 983.188 B/op [Average]
[info]   (min, avg, max) = (34817.321, 35099.336, 35402.373), stdev = 255.331
[info]   CI (99.9%): [34116.148, 36082.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1465.450 ±(99.9%) 1147.134 MB/sec [Average]
[info]   (min, avg, max) = (1328.512, 1465.450, 1998.325), stdev = 297.907
[info]   CI (99.9%): [318.315, 2612.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34186.220 ±(99.9%) 26091.730 B/op [Average]
[info]   (min, avg, max) = (30752.866, 34186.220, 46295.445), stdev = 6775.939
[info]   CI (99.9%): [8094.490, 60277.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.458), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.352 ±(99.9%) 18.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.352, 10.791), stdev = 4.720
[info]   CI (99.9%): [≈ 0, 20.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.33% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15472.588 ops/s
[info] # Warmup Iteration   2: 87223.494 ops/s
[info] # Warmup Iteration   3: 93498.298 ops/s
[info] # Warmup Iteration   4: 97634.219 ops/s
[info] # Warmup Iteration   5: 97980.749 ops/s
[info] Iteration   1: 97380.259 ops/s
[info]                  ·gc.alloc.rate:               1583.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          25585.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21703.808 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 95742.367 ops/s
[info]                  ·gc.alloc.rate:                   1569.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22075.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 98119.443 ops/s
[info]                  ·gc.alloc.rate:                   1628.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              26124.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32310.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 96609.446 ops/s
[info]                  ·gc.alloc.rate:                   1593.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              25958.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21824.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 98782.569 ops/s
[info]                  ·gc.alloc.rate:                   1615.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              25732.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21320.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   97326.817 ±(99.9%) 4626.958 ops/s [Average]
[info]   (min, avg, max) = (95742.367, 97326.817, 98782.569), stdev = 1201.606
[info]   CI (99.9%): [92699.859, 101953.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1597.982 ±(99.9%) 92.138 MB/sec [Average]
[info]   (min, avg, max) = (1569.544, 1597.982, 1628.776), stdev = 23.928
[info]   CI (99.9%): [1505.844, 1690.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25840.389 ±(99.9%) 801.389 B/op [Average]
[info]   (min, avg, max) = (25585.283, 25840.389, 26124.818), stdev = 208.118
[info]   CI (99.9%): [25039.000, 26641.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475.629 ±(99.9%) 1159.842 MB/sec [Average]
[info]   (min, avg, max) = (1338.159, 1475.629, 2014.432), stdev = 301.207
[info]   CI (99.9%): [315.787, 2635.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23847.108 ±(99.9%) 18248.374 B/op [Average]
[info]   (min, avg, max) = (21320.890, 23847.108, 32310.561), stdev = 4739.045
[info]   CI (99.9%): [5598.734, 42095.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.705), stdev = 1.639
[info]   CI (99.9%): [≈ 0, 7.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.429 ±(99.9%) 101.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.429, 59.434), stdev = 26.284
[info]   CI (99.9%): [≈ 0, 113.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16726.998 ops/s
[info] # Warmup Iteration   2: 160796.268 ops/s
[info] # Warmup Iteration   3: 176639.601 ops/s
[info] # Warmup Iteration   4: 177907.662 ops/s
[info] # Warmup Iteration   5: 176648.650 ops/s
[info] Iteration   1: 176733.536 ops/s
[info]                  ·gc.alloc.rate:                   753.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              6706.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5926.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 176886.911 ops/s
[info]                  ·gc.alloc.rate:               747.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          6649.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5930.002 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 179319.106 ops/s
[info]                  ·gc.alloc.rate:                   762.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5849.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 181257.630 ops/s
[info]                  ·gc.alloc.rate:               768.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          6675.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5792.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 180492.091 ops/s
[info]                  ·gc.alloc.rate:                   763.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              6656.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5817.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   178937.855 ±(99.9%) 7940.114 ops/s [Average]
[info]   (min, avg, max) = (176733.536, 178937.855, 181257.630), stdev = 2062.022
[info]   CI (99.9%): [170997.741, 186877.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   759.020 ±(99.9%) 33.345 MB/sec [Average]
[info]   (min, avg, max) = (747.314, 759.020, 768.825), stdev = 8.660
[info]   CI (99.9%): [725.674, 792.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6675.407 ±(99.9%) 89.830 B/op [Average]
[info]   (min, avg, max) = (6649.192, 6675.407, 6706.555), stdev = 23.328
[info]   CI (99.9%): [6585.578, 6765.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.604 ±(99.9%) 2.908 MB/sec [Average]
[info]   (min, avg, max) = (665.474, 666.604, 667.437), stdev = 0.755
[info]   CI (99.9%): [663.695, 669.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5863.171 ±(99.9%) 241.001 B/op [Average]
[info]   (min, avg, max) = (5792.806, 5863.171, 5930.002), stdev = 62.587
[info]   CI (99.9%): [5622.170, 6104.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.185), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.73% complete, ETA 00:21:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136536.016 ops/s
[info] # Warmup Iteration   2: 273451.716 ops/s
[info] # Warmup Iteration   3: 273121.889 ops/s
[info] # Warmup Iteration   4: 278998.140 ops/s
[info] # Warmup Iteration   5: 277861.314 ops/s
[info] Iteration   1: 279941.645 ops/s
[info]                  ·gc.alloc.rate:               1016.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          5714.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3775.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 277861.373 ops/s
[info]                  ·gc.alloc.rate:                   1025.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              5809.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7610.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 279399.326 ops/s
[info]                  ·gc.alloc.rate:               1011.805 MB/sec
[info]                  ·gc.alloc.rate.norm:          5699.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3786.137 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 278233.885 ops/s
[info]                  ·gc.alloc.rate:               1019.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          5764.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7607.988 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 278907.809 ops/s
[info]                  ·gc.alloc.rate:               1007.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          5684.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3796.628 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   278868.807 ±(99.9%) 3251.458 ops/s [Average]
[info]   (min, avg, max) = (277861.373, 278868.807, 279941.645), stdev = 844.393
[info]   CI (99.9%): [275617.349, 282120.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1016.061 ±(99.9%) 26.939 MB/sec [Average]
[info]   (min, avg, max) = (1007.309, 1016.061, 1025.626), stdev = 6.996
[info]   CI (99.9%): [989.122, 1043.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5734.466 ±(99.9%) 199.042 B/op [Average]
[info]   (min, avg, max) = (5684.473, 5734.466, 5809.338), stdev = 51.691
[info]   CI (99.9%): [5535.424, 5933.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.012 ±(99.9%) 1417.589 MB/sec [Average]
[info]   (min, avg, max) = (671.522, 941.012, 1344.934), stdev = 368.143
[info]   CI (99.9%): [≈ 0, 2358.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5315.345 ±(99.9%) 8063.750 B/op [Average]
[info]   (min, avg, max) = (3775.292, 5315.345, 7610.681), stdev = 2094.130
[info]   CI (99.9%): [≈ 0, 13379.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.236), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.94% complete, ETA 00:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6902.247 ops/s
[info] # Warmup Iteration   2: 57587.999 ops/s
[info] # Warmup Iteration   3: 67329.605 ops/s
[info] # Warmup Iteration   4: 68413.842 ops/s
[info] # Warmup Iteration   5: 68352.176 ops/s
[info] Iteration   1: 70187.839 ops/s
[info]                  ·gc.alloc.rate:                   2732.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              61262.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59930.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.934 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 70039.993 ops/s
[info]                  ·gc.alloc.rate:                   2727.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              61276.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59996.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 70361.389 ops/s
[info]                  ·gc.alloc.rate:               2766.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          61865.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59828.795 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 69953.476 ops/s
[info]                  ·gc.alloc.rate:               2739.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          61593.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60240.114 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 69417.696 ops/s
[info]                  ·gc.alloc.rate:               2704.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          61310.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45738.991 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   69992.079 ±(99.9%) 1372.816 ops/s [Average]
[info]   (min, avg, max) = (69417.696, 69992.079, 70361.389), stdev = 356.516
[info]   CI (99.9%): [68619.263, 71364.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2734.014 ±(99.9%) 85.543 MB/sec [Average]
[info]   (min, avg, max) = (2704.639, 2734.014, 2766.239), stdev = 22.215
[info]   CI (99.9%): [2648.471, 2819.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61461.730 ±(99.9%) 1014.235 B/op [Average]
[info]   (min, avg, max) = (61262.327, 61461.730, 61865.701), stdev = 263.394
[info]   CI (99.9%): [60447.495, 62475.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2543.101 ±(99.9%) 1130.987 MB/sec [Average]
[info]   (min, avg, max) = (2017.720, 2543.101, 2679.177), stdev = 293.714
[info]   CI (99.9%): [1412.114, 3674.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57146.990 ±(99.9%) 24563.504 B/op [Average]
[info]   (min, avg, max) = (45738.991, 57146.990, 60240.114), stdev = 6379.064
[info]   CI (99.9%): [32583.486, 81710.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.561 ±(99.9%) 3.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.561, 1.871), stdev = 0.837
[info]   CI (99.9%): [≈ 0, 3.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84.14% complete, ETA 00:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46185.982 ops/s
[info] # Warmup Iteration   2: 154319.025 ops/s
[info] # Warmup Iteration   3: 157035.046 ops/s
[info] # Warmup Iteration   4: 159419.803 ops/s
[info] # Warmup Iteration   5: 158942.554 ops/s
[info] Iteration   1: 159386.032 ops/s
[info]                  ·gc.alloc.rate:               1320.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          13040.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6636.807 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 155619.765 ops/s
[info]                  ·gc.alloc.rate:               1305.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          13200.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13595.122 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 158986.562 ops/s
[info]                  ·gc.alloc.rate:                   1343.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              13299.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13320.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 158706.689 ops/s
[info]                  ·gc.alloc.rate:                   1340.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              13289.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13344.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 159729.729 ops/s
[info]                  ·gc.alloc.rate:               1362.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          13421.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13219.192 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   158485.755 ±(99.9%) 6348.160 ops/s [Average]
[info]   (min, avg, max) = (155619.765, 158485.755, 159729.729), stdev = 1648.597
[info]   CI (99.9%): [152137.596, 164833.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1334.497 ±(99.9%) 83.991 MB/sec [Average]
[info]   (min, avg, max) = (1305.831, 1334.497, 1362.325), stdev = 21.812
[info]   CI (99.9%): [1250.506, 1418.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   13250.242 ±(99.9%) 543.629 B/op [Average]
[info]   (min, avg, max) = (13040.365, 13250.242, 13421.336), stdev = 141.179
[info]   CI (99.9%): [12706.612, 13793.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210.028 ±(99.9%) 1157.925 MB/sec [Average]
[info]   (min, avg, max) = (672.110, 1210.028, 1345.770), stdev = 300.709
[info]   CI (99.9%): [52.103, 2367.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12023.134 ±(99.9%) 11606.708 B/op [Average]
[info]   (min, avg, max) = (6636.807, 12023.134, 13595.122), stdev = 3014.225
[info]   CI (99.9%): [416.427, 23629.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.725 ±(99.9%) 6.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.602), stdev = 1.608
[info]   CI (99.9%): [≈ 0, 6.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7.184 ±(99.9%) 61.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.184, 35.714), stdev = 15.949
[info]   CI (99.9%): [≈ 0, 68.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.34% complete, ETA 00:20:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57661.206 ops/s
[info] # Warmup Iteration   2: 198808.712 ops/s
[info] # Warmup Iteration   3: 198689.676 ops/s
[info] # Warmup Iteration   4: 202500.542 ops/s
[info] # Warmup Iteration   5: 203352.702 ops/s
[info] Iteration   1: 204160.508 ops/s
[info]                  ·gc.alloc.rate:               1417.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          10929.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10337.603 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 205471.501 ops/s
[info]                  ·gc.alloc.rate:                   1423.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              10900.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10278.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 197663.858 ops/s
[info]                  ·gc.alloc.rate:                   1395.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              11108.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10689.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 206562.234 ops/s
[info]                  ·gc.alloc.rate:                   1431.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              10908.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10222.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 205626.340 ops/s
[info]                  ·gc.alloc.rate:                   1425.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              10913.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10253.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   203896.888 ±(99.9%) 13816.066 ops/s [Average]
[info]   (min, avg, max) = (197663.858, 203896.888, 206562.234), stdev = 3587.988
[info]   CI (99.9%): [190080.822, 217712.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1418.861 ±(99.9%) 53.891 MB/sec [Average]
[info]   (min, avg, max) = (1395.469, 1418.861, 1431.691), stdev = 13.995
[info]   CI (99.9%): [1364.970, 1472.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10952.042 ±(99.9%) 339.886 B/op [Average]
[info]   (min, avg, max) = (10900.042, 10952.042, 11108.788), stdev = 88.267
[info]   CI (99.9%): [10612.156, 11291.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.483 ±(99.9%) 4.942 MB/sec [Average]
[info]   (min, avg, max) = (1339.581, 1341.483, 1342.857), stdev = 1.283
[info]   CI (99.9%): [1336.541, 1346.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10356.294 ±(99.9%) 736.503 B/op [Average]
[info]   (min, avg, max) = (10222.186, 10356.294, 10689.959), stdev = 191.268
[info]   CI (99.9%): [9619.790, 11092.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 4.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 2.936), stdev = 1.281
[info]   CI (99.9%): [≈ 0, 5.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.182 ±(99.9%) 39.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.182, 23.370), stdev = 10.209
[info]   CI (99.9%): [≈ 0, 44.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.54% complete, ETA 00:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126992.413 ops/s
[info] # Warmup Iteration   2: 464912.207 ops/s
[info] # Warmup Iteration   3: 500159.523 ops/s
[info] # Warmup Iteration   4: 509225.226 ops/s
[info] # Warmup Iteration   5: 512285.896 ops/s
[info] Iteration   1: 502989.099 ops/s
[info]                  ·gc.alloc.rate:               410.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          1284.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1600.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 499534.777 ops/s
[info]                  ·gc.alloc.rate:               404.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          1274.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1611.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 499409.706 ops/s
[info]                  ·gc.alloc.rate:      393.479 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 508923.987 ops/s
[info]                  ·gc.alloc.rate:               421.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          1302.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2059.937 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 510491.605 ops/s
[info]                  ·gc.alloc.rate:               423.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          1305.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2053.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   504269.835 ±(99.9%) 20013.485 ops/s [Average]
[info]   (min, avg, max) = (499409.706, 504269.835, 510491.605), stdev = 5197.438
[info]   CI (99.9%): [484256.350, 524283.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   410.662 ±(99.9%) 47.333 MB/sec [Average]
[info]   (min, avg, max) = (393.479, 410.662, 423.296), stdev = 12.292
[info]   CI (99.9%): [363.329, 457.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1281.436 ±(99.9%) 101.730 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1281.436, 1305.069), stdev = 26.419
[info]   CI (99.9%): [1179.706, 1383.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.122 ±(99.9%) 1056.815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.122, 666.145), stdev = 274.452
[info]   CI (99.9%): [≈ 0, 1527.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1465.284 ±(99.9%) 3271.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1465.284, 2059.937), stdev = 849.540
[info]   CI (99.9%): [≈ 0, 4736.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.74% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 383370.909 ops/s
[info] # Warmup Iteration   2: 612082.714 ops/s
[info] # Warmup Iteration   3: 629428.931 ops/s
[info] # Warmup Iteration   4: 635744.703 ops/s
[info] # Warmup Iteration   5: 635609.599 ops/s
[info] Iteration   1: 639815.769 ops/s
[info]                  ·gc.alloc.rate:                   355.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              875.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1258.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 646299.557 ops/s
[info]                  ·gc.alloc.rate:      348.224 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 641667.338 ops/s
[info]                  ·gc.alloc.rate:               356.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1254.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 642348.878 ops/s
[info]                  ·gc.alloc.rate:                   365.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1643.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 637458.822 ops/s
[info]                  ·gc.alloc.rate:      343.447 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   641518.073 ±(99.9%) 12617.906 ops/s [Average]
[info]   (min, avg, max) = (637458.822, 641518.073, 646299.557), stdev = 3276.830
[info]   CI (99.9%): [628900.167, 654135.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   353.945 ±(99.9%) 32.765 MB/sec [Average]
[info]   (min, avg, max) = (343.447, 353.945, 365.606), stdev = 8.509
[info]   CI (99.9%): [321.180, 386.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   868.317 ±(99.9%) 78.577 B/op [Average]
[info]   (min, avg, max) = (848.001, 868.317, 895.754), stdev = 20.406
[info]   CI (99.9%): [789.740, 946.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.824 ±(99.9%) 1217.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.824, 670.838), stdev = 316.057
[info]   CI (99.9%): [≈ 0, 1555.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   831.371 ±(99.9%) 2985.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 831.371, 1643.590), stdev = 775.203
[info]   CI (99.9%): [≈ 0, 3816.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.102), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380615.594 ops/s
[info] # Warmup Iteration   2: 679539.624 ops/s
[info] # Warmup Iteration   3: 688329.200 ops/s
[info] # Warmup Iteration   4: 690592.123 ops/s
[info] # Warmup Iteration   5: 682537.695 ops/s
[info] Iteration   1: 691657.794 ops/s
[info]                  ·gc.alloc.rate:      7.115 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.190 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 688747.403 ops/s
[info]                  ·gc.alloc.rate:      7.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 687203.106 ops/s
[info]                  ·gc.alloc.rate:      9.404 MB/sec
[info]                  ·gc.alloc.rate.norm: 21.532 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 693382.325 ops/s
[info]                  ·gc.alloc.rate:      7.050 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 692412.245 ops/s
[info]                  ·gc.alloc.rate:      7.042 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   690680.574 ±(99.9%) 10019.639 ops/s [Average]
[info]   (min, avg, max) = (687203.106, 690680.574, 693382.325), stdev = 2602.068
[info]   CI (99.9%): [680660.936, 700700.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.523 ±(99.9%) 4.052 MB/sec [Average]
[info]   (min, avg, max) = (7.003, 7.523, 9.404), stdev = 1.052
[info]   CI (99.9%): [3.471, 11.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17.145 ±(99.9%) 9.449 B/op [Average]
[info]   (min, avg, max) = (16.001, 17.145, 21.532), stdev = 2.454
[info]   CI (99.9%): [7.695, 26.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.14% complete, ETA 00:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13761.069 ops/s
[info] # Warmup Iteration   2: 32634.467 ops/s
[info] # Warmup Iteration   3: 34731.547 ops/s
[info] # Warmup Iteration   4: 35370.287 ops/s
[info] # Warmup Iteration   5: 35448.783 ops/s
[info] Iteration   1: 35055.579 ops/s
[info]                  ·gc.alloc.rate:                   1916.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              86046.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90409.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34886.017 ops/s
[info]                  ·gc.alloc.rate:                   1907.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              86051.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90702.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35357.637 ops/s
[info]                  ·gc.alloc.rate:                   1943.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              86526.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89313.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35797.819 ops/s
[info]                  ·gc.alloc.rate:                   1941.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              85340.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58805.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35569.111 ops/s
[info]                  ·gc.alloc.rate:                   1956.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              86551.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88837.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35333.233 ±(99.9%) 1426.776 ops/s [Average]
[info]   (min, avg, max) = (34886.017, 35333.233, 35797.819), stdev = 370.529
[info]   CI (99.9%): [33906.456, 36760.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1933.064 ±(99.9%) 77.660 MB/sec [Average]
[info]   (min, avg, max) = (1907.608, 1933.064, 1956.006), stdev = 20.168
[info]   CI (99.9%): [1855.403, 2010.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86103.254 ±(99.9%) 1892.972 B/op [Average]
[info]   (min, avg, max) = (85340.838, 86103.254, 86551.110), stdev = 491.599
[info]   CI (99.9%): [84210.282, 87996.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1875.265 ±(99.9%) 1157.382 MB/sec [Average]
[info]   (min, avg, max) = (1337.616, 1875.265, 2013.826), stdev = 300.568
[info]   CI (99.9%): [717.883, 3032.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83613.814 ±(99.9%) 53482.570 B/op [Average]
[info]   (min, avg, max) = (58805.770, 83613.814, 90702.275), stdev = 13889.253
[info]   CI (99.9%): [30131.245, 137096.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 4.804 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.791, 2.935), stdev = 1.248
[info]   CI (99.9%): [≈ 0, 5.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.533 ±(99.9%) 215.752 B/op [Average]
[info]   (min, avg, max) = (0.915, 35.533, 131.779), stdev = 56.030
[info]   CI (99.9%): [≈ 0, 251.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85.34% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62646.377 ops/s
[info] # Warmup Iteration   2: 119722.891 ops/s
[info] # Warmup Iteration   3: 125281.503 ops/s
[info] # Warmup Iteration   4: 125160.209 ops/s
[info] # Warmup Iteration   5: 124323.825 ops/s
[info] Iteration   1: 122104.046 ops/s
[info]                  ·gc.alloc.rate:                   1301.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              16774.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17326.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 125578.968 ops/s
[info]                  ·gc.alloc.rate:               1330.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          16677.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16856.095 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 125738.557 ops/s
[info]                  ·gc.alloc.rate:                   1332.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16842.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 126205.058 ops/s
[info]                  ·gc.alloc.rate:                   1348.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              16814.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16764.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 126259.804 ops/s
[info]                  ·gc.alloc.rate:               1363.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          16988.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16708.425 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   125177.287 ±(99.9%) 6710.883 ops/s [Average]
[info]   (min, avg, max) = (122104.046, 125177.287, 126259.804), stdev = 1742.795
[info]   CI (99.9%): [118466.404, 131888.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1335.263 ±(99.9%) 88.697 MB/sec [Average]
[info]   (min, avg, max) = (1301.629, 1335.263, 1363.415), stdev = 23.034
[info]   CI (99.9%): [1246.566, 1423.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16785.458 ±(99.9%) 497.234 B/op [Average]
[info]   (min, avg, max) = (16672.998, 16785.458, 16988.801), stdev = 129.130
[info]   CI (99.9%): [16288.225, 17282.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.094 ±(99.9%) 7.213 MB/sec [Average]
[info]   (min, avg, max) = (1340.914, 1344.094, 1345.784), stdev = 1.873
[info]   CI (99.9%): [1336.881, 1351.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16899.496 ±(99.9%) 947.932 B/op [Average]
[info]   (min, avg, max) = (16708.425, 16899.496, 17326.584), stdev = 246.175
[info]   CI (99.9%): [15951.563, 17847.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 4.692 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 2.811), stdev = 1.218
[info]   CI (99.9%): [≈ 0, 5.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8.283 ±(99.9%) 58.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.283, 35.175), stdev = 15.248
[info]   CI (99.9%): [≈ 0, 66.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.54% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13030.687 ops/s
[info] # Warmup Iteration   2: 76203.670 ops/s
[info] # Warmup Iteration   3: 78361.200 ops/s
[info] # Warmup Iteration   4: 79748.013 ops/s
[info] # Warmup Iteration   5: 81017.695 ops/s
[info] Iteration   1: 82271.831 ops/s
[info]                  ·gc.alloc.rate:                   3090.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              59123.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63969.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.389 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 81564.030 ops/s
[info]                  ·gc.alloc.rate:                   3066.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              59153.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51679.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 81077.560 ops/s
[info]                  ·gc.alloc.rate:               3047.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          59164.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52124.278 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 81450.951 ops/s
[info]                  ·gc.alloc.rate:               3089.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          59696.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3367.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65060.548 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 81735.820 ops/s
[info]                  ·gc.alloc.rate:               3074.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          59177.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52026.671 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   81620.038 ±(99.9%) 1683.142 ops/s [Average]
[info]   (min, avg, max) = (81077.560, 81620.038, 82271.831), stdev = 437.107
[info]   CI (99.9%): [79936.896, 83303.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3073.822 ±(99.9%) 68.798 MB/sec [Average]
[info]   (min, avg, max) = (3047.813, 3073.822, 3090.646), stdev = 17.867
[info]   CI (99.9%): [3005.024, 3142.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59263.406 ±(99.9%) 936.113 B/op [Average]
[info]   (min, avg, max) = (59123.737, 59263.406, 59696.817), stdev = 243.106
[info]   CI (99.9%): [58327.294, 60199.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2955.679 ±(99.9%) 1407.107 MB/sec [Average]
[info]   (min, avg, max) = (2678.811, 2955.679, 3367.562), stdev = 365.421
[info]   CI (99.9%): [1548.571, 4362.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   56972.066 ±(99.9%) 26563.627 B/op [Average]
[info]   (min, avg, max) = (51679.413, 56972.066, 65060.548), stdev = 6898.489
[info]   CI (99.9%): [30408.439, 83535.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.558 ±(99.9%) 3.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.389), stdev = 1.038
[info]   CI (99.9%): [≈ 0, 4.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.74% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30746.538 ops/s
[info] # Warmup Iteration   2: 121107.459 ops/s
[info] # Warmup Iteration   3: 128916.769 ops/s
[info] # Warmup Iteration   4: 137363.766 ops/s
[info] # Warmup Iteration   5: 135213.201 ops/s
[info] Iteration   1: 135204.741 ops/s
[info]                  ·gc.alloc.rate:                   1761.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              20507.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15477.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 133627.248 ops/s
[info]                  ·gc.alloc.rate:                   1767.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              20821.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23536.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 129522.758 ops/s
[info]                  ·gc.alloc.rate:                   1702.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              20679.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16216.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 133868.271 ops/s
[info]                  ·gc.alloc.rate:                   1769.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              20802.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23585.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 134606.267 ops/s
[info]                  ·gc.alloc.rate:               1793.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          20970.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23510.515 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   133365.857 ±(99.9%) 8612.511 ops/s [Average]
[info]   (min, avg, max) = (129522.758, 133365.857, 135204.741), stdev = 2236.642
[info]   CI (99.9%): [124753.347, 141978.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1758.977 ±(99.9%) 130.718 MB/sec [Average]
[info]   (min, avg, max) = (1702.227, 1758.977, 1793.457), stdev = 33.947
[info]   CI (99.9%): [1628.259, 1889.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20756.391 ±(99.9%) 667.701 B/op [Average]
[info]   (min, avg, max) = (20507.332, 20756.391, 20970.832), stdev = 173.400
[info]   CI (99.9%): [20088.690, 21424.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1735.984 ±(99.9%) 1419.371 MB/sec [Average]
[info]   (min, avg, max) = (1329.587, 1735.984, 2010.655), stdev = 368.606
[info]   CI (99.9%): [316.613, 3155.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20465.431 ±(99.9%) 16265.441 B/op [Average]
[info]   (min, avg, max) = (15477.365, 20465.431, 23585.461), stdev = 4224.083
[info]   CI (99.9%): [4199.990, 36730.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.711 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.437), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 0.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.532 ±(99.9%) 8.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.532, 5.149), stdev = 2.179
[info]   CI (99.9%): [≈ 0, 9.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.94% complete, ETA 00:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 355952.103 ops/s
[info] # Warmup Iteration   2: 652693.313 ops/s
[info] # Warmup Iteration   3: 640603.936 ops/s
[info] # Warmup Iteration   4: 659543.749 ops/s
[info] # Warmup Iteration   5: 658890.449 ops/s
[info] Iteration   1: 658342.670 ops/s
[info]                  ·gc.alloc.rate:               1765.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          4219.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3216.852 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 646474.840 ops/s
[info]                  ·gc.alloc.rate:                   1750.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              4262.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4915.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.943 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 654053.250 ops/s
[info]                  ·gc.alloc.rate:               1749.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          4208.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3233.031 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 650294.898 ops/s
[info]                  ·gc.alloc.rate:                   1768.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              4279.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4875.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 654696.640 ops/s
[info]                  ·gc.alloc.rate:                   1747.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              4199.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3228.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   652772.460 ±(99.9%) 17452.431 ops/s [Average]
[info]   (min, avg, max) = (646474.840, 652772.460, 658342.670), stdev = 4532.341
[info]   CI (99.9%): [635320.029, 670224.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1756.180 ±(99.9%) 38.390 MB/sec [Average]
[info]   (min, avg, max) = (1747.053, 1756.180, 1768.611), stdev = 9.970
[info]   CI (99.9%): [1717.790, 1794.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4234.167 ±(99.9%) 134.927 B/op [Average]
[info]   (min, avg, max) = (4199.885, 4234.167, 4279.729), stdev = 35.040
[info]   CI (99.9%): [4099.240, 4369.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.191 ±(99.9%) 1419.112 MB/sec [Average]
[info]   (min, avg, max) = (1342.913, 1613.191, 2019.115), stdev = 368.539
[info]   CI (99.9%): [194.079, 3032.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3893.781 ±(99.9%) 3521.128 B/op [Average]
[info]   (min, avg, max) = (3216.852, 3893.781, 4915.499), stdev = 914.426
[info]   CI (99.9%): [372.653, 7414.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 4.876 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.852), stdev = 1.266
[info]   CI (99.9%): [≈ 0, 5.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.429 ±(99.9%) 11.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.429, 6.943), stdev = 3.083
[info]   CI (99.9%): [≈ 0, 13.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.14% complete, ETA 00:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 671.672 ops/s
[info] # Warmup Iteration   2: 3222.537 ops/s
[info] # Warmup Iteration   3: 9181.225 ops/s
[info] # Warmup Iteration   4: 18013.378 ops/s
[info] # Warmup Iteration   5: 19895.036 ops/s
[info] Iteration   1: 19079.381 ops/s
[info]                  ·gc.alloc.rate:                   2550.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              210339.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2656.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219078.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.717 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 19818.097 ops/s
[info]                  ·gc.alloc.rate:                   2626.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              208607.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211704.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.431 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 19621.038 ops/s
[info]                  ·gc.alloc.rate:                   2659.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              213347.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214470.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.385 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 19608.990 ops/s
[info]                  ·gc.alloc.rate:                   2666.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              214063.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215189.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.073 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 19420.484 ops/s
[info]                  ·gc.alloc.rate:                   2600.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              210752.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217877.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.687 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   19509.598 ±(99.9%) 1072.834 ops/s [Average]
[info]   (min, avg, max) = (19079.381, 19509.598, 19818.097), stdev = 278.612
[info]   CI (99.9%): [18436.764, 20582.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2620.988 ±(99.9%) 182.940 MB/sec [Average]
[info]   (min, avg, max) = (2550.572, 2620.988, 2666.867), stdev = 47.509
[info]   CI (99.9%): [2438.049, 2803.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   211422.211 ±(99.9%) 8659.466 B/op [Average]
[info]   (min, avg, max) = (208607.349, 211422.211, 214063.852), stdev = 2248.836
[info]   CI (99.9%): [202762.746, 220081.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2673.171 ±(99.9%) 48.184 MB/sec [Average]
[info]   (min, avg, max) = (2656.535, 2673.171, 2688.566), stdev = 12.513
[info]   CI (99.9%): [2624.987, 2721.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   215664.094 ±(99.9%) 11207.716 B/op [Average]
[info]   (min, avg, max) = (211704.225, 215664.094, 219078.369), stdev = 2910.608
[info]   CI (99.9%): [204456.379, 226871.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.329 ±(99.9%) 1.348 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.329, 0.874), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 1.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.259 ±(99.9%) 107.006 B/op [Average]
[info]   (min, avg, max) = (1.687, 26.259, 69.431), stdev = 27.789
[info]   CI (99.9%): [≈ 0, 133.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:18:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12716.843 ops/s
[info] # Warmup Iteration   2: 72164.066 ops/s
[info] # Warmup Iteration   3: 74058.144 ops/s
[info] # Warmup Iteration   4: 75619.100 ops/s
[info] # Warmup Iteration   5: 75192.722 ops/s
[info] Iteration   1: 76220.191 ops/s
[info]                  ·gc.alloc.rate:                   3459.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              71437.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69076.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.290 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 76605.774 ops/s
[info]                  ·gc.alloc.rate:                   3491.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              71717.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3356.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68942.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.855 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 74688.748 ops/s
[info]                  ·gc.alloc.rate:               3407.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          71806.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3367.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70950.835 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 76295.147 ops/s
[info]                  ·gc.alloc.rate:               3479.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          71769.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69691.154 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 75310.166 ops/s
[info]                  ·gc.alloc.rate:               3409.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          71230.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2709.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56603.781 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   75824.005 ±(99.9%) 3070.234 ops/s [Average]
[info]   (min, avg, max) = (74688.748, 75824.005, 76605.774), stdev = 797.330
[info]   CI (99.9%): [72753.771, 78894.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3449.457 ±(99.9%) 150.017 MB/sec [Average]
[info]   (min, avg, max) = (3407.659, 3449.457, 3491.248), stdev = 38.959
[info]   CI (99.9%): [3299.441, 3599.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71592.231 ±(99.9%) 958.752 B/op [Average]
[info]   (min, avg, max) = (71230.397, 71592.231, 71806.062), stdev = 248.985
[info]   CI (99.9%): [70633.479, 72550.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3231.269 ±(99.9%) 1124.297 MB/sec [Average]
[info]   (min, avg, max) = (2709.429, 3231.269, 3378.375), stdev = 291.976
[info]   CI (99.9%): [2106.972, 4355.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   67052.786 ±(99.9%) 22699.263 B/op [Average]
[info]   (min, avg, max) = (56603.781, 67052.786, 70950.835), stdev = 5894.927
[info]   CI (99.9%): [44353.523, 89752.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.429 ±(99.9%) 2.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 1.290), stdev = 0.607
[info]   CI (99.9%): [≈ 0, 2.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.55% complete, ETA 00:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81689.715 ops/s
[info] # Warmup Iteration   2: 277946.651 ops/s
[info] # Warmup Iteration   3: 275900.475 ops/s
[info] # Warmup Iteration   4: 286010.825 ops/s
[info] # Warmup Iteration   5: 277342.334 ops/s
[info] Iteration   1: 277875.455 ops/s
[info]                  ·gc.alloc.rate:               1308.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          7407.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3780.393 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 284375.951 ops/s
[info]                  ·gc.alloc.rate:                   1365.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              7558.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7395.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 289677.495 ops/s
[info]                  ·gc.alloc.rate:                   1385.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              7523.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7267.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 286821.790 ops/s
[info]                  ·gc.alloc.rate:                   1374.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              7542.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7347.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 284498.608 ops/s
[info]                  ·gc.alloc.rate:                   1363.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              7543.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7392.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   284649.860 ±(99.9%) 16782.895 ops/s [Average]
[info]   (min, avg, max) = (277875.455, 284649.860, 289677.495), stdev = 4358.465
[info]   CI (99.9%): [267866.965, 301432.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1359.422 ±(99.9%) 115.015 MB/sec [Average]
[info]   (min, avg, max) = (1308.194, 1359.422, 1385.155), stdev = 29.869
[info]   CI (99.9%): [1244.407, 1474.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7515.147 ±(99.9%) 235.799 B/op [Average]
[info]   (min, avg, max) = (7407.774, 7515.147, 7558.070), stdev = 61.236
[info]   CI (99.9%): [7279.348, 7750.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.406 ±(99.9%) 1153.355 MB/sec [Average]
[info]   (min, avg, max) = (667.608, 1203.406, 1338.891), stdev = 299.523
[info]   CI (99.9%): [50.051, 2356.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6636.583 ±(99.9%) 6151.371 B/op [Average]
[info]   (min, avg, max) = (3780.393, 6636.583, 7395.346), stdev = 1597.491
[info]   CI (99.9%): [485.212, 12787.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.726), stdev = 1.653
[info]   CI (99.9%): [≈ 0, 7.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.227 ±(99.9%) 34.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.227, 20.447), stdev = 9.068
[info]   CI (99.9%): [≈ 0, 39.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.75% complete, ETA 00:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 714386.951 ops/s
[info] # Warmup Iteration   2: 1233299.752 ops/s
[info] # Warmup Iteration   3: 1192171.721 ops/s
[info] # Warmup Iteration   4: 1252190.595 ops/s
[info] # Warmup Iteration   5: 1246968.271 ops/s
[info] Iteration   1: 1255860.527 ops/s
[info]                  ·gc.alloc.rate:                   651.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     840.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1242400.283 ops/s
[info]                  ·gc.alloc.rate:               649.600 MB/sec
[info]                  ·gc.alloc.rate.norm:          822.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 849.395 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1227274.763 ops/s
[info]                  ·gc.alloc.rate:               639.822 MB/sec
[info]                  ·gc.alloc.rate.norm:          820.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 861.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1224359.534 ops/s
[info]                  ·gc.alloc.rate:                   633.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              814.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     863.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1245086.454 ops/s
[info]                  ·gc.alloc.rate:               643.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          813.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 849.196 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1238996.312 ±(99.9%) 50379.778 ops/s [Average]
[info]   (min, avg, max) = (1224359.534, 1238996.312, 1255860.527), stdev = 13083.468
[info]   CI (99.9%): [1188616.534, 1289376.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   643.646 ±(99.9%) 28.295 MB/sec [Average]
[info]   (min, avg, max) = (633.403, 643.646, 651.449), stdev = 7.348
[info]   CI (99.9%): [615.352, 671.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   817.553 ±(99.9%) 15.034 B/op [Average]
[info]   (min, avg, max) = (813.987, 817.553, 822.879), stdev = 3.904
[info]   CI (99.9%): [802.519, 832.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.203 ±(99.9%) 2.428 MB/sec [Average]
[info]   (min, avg, max) = (670.516, 671.203, 671.813), stdev = 0.631
[info]   CI (99.9%): [668.774, 673.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   852.634 ±(99.9%) 36.409 B/op [Average]
[info]   (min, avg, max) = (840.289, 852.634, 863.161), stdev = 9.455
[info]   CI (99.9%): [816.224, 889.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.95% complete, ETA 00:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733309.286 ops/s
[info] # Warmup Iteration   2: 1297445.504 ops/s
[info] # Warmup Iteration   3: 1326779.591 ops/s
[info] # Warmup Iteration   4: 1341001.620 ops/s
[info] # Warmup Iteration   5: 1340689.934 ops/s
[info] Iteration   1: 1340366.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1340907.104 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1338429.600 ops/s
[info]                  ·gc.alloc.rate:      0.500 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.588 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1338914.663 ops/s
[info]                  ·gc.alloc.rate:      0.087 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.102 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1310394.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1333802.524 ±(99.9%) 50538.167 ops/s [Average]
[info]   (min, avg, max) = (1310394.882, 1333802.524, 1340907.104), stdev = 13124.602
[info]   CI (99.9%): [1283264.357, 1384340.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.118 ±(99.9%) 0.836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.118, 0.500), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 0.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.138 ±(99.9%) 0.983 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.138, 0.588), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87.15% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3333.482 ops/s
[info] # Warmup Iteration   2: 21131.904 ops/s
[info] # Warmup Iteration   3: 44931.328 ops/s
[info] # Warmup Iteration   4: 46370.385 ops/s
[info] # Warmup Iteration   5: 44278.653 ops/s
[info] Iteration   1: 48645.347 ops/s
[info]                  ·gc.alloc.rate:               2646.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          85634.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2670.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86402.507 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 47634.308 ops/s
[info]                  ·gc.alloc.rate:                   2601.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              85959.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88048.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 48078.225 ops/s
[info]                  ·gc.alloc.rate:               2610.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          85443.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2668.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87364.979 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 48326.351 ops/s
[info]                  ·gc.alloc.rate:               2623.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          85434.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65343.462 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 47488.401 ops/s
[info]                  ·gc.alloc.rate:               2618.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          86797.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88972.761 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   48034.526 ±(99.9%) 1845.298 ops/s [Average]
[info]   (min, avg, max) = (47488.401, 48034.526, 48645.347), stdev = 479.218
[info]   CI (99.9%): [46189.228, 49879.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2620.160 ±(99.9%) 65.442 MB/sec [Average]
[info]   (min, avg, max) = (2601.664, 2620.160, 2646.685), stdev = 16.995
[info]   CI (99.9%): [2554.718, 2685.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85854.108 ±(99.9%) 2190.152 B/op [Average]
[info]   (min, avg, max) = (85434.938, 85854.108, 86797.768), stdev = 568.775
[info]   CI (99.9%): [83663.957, 88044.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2539.037 ±(99.9%) 1146.973 MB/sec [Average]
[info]   (min, avg, max) = (2006.365, 2539.037, 2684.572), stdev = 297.865
[info]   CI (99.9%): [1392.065, 3686.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83226.533 ±(99.9%) 38664.600 B/op [Average]
[info]   (min, avg, max) = (65343.462, 83226.533, 88972.761), stdev = 10041.074
[info]   CI (99.9%): [44561.933, 121891.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.138 ±(99.9%) 1.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.688), stdev = 0.308
[info]   CI (99.9%): [≈ 0, 1.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87.35% complete, ETA 00:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61382.388 ops/s
[info] # Warmup Iteration   2: 672195.959 ops/s
[info] # Warmup Iteration   3: 807823.981 ops/s
[info] # Warmup Iteration   4: 833945.366 ops/s
[info] # Warmup Iteration   5: 830947.032 ops/s
[info] Iteration   1: 832506.823 ops/s
[info]                  ·gc.alloc.rate:                   2241.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              4236.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3807.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.477 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 833550.458 ops/s
[info]                  ·gc.alloc.rate:                   2258.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              4261.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5043.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 847376.494 ops/s
[info]                  ·gc.alloc.rate:               2279.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          4234.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3722.904 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 854411.017 ops/s
[info]                  ·gc.alloc.rate:               2313.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          4260.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3695.945 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 850643.215 ops/s
[info]                  ·gc.alloc.rate:               2299.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          4255.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3719.705 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   843697.602 ±(99.9%) 38734.450 ops/s [Average]
[info]   (min, avg, max) = (832506.823, 843697.602, 854411.017), stdev = 10059.214
[info]   CI (99.9%): [804963.152, 882432.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2278.577 ±(99.9%) 114.498 MB/sec [Average]
[info]   (min, avg, max) = (2241.025, 2278.577, 2313.945), stdev = 29.735
[info]   CI (99.9%): [2164.079, 2393.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4249.700 ±(99.9%) 50.665 B/op [Average]
[info]   (min, avg, max) = (4234.413, 4249.700, 4261.493), stdev = 13.158
[info]   CI (99.9%): [4199.035, 4300.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2141.698 ±(99.9%) 1142.801 MB/sec [Average]
[info]   (min, avg, max) = (2004.425, 2141.698, 2672.561), stdev = 296.782
[info]   CI (99.9%): [998.898, 3284.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3997.834 ±(99.9%) 2256.836 B/op [Average]
[info]   (min, avg, max) = (3695.945, 3997.834, 5043.561), stdev = 586.093
[info]   CI (99.9%): [1740.998, 6254.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.955), stdev = 1.760
[info]   CI (99.9%): [≈ 0, 7.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.527 ±(99.9%) 12.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.527, 7.477), stdev = 3.327
[info]   CI (99.9%): [≈ 0, 14.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.55% complete, ETA 00:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50544.658 ops/s
[info] # Warmup Iteration   2: 1484078.946 ops/s
[info] # Warmup Iteration   3: 1804212.912 ops/s
[info] # Warmup Iteration   4: 1888410.540 ops/s
[info] # Warmup Iteration   5: 1891195.214 ops/s
[info] Iteration   1: 1885664.925 ops/s
[info]                  ·gc.alloc.rate:                   1208.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              1008.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1845990.338 ops/s
[info]                  ·gc.alloc.rate:               1161.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          990.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 569.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1871013.933 ops/s
[info]                  ·gc.alloc.rate:               1191.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          1001.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1124.093 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 1880329.716 ops/s
[info]                  ·gc.alloc.rate:                   1202.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              1006.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1119.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1879081.962 ops/s
[info]                  ·gc.alloc.rate:                   1192.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              998.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1120.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1872416.175 ±(99.9%) 60360.529 ops/s [Average]
[info]   (min, avg, max) = (1845990.338, 1872416.175, 1885664.925), stdev = 15675.438
[info]   CI (99.9%): [1812055.646, 1932776.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1191.439 ±(99.9%) 69.681 MB/sec [Average]
[info]   (min, avg, max) = (1161.890, 1191.439, 1208.957), stdev = 18.096
[info]   CI (99.9%): [1121.758, 1261.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1001.317 ±(99.9%) 28.393 B/op [Average]
[info]   (min, avg, max) = (990.190, 1001.317, 1008.932), stdev = 7.374
[info]   CI (99.9%): [972.924, 1029.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.966 ±(99.9%) 1152.045 MB/sec [Average]
[info]   (min, avg, max) = (667.778, 1202.966, 1338.247), stdev = 299.183
[info]   CI (99.9%): [50.921, 2355.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1009.538 ±(99.9%) 948.189 B/op [Average]
[info]   (min, avg, max) = (569.096, 1009.538, 1124.093), stdev = 246.242
[info]   CI (99.9%): [61.349, 1957.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.868 ±(99.9%) 7.429 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.868, 4.319), stdev = 1.929
[info]   CI (99.9%): [≈ 0, 8.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.727 ±(99.9%) 6.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.727, 3.618), stdev = 1.616
[info]   CI (99.9%): [≈ 0, 6.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.75% complete, ETA 00:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2560147.192 ops/s
[info] # Warmup Iteration   2: 7565236.645 ops/s
[info] # Warmup Iteration   3: 8250789.353 ops/s
[info] # Warmup Iteration   4: 8274270.521 ops/s
[info] # Warmup Iteration   5: 8300509.524 ops/s
[info] Iteration   1: 8277153.249 ops/s
[info]                  ·gc.alloc.rate:                   268.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8335810.182 ops/s
[info]                  ·gc.alloc.rate:      254.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8308628.206 ops/s
[info]                  ·gc.alloc.rate:               264.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96.910 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8291496.725 ops/s
[info]                  ·gc.alloc.rate:      252.872 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8291501.711 ops/s
[info]                  ·gc.alloc.rate:                   268.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8300918.015 ±(99.9%) 86513.222 ops/s [Average]
[info]   (min, avg, max) = (8277153.249, 8300918.015, 8335810.182), stdev = 22467.209
[info]   CI (99.9%): [8214404.793, 8387431.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   261.807 ±(99.9%) 29.687 MB/sec [Average]
[info]   (min, avg, max) = (252.872, 261.807, 268.937), stdev = 7.710
[info]   CI (99.9%): [232.120, 291.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.637 ±(99.9%) 5.905 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.637, 51.027), stdev = 1.534
[info]   CI (99.9%): [43.732, 55.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.003 ±(99.9%) 1079.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.003, 511.820), stdev = 280.254
[info]   CI (99.9%): [≈ 0, 1386.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   58.260 ±(99.9%) 204.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.260, 97.278), stdev = 53.184
[info]   CI (99.9%): [≈ 0, 263.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.95% complete, ETA 00:16:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1905.170 ops/s
[info] # Warmup Iteration   2: 76683.997 ops/s
[info] # Warmup Iteration   3: 251539.318 ops/s
[info] # Warmup Iteration   4: 279392.047 ops/s
[info] # Warmup Iteration   5: 267521.436 ops/s
[info] Iteration   1: 278847.319 ops/s
[info]                  ·gc.alloc.rate:               1807.505 MB/sec
[info]                  ·gc.alloc.rate.norm:          10201.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7553.667 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 279110.694 ops/s
[info]                  ·gc.alloc.rate:                   1814.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              10232.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11342.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 278345.743 ops/s
[info]                  ·gc.alloc.rate:                   1844.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              10424.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11395.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 279186.015 ops/s
[info]                  ·gc.alloc.rate:               1809.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          10202.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7578.321 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 278280.621 ops/s
[info]                  ·gc.alloc.rate:               1829.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          10345.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11408.008 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   278754.079 ±(99.9%) 1626.114 ops/s [Average]
[info]   (min, avg, max) = (278280.621, 278754.079, 279186.015), stdev = 422.297
[info]   CI (99.9%): [277127.964, 280380.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1821.011 ±(99.9%) 59.230 MB/sec [Average]
[info]   (min, avg, max) = (1807.505, 1821.011, 1844.003), stdev = 15.382
[info]   CI (99.9%): [1761.782, 1880.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10281.280 ±(99.9%) 383.300 B/op [Average]
[info]   (min, avg, max) = (10201.501, 10281.280, 10424.539), stdev = 99.542
[info]   CI (99.9%): [9897.980, 10664.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1745.401 ±(99.9%) 1420.546 MB/sec [Average]
[info]   (min, avg, max) = (1338.361, 1745.401, 2017.030), stdev = 368.911
[info]   CI (99.9%): [324.855, 3165.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9855.673 ±(99.9%) 8049.177 B/op [Average]
[info]   (min, avg, max) = (7553.667, 9855.673, 11408.008), stdev = 2090.346
[info]   CI (99.9%): [1806.496, 17904.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.333 ±(99.9%) 2.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.603), stdev = 0.711
[info]   CI (99.9%): [≈ 0, 3.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.883 ±(99.9%) 15.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.883, 9.063), stdev = 4.017
[info]   CI (99.9%): [≈ 0, 17.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88.15% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86006.802 ops/s
[info] # Warmup Iteration   2: 1017496.899 ops/s
[info] # Warmup Iteration   3: 1105182.759 ops/s
[info] # Warmup Iteration   4: 1106016.441 ops/s
[info] # Warmup Iteration   5: 1106707.388 ops/s
[info] Iteration   1: 1110577.789 ops/s
[info]                  ·gc.alloc.rate:               1788.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          2534.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1899.897 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1110688.335 ops/s
[info]                  ·gc.alloc.rate:                   1813.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              2569.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2851.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1120617.222 ops/s
[info]                  ·gc.alloc.rate:                   1854.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              2604.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2817.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1119207.053 ops/s
[info]                  ·gc.alloc.rate:               1827.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          2570.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1879.029 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1109017.942 ops/s
[info]                  ·gc.alloc.rate:               1825.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          2590.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2844.493 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1114021.668 ±(99.9%) 20949.613 ops/s [Average]
[info]   (min, avg, max) = (1109017.942, 1114021.668, 1120617.222), stdev = 5440.548
[info]   CI (99.9%): [1093072.055, 1134971.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1821.925 ±(99.9%) 92.284 MB/sec [Average]
[info]   (min, avg, max) = (1788.653, 1821.925, 1854.571), stdev = 23.966
[info]   CI (99.9%): [1729.641, 1914.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2573.812 ±(99.9%) 100.905 B/op [Average]
[info]   (min, avg, max) = (2534.923, 2573.812, 2604.260), stdev = 26.205
[info]   CI (99.9%): [2472.907, 2674.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1739.887 ±(99.9%) 1411.043 MB/sec [Average]
[info]   (min, avg, max) = (1336.393, 1739.887, 2012.079), stdev = 366.443
[info]   CI (99.9%): [328.844, 3150.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2458.314 ±(99.9%) 2000.401 B/op [Average]
[info]   (min, avg, max) = (1879.029, 2458.314, 2851.136), stdev = 519.498
[info]   CI (99.9%): [457.914, 4458.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.893), stdev = 1.726
[info]   CI (99.9%): [≈ 0, 7.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.144 ±(99.9%) 9.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.144, 5.516), stdev = 2.446
[info]   CI (99.9%): [≈ 0, 10.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.35% complete, ETA 00:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224285.939 ops/s
[info] # Warmup Iteration   2: 2589686.311 ops/s
[info] # Warmup Iteration   3: 2660410.210 ops/s
[info] # Warmup Iteration   4: 2689862.447 ops/s
[info] # Warmup Iteration   5: 2769105.684 ops/s
[info] Iteration   1: 2788644.253 ops/s
[info]                  ·gc.alloc.rate:               1227.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          692.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 750.416 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2769880.737 ops/s
[info]                  ·gc.alloc.rate:                   1222.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              694.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2784740.209 ops/s
[info]                  ·gc.alloc.rate:               1211.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          684.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 375.922 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 2782423.486 ops/s
[info]                  ·gc.alloc.rate:               1228.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          694.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 752.869 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2779935.380 ops/s
[info]                  ·gc.alloc.rate:               1226.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          694.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 754.638 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2781124.813 ±(99.9%) 27169.808 ops/s [Average]
[info]   (min, avg, max) = (2769880.737, 2781124.813, 2788644.253), stdev = 7055.913
[info]   CI (99.9%): [2753955.005, 2808294.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1223.226 ±(99.9%) 26.839 MB/sec [Average]
[info]   (min, avg, max) = (1211.477, 1223.226, 1228.230), stdev = 6.970
[info]   CI (99.9%): [1196.387, 1250.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   692.123 ±(99.9%) 16.398 B/op [Average]
[info]   (min, avg, max) = (684.685, 692.123, 694.599), stdev = 4.258
[info]   CI (99.9%): [675.725, 708.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1197.873 ±(99.9%) 1146.731 MB/sec [Average]
[info]   (min, avg, max) = (665.154, 1197.873, 1333.152), stdev = 297.802
[info]   CI (99.9%): [51.142, 2344.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   677.865 ±(99.9%) 649.998 B/op [Average]
[info]   (min, avg, max) = (375.922, 677.865, 755.479), stdev = 168.802
[info]   CI (99.9%): [27.867, 1327.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.55% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1275623.233 ops/s
[info] # Warmup Iteration   2: 5902661.761 ops/s
[info] # Warmup Iteration   3: 6200637.174 ops/s
[info] # Warmup Iteration   4: 6168384.322 ops/s
[info] # Warmup Iteration   5: 6192072.827 ops/s
[info] Iteration   1: 6202982.227 ops/s
[info]                  ·gc.alloc.rate:               718.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          182.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170.122 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6187122.820 ops/s
[info]                  ·gc.alloc.rate:               715.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          181.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6016168.322 ops/s
[info]                  ·gc.alloc.rate:                   711.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              185.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6107819.086 ops/s
[info]                  ·gc.alloc.rate:               701.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 6337834.555 ops/s
[info]                  ·gc.alloc.rate:                   725.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              180.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6170385.402 ±(99.9%) 459984.218 ops/s [Average]
[info]   (min, avg, max) = (6016168.322, 6170385.402, 6337834.555), stdev = 119456.441
[info]   CI (99.9%): [5710401.184, 6630369.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   714.498 ±(99.9%) 34.320 MB/sec [Average]
[info]   (min, avg, max) = (701.870, 714.498, 725.957), stdev = 8.913
[info]   CI (99.9%): [680.178, 748.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   182.233 ±(99.9%) 8.342 B/op [Average]
[info]   (min, avg, max) = (180.282, 182.233, 185.834), stdev = 2.167
[info]   CI (99.9%): [173.890, 190.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.895 ±(99.9%) 1151.270 MB/sec [Average]
[info]   (min, avg, max) = (670.522, 804.895, 1339.727), stdev = 298.981
[info]   CI (99.9%): [≈ 0, 1956.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   206.159 ±(99.9%) 310.095 B/op [Average]
[info]   (min, avg, max) = (166.833, 206.159, 350.161), stdev = 80.531
[info]   CI (99.9%): [≈ 0, 516.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.76% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 936862.441 ops/s
[info] # Warmup Iteration   2: 6498128.072 ops/s
[info] # Warmup Iteration   3: 6731230.347 ops/s
[info] # Warmup Iteration   4: 6871722.296 ops/s
[info] # Warmup Iteration   5: 6905299.898 ops/s
[info] Iteration   1: 6862844.743 ops/s
[info]                  ·gc.alloc.rate:               431.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.326 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6845731.457 ops/s
[info]                  ·gc.alloc.rate:               436.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.615 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6863514.312 ops/s
[info]                  ·gc.alloc.rate:                   439.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6883073.380 ops/s
[info]                  ·gc.alloc.rate:      419.900 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6862600.843 ops/s
[info]                  ·gc.alloc.rate:               433.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6863552.947 ±(99.9%) 50941.500 ops/s [Average]
[info]   (min, avg, max) = (6845731.457, 6863552.947, 6883073.380), stdev = 13229.346
[info]   CI (99.9%): [6812611.447, 6914494.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   432.320 ±(99.9%) 29.081 MB/sec [Average]
[info]   (min, avg, max) = (419.900, 432.320, 439.549), stdev = 7.552
[info]   CI (99.9%): [403.239, 461.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   99.133 ±(99.9%) 7.279 B/op [Average]
[info]   (min, avg, max) = (96.000, 99.133, 100.792), stdev = 1.890
[info]   CI (99.9%): [91.854, 106.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.830 ±(99.9%) 1062.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.830, 670.480), stdev = 275.996
[info]   CI (99.9%): [≈ 0, 1535.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   108.490 ±(99.9%) 243.759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108.490, 153.763), stdev = 63.303
[info]   CI (99.9%): [≈ 0, 352.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.96% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14445.027 ops/s
[info] # Warmup Iteration   2: 351816.774 ops/s
[info] # Warmup Iteration   3: 417568.283 ops/s
[info] # Warmup Iteration   4: 419082.059 ops/s
[info] # Warmup Iteration   5: 427712.806 ops/s
[info] Iteration   1: 423477.675 ops/s
[info]                  ·gc.alloc.rate:                   2385.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              8863.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7441.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.711 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 427958.590 ops/s
[info]                  ·gc.alloc.rate:               2422.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          8910.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2662.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9791.442 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 427724.136 ops/s
[info]                  ·gc.alloc.rate:                   2394.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              8810.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7348.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 422927.708 ops/s
[info]                  ·gc.alloc.rate:                   2368.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              8814.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9930.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 429234.437 ops/s
[info]                  ·gc.alloc.rate:                   2416.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              8861.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7365.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.611 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   426264.509 ±(99.9%) 11013.377 ops/s [Average]
[info]   (min, avg, max) = (422927.708, 426264.509, 429234.437), stdev = 2860.139
[info]   CI (99.9%): [415251.132, 437277.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2397.549 ±(99.9%) 86.414 MB/sec [Average]
[info]   (min, avg, max) = (2368.510, 2397.549, 2422.910), stdev = 22.441
[info]   CI (99.9%): [2311.135, 2483.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8851.835 ±(99.9%) 158.218 B/op [Average]
[info]   (min, avg, max) = (8810.298, 8851.835, 8910.161), stdev = 41.089
[info]   CI (99.9%): [8693.617, 9010.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2267.943 ±(99.9%) 1397.747 MB/sec [Average]
[info]   (min, avg, max) = (1997.125, 2267.943, 2668.541), stdev = 362.991
[info]   CI (99.9%): [870.196, 3665.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8375.633 ±(99.9%) 5227.010 B/op [Average]
[info]   (min, avg, max) = (7348.778, 8375.633, 9930.861), stdev = 1357.438
[info]   CI (99.9%): [3148.623, 13602.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.941 ±(99.9%) 7.659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.941, 4.497), stdev = 1.989
[info]   CI (99.9%): [≈ 0, 8.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.495 ±(99.9%) 28.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.495, 16.711), stdev = 7.392
[info]   CI (99.9%): [≈ 0, 31.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.16% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21738.338 ops/s
[info] # Warmup Iteration   2: 74768.702 ops/s
[info] # Warmup Iteration   3: 78647.323 ops/s
[info] # Warmup Iteration   4: 76993.584 ops/s
[info] # Warmup Iteration   5: 80048.127 ops/s
[info] Iteration   1: 80051.377 ops/s
[info]                  ·gc.alloc.rate:                   2220.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              43652.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39619.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 80783.086 ops/s
[info]                  ·gc.alloc.rate:                   2252.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              43891.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39155.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 79875.879 ops/s
[info]                  ·gc.alloc.rate:                   2242.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              44152.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52677.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 80451.751 ops/s
[info]                  ·gc.alloc.rate:               2257.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          44163.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39320.948 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 80706.272 ops/s
[info]                  ·gc.alloc.rate:               2265.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          44159.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39264.603 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   80373.673 ±(99.9%) 1535.449 ops/s [Average]
[info]   (min, avg, max) = (79875.879, 80373.673, 80783.086), stdev = 398.751
[info]   CI (99.9%): [78838.224, 81909.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2247.718 ±(99.9%) 67.281 MB/sec [Average]
[info]   (min, avg, max) = (2220.233, 2247.718, 2265.483), stdev = 17.473
[info]   CI (99.9%): [2180.437, 2314.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44003.856 ±(99.9%) 878.107 B/op [Average]
[info]   (min, avg, max) = (43652.395, 44003.856, 44163.343), stdev = 228.042
[info]   CI (99.9%): [43125.749, 44881.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2144.939 ±(99.9%) 1142.101 MB/sec [Average]
[info]   (min, avg, max) = (2009.742, 2144.939, 2675.496), stdev = 296.600
[info]   CI (99.9%): [1002.838, 3287.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42007.543 ±(99.9%) 22978.002 B/op [Average]
[info]   (min, avg, max) = (39155.316, 42007.543, 52677.775), stdev = 5967.314
[info]   CI (99.9%): [19029.541, 64985.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.622), stdev = 1.602
[info]   CI (99.9%): [≈ 0, 6.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.893 ±(99.9%) 121.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.893, 71.216), stdev = 31.508
[info]   CI (99.9%): [≈ 0, 136.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.36% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24928.678 ops/s
[info] # Warmup Iteration   2: 104594.379 ops/s
[info] # Warmup Iteration   3: 119493.084 ops/s
[info] # Warmup Iteration   4: 121248.920 ops/s
[info] # Warmup Iteration   5: 121497.902 ops/s
[info] Iteration   1: 120732.031 ops/s
[info]                  ·gc.alloc.rate:                   1889.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              24637.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17437.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 122039.132 ops/s
[info]                  ·gc.alloc.rate:                   1922.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              24797.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25875.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 119904.088 ops/s
[info]                  ·gc.alloc.rate:                   1915.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              25137.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26249.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 121396.189 ops/s
[info]                  ·gc.alloc.rate:               1925.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          24959.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25908.891 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 122750.206 ops/s
[info]                  ·gc.alloc.rate:               1959.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          25127.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25648.769 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   121364.329 ±(99.9%) 4265.852 ops/s [Average]
[info]   (min, avg, max) = (119904.088, 121364.329, 122750.206), stdev = 1107.828
[info]   CI (99.9%): [117098.477, 125630.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1922.606 ±(99.9%) 96.329 MB/sec [Average]
[info]   (min, avg, max) = (1889.916, 1922.606, 1959.695), stdev = 25.016
[info]   CI (99.9%): [1826.276, 2018.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24931.811 ±(99.9%) 830.595 B/op [Average]
[info]   (min, avg, max) = (24637.069, 24931.811, 25137.555), stdev = 215.703
[info]   CI (99.9%): [24101.217, 25762.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1868.590 ±(99.9%) 1142.960 MB/sec [Average]
[info]   (min, avg, max) = (1337.645, 1868.590, 2006.430), stdev = 296.823
[info]   CI (99.9%): [725.630, 3011.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24224.029 ±(99.9%) 14631.577 B/op [Average]
[info]   (min, avg, max) = (17437.623, 24224.029, 26249.157), stdev = 3799.774
[info]   CI (99.9%): [9592.452, 38855.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 7.603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 4.455), stdev = 1.975
[info]   CI (99.9%): [≈ 0, 8.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.927 ±(99.9%) 98.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.927, 57.451), stdev = 25.461
[info]   CI (99.9%): [≈ 0, 109.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.56% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51299.498 ops/s
[info] # Warmup Iteration   2: 172934.041 ops/s
[info] # Warmup Iteration   3: 172417.984 ops/s
[info] # Warmup Iteration   4: 179207.696 ops/s
[info] # Warmup Iteration   5: 178968.409 ops/s
[info] Iteration   1: 175472.483 ops/s
[info]                  ·gc.alloc.rate:                   2670.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              23955.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24072.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.934 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 179528.088 ops/s
[info]                  ·gc.alloc.rate:                   2717.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              23800.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23491.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.458 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 175745.297 ops/s
[info]                  ·gc.alloc.rate:               2669.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          23910.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18046.394 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 180912.826 ops/s
[info]                  ·gc.alloc.rate:               2755.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          23973.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23423.772 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 180854.300 ops/s
[info]                  ·gc.alloc.rate:                   2764.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              24055.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23490.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   178502.599 ±(99.9%) 10399.526 ops/s [Average]
[info]   (min, avg, max) = (175472.483, 178502.599, 180912.826), stdev = 2700.724
[info]   CI (99.9%): [168103.073, 188902.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2715.701 ±(99.9%) 172.805 MB/sec [Average]
[info]   (min, avg, max) = (2669.961, 2715.701, 2764.145), stdev = 44.877
[info]   CI (99.9%): [2542.897, 2888.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23939.208 ±(99.9%) 359.271 B/op [Average]
[info]   (min, avg, max) = (23800.971, 23939.208, 24055.152), stdev = 93.302
[info]   CI (99.9%): [23579.937, 24298.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2554.648 ±(99.9%) 1161.657 MB/sec [Average]
[info]   (min, avg, max) = (2015.128, 2554.648, 2699.223), stdev = 301.679
[info]   CI (99.9%): [1392.991, 3716.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22504.854 ±(99.9%) 9650.438 B/op [Average]
[info]   (min, avg, max) = (18046.394, 22504.854, 24072.437), stdev = 2506.188
[info]   CI (99.9%): [12854.417, 32155.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.514 ±(99.9%) 2.515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 1.458), stdev = 0.653
[info]   CI (99.9%): [≈ 0, 3.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.76% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6213.541 ops/s
[info] # Warmup Iteration   2: 52026.526 ops/s
[info] # Warmup Iteration   3: 58841.336 ops/s
[info] # Warmup Iteration   4: 58148.907 ops/s
[info] # Warmup Iteration   5: 60609.230 ops/s
[info] Iteration   1: 61283.099 ops/s
[info]                  ·gc.alloc.rate:                   3077.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              79047.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68497.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.604 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 60999.840 ops/s
[info]                  ·gc.alloc.rate:                   3119.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              80446.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86093.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 61599.184 ops/s
[info]                  ·gc.alloc.rate:               3121.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          79746.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68436.821 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 61385.130 ops/s
[info]                  ·gc.alloc.rate:               3138.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          80462.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86154.499 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 60992.930 ops/s
[info]                  ·gc.alloc.rate:               3093.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          79795.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69597.958 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   61252.036 ±(99.9%) 1000.295 ops/s [Average]
[info]   (min, avg, max) = (60992.930, 61252.036, 61599.184), stdev = 259.774
[info]   CI (99.9%): [60251.741, 62252.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3110.105 ±(99.9%) 92.525 MB/sec [Average]
[info]   (min, avg, max) = (3077.862, 3110.105, 3138.385), stdev = 24.028
[info]   CI (99.9%): [3017.580, 3202.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79899.735 ±(99.9%) 2259.215 B/op [Average]
[info]   (min, avg, max) = (79047.131, 79899.735, 80462.980), stdev = 586.711
[info]   CI (99.9%): [77640.520, 82158.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.542 ±(99.9%) 1409.826 MB/sec [Average]
[info]   (min, avg, max) = (2667.098, 2948.542, 3360.377), stdev = 366.127
[info]   CI (99.9%): [1538.715, 4358.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75756.158 ±(99.9%) 36488.471 B/op [Average]
[info]   (min, avg, max) = (68436.821, 75756.158, 86154.499), stdev = 9475.940
[info]   CI (99.9%): [39267.687, 112244.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.536 ±(99.9%) 2.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.536, 1.604), stdev = 0.757
[info]   CI (99.9%): [≈ 0, 3.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89.96% complete, ETA 00:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27226.348 ops/s
[info] # Warmup Iteration   2: 105271.747 ops/s
[info] # Warmup Iteration   3: 112698.760 ops/s
[info] # Warmup Iteration   4: 114693.304 ops/s
[info] # Warmup Iteration   5: 115142.157 ops/s
[info] Iteration   1: 114765.222 ops/s
[info]                  ·gc.alloc.rate:                   2296.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              31492.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27661.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 111300.256 ops/s
[info]                  ·gc.alloc.rate:                   2242.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              31714.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28465.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.766 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 111894.037 ops/s
[info]                  ·gc.alloc.rate:                   2255.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              31719.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37723.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.878 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 115271.939 ops/s
[info]                  ·gc.alloc.rate:                   2306.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              31496.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27499.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 115187.119 ops/s
[info]                  ·gc.alloc.rate:                   2306.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              31504.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27554.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   113683.714 ±(99.9%) 7415.905 ops/s [Average]
[info]   (min, avg, max) = (111300.256, 113683.714, 115271.939), stdev = 1925.887
[info]   CI (99.9%): [106267.810, 121099.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2281.592 ±(99.9%) 116.341 MB/sec [Average]
[info]   (min, avg, max) = (2242.872, 2281.592, 2306.858), stdev = 30.213
[info]   CI (99.9%): [2165.251, 2397.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   31585.569 ±(99.9%) 462.653 B/op [Average]
[info]   (min, avg, max) = (31492.535, 31585.569, 31719.570), stdev = 120.149
[info]   CI (99.9%): [31122.917, 32048.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2148.774 ±(99.9%) 1148.781 MB/sec [Average]
[info]   (min, avg, max) = (2013.086, 2148.774, 2682.442), stdev = 298.335
[info]   CI (99.9%): [999.994, 3297.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29781.018 ±(99.9%) 17163.867 B/op [Average]
[info]   (min, avg, max) = (27499.801, 29781.018, 37723.887), stdev = 4457.402
[info]   CI (99.9%): [12617.152, 46944.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 5.656 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.724, 3.351), stdev = 1.469
[info]   CI (99.9%): [≈ 0, 6.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   9.949 ±(99.9%) 77.544 B/op [Average]
[info]   (min, avg, max) = (0.568, 9.949, 45.962), stdev = 20.138
[info]   CI (99.9%): [≈ 0, 87.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90.16% complete, ETA 00:13:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41384.864 ops/s
[info] # Warmup Iteration   2: 185996.116 ops/s
[info] # Warmup Iteration   3: 189806.712 ops/s
[info] # Warmup Iteration   4: 191369.698 ops/s
[info] # Warmup Iteration   5: 191584.343 ops/s
[info] Iteration   1: 190345.037 ops/s
[info]                  ·gc.alloc.rate:               1340.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          11086.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11081.996 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 191349.052 ops/s
[info]                  ·gc.alloc.rate:               1365.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          11231.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11029.337 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 190296.406 ops/s
[info]                  ·gc.alloc.rate:                   1347.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              11144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11095.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 190624.108 ops/s
[info]                  ·gc.alloc.rate:                   1359.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              11222.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11087.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 188648.015 ops/s
[info]                  ·gc.alloc.rate:               1335.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          11139.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11170.850 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   190252.524 ±(99.9%) 3814.559 ops/s [Average]
[info]   (min, avg, max) = (188648.015, 190252.524, 191349.052), stdev = 990.629
[info]   CI (99.9%): [186437.964, 194067.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1349.609 ±(99.9%) 48.547 MB/sec [Average]
[info]   (min, avg, max) = (1335.199, 1349.609, 1365.499), stdev = 12.608
[info]   CI (99.9%): [1301.062, 1398.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11164.628 ±(99.9%) 235.691 B/op [Average]
[info]   (min, avg, max) = (11086.254, 11164.628, 11231.463), stdev = 61.208
[info]   CI (99.9%): [10928.937, 11400.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1340.926 ±(99.9%) 5.663 MB/sec [Average]
[info]   (min, avg, max) = (1338.986, 1340.926, 1342.935), stdev = 1.471
[info]   CI (99.9%): [1335.264, 1346.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11093.142 ±(99.9%) 195.117 B/op [Average]
[info]   (min, avg, max) = (11029.337, 11093.142, 11170.850), stdev = 50.671
[info]   CI (99.9%): [10898.025, 11288.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 6.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.560), stdev = 1.585
[info]   CI (99.9%): [≈ 0, 6.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.981 ±(99.9%) 50.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.981, 29.390), stdev = 13.088
[info]   CI (99.9%): [≈ 0, 56.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.36% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159994.182 ops/s
[info] # Warmup Iteration   2: 441876.815 ops/s
[info] # Warmup Iteration   3: 456700.849 ops/s
[info] # Warmup Iteration   4: 452856.079 ops/s
[info] # Warmup Iteration   5: 453954.305 ops/s
[info] Iteration   1: 453015.558 ops/s
[info]                  ·gc.alloc.rate:               404.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          1406.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1777.389 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 452726.668 ops/s
[info]                  ·gc.alloc.rate:               404.208 MB/sec
[info]                  ·gc.alloc.rate.norm:          1405.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1778.531 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 456533.243 ops/s
[info]                  ·gc.alloc.rate:      394.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 454256.181 ops/s
[info]                  ·gc.alloc.rate:               408.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          1416.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2306.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 455032.783 ops/s
[info]                  ·gc.alloc.rate:                   406.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              1407.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2302.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   454312.887 ±(99.9%) 5981.093 ops/s [Average]
[info]   (min, avg, max) = (452726.668, 454312.887, 456533.243), stdev = 1553.271
[info]   CI (99.9%): [448331.794, 460293.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   403.830 ±(99.9%) 21.265 MB/sec [Average]
[info]   (min, avg, max) = (394.502, 403.830, 408.751), stdev = 5.523
[info]   CI (99.9%): [382.565, 425.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1398.928 ±(99.9%) 85.502 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1398.928, 1416.211), stdev = 22.205
[info]   CI (99.9%): [1313.427, 1484.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.008 ±(99.9%) 1056.510 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.008, 666.013), stdev = 274.372
[info]   CI (99.9%): [≈ 0, 1527.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1633.137 ±(99.9%) 3658.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1633.137, 2306.858), stdev = 950.208
[info]   CI (99.9%): [≈ 0, 5292.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.56% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343644.471 ops/s
[info] # Warmup Iteration   2: 622741.792 ops/s
[info] # Warmup Iteration   3: 659222.910 ops/s
[info] # Warmup Iteration   4: 663112.413 ops/s
[info] # Warmup Iteration   5: 659555.975 ops/s
[info] Iteration   1: 646054.995 ops/s
[info]                  ·gc.alloc.rate:                   366.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              893.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 655287.755 ops/s
[info]                  ·gc.alloc.rate:               367.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          882.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1228.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 663034.848 ops/s
[info]                  ·gc.alloc.rate:      357.319 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 660473.388 ops/s
[info]                  ·gc.alloc.rate:               379.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          903.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1597.684 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 661784.736 ops/s
[info]                  ·gc.alloc.rate:      356.560 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   657327.144 ±(99.9%) 26786.710 ops/s [Average]
[info]   (min, avg, max) = (646054.995, 657327.144, 663034.848), stdev = 6956.424
[info]   CI (99.9%): [630540.434, 684113.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   365.541 ±(99.9%) 35.769 MB/sec [Average]
[info]   (min, avg, max) = (356.560, 365.541, 379.354), stdev = 9.289
[info]   CI (99.9%): [329.773, 401.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   875.265 ±(99.9%) 99.925 B/op [Average]
[info]   (min, avg, max) = (848.001, 875.265, 903.740), stdev = 25.950
[info]   CI (99.9%): [775.340, 975.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.778 ±(99.9%) 1216.807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.778, 670.645), stdev = 316.001
[info]   CI (99.9%): [≈ 0, 1555.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   814.556 ±(99.9%) 2918.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 814.556, 1597.684), stdev = 758.006
[info]   CI (99.9%): [≈ 0, 3733.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.76% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270966.285 ops/s
[info] # Warmup Iteration   2: 671807.725 ops/s
[info] # Warmup Iteration   3: 717131.272 ops/s
[info] # Warmup Iteration   4: 717279.706 ops/s
[info] # Warmup Iteration   5: 714817.886 ops/s
[info] Iteration   1: 717007.311 ops/s
[info]                  ·gc.alloc.rate:      7.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 717838.954 ops/s
[info]                  ·gc.alloc.rate:      7.340 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.092 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 717332.594 ops/s
[info]                  ·gc.alloc.rate:      7.293 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 717464.370 ops/s
[info]                  ·gc.alloc.rate:      7.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 717618.847 ops/s
[info]                  ·gc.alloc.rate:      7.295 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   717452.415 ±(99.9%) 1201.947 ops/s [Average]
[info]   (min, avg, max) = (717007.311, 717452.415, 717838.954), stdev = 312.142
[info]   CI (99.9%): [716250.469, 718654.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.302 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (7.289, 7.302, 7.340), stdev = 0.021
[info]   CI (99.9%): [7.221, 7.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.019 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.019, 16.092), stdev = 0.041
[info]   CI (99.9%): [15.861, 16.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.96% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12107.280 ops/s
[info] # Warmup Iteration   2: 31945.655 ops/s
[info] # Warmup Iteration   3: 35418.158 ops/s
[info] # Warmup Iteration   4: 35122.860 ops/s
[info] # Warmup Iteration   5: 35615.826 ops/s
[info] Iteration   1: 35693.691 ops/s
[info]                  ·gc.alloc.rate:                   1936.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              85402.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88752.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35539.777 ops/s
[info]                  ·gc.alloc.rate:                   1979.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              87658.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89021.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.487 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35892.548 ops/s
[info]                  ·gc.alloc.rate:                   1940.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              85089.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87897.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 36023.190 ops/s
[info]                  ·gc.alloc.rate:                   1928.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              84281.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58399.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35989.339 ops/s
[info]                  ·gc.alloc.rate:                   1939.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              84826.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87760.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.821 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   35827.709 ±(99.9%) 792.444 ops/s [Average]
[info]   (min, avg, max) = (35539.777, 35827.709, 36023.190), stdev = 205.795
[info]   CI (99.9%): [35035.265, 36620.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1945.135 ±(99.9%) 76.011 MB/sec [Average]
[info]   (min, avg, max) = (1928.960, 1945.135, 1979.484), stdev = 19.740
[info]   CI (99.9%): [1869.124, 2021.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85451.646 ±(99.9%) 5007.752 B/op [Average]
[info]   (min, avg, max) = (84281.478, 85451.646, 87658.615), stdev = 1300.497
[info]   CI (99.9%): [80443.895, 90459.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.237 ±(99.9%) 1157.365 MB/sec [Average]
[info]   (min, avg, max) = (1336.602, 1874.237, 2012.913), stdev = 300.564
[info]   CI (99.9%): [716.872, 3031.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82366.086 ±(99.9%) 51631.177 B/op [Average]
[info]   (min, avg, max) = (58399.749, 82366.086, 89021.132), stdev = 13408.453
[info]   CI (99.9%): [30734.909, 133997.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 5.085 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.824, 3.081), stdev = 1.321
[info]   CI (99.9%): [≈ 0, 5.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.379 ±(99.9%) 224.260 B/op [Average]
[info]   (min, avg, max) = (0.910, 36.379, 135.853), stdev = 58.240
[info]   CI (99.9%): [≈ 0, 260.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91.16% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50151.337 ops/s
[info] # Warmup Iteration   2: 119767.720 ops/s
[info] # Warmup Iteration   3: 123272.684 ops/s
[info] # Warmup Iteration   4: 124582.095 ops/s
[info] # Warmup Iteration   5: 124894.776 ops/s
[info] Iteration   1: 124760.619 ops/s
[info]                  ·gc.alloc.rate:                   1334.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              16831.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16958.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 124891.710 ops/s
[info]                  ·gc.alloc.rate:                   1333.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              16801.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16948.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 124579.028 ops/s
[info]                  ·gc.alloc.rate:                   1355.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              17128.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16999.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 125321.039 ops/s
[info]                  ·gc.alloc.rate:                   1334.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              16755.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8449.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 125255.411 ops/s
[info]                  ·gc.alloc.rate:                   1349.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              16953.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16874.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   124961.562 ±(99.9%) 1228.531 ops/s [Average]
[info]   (min, avg, max) = (124579.028, 124961.562, 125321.039), stdev = 319.046
[info]   CI (99.9%): [123733.030, 126190.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1341.347 ±(99.9%) 40.285 MB/sec [Average]
[info]   (min, avg, max) = (1333.282, 1341.347, 1355.833), stdev = 10.462
[info]   CI (99.9%): [1301.061, 1381.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16894.085 ±(99.9%) 578.342 B/op [Average]
[info]   (min, avg, max) = (16755.918, 16894.085, 17128.736), stdev = 150.194
[info]   CI (99.9%): [16315.743, 17472.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210.127 ±(99.9%) 1156.644 MB/sec [Average]
[info]   (min, avg, max) = (672.799, 1210.127, 1345.627), stdev = 300.377
[info]   CI (99.9%): [53.482, 2366.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   15246.190 ±(99.9%) 14631.536 B/op [Average]
[info]   (min, avg, max) = (8449.444, 15246.190, 16999.796), stdev = 3799.764
[info]   CI (99.9%): [614.653, 29877.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 4.702 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.691, 2.852), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8.723 ±(99.9%) 59.412 B/op [Average]
[info]   (min, avg, max) = (0.263, 8.723, 36.030), stdev = 15.429
[info]   CI (99.9%): [≈ 0, 68.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.37% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 816463.632 ops/s
[info] # Warmup Iteration   2: 3324034.673 ops/s
[info] # Warmup Iteration   3: 3483621.836 ops/s
[info] # Warmup Iteration   4: 3490958.257 ops/s
[info] # Warmup Iteration   5: 3520683.971 ops/s
[info] Iteration   1: 3517266.750 ops/s
[info]                  ·gc.alloc.rate:               3032.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          1356.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3350.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1499.344 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 3538250.499 ops/s
[info]                  ·gc.alloc.rate:                   3038.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              1351.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1193.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3501798.251 ops/s
[info]                  ·gc.alloc.rate:                   3007.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              1351.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1208.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3500473.111 ops/s
[info]                  ·gc.alloc.rate:               3034.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          1364.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1515.955 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 3486391.014 ops/s
[info]                  ·gc.alloc.rate:                   2996.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1352.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1220.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3508835.925 ±(99.9%) 76032.803 ops/s [Average]
[info]   (min, avg, max) = (3486391.014, 3508835.925, 3538250.499), stdev = 19745.478
[info]   CI (99.9%): [3432803.122, 3584868.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3021.691 ±(99.9%) 70.798 MB/sec [Average]
[info]   (min, avg, max) = (2996.727, 3021.691, 3038.146), stdev = 18.386
[info]   CI (99.9%): [2950.893, 3092.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1355.193 ±(99.9%) 21.071 B/op [Average]
[info]   (min, avg, max) = (1351.130, 1355.193, 1364.136), stdev = 5.472
[info]   CI (99.9%): [1334.123, 1376.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2960.281 ±(99.9%) 1409.850 MB/sec [Average]
[info]   (min, avg, max) = (2683.800, 2960.281, 3371.664), stdev = 366.134
[info]   CI (99.9%): [1550.431, 4370.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1327.710 ±(99.9%) 634.019 B/op [Average]
[info]   (min, avg, max) = (1193.545, 1327.710, 1515.955), stdev = 164.653
[info]   CI (99.9%): [693.690, 1961.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.028), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 1.483
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.57% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.799 ops/s
[info] # Warmup Iteration   2: 5592457.330 ops/s
[info] # Warmup Iteration   3: 5945623.310 ops/s
[info] # Warmup Iteration   4: 6005331.084 ops/s
[info] # Warmup Iteration   5: 5977598.770 ops/s
[info] Iteration   1: 5887348.626 ops/s
[info]                  ·gc.alloc.rate:               1131.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 5848044.030 ops/s
[info]                  ·gc.alloc.rate:               1142.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 359.103 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 5849294.839 ops/s
[info]                  ·gc.alloc.rate:                   1128.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6017044.072 ops/s
[info]                  ·gc.alloc.rate:               1158.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.677 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5991407.362 ops/s
[info]                  ·gc.alloc.rate:                   1174.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   5918627.786 ±(99.9%) 308953.543 ops/s [Average]
[info]   (min, avg, max) = (5848044.030, 5918627.786, 6017044.072), stdev = 80234.254
[info]   CI (99.9%): [5609674.243, 6227581.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1147.290 ±(99.9%) 74.068 MB/sec [Average]
[info]   (min, avg, max) = (1128.791, 1147.290, 1174.613), stdev = 19.235
[info]   CI (99.9%): [1073.221, 1221.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305.068 ±(99.9%) 10.581 B/op [Average]
[info]   (min, avg, max) = (302.544, 305.068, 308.560), stdev = 2.748
[info]   CI (99.9%): [294.487, 315.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1068.314 ±(99.9%) 1409.548 MB/sec [Average]
[info]   (min, avg, max) = (666.829, 1068.314, 1336.936), stdev = 366.055
[info]   CI (99.9%): [≈ 0, 2477.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   284.508 ±(99.9%) 380.008 B/op [Average]
[info]   (min, avg, max) = (174.677, 284.508, 359.297), stdev = 98.687
[info]   CI (99.9%): [≈ 0, 664.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.884 ±(99.9%) 7.535 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.884, 4.385), stdev = 1.957
[info]   CI (99.9%): [≈ 0, 8.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.232 ±(99.9%) 1.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.232, 1.152), stdev = 0.514
[info]   CI (99.9%): [≈ 0, 2.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.77% complete, ETA 00:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1271794.479 ops/s
[info] # Warmup Iteration   2: 3929038.708 ops/s
[info] # Warmup Iteration   3: 4007523.512 ops/s
[info] # Warmup Iteration   4: 4008915.052 ops/s
[info] # Warmup Iteration   5: 4022795.464 ops/s
[info] Iteration   1: 4123622.979 ops/s
[info]                  ·gc.alloc.rate:                   2266.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4101268.313 ops/s
[info]                  ·gc.alloc.rate:                   2267.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              870.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1024.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4112111.929 ops/s
[info]                  ·gc.alloc.rate:               2272.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 766.685 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 4124197.766 ops/s
[info]                  ·gc.alloc.rate:               2278.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 765.701 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4069685.832 ops/s
[info]                  ·gc.alloc.rate:               2253.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          871.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 777.528 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4106177.364 ±(99.9%) 86533.190 ops/s [Average]
[info]   (min, avg, max) = (4069685.832, 4106177.364, 4124197.766), stdev = 22472.395
[info]   CI (99.9%): [4019644.174, 4192710.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2267.738 ±(99.9%) 35.590 MB/sec [Average]
[info]   (min, avg, max) = (2253.348, 2267.738, 2278.280), stdev = 9.243
[info]   CI (99.9%): [2232.149, 2303.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   869.067 ±(99.9%) 9.377 B/op [Average]
[info]   (min, avg, max) = (864.846, 869.067, 871.051), stdev = 2.435
[info]   CI (99.9%): [859.690, 878.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2140.023 ±(99.9%) 1142.047 MB/sec [Average]
[info]   (min, avg, max) = (2003.179, 2140.023, 2670.545), stdev = 296.586
[info]   CI (99.9%): [997.976, 3282.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   820.207 ±(99.9%) 440.898 B/op [Average]
[info]   (min, avg, max) = (765.701, 820.207, 1024.842), stdev = 114.500
[info]   CI (99.9%): [379.309, 1261.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.894), stdev = 1.739
[info]   CI (99.9%): [≈ 0, 7.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.299 ±(99.9%) 2.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.299, 1.486), stdev = 0.664
[info]   CI (99.9%): [≈ 0, 2.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.97% complete, ETA 00:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3944236.590 ops/s
[info] # Warmup Iteration   2: 6772695.132 ops/s
[info] # Warmup Iteration   3: 6872985.837 ops/s
[info] # Warmup Iteration   4: 6661746.626 ops/s
[info] # Warmup Iteration   5: 6696145.995 ops/s
[info] Iteration   1: 6717968.085 ops/s
[info]                  ·gc.alloc.rate:                   1293.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6694430.021 ops/s
[info]                  ·gc.alloc.rate:                   1297.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6882929.022 ops/s
[info]                  ·gc.alloc.rate:               1320.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          301.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.850 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6755927.713 ops/s
[info]                  ·gc.alloc.rate:                   1324.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6599182.925 ops/s
[info]                  ·gc.alloc.rate:                   1307.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              311.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6730087.553 ±(99.9%) 397300.770 ops/s [Average]
[info]   (min, avg, max) = (6599182.925, 6730087.553, 6882929.022), stdev = 103177.748
[info]   CI (99.9%): [6332786.783, 7127388.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1308.787 ±(99.9%) 52.646 MB/sec [Average]
[info]   (min, avg, max) = (1293.629, 1308.787, 1324.474), stdev = 13.672
[info]   CI (99.9%): [1256.140, 1361.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   306.044 ±(99.9%) 15.569 B/op [Average]
[info]   (min, avg, max) = (301.981, 306.044, 311.775), stdev = 4.043
[info]   CI (99.9%): [290.475, 321.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.037 ±(99.9%) 1158.296 MB/sec [Average]
[info]   (min, avg, max) = (672.943, 1211.037, 1347.302), stdev = 300.806
[info]   CI (99.9%): [52.741, 2369.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   283.908 ±(99.9%) 280.135 B/op [Average]
[info]   (min, avg, max) = (153.850, 283.908, 320.611), stdev = 72.750
[info]   CI (99.9%): [3.773, 564.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.571 ±(99.9%) 4.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.571, 2.790), stdev = 1.241
[info]   CI (99.9%): [≈ 0, 5.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.133 ±(99.9%) 1.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.650), stdev = 0.289
[info]   CI (99.9%): [≈ 0, 1.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.17% complete, ETA 00:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1112212.072 ops/s
[info] # Warmup Iteration   2: 3805421.777 ops/s
[info] # Warmup Iteration   3: 4209103.256 ops/s
[info] # Warmup Iteration   4: 4068111.663 ops/s
[info] # Warmup Iteration   5: 4183764.920 ops/s
[info] Iteration   1: 4155233.789 ops/s
[info]                  ·gc.alloc.rate:                   2486.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1014.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4180484.474 ops/s
[info]                  ·gc.alloc.rate:                   2501.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1006.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4191787.071 ops/s
[info]                  ·gc.alloc.rate:               2508.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 753.442 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 4195857.863 ops/s
[info]                  ·gc.alloc.rate:               2538.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1005.968 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 4188466.027 ops/s
[info]                  ·gc.alloc.rate:               2506.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 757.833 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4182365.845 ±(99.9%) 62319.024 ops/s [Average]
[info]   (min, avg, max) = (4155233.789, 4182365.845, 4195857.863), stdev = 16184.053
[info]   CI (99.9%): [4120046.820, 4244684.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2508.170 ±(99.9%) 73.645 MB/sec [Average]
[info]   (min, avg, max) = (2486.228, 2508.170, 2538.668), stdev = 19.125
[info]   CI (99.9%): [2434.525, 2581.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   943.784 ±(99.9%) 17.634 B/op [Average]
[info]   (min, avg, max) = (941.631, 943.784, 951.974), stdev = 4.579
[info]   CI (99.9%): [926.151, 961.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.463 ±(99.9%) 1405.168 MB/sec [Average]
[info]   (min, avg, max) = (2006.791, 2411.463, 2682.656), stdev = 364.918
[info]   CI (99.9%): [1006.295, 3816.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   907.593 ±(99.9%) 534.338 B/op [Average]
[info]   (min, avg, max) = (753.442, 907.593, 1014.421), stdev = 138.766
[info]   CI (99.9%): [373.255, 1441.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 1.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.729), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.060 ±(99.9%) 0.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.276), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92.37% complete, ETA 00:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1381404.382 ops/s
[info] # Warmup Iteration   2: 3799188.463 ops/s
[info] # Warmup Iteration   3: 3919129.205 ops/s
[info] # Warmup Iteration   4: 3978511.355 ops/s
[info] # Warmup Iteration   5: 3988301.611 ops/s
[info] Iteration   1: 3979878.336 ops/s
[info]                  ·gc.alloc.rate:                   2277.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              900.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1063.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.259 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 3987433.475 ops/s
[info]                  ·gc.alloc.rate:                   2254.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              889.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3998947.036 ops/s
[info]                  ·gc.alloc.rate:                   2273.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              894.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     792.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3987371.866 ops/s
[info]                  ·gc.alloc.rate:                   2268.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     795.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3994788.662 ops/s
[info]                  ·gc.alloc.rate:                   2300.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              906.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   3989683.875 ±(99.9%) 28454.622 ops/s [Average]
[info]   (min, avg, max) = (3979878.336, 3989683.875, 3998947.036), stdev = 7389.575
[info]   CI (99.9%): [3961229.253, 4018138.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2274.953 ±(99.9%) 64.957 MB/sec [Average]
[info]   (min, avg, max) = (2254.430, 2274.953, 2300.697), stdev = 16.869
[info]   CI (99.9%): [2209.997, 2339.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   897.268 ±(99.9%) 24.352 B/op [Average]
[info]   (min, avg, max) = (889.836, 897.268, 906.224), stdev = 6.324
[info]   CI (99.9%): [872.917, 921.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2284.603 ±(99.9%) 1428.366 MB/sec [Average]
[info]   (min, avg, max) = (2012.386, 2284.603, 2691.880), stdev = 370.942
[info]   CI (99.9%): [856.238, 3712.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   901.144 ±(99.9%) 565.488 B/op [Average]
[info]   (min, avg, max) = (792.022, 901.144, 1063.703), stdev = 146.855
[info]   CI (99.9%): [335.656, 1466.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 5.414 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.670, 3.184), stdev = 1.406
[info]   CI (99.9%): [≈ 0, 6.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.265 ±(99.9%) 2.141 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.265, 1.259), stdev = 0.556
[info]   CI (99.9%): [≈ 0, 2.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.049
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.57% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1088093.118 ops/s
[info] # Warmup Iteration   2: 2117874.841 ops/s
[info] # Warmup Iteration   3: 2173695.925 ops/s
[info] # Warmup Iteration   4: 2190433.933 ops/s
[info] # Warmup Iteration   5: 2135570.276 ops/s
[info] Iteration   1: 2193082.644 ops/s
[info]                  ·gc.alloc.rate:               1297.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          931.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 481.389 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2172639.352 ops/s
[info]                  ·gc.alloc.rate:                   1300.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     972.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 2195692.246 ops/s
[info]                  ·gc.alloc.rate:                   1312.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2197470.194 ops/s
[info]                  ·gc.alloc.rate:                   1326.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2203541.083 ops/s
[info]                  ·gc.alloc.rate:                   1316.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              940.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2192485.104 ±(99.9%) 45217.712 ops/s [Average]
[info]   (min, avg, max) = (2172639.352, 2192485.104, 2203541.083), stdev = 11742.896
[info]   CI (99.9%): [2147267.391, 2237702.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1310.956 ±(99.9%) 45.498 MB/sec [Average]
[info]   (min, avg, max) = (1297.996, 1310.956, 1326.422), stdev = 11.816
[info]   CI (99.9%): [1265.458, 1356.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   941.062 ±(99.9%) 25.262 B/op [Average]
[info]   (min, avg, max) = (931.518, 941.062, 950.008), stdev = 6.560
[info]   CI (99.9%): [915.800, 966.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.639 ±(99.9%) 1157.796 MB/sec [Average]
[info]   (min, avg, max) = (670.777, 1208.639, 1344.276), stdev = 300.676
[info]   CI (99.9%): [50.843, 2366.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   867.664 ±(99.9%) 831.737 B/op [Average]
[info]   (min, avg, max) = (481.389, 867.664, 972.796), stdev = 215.999
[info]   CI (99.9%): [35.927, 1699.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.674 ±(99.9%) 5.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.143), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 5.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.483 ±(99.9%) 3.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 2.251), stdev = 0.989
[info]   CI (99.9%): [≈ 0, 4.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.793
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.77% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.806 ops/s
[info] # Warmup Iteration   2: 5437384.330 ops/s
[info] # Warmup Iteration   3: 6027536.077 ops/s
[info] # Warmup Iteration   4: 5970611.758 ops/s
[info] # Warmup Iteration   5: 6035955.643 ops/s
[info] Iteration   1: 6039800.241 ops/s
[info]                  ·gc.alloc.rate:               604.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6038234.859 ops/s
[info]                  ·gc.alloc.rate:               602.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6032735.118 ops/s
[info]                  ·gc.alloc.rate:                   602.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6035913.353 ops/s
[info]                  ·gc.alloc.rate:                   608.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5965592.813 ops/s
[info]                  ·gc.alloc.rate:               598.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6022455.277 ±(99.9%) 122828.566 ops/s [Average]
[info]   (min, avg, max) = (5965592.813, 6022455.277, 6039800.241), stdev = 31898.188
[info]   CI (99.9%): [5899626.711, 6145283.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   603.147 ±(99.9%) 13.885 MB/sec [Average]
[info]   (min, avg, max) = (598.524, 603.147, 608.427), stdev = 3.606
[info]   CI (99.9%): [589.262, 617.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.602 ±(99.9%) 2.561 B/op [Average]
[info]   (min, avg, max) = (157.039, 157.602, 158.639), stdev = 0.665
[info]   CI (99.9%): [155.041, 160.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.263 ±(99.9%) 1.975 MB/sec [Average]
[info]   (min, avg, max) = (665.864, 666.263, 667.126), stdev = 0.513
[info]   CI (99.9%): [664.288, 668.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   174.098 ±(99.9%) 3.956 B/op [Average]
[info]   (min, avg, max) = (173.507, 174.098, 175.924), stdev = 1.027
[info]   CI (99.9%): [170.142, 178.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.97% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1831126.872 ops/s
[info] # Warmup Iteration   2: 4480160.747 ops/s
[info] # Warmup Iteration   3: 4703320.855 ops/s
[info] # Warmup Iteration   4: 4652071.159 ops/s
[info] # Warmup Iteration   5: 4611444.450 ops/s
[info] Iteration   1: 4600449.343 ops/s
[info]                  ·gc.alloc.rate:               1248.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          427.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 455.791 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 4546472.197 ops/s
[info]                  ·gc.alloc.rate:                   1242.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     461.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4641816.136 ops/s
[info]                  ·gc.alloc.rate:               1240.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          420.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 225.977 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 4586087.066 ops/s
[info]                  ·gc.alloc.rate:               1253.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          430.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 457.888 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 4654597.036 ops/s
[info]                  ·gc.alloc.rate:               1269.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          429.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 452.070 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4605884.356 ±(99.9%) 168014.485 ops/s [Average]
[info]   (min, avg, max) = (4546472.197, 4605884.356, 4654597.036), stdev = 43632.828
[info]   CI (99.9%): [4437869.871, 4773898.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1250.709 ±(99.9%) 45.255 MB/sec [Average]
[info]   (min, avg, max) = (1240.247, 1250.709, 1269.621), stdev = 11.753
[info]   CI (99.9%): [1205.453, 1295.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   427.368 ±(99.9%) 15.420 B/op [Average]
[info]   (min, avg, max) = (420.524, 427.368, 430.033), stdev = 4.004
[info]   CI (99.9%): [411.949, 442.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.595 ±(99.9%) 1149.762 MB/sec [Average]
[info]   (min, avg, max) = (666.471, 1200.595, 1336.952), stdev = 298.589
[info]   CI (99.9%): [50.833, 2350.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   410.609 ±(99.9%) 397.645 B/op [Average]
[info]   (min, avg, max) = (225.977, 410.609, 461.320), stdev = 103.267
[info]   CI (99.9%): [12.964, 808.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93.17% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3764466.587 ops/s
[info] # Warmup Iteration   2: 5625609.723 ops/s
[info] # Warmup Iteration   3: 5857197.492 ops/s
[info] # Warmup Iteration   4: 5912288.454 ops/s
[info] # Warmup Iteration   5: 5900352.028 ops/s
[info] Iteration   1: 5984855.406 ops/s
[info]                  ·gc.alloc.rate:               598.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6040813.600 ops/s
[info]                  ·gc.alloc.rate:               607.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5993868.685 ops/s
[info]                  ·gc.alloc.rate:               604.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.325 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6065162.359 ops/s
[info]                  ·gc.alloc.rate:      585.771 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6058632.478 ops/s
[info]                  ·gc.alloc.rate:                   608.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   6028666.506 ±(99.9%) 142886.386 ops/s [Average]
[info]   (min, avg, max) = (5984855.406, 6028666.506, 6065162.359), stdev = 37107.141
[info]   CI (99.9%): [5885780.120, 6171552.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   601.132 ±(99.9%) 36.399 MB/sec [Average]
[info]   (min, avg, max) = (585.771, 601.132, 608.779), stdev = 9.453
[info]   CI (99.9%): [564.734, 637.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   156.928 ±(99.9%) 10.753 B/op [Average]
[info]   (min, avg, max) = (152.000, 156.928, 158.688), stdev = 2.793
[info]   CI (99.9%): [146.175, 167.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.983 ±(99.9%) 1155.897 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.983, 671.607), stdev = 300.183
[info]   CI (99.9%): [≈ 0, 1692.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   140.390 ±(99.9%) 302.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.390, 176.410), stdev = 78.485
[info]   CI (99.9%): [≈ 0, 442.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.37% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3976693.760 ops/s
[info] # Warmup Iteration   2: 6433368.887 ops/s
[info] # Warmup Iteration   3: 6465151.312 ops/s
[info] # Warmup Iteration   4: 6465674.536 ops/s
[info] # Warmup Iteration   5: 5936426.104 ops/s
[info] Iteration   1: 6467300.902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6460751.072 ops/s
[info]                  ·gc.alloc.rate:      0.249 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6399349.491 ops/s
[info]                  ·gc.alloc.rate:      0.997 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.245 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6470110.699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6467595.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6453021.493 ±(99.9%) 116299.146 ops/s [Average]
[info]   (min, avg, max) = (6399349.491, 6453021.493, 6470110.699), stdev = 30202.519
[info]   CI (99.9%): [6336722.347, 6569320.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.249 ±(99.9%) 1.661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.249, 0.997), stdev = 0.431
[info]   CI (99.9%): [≈ 0, 1.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.061 ±(99.9%) 0.408 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.061, 0.245), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.57% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1818780.155 ops/s
[info] # Warmup Iteration   2: 4299145.029 ops/s
[info] # Warmup Iteration   3: 4519639.126 ops/s
[info] # Warmup Iteration   4: 4639482.976 ops/s
[info] # Warmup Iteration   5: 4589442.513 ops/s
[info] Iteration   1: 4633626.277 ops/s
[info]                  ·gc.alloc.rate:                   1304.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     455.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4415044.136 ops/s
[info]                  ·gc.alloc.rate:               1240.892 MB/sec
[info]                  ·gc.alloc.rate.norm:          442.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 478.256 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 4551695.171 ops/s
[info]                  ·gc.alloc.rate:               1288.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464.132 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 4549391.435 ops/s
[info]                  ·gc.alloc.rate:                   1289.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4547515.888 ops/s
[info]                  ·gc.alloc.rate:                   1300.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4539454.581 ±(99.9%) 302341.914 ops/s [Average]
[info]   (min, avg, max) = (4415044.136, 4539454.581, 4633626.277), stdev = 78517.235
[info]   CI (99.9%): [4237112.667, 4841796.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1284.682 ±(99.9%) 97.793 MB/sec [Average]
[info]   (min, avg, max) = (1240.892, 1284.682, 1304.201), stdev = 25.397
[info]   CI (99.9%): [1186.889, 1382.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   445.356 ±(99.9%) 11.615 B/op [Average]
[info]   (min, avg, max) = (442.251, 445.356, 449.906), stdev = 3.016
[info]   CI (99.9%): [433.741, 456.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.752 ±(99.9%) 3.779 MB/sec [Average]
[info]   (min, avg, max) = (1340.656, 1341.752, 1343.032), stdev = 0.981
[info]   CI (99.9%): [1337.972, 1345.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   465.263 ±(99.9%) 31.558 B/op [Average]
[info]   (min, avg, max) = (455.456, 465.263, 478.256), stdev = 8.195
[info]   CI (99.9%): [433.705, 496.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 6.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.518), stdev = 1.567
[info]   CI (99.9%): [≈ 0, 6.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.248 ±(99.9%) 2.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.248, 1.217), stdev = 0.542
[info]   CI (99.9%): [≈ 0, 2.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93.78% complete, ETA 00:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277161.027 ops/s
[info] # Warmup Iteration   2: 398192.644 ops/s
[info] # Warmup Iteration   3: 395244.092 ops/s
[info] # Warmup Iteration   4: 402057.310 ops/s
[info] # Warmup Iteration   5: 401730.426 ops/s
[info] Iteration   1: 403557.256 ops/s
[info]                  ·gc.alloc.rate:      387.748 MB/sec
[info]                  ·gc.alloc.rate.norm: 1512.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 401418.670 ops/s
[info]                  ·gc.alloc.rate:               397.470 MB/sec
[info]                  ·gc.alloc.rate.norm:          1557.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2005.914 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 401643.733 ops/s
[info]                  ·gc.alloc.rate:                   405.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              1588.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2629.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 403286.812 ops/s
[info]                  ·gc.alloc.rate:      387.435 MB/sec
[info]                  ·gc.alloc.rate.norm: 1512.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 402523.278 ops/s
[info]                  ·gc.alloc.rate:               411.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          1610.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2624.097 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   402485.950 ±(99.9%) 3672.719 ops/s [Average]
[info]   (min, avg, max) = (401418.670, 402485.950, 403557.256), stdev = 953.793
[info]   CI (99.9%): [398813.231, 406158.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   397.961 ±(99.9%) 41.410 MB/sec [Average]
[info]   (min, avg, max) = (387.435, 397.961, 411.883), stdev = 10.754
[info]   CI (99.9%): [356.552, 439.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   1556.085 ±(99.9%) 170.946 B/op [Average]
[info]   (min, avg, max) = (1512.001, 1556.085, 1610.589), stdev = 44.394
[info]   CI (99.9%): [1385.139, 1727.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   370.807 ±(99.9%) 1327.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.807, 671.146), stdev = 344.689
[info]   CI (99.9%): [≈ 0, 1698.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1451.986 ±(99.9%) 5196.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1451.986, 2629.917), stdev = 1349.512
[info]   CI (99.9%): [≈ 0, 6648.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.163), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.98% complete, ETA 00:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359458.079 ops/s
[info] # Warmup Iteration   2: 1503867.979 ops/s
[info] # Warmup Iteration   3: 1586636.715 ops/s
[info] # Warmup Iteration   4: 1576089.600 ops/s
[info] # Warmup Iteration   5: 1586977.754 ops/s
[info] Iteration   1: 1555299.016 ops/s
[info]                  ·gc.alloc.rate:                   2084.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              2108.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2041.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1567468.984 ops/s
[info]                  ·gc.alloc.rate:                   2110.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              2118.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2021.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1594842.416 ops/s
[info]                  ·gc.alloc.rate:               2136.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          2108.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1986.008 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1591101.839 ops/s
[info]                  ·gc.alloc.rate:                   2158.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              2134.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1991.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1593007.992 ops/s
[info]                  ·gc.alloc.rate:                   2161.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              2135.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1991.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1580344.050 ±(99.9%) 68864.360 ops/s [Average]
[info]   (min, avg, max) = (1555299.016, 1580344.050, 1594842.416), stdev = 17883.855
[info]   CI (99.9%): [1511479.690, 1649208.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2130.097 ±(99.9%) 126.793 MB/sec [Average]
[info]   (min, avg, max) = (2084.168, 2130.097, 2161.697), stdev = 32.928
[info]   CI (99.9%): [2003.304, 2256.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2121.082 ±(99.9%) 51.414 B/op [Average]
[info]   (min, avg, max) = (2108.167, 2121.082, 2135.228), stdev = 13.352
[info]   CI (99.9%): [2069.668, 2172.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2014.637 ±(99.9%) 7.792 MB/sec [Average]
[info]   (min, avg, max) = (2012.506, 2014.637, 2017.195), stdev = 2.024
[info]   CI (99.9%): [2006.845, 2022.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2006.385 ±(99.9%) 92.717 B/op [Average]
[info]   (min, avg, max) = (1986.008, 2006.385, 2041.217), stdev = 24.078
[info]   CI (99.9%): [1913.668, 2099.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.620 ±(99.9%) 5.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.620, 3.039), stdev = 1.352
[info]   CI (99.9%): [≈ 0, 5.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.628 ±(99.9%) 5.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.628, 3.076), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 5.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94.18% complete, ETA 00:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.583 ops/s
[info] # Warmup Iteration   2: 2733857.122 ops/s
[info] # Warmup Iteration   3: 2818007.014 ops/s
[info] # Warmup Iteration   4: 2732294.984 ops/s
[info] # Warmup Iteration   5: 2851118.360 ops/s
[info] Iteration   1: 2862495.751 ops/s
[info]                  ·gc.alloc.rate:               557.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366.263 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2823363.970 ops/s
[info]                  ·gc.alloc.rate:               549.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.349 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2857761.539 ops/s
[info]                  ·gc.alloc.rate:                   560.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2860771.306 ops/s
[info]                  ·gc.alloc.rate:      538.172 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2851872.310 ops/s
[info]                  ·gc.alloc.rate:                   551.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2851252.975 ±(99.9%) 62016.298 ops/s [Average]
[info]   (min, avg, max) = (2823363.970, 2851252.975, 2862495.751), stdev = 16105.436
[info]   CI (99.9%): [2789236.677, 2913269.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   551.157 ±(99.9%) 32.555 MB/sec [Average]
[info]   (min, avg, max) = (538.172, 551.157, 560.003), stdev = 8.454
[info]   CI (99.9%): [518.603, 583.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.186 ±(99.9%) 18.512 B/op [Average]
[info]   (min, avg, max) = (296.000, 304.186, 308.406), stdev = 4.807
[info]   CI (99.9%): [285.674, 322.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.141 ±(99.9%) 1147.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.141, 666.749), stdev = 298.035
[info]   CI (99.9%): [≈ 0, 1680.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   294.498 ±(99.9%) 633.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 294.498, 371.349), stdev = 164.641
[info]   CI (99.9%): [≈ 0, 928.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.38% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205586.973 ops/s
[info] # Warmup Iteration   2: 1674204.649 ops/s
[info] # Warmup Iteration   3: 1737444.139 ops/s
[info] # Warmup Iteration   4: 1743209.909 ops/s
[info] # Warmup Iteration   5: 1752351.075 ops/s
[info] Iteration   1: 1754862.413 ops/s
[info]                  ·gc.alloc.rate:                   959.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              860.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     598.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1714917.219 ops/s
[info]                  ·gc.alloc.rate:                   953.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              875.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1701330.231 ops/s
[info]                  ·gc.alloc.rate:               934.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          864.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 618.374 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1715964.314 ops/s
[info]                  ·gc.alloc.rate:               942.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          864.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 613.724 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1745328.324 ops/s
[info]                  ·gc.alloc.rate:                   972.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              877.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1207.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1726480.500 ±(99.9%) 86908.811 ops/s [Average]
[info]   (min, avg, max) = (1701330.231, 1726480.500, 1754862.413), stdev = 22569.942
[info]   CI (99.9%): [1639571.689, 1813389.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   952.468 ±(99.9%) 57.036 MB/sec [Average]
[info]   (min, avg, max) = (934.305, 952.468, 972.576), stdev = 14.812
[info]   CI (99.9%): [895.433, 1009.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   868.266 ±(99.9%) 28.673 B/op [Average]
[info]   (min, avg, max) = (860.162, 868.266, 877.072), stdev = 7.446
[info]   CI (99.9%): [839.593, 896.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.085 ±(99.9%) 1410.906 MB/sec [Average]
[info]   (min, avg, max) = (667.891, 936.085, 1338.581), stdev = 366.408
[info]   CI (99.9%): [≈ 0, 2346.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   852.925 ±(99.9%) 1279.582 B/op [Average]
[info]   (min, avg, max) = (598.961, 852.925, 1226.431), stdev = 332.303
[info]   CI (99.9%): [≈ 0, 2132.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.031), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.028), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.58% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1086776.280 ops/s
[info] # Warmup Iteration   2: 2262266.802 ops/s
[info] # Warmup Iteration   3: 2430055.246 ops/s
[info] # Warmup Iteration   4: 2416534.631 ops/s
[info] # Warmup Iteration   5: 2396049.186 ops/s
[info] Iteration   1: 2398423.607 ops/s
[info]                  ·gc.alloc.rate:                   469.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     335.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2411135.499 ops/s
[info]                  ·gc.alloc.rate:      453.521 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2390137.354 ops/s
[info]                  ·gc.alloc.rate:               465.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 442.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2402778.667 ops/s
[info]                  ·gc.alloc.rate:               476.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          312.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 440.041 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2412711.601 ops/s
[info]                  ·gc.alloc.rate:      453.860 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2403037.346 ±(99.9%) 35861.394 ops/s [Average]
[info]   (min, avg, max) = (2390137.354, 2403037.346, 2412711.601), stdev = 9313.090
[info]   CI (99.9%): [2367175.951, 2438898.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   463.912 ±(99.9%) 39.194 MB/sec [Average]
[info]   (min, avg, max) = (453.521, 463.912, 476.956), stdev = 10.179
[info]   CI (99.9%): [424.717, 503.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   303.796 ±(99.9%) 28.623 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.796, 312.389), stdev = 7.433
[info]   CI (99.9%): [275.172, 332.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.112 ±(99.9%) 1328.576 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.112, 671.938), stdev = 345.027
[info]   CI (99.9%): [≈ 0, 1699.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   243.623 ±(99.9%) 872.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 243.623, 442.358), stdev = 226.529
[info]   CI (99.9%): [≈ 0, 1115.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.78% complete, ETA 00:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176427.526 ops/s
[info] # Warmup Iteration   2: 1510110.700 ops/s
[info] # Warmup Iteration   3: 1621665.976 ops/s
[info] # Warmup Iteration   4: 1583714.076 ops/s
[info] # Warmup Iteration   5: 1620445.256 ops/s
[info] Iteration   1: 1637196.711 ops/s
[info]                  ·gc.alloc.rate:               965.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          927.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 642.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1623347.842 ops/s
[info]                  ·gc.alloc.rate:               974.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          944.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1297.497 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1631298.040 ops/s
[info]                  ·gc.alloc.rate:               960.988 MB/sec
[info]                  ·gc.alloc.rate.norm:          927.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 645.920 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1637719.258 ops/s
[info]                  ·gc.alloc.rate:               963.930 MB/sec
[info]                  ·gc.alloc.rate.norm:          926.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 644.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1630106.433 ops/s
[info]                  ·gc.alloc.rate:                   972.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              939.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1294.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1631933.657 ±(99.9%) 22669.135 ops/s [Average]
[info]   (min, avg, max) = (1623347.842, 1631933.657, 1637719.258), stdev = 5887.102
[info]   CI (99.9%): [1609264.522, 1654602.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   967.461 ±(99.9%) 22.118 MB/sec [Average]
[info]   (min, avg, max) = (960.988, 967.461, 974.028), stdev = 5.744
[info]   CI (99.9%): [945.343, 989.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   933.025 ±(99.9%) 31.963 B/op [Average]
[info]   (min, avg, max) = (926.317, 933.025, 944.357), stdev = 8.301
[info]   CI (99.9%): [901.062, 964.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   937.488 ±(99.9%) 1412.838 MB/sec [Average]
[info]   (min, avg, max) = (668.920, 937.488, 1340.568), stdev = 366.910
[info]   CI (99.9%): [≈ 0, 2350.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   904.950 ±(99.9%) 1374.385 B/op [Average]
[info]   (min, avg, max) = (642.927, 904.950, 1297.497), stdev = 356.923
[info]   CI (99.9%): [≈ 0, 2279.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94.98% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339974.069 ops/s
[info] # Warmup Iteration   2: 1368453.474 ops/s
[info] # Warmup Iteration   3: 1424360.366 ops/s
[info] # Warmup Iteration   4: 1423090.163 ops/s
[info] # Warmup Iteration   5: 1427303.362 ops/s
[info] Iteration   1: 1425907.783 ops/s
[info]                  ·gc.alloc.rate:                   1583.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              1747.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1485.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1385415.279 ops/s
[info]                  ·gc.alloc.rate:               1550.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          1760.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1528.656 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1430443.447 ops/s
[info]                  ·gc.alloc.rate:                   1601.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1761.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2221.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.206 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1416673.277 ops/s
[info]                  ·gc.alloc.rate:                   1573.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              1747.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1492.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1435225.624 ops/s
[info]                  ·gc.alloc.rate:                   1577.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1730.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1472.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1418733.082 ±(99.9%) 76407.189 ops/s [Average]
[info]   (min, avg, max) = (1385415.279, 1418733.082, 1435225.624), stdev = 19842.704
[info]   CI (99.9%): [1342325.893, 1495140.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1577.196 ±(99.9%) 71.175 MB/sec [Average]
[info]   (min, avg, max) = (1550.073, 1577.196, 1601.129), stdev = 18.484
[info]   CI (99.9%): [1506.021, 1648.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   1749.729 ±(99.9%) 48.944 B/op [Average]
[info]   (min, avg, max) = (1730.399, 1749.729, 1761.606), stdev = 12.711
[info]   CI (99.9%): [1700.785, 1798.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1479.365 ±(99.9%) 1161.804 MB/sec [Average]
[info]   (min, avg, max) = (1342.908, 1479.365, 2019.088), stdev = 301.717
[info]   CI (99.9%): [317.561, 2641.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1640.137 ±(99.9%) 1253.896 B/op [Average]
[info]   (min, avg, max) = (1472.697, 1640.137, 2221.457), stdev = 325.633
[info]   CI (99.9%): [386.241, 2894.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.914), stdev = 1.294
[info]   CI (99.9%): [≈ 0, 5.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.660 ±(99.9%) 5.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.660, 3.206), stdev = 1.424
[info]   CI (99.9%): [≈ 0, 6.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95.18% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463738.988 ops/s
[info] # Warmup Iteration   2: 1802444.882 ops/s
[info] # Warmup Iteration   3: 1861107.622 ops/s
[info] # Warmup Iteration   4: 1879654.362 ops/s
[info] # Warmup Iteration   5: 1883110.014 ops/s
[info] Iteration   1: 1885419.468 ops/s
[info]                  ·gc.alloc.rate:               1439.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          1201.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1120.235 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1880519.574 ops/s
[info]                  ·gc.alloc.rate:                   1436.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1123.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1880275.888 ops/s
[info]                  ·gc.alloc.rate:                   1434.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1124.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1850469.830 ops/s
[info]                  ·gc.alloc.rate:                   1425.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1142.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1824466.359 ops/s
[info]                  ·gc.alloc.rate:                   1407.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              1213.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1156.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1864230.224 ±(99.9%) 100823.353 ops/s [Average]
[info]   (min, avg, max) = (1824466.359, 1864230.224, 1885419.468), stdev = 26183.505
[info]   CI (99.9%): [1763406.870, 1965053.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1428.487 ±(99.9%) 50.634 MB/sec [Average]
[info]   (min, avg, max) = (1407.022, 1428.487, 1439.431), stdev = 13.150
[info]   CI (99.9%): [1377.853, 1479.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1206.055 ±(99.9%) 24.448 B/op [Average]
[info]   (min, avg, max) = (1200.420, 1206.055, 1213.796), stdev = 6.349
[info]   CI (99.9%): [1181.607, 1230.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.415 ±(99.9%) 3.912 MB/sec [Average]
[info]   (min, avg, max) = (1340.919, 1342.415, 1343.601), stdev = 1.016
[info]   CI (99.9%): [1338.504, 1346.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1133.497 ±(99.9%) 59.940 B/op [Average]
[info]   (min, avg, max) = (1120.235, 1133.497, 1156.771), stdev = 15.566
[info]   CI (99.9%): [1073.557, 1193.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.769), stdev = 1.199
[info]   CI (99.9%): [≈ 0, 5.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.538 ±(99.9%) 3.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.538, 2.317), stdev = 1.003
[info]   CI (99.9%): [≈ 0, 4.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.38% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.653 ops/s
[info] # Warmup Iteration   2: 2886115.028 ops/s
[info] # Warmup Iteration   3: 3063447.251 ops/s
[info] # Warmup Iteration   4: 3068826.688 ops/s
[info] # Warmup Iteration   5: 3028065.363 ops/s
[info] Iteration   1: 3056313.693 ops/s
[info]                  ·gc.alloc.rate:               806.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 342.866 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3057796.300 ops/s
[info]                  ·gc.alloc.rate:               818.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          421.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 342.699 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3056625.971 ops/s
[info]                  ·gc.alloc.rate:                   816.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3046848.203 ops/s
[info]                  ·gc.alloc.rate:               808.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          417.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 344.273 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3053517.230 ops/s
[info]                  ·gc.alloc.rate:                   826.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     687.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3054220.279 ±(99.9%) 16982.108 ops/s [Average]
[info]   (min, avg, max) = (3046848.203, 3054220.279, 3057796.300), stdev = 4410.199
[info]   CI (99.9%): [3037238.172, 3071202.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   815.375 ±(99.9%) 31.207 MB/sec [Average]
[info]   (min, avg, max) = (806.450, 815.375, 826.702), stdev = 8.104
[info]   CI (99.9%): [784.168, 846.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   420.172 ±(99.9%) 15.666 B/op [Average]
[info]   (min, avg, max) = (415.292, 420.172, 426.118), stdev = 4.068
[info]   CI (99.9%): [404.506, 435.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.763 ±(99.9%) 1150.529 MB/sec [Average]
[info]   (min, avg, max) = (665.807, 799.763, 1334.252), stdev = 298.789
[info]   CI (99.9%): [≈ 0, 1950.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   412.146 ±(99.9%) 593.223 B/op [Average]
[info]   (min, avg, max) = (342.699, 412.146, 687.731), stdev = 154.058
[info]   CI (99.9%): [≈ 0, 1005.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.58% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 663728.459 ops/s
[info] # Warmup Iteration   2: 2753751.913 ops/s
[info] # Warmup Iteration   3: 2899403.939 ops/s
[info] # Warmup Iteration   4: 2929689.917 ops/s
[info] # Warmup Iteration   5: 2972869.213 ops/s
[info] Iteration   1: 2969461.367 ops/s
[info]                  ·gc.alloc.rate:                   1300.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              689.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2984425.264 ops/s
[info]                  ·gc.alloc.rate:                   1303.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              687.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     706.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2956813.374 ops/s
[info]                  ·gc.alloc.rate:                   1314.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              699.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     713.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2962243.785 ops/s
[info]                  ·gc.alloc.rate:                   1306.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              693.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2991343.748 ops/s
[info]                  ·gc.alloc.rate:                   1301.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              684.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2972857.507 ±(99.9%) 56367.994 ops/s [Average]
[info]   (min, avg, max) = (2956813.374, 2972857.507, 2991343.748), stdev = 14638.589
[info]   CI (99.9%): [2916489.513, 3029225.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1305.152 ±(99.9%) 22.621 MB/sec [Average]
[info]   (min, avg, max) = (1300.049, 1305.152, 1314.848), stdev = 5.875
[info]   CI (99.9%): [1282.531, 1327.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   690.956 ±(99.9%) 22.805 B/op [Average]
[info]   (min, avg, max) = (684.846, 690.956, 699.709), stdev = 5.922
[info]   CI (99.9%): [668.151, 713.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.920 ±(99.9%) 1154.853 MB/sec [Average]
[info]   (min, avg, max) = (669.427, 1205.920, 1341.715), stdev = 299.912
[info]   CI (99.9%): [51.067, 2360.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   638.847 ±(99.9%) 617.038 B/op [Average]
[info]   (min, avg, max) = (352.241, 638.847, 713.419), stdev = 160.243
[info]   CI (99.9%): [21.809, 1255.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 5.670 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.733, 3.362), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.389 ±(99.9%) 3.013 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.389, 1.786), stdev = 0.782
[info]   CI (99.9%): [≈ 0, 3.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 1.924
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.78% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 900436.092 ops/s
[info] # Warmup Iteration   2: 3249220.338 ops/s
[info] # Warmup Iteration   3: 3372651.089 ops/s
[info] # Warmup Iteration   4: 3387024.033 ops/s
[info] # Warmup Iteration   5: 3381111.134 ops/s
[info] Iteration   1: 3346114.770 ops/s
[info]                  ·gc.alloc.rate:               886.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          417.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 315.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3385950.236 ops/s
[info]                  ·gc.alloc.rate:               894.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3336036.675 ops/s
[info]                  ·gc.alloc.rate:               896.208 MB/sec
[info]                  ·gc.alloc.rate.norm:          422.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 633.558 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 3361638.769 ops/s
[info]                  ·gc.alloc.rate:               886.324 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 314.693 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3303997.124 ops/s
[info]                  ·gc.alloc.rate:                   870.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              414.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3346747.515 ±(99.9%) 117133.669 ops/s [Average]
[info]   (min, avg, max) = (3303997.124, 3346747.515, 3385950.236), stdev = 30419.242
[info]   CI (99.9%): [3229613.846, 3463881.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   886.940 ±(99.9%) 38.519 MB/sec [Average]
[info]   (min, avg, max) = (870.873, 886.940, 896.208), stdev = 10.003
[info]   CI (99.9%): [848.421, 925.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   417.046 ±(99.9%) 12.501 B/op [Average]
[info]   (min, avg, max) = (414.837, 417.046, 422.627), stdev = 3.246
[info]   CI (99.9%): [404.546, 429.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.045 ±(99.9%) 1156.915 MB/sec [Average]
[info]   (min, avg, max) = (671.151, 806.045, 1343.500), stdev = 300.447
[info]   CI (99.9%): [≈ 0, 1962.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   379.212 ±(99.9%) 547.618 B/op [Average]
[info]   (min, avg, max) = (311.956, 379.212, 633.558), stdev = 142.215
[info]   CI (99.9%): [≈ 0, 926.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.98% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 989890.084 ops/s
[info] # Warmup Iteration   2: 3573004.837 ops/s
[info] # Warmup Iteration   3: 3625147.977 ops/s
[info] # Warmup Iteration   4: 3647292.808 ops/s
[info] # Warmup Iteration   5: 3644720.849 ops/s
[info] Iteration   1: 3643454.366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3643494.699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3549661.393 ops/s
[info]                  ·gc.alloc.rate:      14.162 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.277 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3645244.645 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3642485.422 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3624868.105 ±(99.9%) 161933.449 ops/s [Average]
[info]   (min, avg, max) = (3549661.393, 3624868.105, 3645244.645), stdev = 42053.603
[info]   CI (99.9%): [3462934.656, 3786801.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.833 ±(99.9%) 24.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.833, 14.162), stdev = 6.333
[info]   CI (99.9%): [≈ 0, 27.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.256 ±(99.9%) 10.810 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.256, 6.277), stdev = 2.807
[info]   CI (99.9%): [≈ 0, 12.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.18% complete, ETA 00:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 684017.826 ops/s
[info] # Warmup Iteration   2: 2662147.632 ops/s
[info] # Warmup Iteration   3: 2823679.283 ops/s
[info] # Warmup Iteration   4: 2820085.278 ops/s
[info] # Warmup Iteration   5: 2838465.868 ops/s
[info] Iteration   1: 2845958.596 ops/s
[info]                  ·gc.alloc.rate:                   1405.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              777.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     742.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2844197.386 ops/s
[info]                  ·gc.alloc.rate:               1414.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          782.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 742.970 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2850213.484 ops/s
[info]                  ·gc.alloc.rate:                   1404.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              775.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2869133.424 ops/s
[info]                  ·gc.alloc.rate:                   1424.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2875095.472 ops/s
[info]                  ·gc.alloc.rate:                   1428.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              782.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     733.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2856919.672 ±(99.9%) 54677.454 ops/s [Average]
[info]   (min, avg, max) = (2844197.386, 2856919.672, 2875095.472), stdev = 14199.561
[info]   CI (99.9%): [2802242.219, 2911597.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1415.463 ±(99.9%) 42.189 MB/sec [Average]
[info]   (min, avg, max) = (1404.282, 1415.463, 1428.941), stdev = 10.956
[info]   CI (99.9%): [1373.273, 1457.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   779.716 ±(99.9%) 12.024 B/op [Average]
[info]   (min, avg, max) = (775.399, 779.716, 782.434), stdev = 3.123
[info]   CI (99.9%): [767.692, 791.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1342.369 ±(99.9%) 4.796 MB/sec [Average]
[info]   (min, avg, max) = (1340.476, 1342.369, 1343.710), stdev = 1.245
[info]   CI (99.9%): [1337.573, 1347.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   739.474 ±(99.9%) 15.750 B/op [Average]
[info]   (min, avg, max) = (733.684, 739.474, 742.970), stdev = 4.090
[info]   CI (99.9%): [723.723, 755.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.689 ±(99.9%) 5.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.689, 3.029), stdev = 1.316
[info]   CI (99.9%): [≈ 0, 5.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.380 ±(99.9%) 2.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.673), stdev = 0.727
[info]   CI (99.9%): [≈ 0, 3.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.39% complete, ETA 00:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2197.143 ops/s
[info] # Warmup Iteration   2: 6918.772 ops/s
[info] # Warmup Iteration   3: 11708.337 ops/s
[info] # Warmup Iteration   4: 11790.665 ops/s
[info] # Warmup Iteration   5: 11774.127 ops/s
[info] Iteration   1: 11820.399 ops/s
[info]                  ·gc.alloc.rate:                   1397.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              186086.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177718.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11761.532 ops/s
[info]                  ·gc.alloc.rate:                   1388.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              185679.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178803.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11806.216 ops/s
[info]                  ·gc.alloc.rate:                   1389.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              185291.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178210.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11868.468 ops/s
[info]                  ·gc.alloc.rate:                   1396.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              185188.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177456.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 523.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11806.133 ops/s
[info]                  ·gc.alloc.rate:                   1398.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              186365.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177959.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11812.550 ±(99.9%) 147.542 ops/s [Average]
[info]   (min, avg, max) = (11761.532, 11812.550, 11868.468), stdev = 38.316
[info]   CI (99.9%): [11665.008, 11960.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1394.138 ±(99.9%) 18.297 MB/sec [Average]
[info]   (min, avg, max) = (1388.078, 1394.138, 1398.209), stdev = 4.752
[info]   CI (99.9%): [1375.841, 1412.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   185722.182 ±(99.9%) 1942.954 B/op [Average]
[info]   (min, avg, max) = (185188.250, 185722.182, 186365.063), stdev = 504.579
[info]   CI (99.9%): [183779.228, 187665.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1336.389 ±(99.9%) 5.837 MB/sec [Average]
[info]   (min, avg, max) = (1334.746, 1336.389, 1338.551), stdev = 1.516
[info]   CI (99.9%): [1330.552, 1342.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   178029.864 ±(99.9%) 1983.500 B/op [Average]
[info]   (min, avg, max) = (177456.759, 178029.864, 178803.422), stdev = 515.109
[info]   CI (99.9%): [176046.364, 180013.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.852 ±(99.9%) 6.667 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.852, 3.947), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   112.964 ±(99.9%) 883.794 B/op [Average]
[info]   (min, avg, max) = (0.194, 112.964, 523.207), stdev = 229.518
[info]   CI (99.9%): [≈ 0, 996.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.59% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3316.604 ops/s
[info] # Warmup Iteration   2: 19500.269 ops/s
[info] # Warmup Iteration   3: 22080.080 ops/s
[info] # Warmup Iteration   4: 21933.361 ops/s
[info] # Warmup Iteration   5: 22411.418 ops/s
[info] Iteration   1: 22442.403 ops/s
[info]                  ·gc.alloc.rate:               361.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          25366.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35877.500 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 22930.646 ops/s
[info]                  ·gc.alloc.rate:               357.746 MB/sec
[info]                  ·gc.alloc.rate.norm:          24553.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35112.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 23174.120 ops/s
[info]                  ·gc.alloc.rate:      344.163 MB/sec
[info]                  ·gc.alloc.rate.norm: 23368.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23071.543 ops/s
[info]                  ·gc.alloc.rate:                   362.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              24748.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44940.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23021.809 ops/s
[info]                  ·gc.alloc.rate:      341.872 MB/sec
[info]                  ·gc.alloc.rate.norm: 23368.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22928.104 ±(99.9%) 1098.937 ops/s [Average]
[info]   (min, avg, max) = (22442.403, 22928.104, 23174.120), stdev = 285.390
[info]   CI (99.9%): [21829.167, 24027.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   353.659 ±(99.9%) 38.229 MB/sec [Average]
[info]   (min, avg, max) = (341.872, 353.659, 362.801), stdev = 9.928
[info]   CI (99.9%): [315.430, 391.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24280.959 ±(99.9%) 3411.064 B/op [Average]
[info]   (min, avg, max) = (23368.019, 24280.959, 25366.801), stdev = 885.843
[info]   CI (99.9%): [20869.895, 27692.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   336.397 ±(99.9%) 1204.914 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 336.397, 658.800), stdev = 312.912
[info]   CI (99.9%): [≈ 0, 1541.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23186.064 ±(99.9%) 82850.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23186.064, 44940.270), stdev = 21515.961
[info]   CI (99.9%): [≈ 0, 106036.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.568 ±(99.9%) 4.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.568, 2.840), stdev = 1.270
[info]   CI (99.9%): [≈ 0, 5.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.79% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12201.154 ops/s
[info] # Warmup Iteration   2: 20979.588 ops/s
[info] # Warmup Iteration   3: 22374.830 ops/s
[info] # Warmup Iteration   4: 22112.075 ops/s
[info] # Warmup Iteration   5: 22365.225 ops/s
[info] Iteration   1: 21295.223 ops/s
[info]                  ·gc.alloc.rate:               265.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          19638.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37809.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22347.076 ops/s
[info]                  ·gc.alloc.rate:      242.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22285.280 ops/s
[info]                  ·gc.alloc.rate:               254.809 MB/sec
[info]                  ·gc.alloc.rate.norm:          17994.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36130.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22375.859 ops/s
[info]                  ·gc.alloc.rate:      243.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22263.432 ops/s
[info]                  ·gc.alloc.rate:                   256.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              18098.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36164.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22113.374 ±(99.9%) 1769.785 ops/s [Average]
[info]   (min, avg, max) = (21295.223, 22113.374, 22375.859), stdev = 459.607
[info]   CI (99.9%): [20343.589, 23883.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   252.541 ±(99.9%) 37.208 MB/sec [Average]
[info]   (min, avg, max) = (242.863, 252.541, 265.732), stdev = 9.663
[info]   CI (99.9%): [215.333, 289.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17988.017 ±(99.9%) 3992.394 B/op [Average]
[info]   (min, avg, max) = (17104.019, 17988.017, 19638.706), stdev = 1036.812
[info]   CI (99.9%): [13995.624, 21980.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.002 ±(99.9%) 1079.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.002, 511.801), stdev = 280.253
[info]   CI (99.9%): [≈ 0, 1386.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22020.818 ±(99.9%) 77450.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22020.818, 37809.586), stdev = 20113.620
[info]   CI (99.9%): [≈ 0, 99471.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.294 ±(99.9%) 2.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.294, 1.472), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.99% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52.968 ops/s
[info] # Warmup Iteration   2: 2182.542 ops/s
[info] # Warmup Iteration   3: 5263.508 ops/s
[info] # Warmup Iteration   4: 6026.099 ops/s
[info] # Warmup Iteration   5: 6138.852 ops/s
[info] Iteration   1: 6162.807 ops/s
[info]                  ·gc.alloc.rate:                   1911.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              488257.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     340821.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6132.487 ops/s
[info]                  ·gc.alloc.rate:                   1911.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              490682.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514629.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6155.378 ops/s
[info]                  ·gc.alloc.rate:                   1928.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              493052.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     513303.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6174.088 ops/s
[info]                  ·gc.alloc.rate:                   1947.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              496350.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     511724.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6142.371 ops/s
[info]                  ·gc.alloc.rate:               1924.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          493006.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 514986.667 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   6153.426 ±(99.9%) 63.254 ops/s [Average]
[info]   (min, avg, max) = (6132.487, 6153.426, 6174.088), stdev = 16.427
[info]   CI (99.9%): [6090.172, 6216.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1924.712 ±(99.9%) 55.868 MB/sec [Average]
[info]   (min, avg, max) = (1911.889, 1924.712, 1947.120), stdev = 14.509
[info]   CI (99.9%): [1868.844, 1980.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   492269.921 ±(99.9%) 11620.260 B/op [Average]
[info]   (min, avg, max) = (488257.574, 492269.921, 496350.802), stdev = 3017.745
[info]   CI (99.9%): [480649.661, 503890.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1872.970 ±(99.9%) 1158.970 MB/sec [Average]
[info]   (min, avg, max) = (1334.567, 1872.970, 2009.957), stdev = 300.981
[info]   CI (99.9%): [714.000, 3031.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   479092.970 ±(99.9%) 297681.302 B/op [Average]
[info]   (min, avg, max) = (340821.223, 479092.970, 514986.667), stdev = 77306.889
[info]   CI (99.9%): [181411.668, 776774.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.512 ±(99.9%) 2.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 1.769), stdev = 0.740
[info]   CI (99.9%): [≈ 0, 3.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   131.234 ±(99.9%) 731.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 131.234, 454.072), stdev = 189.863
[info]   CI (99.9%): [≈ 0, 862.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.19% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17139.662 ops/s
[info] # Warmup Iteration   2: 62564.180 ops/s
[info] # Warmup Iteration   3: 60099.274 ops/s
[info] # Warmup Iteration   4: 62097.469 ops/s
[info] # Warmup Iteration   5: 61918.690 ops/s
[info] Iteration   1: 62756.045 ops/s
[info]                  ·gc.alloc.rate:                   803.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              20161.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16639.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 62218.903 ops/s
[info]                  ·gc.alloc.rate:                   812.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              20542.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33479.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 62271.585 ops/s
[info]                  ·gc.alloc.rate:               801.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          20250.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16734.655 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 62504.424 ops/s
[info]                  ·gc.alloc.rate:               804.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          20243.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16672.818 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 62090.630 ops/s
[info]                  ·gc.alloc.rate:               806.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          20438.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16782.619 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   62368.317 ±(99.9%) 1014.501 ops/s [Average]
[info]   (min, avg, max) = (62090.630, 62368.317, 62756.045), stdev = 263.463
[info]   CI (99.9%): [61353.817, 63382.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   805.738 ±(99.9%) 16.807 MB/sec [Average]
[info]   (min, avg, max) = (801.274, 805.738, 812.753), stdev = 4.365
[info]   CI (99.9%): [788.931, 822.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20327.126 ±(99.9%) 605.403 B/op [Average]
[info]   (min, avg, max) = (20161.857, 20327.126, 20542.045), stdev = 157.221
[info]   CI (99.9%): [19721.723, 20932.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   794.983 ±(99.9%) 1140.134 MB/sec [Average]
[info]   (min, avg, max) = (662.168, 794.983, 1324.642), stdev = 296.089
[info]   CI (99.9%): [≈ 0, 1935.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20061.850 ±(99.9%) 28884.080 B/op [Average]
[info]   (min, avg, max) = (16639.290, 20061.850, 33479.868), stdev = 7501.104
[info]   CI (99.9%): [≈ 0, 48945.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.210 ±(99.9%) 1.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.210, 0.526), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.39% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29226.645 ops/s
[info] # Warmup Iteration   2: 66035.482 ops/s
[info] # Warmup Iteration   3: 67102.474 ops/s
[info] # Warmup Iteration   4: 68352.525 ops/s
[info] # Warmup Iteration   5: 68023.266 ops/s
[info] Iteration   1: 68097.687 ops/s
[info]                  ·gc.alloc.rate:               472.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          10910.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11823.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 68245.298 ops/s
[info]                  ·gc.alloc.rate:               468.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          10807.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15354.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 68404.578 ops/s
[info]                  ·gc.alloc.rate:      457.236 MB/sec
[info]                  ·gc.alloc.rate.norm: 10520.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 68441.204 ops/s
[info]                  ·gc.alloc.rate:                   473.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              10880.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15310.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.957 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 68139.742 ops/s
[info]                  ·gc.alloc.rate:               477.332 MB/sec
[info]                  ·gc.alloc.rate.norm:          11025.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15400.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   68265.702 ±(99.9%) 592.170 ops/s [Average]
[info]   (min, avg, max) = (68097.687, 68265.702, 68441.204), stdev = 153.785
[info]   CI (99.9%): [67673.532, 68857.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   469.722 ±(99.9%) 29.369 MB/sec [Average]
[info]   (min, avg, max) = (457.236, 469.722, 477.332), stdev = 7.627
[info]   CI (99.9%): [440.352, 499.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10828.800 ±(99.9%) 729.961 B/op [Average]
[info]   (min, avg, max) = (10520.006, 10828.800, 11025.263), stdev = 189.569
[info]   CI (99.9%): [10098.839, 11558.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   502.042 ±(99.9%) 1110.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.042, 666.757), stdev = 288.523
[info]   CI (99.9%): [≈ 0, 1613.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11577.997 ±(99.9%) 25608.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11577.997, 15400.551), stdev = 6650.555
[info]   CI (99.9%): [≈ 0, 37186.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.191 ±(99.9%) 1.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.957), stdev = 0.428
[info]   CI (99.9%): [≈ 0, 1.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.59% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34479.296 ops/s
[info] # Warmup Iteration   2: 73376.275 ops/s
[info] # Warmup Iteration   3: 76679.324 ops/s
[info] # Warmup Iteration   4: 76794.059 ops/s
[info] # Warmup Iteration   5: 76248.326 ops/s
[info] Iteration   1: 76805.404 ops/s
[info]                  ·gc.alloc.rate:      20.695 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 76853.220 ops/s
[info]                  ·gc.alloc.rate:      20.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76821.752 ops/s
[info]                  ·gc.alloc.rate:      20.697 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 76794.764 ops/s
[info]                  ·gc.alloc.rate:      20.689 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 76802.643 ops/s
[info]                  ·gc.alloc.rate:      20.691 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   76815.557 ±(99.9%) 89.462 ops/s [Average]
[info]   (min, avg, max) = (76794.764, 76815.557, 76853.220), stdev = 23.233
[info]   CI (99.9%): [76726.094, 76905.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   20.696 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (20.689, 20.696, 20.710), stdev = 0.008
[info]   CI (99.9%): [20.665, 20.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   424.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.006, 424.006, 424.006), stdev = 0.001
[info]   CI (99.9%): [424.006, 424.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.79% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72035.837 ops/s
[info] # Warmup Iteration   2: 281025.865 ops/s
[info] # Warmup Iteration   3: 306033.102 ops/s
[info] # Warmup Iteration   4: 314485.417 ops/s
[info] # Warmup Iteration   5: 315039.238 ops/s
[info] Iteration   1: 314272.746 ops/s
[info]                  ·gc.alloc.rate:                   1876.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              9395.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10091.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 313850.594 ops/s
[info]                  ·gc.alloc.rate:                   1885.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              9450.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10105.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 316307.144 ops/s
[info]                  ·gc.alloc.rate:                   1898.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              9442.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10000.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 317351.936 ops/s
[info]                  ·gc.alloc.rate:               1878.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          9316.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6640.070 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 316279.835 ops/s
[info]                  ·gc.alloc.rate:               1912.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          9515.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9997.646 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   315612.451 ±(99.9%) 5728.523 ops/s [Average]
[info]   (min, avg, max) = (313850.594, 315612.451, 317351.936), stdev = 1487.679
[info]   CI (99.9%): [309883.928, 321340.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1890.026 ±(99.9%) 57.691 MB/sec [Average]
[info]   (min, avg, max) = (1876.052, 1890.026, 1912.058), stdev = 14.982
[info]   CI (99.9%): [1832.336, 1947.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9424.181 ±(99.9%) 283.750 B/op [Average]
[info]   (min, avg, max) = (9316.829, 9424.181, 9515.321), stdev = 73.689
[info]   CI (99.9%): [9140.431, 9707.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.787 ±(99.9%) 1160.110 MB/sec [Average]
[info]   (min, avg, max) = (1338.874, 1877.787, 2015.929), stdev = 301.277
[info]   CI (99.9%): [717.677, 3037.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9366.900 ±(99.9%) 5872.867 B/op [Average]
[info]   (min, avg, max) = (6640.070, 9366.900, 10105.139), stdev = 1525.165
[info]   CI (99.9%): [3494.033, 15239.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.721 ±(99.9%) 5.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 3.457), stdev = 1.530
[info]   CI (99.9%): [≈ 0, 6.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.611 ±(99.9%) 29.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.611, 17.329), stdev = 7.671
[info]   CI (99.9%): [≈ 0, 33.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97.99% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99533.143 ops/s
[info] # Warmup Iteration   2: 457445.823 ops/s
[info] # Warmup Iteration   3: 494712.431 ops/s
[info] # Warmup Iteration   4: 498323.057 ops/s
[info] # Warmup Iteration   5: 496150.078 ops/s
[info] Iteration   1: 499766.906 ops/s
[info]                  ·gc.alloc.rate:      546.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 1720.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 496384.841 ops/s
[info]                  ·gc.alloc.rate:               563.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          1787.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2111.109 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 496606.761 ops/s
[info]                  ·gc.alloc.rate:                   556.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1762.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2110.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 495457.575 ops/s
[info]                  ·gc.alloc.rate:               565.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          1795.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2117.119 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 493442.225 ops/s
[info]                  ·gc.alloc.rate:               559.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          1784.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2125.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   496331.662 ±(99.9%) 8821.312 ops/s [Average]
[info]   (min, avg, max) = (493442.225, 496331.662, 499766.906), stdev = 2290.867
[info]   CI (99.9%): [487510.350, 505152.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   558.139 ±(99.9%) 29.249 MB/sec [Average]
[info]   (min, avg, max) = (546.157, 558.139, 565.316), stdev = 7.596
[info]   CI (99.9%): [528.891, 587.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1769.886 ±(99.9%) 117.536 B/op [Average]
[info]   (min, avg, max) = (1720.001, 1769.886, 1795.771), stdev = 30.524
[info]   CI (99.9%): [1652.350, 1887.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.946 ±(99.9%) 1147.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.946, 666.478), stdev = 297.926
[info]   CI (99.9%): [≈ 0, 1680.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1692.818 ±(99.9%) 3643.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1692.818, 2125.815), stdev = 946.335
[info]   CI (99.9%): [≈ 0, 5336.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.19% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646294.134 ops/s
[info] # Warmup Iteration   2: 1188599.457 ops/s
[info] # Warmup Iteration   3: 1259569.374 ops/s
[info] # Warmup Iteration   4: 1269560.200 ops/s
[info] # Warmup Iteration   5: 1260671.003 ops/s
[info] Iteration   1: 1268716.849 ops/s
[info]                  ·gc.alloc.rate:               683.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          847.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 831.714 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1268397.686 ops/s
[info]                  ·gc.alloc.rate:               688.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          854.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 832.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1273044.206 ops/s
[info]                  ·gc.alloc.rate:               687.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          850.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 829.747 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1274272.201 ops/s
[info]                  ·gc.alloc.rate:                   686.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              847.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1274247.434 ops/s
[info]                  ·gc.alloc.rate:               684.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          845.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 828.114 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1271735.675 ±(99.9%) 11343.175 ops/s [Average]
[info]   (min, avg, max) = (1268397.686, 1271735.675, 1274272.201), stdev = 2945.786
[info]   CI (99.9%): [1260392.500, 1283078.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   686.152 ±(99.9%) 8.349 MB/sec [Average]
[info]   (min, avg, max) = (683.382, 686.152, 688.474), stdev = 2.168
[info]   CI (99.9%): [677.803, 694.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   848.955 ±(99.9%) 13.670 B/op [Average]
[info]   (min, avg, max) = (845.152, 848.955, 854.308), stdev = 3.550
[info]   CI (99.9%): [835.284, 862.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.110 ±(99.9%) 1.493 MB/sec [Average]
[info]   (min, avg, max) = (670.768, 671.110, 671.724), stdev = 0.388
[info]   CI (99.9%): [669.618, 672.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   830.343 ±(99.9%) 7.270 B/op [Average]
[info]   (min, avg, max) = (828.114, 830.343, 832.802), stdev = 1.888
[info]   CI (99.9%): [823.073, 837.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9067.175 ops/s
[info] # Warmup Iteration   2: 94809.079 ops/s
[info] # Warmup Iteration   3: 100343.882 ops/s
[info] # Warmup Iteration   4: 100302.980 ops/s
[info] # Warmup Iteration   5: 101902.382 ops/s
[info] Iteration   1: 99726.507 ops/s
[info]                  ·gc.alloc.rate:                   3153.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              49764.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52701.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.285 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 102630.660 ops/s
[info]                  ·gc.alloc.rate:                   3270.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              50148.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41026.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 102585.270 ops/s
[info]                  ·gc.alloc.rate:               3296.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          50566.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3356.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51486.959 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 102086.026 ops/s
[info]                  ·gc.alloc.rate:               3281.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          50590.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51930.701 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 102220.884 ops/s
[info]                  ·gc.alloc.rate:                   3257.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              50162.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41609.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   101849.870 ±(99.9%) 4657.743 ops/s [Average]
[info]   (min, avg, max) = (99726.507, 101849.870, 102630.660), stdev = 1209.601
[info]   CI (99.9%): [97192.127, 106507.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3252.002 ±(99.9%) 219.470 MB/sec [Average]
[info]   (min, avg, max) = (3153.317, 3252.002, 3296.869), stdev = 56.996
[info]   CI (99.9%): [3032.532, 3471.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50246.568 ±(99.9%) 1319.032 B/op [Average]
[info]   (min, avg, max) = (49764.650, 50246.568, 50590.364), stdev = 342.548
[info]   CI (99.9%): [48927.536, 51565.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3088.542 ±(99.9%) 1405.499 MB/sec [Average]
[info]   (min, avg, max) = (2675.522, 3088.542, 3368.413), stdev = 365.004
[info]   CI (99.9%): [1683.043, 4494.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47751.214 ±(99.9%) 22687.985 B/op [Average]
[info]   (min, avg, max) = (41026.882, 47751.214, 52701.612), stdev = 5891.998
[info]   CI (99.9%): [25063.229, 70439.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.208), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.785 ±(99.9%) 5.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.285), stdev = 1.407
[info]   CI (99.9%): [≈ 0, 6.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154507.898 ops/s
[info] # Warmup Iteration   2: 594142.643 ops/s
[info] # Warmup Iteration   3: 618019.608 ops/s
[info] # Warmup Iteration   4: 610771.493 ops/s
[info] # Warmup Iteration   5: 622866.004 ops/s
[info] Iteration   1: 617695.011 ops/s
[info]                  ·gc.alloc.rate:               1860.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          4739.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5111.341 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 621225.907 ops/s
[info]                  ·gc.alloc.rate:                   1857.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              4704.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5089.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 622265.648 ops/s
[info]                  ·gc.alloc.rate:                   1861.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              4708.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3394.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 621431.449 ops/s
[info]                  ·gc.alloc.rate:               1859.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          4710.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5109.470 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 621536.567 ops/s
[info]                  ·gc.alloc.rate:                   1887.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              4779.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5118.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   620830.916 ±(99.9%) 6916.960 ops/s [Average]
[info]   (min, avg, max) = (617695.011, 620830.916, 622265.648), stdev = 1796.313
[info]   CI (99.9%): [613913.956, 627747.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1865.408 ±(99.9%) 48.035 MB/sec [Average]
[info]   (min, avg, max) = (1857.438, 1865.408, 1887.556), stdev = 12.475
[info]   CI (99.9%): [1817.373, 1913.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4728.659 ±(99.9%) 122.641 B/op [Average]
[info]   (min, avg, max) = (4704.942, 4728.659, 4779.862), stdev = 31.850
[info]   CI (99.9%): [4606.018, 4851.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1879.328 ±(99.9%) 1156.232 MB/sec [Average]
[info]   (min, avg, max) = (1342.297, 1879.328, 2021.338), stdev = 300.270
[info]   CI (99.9%): [723.096, 3035.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4764.707 ±(99.9%) 2948.820 B/op [Average]
[info]   (min, avg, max) = (3394.944, 4764.707, 5118.638), stdev = 765.799
[info]   CI (99.9%): [1815.887, 7713.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.053), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.80% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92700.076 ops/s
[info] # Warmup Iteration   2: 327658.929 ops/s
[info] # Warmup Iteration   3: 330351.688 ops/s
[info] # Warmup Iteration   4: 331655.682 ops/s
[info] # Warmup Iteration   5: 327212.389 ops/s
[info] Iteration   1: 332114.096 ops/s
[info]                  ·gc.alloc.rate:                   1161.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6352.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 338103.299 ops/s
[info]                  ·gc.alloc.rate:               1178.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          5484.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6243.960 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 336551.219 ops/s
[info]                  ·gc.alloc.rate:               1169.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          5467.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3137.145 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 330508.025 ops/s
[info]                  ·gc.alloc.rate:                   1149.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              5474.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6394.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 333017.432 ops/s
[info]                  ·gc.alloc.rate:                   1171.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              5535.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6350.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   334058.814 ±(99.9%) 12183.569 ops/s [Average]
[info]   (min, avg, max) = (330508.025, 334058.814, 338103.299), stdev = 3164.034
[info]   CI (99.9%): [321875.245, 346242.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1166.008 ±(99.9%) 41.554 MB/sec [Average]
[info]   (min, avg, max) = (1149.948, 1166.008, 1178.294), stdev = 10.791
[info]   CI (99.9%): [1124.454, 1207.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5493.142 ±(99.9%) 104.622 B/op [Average]
[info]   (min, avg, max) = (5467.415, 5493.142, 5535.016), stdev = 27.170
[info]   CI (99.9%): [5388.520, 5597.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.944 ±(99.9%) 1156.088 MB/sec [Average]
[info]   (min, avg, max) = (670.876, 1207.944, 1343.563), stdev = 300.232
[info]   CI (99.9%): [51.856, 2364.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5695.780 ±(99.9%) 5511.834 B/op [Average]
[info]   (min, avg, max) = (3137.145, 5695.780, 6394.936), stdev = 1431.406
[info]   CI (99.9%): [183.946, 11207.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.331), stdev = 1.483
[info]   CI (99.9%): [≈ 0, 6.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.208 ±(99.9%) 26.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.208, 15.741), stdev = 7.007
[info]   CI (99.9%): [≈ 0, 30.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236502.111 ops/s
[info] # Warmup Iteration   2: 702077.018 ops/s
[info] # Warmup Iteration   3: 721928.968 ops/s
[info] # Warmup Iteration   4: 720592.239 ops/s
[info] # Warmup Iteration   5: 727840.172 ops/s
[info] Iteration   1: 732648.685 ops/s
[info]                  ·gc.alloc.rate:               580.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          1245.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1431.722 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 736887.798 ops/s
[info]                  ·gc.alloc.rate:      561.943 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 731774.700 ops/s
[info]                  ·gc.alloc.rate:               582.982 MB/sec
[info]                  ·gc.alloc.rate.norm:          1253.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1433.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 713405.230 ops/s
[info]                  ·gc.alloc.rate:                   567.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              1251.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1472.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 713814.795 ops/s
[info]                  ·gc.alloc.rate:               562.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          1239.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1471.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   725706.242 ±(99.9%) 43170.694 ops/s [Average]
[info]   (min, avg, max) = (713405.230, 725706.242, 736887.798), stdev = 11211.292
[info]   CI (99.9%): [682535.548, 768876.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   570.863 ±(99.9%) 38.468 MB/sec [Average]
[info]   (min, avg, max) = (561.943, 570.863, 582.982), stdev = 9.990
[info]   CI (99.9%): [532.394, 609.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1237.965 ±(99.9%) 84.339 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1237.965, 1253.598), stdev = 21.903
[info]   CI (99.9%): [1153.625, 1322.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.667 ±(99.9%) 1148.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.667, 667.642), stdev = 298.329
[info]   CI (99.9%): [≈ 0, 1682.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1161.867 ±(99.9%) 2502.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1161.867, 1472.513), stdev = 649.804
[info]   CI (99.9%): [≈ 0, 3664.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 839719.346 ops/s
[info] # Warmup Iteration   2: 1536579.916 ops/s
[info] # Warmup Iteration   3: 1648100.164 ops/s
[info] # Warmup Iteration   4: 1665105.130 ops/s
[info] # Warmup Iteration   5: 1664834.101 ops/s
[info] Iteration   1: 1662913.560 ops/s
[info]                  ·gc.alloc.rate:               794.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 634.884 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1655652.004 ops/s
[info]                  ·gc.alloc.rate:                   807.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              767.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1276.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1664903.430 ops/s
[info]                  ·gc.alloc.rate:               786.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 635.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1665574.495 ops/s
[info]                  ·gc.alloc.rate:               786.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 634.831 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1664342.365 ops/s
[info]                  ·gc.alloc.rate:                   784.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     635.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1662677.171 ±(99.9%) 15585.888 ops/s [Average]
[info]   (min, avg, max) = (1655652.004, 1662677.171, 1665574.495), stdev = 4047.606
[info]   CI (99.9%): [1647091.283, 1678263.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   791.879 ±(99.9%) 35.848 MB/sec [Average]
[info]   (min, avg, max) = (784.753, 791.879, 807.117), stdev = 9.310
[info]   CI (99.9%): [756.031, 827.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.539 ±(99.9%) 40.983 B/op [Average]
[info]   (min, avg, max) = (742.026, 749.539, 767.215), stdev = 10.643
[info]   CI (99.9%): [708.556, 790.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.970 ±(99.9%) 1156.078 MB/sec [Average]
[info]   (min, avg, max) = (670.802, 805.970, 1343.036), stdev = 300.230
[info]   CI (99.9%): [≈ 0, 1962.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   763.403 ±(99.9%) 1104.783 B/op [Average]
[info]   (min, avg, max) = (634.831, 763.403, 1276.640), stdev = 286.909
[info]   CI (99.9%): [≈ 0, 1868.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1067760.864 ops/s
[info] # Warmup Iteration   2: 1691230.399 ops/s
[info] # Warmup Iteration   3: 1725592.422 ops/s
[info] # Warmup Iteration   4: 1726430.643 ops/s
[info] # Warmup Iteration   5: 1724418.880 ops/s
[info] Iteration   1: 1726543.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1725100.515 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1728852.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1728775.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1726246.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1727103.699 ±(99.9%) 6361.046 ops/s [Average]
[info]   (min, avg, max) = (1725100.515, 1727103.699, 1728852.604), stdev = 1651.944
[info]   CI (99.9%): [1720742.653, 1733464.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144944.197 ops/s
[info] # Warmup Iteration   2: 451139.321 ops/s
[info] # Warmup Iteration   3: 455189.433 ops/s
[info] # Warmup Iteration   4: 457871.898 ops/s
[info] # Warmup Iteration   5: 463013.675 ops/s
[info] Iteration   1: 472105.809 ops/s
[info]                  ·gc.alloc.rate:               716.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          2390.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2224.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 461967.257 ops/s
[info]                  ·gc.alloc.rate:               710.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          2419.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2275.147 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 472328.449 ops/s
[info]                  ·gc.alloc.rate:                   720.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              2401.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2225.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 468610.822 ops/s
[info]                  ·gc.alloc.rate:               713.402 MB/sec
[info]                  ·gc.alloc.rate.norm:          2396.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2245.108 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 461944.472 ops/s
[info]                  ·gc.alloc.rate:                   702.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              2391.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2277.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   467391.362 ±(99.9%) 19932.193 ops/s [Average]
[info]   (min, avg, max) = (461944.472, 467391.362, 472328.449), stdev = 5176.327
[info]   CI (99.9%): [447459.169, 487323.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   712.703 ±(99.9%) 27.622 MB/sec [Average]
[info]   (min, avg, max) = (702.023, 712.703, 720.917), stdev = 7.173
[info]   CI (99.9%): [685.081, 740.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2399.803 ±(99.9%) 45.230 B/op [Average]
[info]   (min, avg, max) = (2390.025, 2399.803, 2419.178), stdev = 11.746
[info]   CI (99.9%): [2354.574, 2445.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   667.980 ±(99.9%) 2.108 MB/sec [Average]
[info]   (min, avg, max) = (667.121, 667.980, 668.464), stdev = 0.548
[info]   CI (99.9%): [665.872, 670.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2249.401 ±(99.9%) 100.056 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2249.401, 2277.515), stdev = 25.984
[info]   CI (99.9%): [2149.345, 2349.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.071), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99.80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77989.739 ops/s
[info] # Warmup Iteration   2: 153664.545 ops/s
[info] # Warmup Iteration   3: 160175.137 ops/s
[info] # Warmup Iteration   4: 161022.215 ops/s
[info] # Warmup Iteration   5: 160729.105 ops/s
[info] Iteration   1: 160250.701 ops/s
[info]                  ·gc.alloc.rate:                   971.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              9539.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13196.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 160899.936 ops/s
[info]                  ·gc.alloc.rate:               954.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          9340.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6574.491 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 159675.090 ops/s
[info]                  ·gc.alloc.rate:                   974.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              9605.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13253.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 160786.628 ops/s
[info]                  ·gc.alloc.rate:               964.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          9438.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6582.658 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 160677.203 ops/s
[info]                  ·gc.alloc.rate:               965.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          9457.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6590.098 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   160457.912 ±(99.9%) 1932.312 ops/s [Average]
[info]   (min, avg, max) = (159675.090, 160457.912, 160899.936), stdev = 501.815
[info]   CI (99.9%): [158525.599, 162390.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   966.167 ±(99.9%) 29.202 MB/sec [Average]
[info]   (min, avg, max) = (954.939, 966.167, 974.499), stdev = 7.584
[info]   CI (99.9%): [936.965, 995.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9476.086 ±(99.9%) 389.124 B/op [Average]
[info]   (min, avg, max) = (9340.199, 9476.086, 9605.160), stdev = 101.054
[info]   CI (99.9%): [9086.962, 9865.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.261 ±(99.9%) 1417.236 MB/sec [Average]
[info]   (min, avg, max) = (672.174, 941.261, 1344.673), stdev = 368.052
[info]   CI (99.9%): [≈ 0, 2358.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9239.476 ±(99.9%) 14010.145 B/op [Average]
[info]   (min, avg, max) = (6574.491, 9239.476, 13253.789), stdev = 3638.390
[info]   CI (99.9%): [≈ 0, 23249.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.205), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # Run complete. Total time: 02:13:37
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    845072.059 ±   33585.732   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2445.836 ±     121.220  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4555.011 ±     120.452    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2275.774 ±    1404.439  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4237.639 ±    2587.480    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.791 ±       6.544  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         1.464 ±      12.110    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1969730.088 ±  154570.094   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1360.325 ±     122.121  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1086.790 ±      21.606    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1335.884 ±       6.389  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1067.675 ±      86.863    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.891 ±       7.381  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.720 ±       5.966    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   5936746.197 ±  609382.916   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       406.321 ±      31.696  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       107.729 ±       8.227    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       473.440 ±    1064.721  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       125.871 ±     279.396    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.001 ±       0.009    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5        11.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    312170.471 ±    8311.752   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2756.997 ±      80.289  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13898.905 ±     356.920    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2690.411 ±      28.847  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     13563.613 ±     427.758    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.404 ±       3.343  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         2.032 ±      16.828    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        20.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        32.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    909765.282 ±   50435.120   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2440.354 ±     135.999  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4221.299 ±     130.349    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2277.697 ±    1404.785  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      3938.505 ±    2374.699    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.050 ±       0.343  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.085 ±       0.582    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        24.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2704755.006 ±  183059.280   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1156.082 ±      76.129  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       672.715 ±      35.832    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1070.177 ±    1410.073  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       623.384 ±     828.316    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.733 ±       6.198  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.417 ±       3.522    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  15045279.085 ±  452687.361   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       784.575 ±      29.314  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        82.064 ±       1.840    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       671.642 ±       2.406  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        70.255 ±       2.122    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.008    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        13.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  17286807.527 ±  107869.204   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.028 ±       0.242  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.003 ±       0.022    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    706034.879 ±   24641.450   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2090.544 ±     155.179  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4659.129 ±     210.713    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2149.026 ±    2157.933  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4782.388 ±    4671.950    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.200 ±       1.545  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.445 ±       3.442    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2128447.773 ±   82115.062   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2962.735 ±     116.465  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2190.684 ±      27.698    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2820.198 ±    1136.395  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2085.039 ±     822.171    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.037 ±       0.200  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.028 ±       0.147    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5  10274860.837 ±  996913.924   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1291.224 ±     129.011  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       197.772 ±       4.971    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1335.054 ±       5.807  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       204.589 ±      19.839    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.819 ±       6.656  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.124 ±       1.008    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5        10.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3169764.429 ±  121684.056   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      1967.202 ±      48.286  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       976.557 ±      26.291    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      1736.308 ±    1401.784  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       862.714 ±     712.405    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.021 ±       0.139  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.010 ±       0.068    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13527451.414 ±  571439.828   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1777.806 ±     103.829  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.814 ±       9.321    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1749.949 ±    1417.937  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       203.538 ±     164.094    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.546 ±       4.564  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.064 ±       0.536    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        22.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1219459.506 ±   10154.462   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2652.189 ±      74.866  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3422.821 ±      99.471    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2535.134 ±    1153.931  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3271.830 ±    1492.185    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.933 ±       6.663  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.206 ±       8.622    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        42.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2397019.083 ±  151316.983   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2115.843 ±     155.311  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1388.962 ±      36.847    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2009.493 ±       6.996  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1319.468 ±      86.380    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.732 ±       6.123  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.493 ±       4.126    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  18973014.707 ±  317962.221   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       603.014 ±      33.393  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        50.022 ±       3.308    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       666.032 ±       2.180  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        55.249 ±       1.009    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.007 ±       0.064  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6297204.797 ±  177495.632   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1786.394 ±      86.624  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       446.398 ±      18.169    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1736.549 ±    1407.080  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       433.944 ±     351.540    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.781 ±       6.368  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.195 ±       1.588    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  28255461.446 ± 1581844.396   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       891.797 ±      60.134  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.674 ±       2.019    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       940.016 ±    1415.350  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        52.252 ±      77.228    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.006    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         7.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        20.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  34524465.652 ± 3111529.186   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5         0.034 ±       0.295  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5         0.002 ±       0.014    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1936597.794 ±   51096.747   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      3042.369 ±     145.884  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2472.180 ±      62.612    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2945.558 ±    1408.307  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2393.185 ±    1126.612    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.046 ±       0.268  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.038 ±       0.221    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        33.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    314131.688 ±    3843.234   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1924.889 ±      60.474  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9643.667 ±     237.300    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1877.269 ±    1158.860  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9402.190 ±    5735.027    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.720 ±       5.010  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.613 ±      25.155    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    498473.687 ±   25409.483   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       644.708 ±      35.931  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2035.449 ±      35.811    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.784 ±       2.446  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2102.289 ±     105.830    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.039 ±       0.225    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1335962.972 ±   19653.151   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       917.621 ±      26.994  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1080.855 ±      43.123    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       940.897 ±    1418.226  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1108.893 ±    1679.486    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.025 ±       0.116    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        19.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    115579.838 ±    5686.072   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3682.958 ±     192.934  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     50141.634 ±     438.189    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3500.438 ±    1161.697  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     47643.398 ±   14695.032    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.339 ±       0.906    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        38.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                          128  thrpt    5    541575.920 ±   27318.364   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1699.938 ±      70.783  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4940.360 ±     125.967    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1612.278 ±    1418.163  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4685.045 ±    4107.446    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.666 ±       5.602  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.960 ±      16.489    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    350997.837 ±   15839.038   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1213.906 ±      65.677  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5443.203 ±     234.194    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1207.751 ±    1155.771  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5421.262 ±    5256.230    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.724 ±       5.060  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.295 ±      23.042    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    891735.961 ±   41159.798   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       663.655 ±      25.033  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1171.185 ±      31.733    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       666.992 ±       2.577  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1177.153 ±      50.171    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.022 ±       0.189    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2578352.685 ±   30531.092   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1228.612 ±      41.336  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       749.870 ±      32.789    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1210.730 ±    1159.185  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       739.198 ±     710.826    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.570 ±       4.471  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.350 ±       2.742    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2921779.975 ±   12124.664   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    465055.522 ±   27782.996   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       691.702 ±      50.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2340.728 ±      54.788    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.700 ±       2.127  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2263.384 ±     130.419    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.014 ±       0.121    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                         128  thrpt    5    160141.843 ±     830.094   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5       955.424 ±      26.796  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5      9387.748 ±     265.970    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941.257 ±    1416.958  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9250.901 ±   13955.849    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.164 ±       1.028    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     17345.947 ±     800.279   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1397.783 ±      71.147  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126817.364 ±    2922.001    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1342.888 ±       6.010  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    121851.535 ±    5991.052    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.741 ±       4.702  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        67.171 ±     427.107    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     37062.939 ±     389.868   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1016.436 ±      27.658  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43160.524 ±    1255.399    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       936.639 ±    1412.551  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     39781.106 ±   60107.657    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.531 ±       3.045    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     40550.408 ±    1001.721   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       602.320 ±      36.969  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     23376.831 ±    1586.013    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       536.931 ±    1155.786  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     20860.441 ±   44907.465    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     30242.482 ±     710.737   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1491.164 ±      42.909  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     77593.023 ±    2292.859    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1470.461 ±    1157.343  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     76583.145 ±   62219.044    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.895 ±       7.484  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        47.010 ±     393.142    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     24953.771 ±     878.768   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1825.488 ±      34.907  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    115129.511 ±    4043.059    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1876.042 ±    1155.861  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    118442.007 ±   75828.835    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.774 ±       6.534  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        49.034 ±     413.727    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     24722.391 ±     684.517   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1551.121 ±      42.978  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     98733.000 ±    2701.290    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1603.185 ±    1402.334  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    102153.641 ±   91689.653    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.816 ±       6.848  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        51.737 ±     434.069    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     27275.305 ±    1547.550   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1614.887 ±      66.348  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93175.257 ±    1717.027    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1478.727 ±    1160.179  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     85368.651 ±   68265.333    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.679 ±       3.903  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        39.069 ±     224.178    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27422.734 ±     712.693   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1575.377 ±      34.802  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     90392.806 ±    1350.920    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1612.037 ±    1412.758  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     92607.535 ±   83560.851    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.695 ±       3.776  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        39.957 ±     217.473    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7823.760 ±     146.561   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1170.557 ±      18.370  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    235425.007 ±    6090.328    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1207.334 ±    1154.778  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    243023.811 ±  234884.484    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.783 ±       6.651  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       158.375 ±    1345.702    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     17750.966 ±     392.564   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1627.833 ±      27.149  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144330.356 ±    4410.705    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1476.662 ±    1157.423  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    130967.221 ±  103879.117    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.708 ±       4.308  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        63.150 ±     384.944    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     40953.418 ±    2098.560   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1157.642 ±      43.046  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44485.896 ±    1390.923    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.085 ±    1151.561  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     46350.286 ±   45741.102    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.849 ±       7.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        32.890 ±     276.437    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        33.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     62203.541 ±     720.283   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       827.610 ±      41.171  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     20935.968 ±    1077.998    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       806.239 ±    1154.084  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20389.342 ±   29079.455    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.037 ±       0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.948 ±       4.404    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     32242.807 ±    1124.217   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2132.706 ±      88.781  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    104098.902 ±    1287.760    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2149.975 ±    1137.244  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    105026.611 ±   58757.507    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.233 ±       1.552  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        11.505 ±      76.678    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     27340.928 ±     453.999   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1759.451 ±      69.754  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101251.610 ±    3438.248    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1738.111 ±    1406.908  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    100026.932 ±   81012.798    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.791 ±       6.502  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        45.683 ±     375.492    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34111.292 ±     459.265   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1543.094 ±      30.661  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     71184.160 ±    1432.328    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1479.812 ±    1162.019  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     68286.532 ±   54250.203    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.641 ±       3.841  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        29.588 ±     177.433    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34835.246 ±     739.402   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1506.603 ±      46.781  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68066.527 ±    1832.733    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1478.992 ±    1153.972  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     66850.812 ±   53066.017    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.683 ±       4.490  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        30.835 ±     202.450    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    321555.980 ±   21601.515   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1821.741 ±     138.324  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8916.357 ±     282.930    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1743.170 ±    1411.761  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8545.066 ±    7161.832    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.733 ±       6.130  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.619 ±      30.287    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1524407.265 ±   24602.759   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       491.055 ±      45.854  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       506.965 ±      41.308    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       399.685 ±    1404.949  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       411.650 ±    1447.009    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.022  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.004 ±       0.023    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    679156.990 ±    6168.065   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       580.313 ±      32.666  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1344.762 ±      84.491    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       533.584 ±    1148.582  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1237.539 ±    2663.904    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.010 ±       0.083    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1890542.344 ±   24551.397   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       375.813 ±      33.016  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       312.849 ±      31.131    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.786 ±    1216.848  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       282.650 ±    1015.220    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.007 ±       0.060    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    101702.983 ±    3824.599   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3284.770 ±     178.112  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     50830.011 ±    1140.550    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3219.020 ±    1159.290  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     49828.469 ±   18510.344    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.457 ±       3.287    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                                128  thrpt    5    683587.281 ±   38633.139   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1836.332 ±      87.987  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      4227.716 ±     148.412    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1746.479 ±    1414.564  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      4023.782 ±    3318.155    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.616 ±       5.262  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.436 ±      12.263    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    355481.670 ±    8890.428   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1228.630 ±      46.890  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5439.239 ±     130.035    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1207.770 ±    1154.170  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5343.895 ±    5070.099    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.695 ±       5.080  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.099 ±      22.688    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1604901.521 ±   13147.081   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       764.968 ±      28.626  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       750.158 ±      32.766    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       800.001 ±    1148.010  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       784.915 ±    1133.758    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.075  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.012 ±       0.074    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1051625.360 ±    6074.484   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       766.199 ±      24.116  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1146.587 ±      32.866    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       802.258 ±    1154.521  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1200.243 ±    1721.719    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.019 ±       0.066    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2788707.230 ±  113373.286   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1322.904 ±      78.005  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       746.491 ±      30.198    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1210.477 ±    1157.004  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       683.210 ±     654.888    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.612 ±       5.002  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.343 ±       2.807    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3253104.271 ±   15976.807   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.214 ±       1.771  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.104 ±       0.859    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    489062.592 ±    1975.768   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       579.836 ±      25.681  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1865.729 ±      78.326    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       534.577 ±    1150.718  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1720.562 ±    3703.647    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.013 ±       0.115    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                               128  thrpt    5    172705.217 ±    2313.399   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1028.364 ±      66.036  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      9370.277 ±     713.232    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       941.616 ±    1418.727  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      8588.435 ±   13052.361    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.114 ±       0.655    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        21.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    160954.193 ±    5594.355   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2043.756 ±     105.388  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19982.222 ±     402.461    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1878.308 ±    1153.880  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     18353.089 ±   10981.242    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.745 ±       5.671  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         7.251 ±      55.154    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    453207.529 ±    6861.227   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       374.195 ±      36.499  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1299.464 ±     138.061    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.900 ±    1212.343  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1175.248 ±    4222.606    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.029 ±       0.251    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1275009.608 ±   11317.699   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       255.462 ±      31.063  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       315.344 ±      40.682    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       306.985 ±    1079.096  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       379.516 ±    1334.054    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     85504.252 ±    4598.345   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3431.301 ±     157.832  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63151.997 ±     977.793    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3357.685 ±      69.392  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     61805.596 ±    3730.712    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.613 ±       2.218    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        38.000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                   128  thrpt    5    303539.820 ±   14251.821   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1425.477 ±      78.849  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5      7389.834 ±     192.988    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1341.059 ±       7.267  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      6953.129 ±     354.275    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.071 ±       0.438  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.373 ±       2.321    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        15.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    305721.370 ±   11312.836   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1726.093 ±      59.278  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8886.002 ±     229.353    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1609.082 ±    1415.880  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8287.379 ±    7369.983    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.720 ±       5.807  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.716 ±      29.956    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1937821.267 ±   39291.973   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1025.639 ±      24.959  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       832.875 ±      30.773    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1069.754 ±    1410.148  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       869.376 ±    1153.646    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.010 ±       0.036    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2836092.514 ±  206765.701   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       788.437 ±      69.169  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       437.471 ±      16.138    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806.278 ±    1157.673  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       446.614 ±     625.715    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.005 ±       0.039    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        15.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3117238.724 ±   23018.778   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.613 ±       5.275  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.310 ±       2.670    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     49176.679 ±    1005.901   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2209.199 ±      40.126  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     70696.548 ±    1720.953    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2008.243 ±      13.838  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     64265.899 ±    1264.515    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.833 ±       7.038  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        26.733 ±     225.873    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                  128  thrpt    5    155573.533 ±    1759.596   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       822.240 ±      61.489  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5      8318.273 ±     707.434    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       806.331 ±    1155.448  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8163.524 ±   11815.142    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.127 ±       0.728    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        16.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    245748.255 ±    1014.196   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2702.643 ±      51.680  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17305.734 ±     321.828    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2552.045 ±    1168.160  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     16341.608 ±    7486.656    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.029 ±       0.166  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.187 ±       1.065    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    383106.984 ±   13685.441   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1969.416 ±      78.265  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8090.423 ±     214.559    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2005.413 ±       9.354  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      8238.798 ±     307.373    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.804 ±       5.725  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.285 ±      23.374    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2264614.489 ±  133233.257   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       805.801 ±      80.607  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       559.932 ±      29.922    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.132 ±    1154.046  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       559.229 ±     781.301    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.003 ±       0.025    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     88354.961 ±    4238.711   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3485.567 ±     279.569  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62071.651 ±    2404.127    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3246.443 ±    1138.606  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     57775.152 ±   18010.346    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.029 ±       0.166  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.517 ±       2.934    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        24.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        34.000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                   128  thrpt    5    425458.094 ±    6045.825   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      2068.839 ±      64.153  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5      7652.097 ±     196.972    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2014.606 ±      11.599  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      7451.615 ±     130.726    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.695 ±       5.203  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         2.577 ±      19.276    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    267839.764 ±    8634.354   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2170.805 ±      83.092  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12753.029 ±     244.544    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2145.421 ±    1160.680  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12605.941 ±    6883.177    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.712 ±       5.997  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.190 ±      35.290    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1468558.885 ±   11078.234   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       878.913 ±      26.117  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       941.758 ±      26.837    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       803.110 ±    1152.171  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       860.582 ±    1235.432    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.004 ±       0.038    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2802973.569 ±  313164.150   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       986.449 ±      92.149  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       553.945 ±      20.367    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       941.118 ±    1419.970  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       527.069 ±     774.839    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.009 ±       0.049    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3167715.030 ±   23520.496   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    398323.814 ±   17185.228   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2570.325 ±     143.275  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10154.269 ±     164.816    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2540.960 ±    1158.728  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10038.426 ±    4561.386    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.142 ±       1.132  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.555 ±       4.426    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                  128  thrpt    5     93784.947 ±     750.889   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       722.822 ±      16.471  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     12129.580 ±     342.511    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.837 ±       1.530  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     11273.923 ±      71.147    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        15.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     25225.996 ±    1258.980   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1622.963 ±      89.346  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    101246.780 ±    2542.920    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.499 ±    1413.632  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    100461.203 ±   87853.520    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.775 ±       4.546  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        48.622 ±     285.903    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5     97654.318 ±    5450.792   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       947.466 ±      81.864  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15266.194 ±     805.503    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       933.558 ±    1404.274  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     15033.771 ±   22476.822    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.019 ±       0.102  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.303 ±       1.634    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     69477.430 ±     616.198   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1249.675 ±      43.597  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28308.020 ±    1197.097    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1205.098 ±    1152.998  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     27302.874 ±   26183.278    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.841 ±       5.270  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19.046 ±     119.396    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    136296.838 ±    4841.730   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       945.830 ±      45.628  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10920.504 ±     418.511    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941.042 ±    1417.629  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10862.370 ±   16321.987    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.096 ±       0.507    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     38300.266 ±    1428.638   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1868.432 ±      39.651  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     76771.629 ±    1951.778    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1870.807 ±    1153.495  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     76861.585 ±   47255.977    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.883 ±       7.467  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        36.050 ±     304.873    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                                 128  thrpt    5     69252.626 ±    2951.732   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1360.070 ±      50.013  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30904.880 ±     872.813    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1345.059 ±       5.990  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     30565.857 ±    1372.617    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.658 ±       4.461  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        14.876 ±     100.815    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     32421.919 ±     259.743   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       533.986 ±      33.622  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25919.504 ±    1826.826    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       504.109 ±    1116.614  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     24491.131 ±   54252.126    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     32215.256 ±    1966.958   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       402.463 ±      51.964  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19657.771 ±    1792.208    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       369.228 ±    1320.742  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17933.821 ±   64153.699    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.607 ±       5.226    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     34406.264 ±     203.187   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       424.855 ±      45.469  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19427.420 ±    2102.510    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.483 ±    1326.155  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     16949.479 ±   60655.713    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.381 ±       3.278    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     35086.991 ±     351.639   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       393.994 ±      27.850  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     17670.334 ±    1409.527    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       473.054 ±    1063.462  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     21239.084 ±   47780.824    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.560 ±       3.214    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                                128  thrpt    5     27330.484 ±     303.161   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       665.819 ±      12.413  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     38337.815 ±     596.915    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       671.429 ±       1.996  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     38661.090 ±     465.602    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.240 ±       2.062    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     15423.450 ±    1155.498   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1133.398 ±      24.858  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    115680.885 ±    6967.488    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1074.678 ±    1416.147  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    110149.332 ±  150277.650    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.575 ±       4.902  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        57.409 ±     489.711    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     15348.068 ±     402.175   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1001.121 ±      48.594  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    102663.814 ±    6757.820    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       936.566 ±    1412.401  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     96241.801 ±  147662.958    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.043  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.194 ±       4.449    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    105415.839 ±   13180.635   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       280.613 ±      51.402  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4188.194 ±     500.528    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.654 ±    1079.083  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3040.543 ±   16032.044    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.123 ±       1.062    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13787.976 ±     221.044   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1362.587 ±      34.904  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    155509.447 ±    3497.302    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1337.374 ±       6.335  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    152634.091 ±    2975.005    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.933 ±       6.995  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       106.917 ±     802.159    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        31.000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                               128  thrpt    5     15023.473 ±    1324.850   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1058.403 ±      64.348  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5    110890.653 ±    7255.309    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       941.329 ±    1418.623  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     98872.728 ±  152212.243    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.718 ±       6.915    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        23.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     45001.698 ±    1562.870   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1147.830 ±      28.205  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40141.631 ±    1481.386    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1208.557 ±    1156.052  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42263.240 ±   40430.431    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.700 ±       5.889  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        24.796 ±     208.830    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     64267.243 ±    2994.215   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1128.346 ±      52.520  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27625.623 ±     995.030    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1068.873 ±    1405.659  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26207.130 ±   34882.219    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.758 ±       6.394  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        18.419 ±     155.317    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    176141.914 ±    4060.357   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       291.316 ±      25.683  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2603.034 ±     243.286    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306.955 ±    1078.992  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2740.100 ±    9631.855    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.112 ±       0.641    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    184929.027 ±    1458.293   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         4.045 ±      34.826  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        34.325 ±     295.524    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     58624.592 ±    1315.734   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1139.807 ±      25.369  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30597.215 ±     728.401    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1207.326 ±    1154.566  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     32433.126 ±   31298.868    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.762 ±       6.476  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        20.631 ±     175.238    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                              128  thrpt    5     16826.789 ±     318.983   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       601.233 ±      31.565  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     56233.280 ±    3734.854    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       536.940 ±    1155.804  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     50293.058 ±  108262.555    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.777 ±       6.689    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     97268.993 ±    1623.725   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2162.854 ±      72.878  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     34991.513 ±     700.075    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2006.592 ±      11.502  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     32464.235 ±     453.471    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.796 ±       6.406  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        12.871 ±     103.628    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    126964.864 ±    5672.542   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1800.087 ±      85.754  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22312.423 ±     700.224    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1734.724 ±    1407.750  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21513.709 ±   17686.516    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.874 ±       7.440  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        11.051 ±      94.043    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    164357.879 ±    4049.517   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1544.531 ±      33.843  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14790.007 ±     400.595    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1477.573 ±    1161.680  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14161.405 ±   11498.782    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.662 ±       4.607  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6.390 ±      44.549    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     54319.329 ±    2258.716   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2924.080 ±     160.677  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84715.955 ±    2783.726    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2832.973 ±    1194.873  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     82077.730 ±   34435.678    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.246 ±       2.117    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        21.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                   128  thrpt    5    111371.860 ±    3534.508   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      2141.797 ±      72.756  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     30262.533 ±    1130.015    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2145.997 ±    1146.645  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     30335.669 ±   16760.768    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.795 ±       6.579  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        11.179 ±      92.458    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    181745.864 ±    8236.734   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1214.629 ±      50.443  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10516.884 ±     241.200    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1207.761 ±    1155.033  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     10465.077 ±   10102.062    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.737 ±       4.991  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         6.467 ±      44.013    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    537134.882 ±   10426.144   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       559.783 ±      31.195  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1640.110 ±     109.914    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       533.649 ±    1148.722  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1566.397 ±    3371.845    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.012 ±       0.105    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    714553.775 ±   14560.688   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       567.099 ±      43.202  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1249.025 ±      93.779    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.690 ±    1155.267  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1182.012 ±    2544.534    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    783830.991 ±    3883.793   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    337536.609 ±    6128.622   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       954.481 ±      36.220  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4450.307 ±     242.498    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       934.374 ±    1406.408  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4360.596 ±    6616.480    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                  128  thrpt    5     43236.171 ±     345.347   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       471.645 ±      37.563  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     17168.104 ±    1400.315    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       504.947 ±    1118.997  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     18390.894 ±   40739.476    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.152 ±       1.305    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     38258.801 ±    1900.825   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1955.490 ±      83.951  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80439.310 ±    2867.335    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.529 ±    1159.087  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     77291.666 ±   49078.936    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.766 ±       4.518  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        31.828 ±     188.960    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    295630.559 ±    4824.540   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       314.521 ±      24.999  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1674.378 ±     160.370    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.765 ±    1211.679  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1803.663 ±    6473.134    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.002 ±       0.013  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.012 ±       0.067    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    119086.248 ±    6186.048   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1425.349 ±      61.820  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18837.658 ±     494.067    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1338.776 ±       5.962  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     17695.217 ±     870.333    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.841 ±       5.210  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        10.951 ±      67.644    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    486141.343 ±    3697.739   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       325.708 ±      32.879  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1054.528 ±     112.550    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.796 ±    1216.925  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1098.167 ±    3943.873    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.013 ±       0.116    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     42435.908 ±    1018.855   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2105.816 ±      73.742  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     78091.947 ±    1290.637    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2004.182 ±      16.422  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     74326.377 ±    2115.668    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.925 ±       7.738  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        34.405 ±     287.920    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                  128  thrpt    5     85648.845 ±    3746.704   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1604.002 ±      63.354  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     29470.054 ±     843.230    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1612.333 ±    1416.150  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     29615.257 ±   25834.120    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.708 ±       4.482  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        13.005 ±      82.125    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     75461.413 ±     577.457   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       613.815 ±      34.777  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12801.164 ±     772.502    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       535.766 ±    1153.277  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11180.822 ±   24067.638    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.087 ±       0.750    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     88067.957 ±     819.595   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       514.808 ±      34.246  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9199.921 ±     679.837    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       533.078 ±    1147.490  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9533.914 ±   20522.608    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.025  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.075 ±       0.442    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     79006.575 ±    1603.117   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       479.367 ±      23.457  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9548.976 ±     627.712    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       502.991 ±    1113.605  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10032.285 ±   22196.291    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.165 ±       1.423    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     86045.262 ±    6942.093   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       504.829 ±      79.975  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9229.962 ±     967.416    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.839 ±    1118.546  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9154.595 ±   20314.092    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.150 ±       1.295    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     87732.712 ±    1653.277   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       441.016 ±      36.651  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7911.396 ±     677.329    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.641 ±    1326.679  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6641.763 ±   23773.419    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5      9857.295 ±     224.307   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1658.233 ±      34.085  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    264737.814 ±   10557.888    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1607.673 ±    1410.825  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    256724.941 ±  226767.252    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.795 ±       6.003  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       127.598 ±     963.807    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5     10136.685 ±     250.892   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1558.623 ±      23.967  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    241990.714 ±    3131.348    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1471.103 ±    1145.486  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    228310.463 ±  174984.175    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.900 ±       6.753  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       140.556 ±    1056.515    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    154422.925 ±   10448.327   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       418.639 ±      41.772  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4268.092 ±     621.642    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.698 ±    1326.911  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3810.197 ±   13622.963    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.042 ±       0.361    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5846.813 ±     189.281   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1521.158 ±      70.453  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    409425.240 ±   15302.623    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1470.641 ±    1159.111  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    396237.966 ±  323772.013    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.971 ±       7.253  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       263.543 ±    1974.049    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                                128  thrpt    5     10204.806 ±     416.359   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1631.730 ±     106.373  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5    251598.822 ±    6960.707    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1476.397 ±    1158.476  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    227597.717 ±  176362.153    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.758 ±       6.480  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5       116.390 ±     995.275    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     20079.528 ±     556.949   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1564.157 ±      51.779  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122569.549 ±    1630.618    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1474.506 ±    1149.498  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    115457.351 ±   87310.853    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.741 ±       6.292  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        58.197 ±     494.088    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     23410.088 ±    1399.547   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1596.231 ±      90.175  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    107299.847 ±    2173.305    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1472.487 ±    1156.728  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     98949.832 ±   76473.536    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.787 ±       6.735  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        52.641 ±     450.287    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    134360.130 ±    2213.974   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       303.237 ±      27.936  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3552.242 ±     383.582    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.658 ±    1079.101  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2408.213 ±   12697.814    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.098 ±       0.843    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    140350.187 ±     775.609   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.188 ±       1.618  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         2.115 ±      18.180    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     23344.105 ±     897.197   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1624.702 ±      45.609  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109534.154 ±    3073.487    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1606.152 ±    1410.730  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    108453.119 ±   98933.022    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.821 ±       5.201  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        54.993 ±     348.649    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                               128  thrpt    5      9762.176 ±      96.269   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5       860.632 ±      40.481  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5    138735.717 ±    6516.343    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       806.884 ±    1157.024  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    130071.549 ±  186513.773    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.342 ±      11.558    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        17.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    123875.129 ±    1175.686   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1766.975 ±      61.131  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22449.799 ±     834.438    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1743.147 ±    1411.288  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     22155.373 ±   18107.952    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.737 ±       6.080  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.330 ±      76.960    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    555004.293 ±   35798.933   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       595.214 ±      47.412  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1687.820 ±      42.051    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       665.819 ±       1.665  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1888.522 ±     117.601    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.004 ±       0.027  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.012 ±       0.076    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    351839.829 ±   15304.966   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       493.578 ±      56.567  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2207.091 ±     161.186    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       502.064 ±    1111.014  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2235.178 ±    4948.585    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.056 ±       0.319    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    744750.114 ±   16979.736   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       504.058 ±      34.794  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1065.169 ±      91.142    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.779 ±    1118.525  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1068.634 ±    2371.163    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.018 ±       0.153    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     76833.473 ±    3270.260   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3179.976 ±     113.900  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65134.641 ±    1981.712    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3086.443 ±    1445.485  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     63242.911 ±   30468.118    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.339 ±       2.114    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        32.000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                    128  thrpt    5    229310.548 ±   18189.258   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1317.954 ±      90.765  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5      9046.215 ±     420.630    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1338.288 ±       7.742  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9187.972 ±     727.945    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0.058 ±       0.308    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    202021.885 ±    1751.825   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1484.813 ±      56.723  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11567.501 ±     414.228    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1474.682 ±    1160.666  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     11490.482 ±    9097.294    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.716 ±       5.987  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5.589 ±      46.725    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    657106.164 ±    9178.614   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       366.406 ±      28.896  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       877.531 ±      76.450    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.847 ±    1319.166  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       884.942 ±    3164.650    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.009 ±       0.075  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.021 ±       0.179    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    655674.455 ±   14954.894   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       501.645 ±      34.566  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1204.064 ±      83.709    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       502.040 ±    1110.955  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1206.077 ±    2664.535    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.020 ±       0.105    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1105504.692 ±   33268.938   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       621.237 ±      51.255  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       884.298 ±      72.272    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       536.756 ±    1155.410  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       765.702 ±    1648.411    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.051    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1189661.854 ±    1004.868   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         0.191 ±       1.641  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         0.253 ±       2.171    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     35074.502 ±     681.046   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1995.397 ±      85.409  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     89523.955 ±    2316.352    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2008.092 ±      13.326  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     90097.768 ±    2248.721    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.845 ±       5.068  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        38.151 ±     229.303    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    123756.566 ±     964.031   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1367.515 ±      30.844  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     17388.499 ±     287.000    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1345.270 ±       3.777  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     17105.777 ±     140.994    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.595 ±       4.241  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         7.572 ±      53.962    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    130514.216 ±    6543.707   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1677.547 ±      44.533  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     20229.057 ±     857.017    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1605.587 ±    1410.736  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     19402.127 ±   17931.747    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.791 ±       6.366  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.462 ±      76.046    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    203975.763 ±    9782.761   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1245.284 ±      78.194  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9604.193 ±     162.392    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1202.984 ±    1148.185  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9258.666 ±    8590.122    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.837 ±       5.985  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.558 ±      47.122    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    253423.017 ±    5157.662   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1359.803 ±      41.301  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8444.341 ±     197.724    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1344.830 ±       4.135  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8351.542 ±     180.437    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.616 ±       4.327  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.840 ±      27.008    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     70414.728 ±    2034.302   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2843.060 ±     122.715  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63535.840 ±    1085.222    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2699.016 ±      47.570  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     60319.569 ±    1246.607    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.093 ±       0.799    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                               128  thrpt    5    182780.532 ±    3845.633   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1430.887 ±      54.275  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     12319.371 ±     358.124    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1344.286 ±       6.001  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     11574.047 ±     204.405    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.691 ±       4.816  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5.940 ±      41.420    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    183878.694 ±    1918.110   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1227.695 ±      42.495  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10508.355 ±     393.875    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.449 ±    1156.582  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10337.289 ±    9929.267    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.708 ±       5.274  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6.069 ±      45.253    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    720662.988 ±   17886.462   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       747.318 ±      28.311  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1632.028 ±      31.949    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       667.881 ±       2.680  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1458.618 ±      39.589    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        15.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    708094.382 ±   22421.799   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       559.659 ±      52.137  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1243.745 ±      82.984    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       536.931 ±    1155.785  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1191.238 ±    2564.533    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.009 ±       0.079    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    779415.019 ±    2673.638   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    342429.688 ±    5771.539   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       971.068 ±      26.948  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4462.448 ±     142.424    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       934.411 ±    1405.042  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4295.600 ±    6479.578    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.038 ±       0.202    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                              128  thrpt    5     43193.099 ±     335.081   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       472.235 ±      35.071  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     17206.734 ±    1383.104    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.964 ±    1118.959  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     18413.446 ±   40794.056    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.455 ±       3.920    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     11155.419 ±     780.026   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1417.572 ±      91.845  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    199970.974 ±    6210.814    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1342.439 ±       7.984  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    189410.917 ±   12569.336    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.799 ±       5.220  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       112.075 ±     732.307    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     10987.676 ±     580.569   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1277.102 ±      74.691  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    182919.491 ±    6190.388    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1205.058 ±    1151.030  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    172808.171 ±  167525.850    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.854 ±       5.829  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       120.990 ±     827.083    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    262536.318 ±   42234.751   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1766.013 ±     275.198  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10586.400 ±     445.070    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1747.256 ±    1416.616  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     10477.054 ±    8450.329    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.583 ±       4.139  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.367 ±      23.898    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      8154.296 ±     160.943   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1466.520 ±      31.221  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    283027.696 ±   11054.051    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1470.353 ±    1151.113  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    283925.312 ±  227114.370    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.946 ±       6.426  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       182.122 ±    1235.377    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                          128  thrpt    5     10453.339 ±     603.036   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1271.762 ±      77.611  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5    191458.121 ±    3298.704    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1339.576 ±       3.139  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    201703.041 ±   11329.242    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.067 ±       0.486  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         9.891 ±      71.862    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                                128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     25291.123 ±     815.563   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1327.570 ±      47.798  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     82609.463 ±    1559.621    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1207.695 ±    1156.362  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     75235.654 ±   73040.715    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.716 ±       6.078  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        44.519 ±     377.701    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     29695.335 ±     673.153   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1236.622 ±      37.904  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65531.677 ±    2976.303    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.922 ±    1153.010  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     63960.859 ±   61847.786    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.804 ±       5.236  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        42.708 ±     278.192    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    637554.520 ±   37708.477   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1178.238 ±      93.895  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2908.433 ±      86.926    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1076.616 ±    1420.066  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2651.785 ±    3430.265    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.629 ±       5.190  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.516 ±      12.504    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        20.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    784225.754 ±    3618.718   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     29992.745 ±    1889.526   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1358.708 ±      93.439  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71282.226 ±    1068.918    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1340.533 ±       6.585  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     70345.070 ±    4537.890    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.812 ±       5.442  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        42.224 ±     283.210    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                         128  thrpt    5     13957.256 ±     426.431   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5       917.772 ±      50.407  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    103483.952 ±    3659.337    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941.392 ±    1418.554  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    106078.690 ±  158905.362    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.467 ±       4.025    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     34576.336 ±     910.624   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1831.333 ±      56.695  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83345.028 ±    2336.217    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1742.528 ±    1411.892  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     79327.362 ±   64761.129    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.791 ±       6.634  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        36.049 ±     302.239    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     33180.750 ±    1024.317   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1470.733 ±      88.038  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     69757.925 ±    3017.460    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1471.761 ±    1143.647  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     69784.202 ±   53447.388    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.875 ±       5.721  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        41.284 ±     270.125    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    454197.889 ±    7861.929   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1217.357 ±      38.607  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4218.312 ±      72.507    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1210.754 ±    1158.689  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4193.081 ±    3983.750    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.616 ±       4.695  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.134 ±      16.274    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     18995.469 ±    1097.606   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1911.975 ±     103.087  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    158389.063 ±    4012.590    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1869.293 ±    1152.169  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    155055.511 ±  100021.638    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.908 ±       7.591  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        76.014 ±     636.077    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                              128  thrpt    5     34213.312 ±     455.862   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1683.828 ±      76.060  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     77454.135 ±    3446.928    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1611.219 ±    1417.587  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     74150.901 ±   66039.147    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.754 ±       5.301  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        34.814 ±     245.191    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     56288.638 ±    3577.784   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1727.283 ±     146.250  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48293.395 ±    1756.717    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1607.383 ±    1414.308  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     44956.987 ±   39715.920    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.749 ±       6.229  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        20.806 ±     172.905    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    156965.872 ±   15323.348   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1906.501 ±     179.254  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19114.621 ±     553.118    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1873.804 ±    1150.327  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     18803.433 ±   11885.360    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.729 ±       5.340  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.425 ±      54.552    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1180906.285 ±   70536.201   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1307.707 ±      62.828  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1742.820 ±      44.494    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1345.297 ±       3.852  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1793.176 ±     109.226    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.583 ±       4.795  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.789 ±       6.494    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1373540.569 ±   34670.399   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         1.322 ±      10.777  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         1.531 ±      12.490    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     69358.577 ±    1048.693   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1759.659 ±      70.907  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39924.029 ±    1334.519    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1741.571 ±    1410.064  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     39525.738 ±   32239.190    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.770 ±       6.322  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        17.430 ±     143.002    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                             128  thrpt    5     27846.512 ±     339.285   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       656.318 ±       7.654  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     37091.949 ±     529.036    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.346 ±       1.537  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     37941.349 ±     495.797    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.237 ±       2.038    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     18220.661 ±     774.548   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1615.304 ±      55.660  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    139497.805 ±    4994.333    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1609.428 ±    1414.038  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    139107.028 ±  124819.191    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.904 ±       5.919  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        79.132 ±     520.291    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     17088.721 ±    1236.728   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1416.325 ±      80.917  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    130441.346 ±    3999.473    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1337.046 ±       6.498  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    123166.300 ±    9260.930    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.879 ±       6.211  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        81.769 ±     578.056    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        29.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    666066.878 ±    8285.196   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1794.469 ±      54.381  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4239.222 ±     105.478    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1748.112 ±    1415.833  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4130.283 ±    3356.305    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.587 ±       4.705  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.382 ±      11.071    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     13024.997 ±     754.683   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1751.294 ±      42.400  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    211631.652 ±   13741.442    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1735.977 ±    1406.988  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    210042.495 ±  175982.434    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.908 ±       6.874  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       108.756 ±     823.512    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        32.000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                              128  thrpt    5     17142.468 ±    1123.337   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1474.400 ±     108.320  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    135356.010 ±    4465.837    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1477.414 ±    1156.048  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    135441.305 ±   99664.068    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.766 ±       4.909  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        69.407 ±     445.051    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     44067.848 ±    1334.131   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1727.119 ±      46.772  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61682.058 ±    2347.536    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1741.238 ±    1412.844  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     62222.303 ±   51245.350    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.593 ±       2.384    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     54915.693 ±    3492.999   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1687.392 ±     125.852  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48353.224 ±    1908.636    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1606.971 ±    1414.377  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     45980.339 ±   38804.726    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.800 ±       6.183  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        22.698 ±     175.307    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1345464.872 ±   77478.791   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1262.690 ±      79.085  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1477.001 ±      45.426    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.820 ±    1159.611  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1418.810 ±    1387.606    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.591 ±       4.913  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.684 ±       5.677    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1578633.099 ±    1755.539   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3601.344 ±     173.813   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       496.369 ±      40.209  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    216906.476 ±   16551.678    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       503.473 ±    1114.966  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    219689.805 ±  488106.099    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        15.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                             128  thrpt    5     30117.114 ±     208.146   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       698.374 ±      23.796  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     36493.931 ±    1429.754    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.180 ±       1.452  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     35072.605 ±     250.211    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.870 ±       3.504    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    126417.526 ±     953.210   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2010.981 ±      46.135  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     25034.207 ±     505.661    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2011.642 ±      12.921  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     25042.562 ±     267.528    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.741 ±       4.599  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         9.239 ±      57.403    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    377368.853 ±   21085.861   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       783.575 ±      51.823  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3267.443 ±     102.013    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       799.861 ±    1145.292  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3330.872 ±    4680.419    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.010 ±       0.037  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.042 ±       0.152    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    262837.449 ±    1691.463   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       588.609 ±      37.638  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3524.442 ±     221.898    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       533.060 ±    1147.453  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3191.644 ±    6870.348    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.075 ±       0.430    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    512871.186 ±   37282.020   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       660.862 ±      41.509  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2028.052 ±      98.632    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       537.287 ±    1156.551  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1656.586 ±    3568.086    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.039 ±       0.223    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     74072.534 ±    3110.834   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3134.270 ±     126.160  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66596.554 ±    1156.673    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3084.194 ±    1418.735  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     65574.269 ±   31642.450    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.071 ±       0.480  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1.521 ±      10.326    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        34.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    132119.186 ±    1812.253   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1154.230 ±      31.540  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13748.331 ±     498.979    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.851 ±    1416.244  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12795.226 ±   16924.824    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.712 ±       5.997  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.459 ±      71.230    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    206899.066 ±   10877.083   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       167.135 ±      19.886  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1271.940 ±     212.640    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.639 ±    1079.001  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1577.376 ±    8317.683    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.366 ±       3.155  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.852 ±      24.555    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    415867.918 ±   13928.285   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       421.425 ±      45.726  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1595.133 ±     203.148    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       369.190 ±    1320.579  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1401.688 ±    5020.930    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    465590.665 ±   31815.154   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       374.053 ±      37.398  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1264.586 ±     124.508    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.807 ±    1216.982  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1154.192 ±    4133.779    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.014 ±       0.121    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    494713.133 ±    3169.260   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     29313.674 ±    1349.558   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1610.250 ±      84.020  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     86457.248 ±    5411.050    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1606.973 ±    1410.882  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     86371.516 ±   77883.244    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.808 ±       5.104  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        43.939 ±     279.352    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8531.616 ±     470.213   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1234.980 ±      76.321  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    227813.438 ±    9357.537    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1208.238 ±    1155.229  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    223079.503 ±  215716.993    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.745 ±       6.327  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       139.407 ±    1183.929    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      7868.016 ±     211.010   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1052.149 ±      28.939  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    210447.277 ±   10796.855    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1069.668 ±    1408.556  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    214333.582 ±  286524.059    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.673 ±       8.821    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    185419.560 ±    7545.167   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1858.092 ±     104.282  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     15768.725 ±     422.687    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1881.071 ±    1160.142  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     15973.755 ±   10063.419    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.654 ±       4.378  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5.558 ±      37.097    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7868.047 ±     378.105   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1319.808 ±      61.021  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    263964.656 ±    1939.577    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1335.161 ±       6.028  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    267066.445 ±   12650.163    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.966 ±       6.955  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       190.895 ±    1373.164    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                         128  thrpt    5      8322.113 ±     156.155   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                          128  thrpt    5      1128.054 ±      27.174  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    213319.642 ±    8383.920    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1075.295 ±    1417.113  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    203524.713 ±  270278.948    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.637 ±       5.485  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       120.084 ±    1033.959    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                                128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     20134.657 ±    1263.063   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1144.600 ±      67.877  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89451.632 ±    2720.917    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207.613 ±    1155.316  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     94354.225 ±   90031.999    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.720 ±       6.023  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        55.272 ±     461.783    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     24527.216 ±     813.251   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1090.718 ±      58.060  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69972.248 ±    2878.026    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1071.176 ±    1412.138  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     68667.171 ±   89922.499    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.683 ±       5.793  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        43.798 ±     371.387    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    376802.299 ±    4299.015   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       878.118 ±      29.025  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3667.257 ±     130.405    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       806.822 ±    1156.994  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3371.770 ±    4875.984    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.070 ±       0.367    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    417493.905 ±    2415.678   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     24420.415 ±    1941.863   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1174.101 ±      78.153  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     75659.699 ±    2764.129    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1072.818 ±    1414.708  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     69213.507 ±   92105.863    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.851 ±       7.227  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        53.804 ±     456.817    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                        128  thrpt    5     10960.356 ±     369.799   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                         128  thrpt    5       939.215 ±      57.359  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    134842.020 ±    6398.319    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5       941.490 ±    1418.406  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    135042.610 ±  201778.418    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.383 ±      12.564    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                               128  thrpt    5        19.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13182.623 ±     687.167   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1288.107 ±      54.884  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    153778.817 ±    6748.830    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1207.493 ±    1155.032  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    144080.471 ±  137048.931    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.754 ±       6.176  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        91.194 ±     747.913    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13546.890 ±     536.776   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1213.656 ±      64.161  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    140977.690 ±    4706.229    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1069.442 ±    1409.839  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    124221.161 ±  163625.816    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.862 ±       6.314  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        99.608 ±     730.680    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    291494.327 ±   13162.038   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1743.878 ±      41.857  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9416.260 ±     421.297    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1746.360 ±    1415.788  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      9442.662 ±    7923.502    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.662 ±       5.046  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.546 ±      27.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12635.430 ±     715.585   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1570.884 ±      36.239  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    195679.816 ±   10405.853    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1605.511 ±    1415.550  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    200411.267 ±  186009.646    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.192 ±       0.954  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        23.691 ±     117.954    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                             128  thrpt    5     12374.111 ±     457.782   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1173.963 ±      57.835  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5    149275.742 ±    5201.632    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1209.510 ±    1156.761  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    153618.817 ±  144757.782    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.729 ±       6.231  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        93.409 ±     798.631    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     33588.551 ±    1688.706   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1455.494 ±      91.051  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     68181.627 ±    1227.694    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1475.004 ±    1155.975  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     69087.785 ±   53668.229    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.757 ±       6.160  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        35.340 ±     287.738    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     82332.425 ±    3109.291   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      2070.034 ±     114.428  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39565.177 ±     996.243    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      2007.523 ±      10.929  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     38374.734 ±    1626.867    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.762 ±       6.515  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.733 ±     125.993    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    624427.826 ±   27704.502   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       882.605 ±      35.542  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2224.321 ±     106.777    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.457 ±    1157.932  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2035.799 ±    2983.168    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.010 ±       0.090    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    736814.831 ±    2602.714   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.099 ±       0.852  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.212 ±       1.823    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     72261.434 ±    5697.962   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2098.419 ±     180.543  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45692.729 ±     827.296    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2016.231 ±      34.305  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     43916.033 ±    2829.168    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.042 ±       0.234  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.924 ±       5.224    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        21.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                            128  thrpt    5     20203.556 ±     490.950   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       769.063 ±      39.768  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     59908.153 ±    2152.706    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       802.830 ±    1151.139  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     62532.391 ±   89499.997    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.647 ±       3.412    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     17224.504 ±     553.127   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       911.924 ±      44.218  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     83309.844 ±    5997.346    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       804.634 ±    1149.488  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     73645.492 ±  107753.495    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.756 ±       6.507    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        21.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     17026.824 ±     387.143   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       745.709 ±      18.292  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     68921.211 ±     988.915    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       668.189 ±       1.617  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     61758.075 ±    1466.107    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.387 ±       3.330    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    121723.653 ±    2860.464   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       313.502 ±      40.210  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4053.457 ±     541.078    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204.660 ±    1079.112  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2650.139 ±   13973.577    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.108 ±       0.932    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     13894.738 ±     697.100   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1059.886 ±      90.778  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    120038.211 ±    5901.995    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1070.433 ±    1411.066  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    121091.328 ±  157859.491    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.415 ±       8.145    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                                 128  thrpt    5     15233.532 ±     639.365   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       747.466 ±      15.088  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     77221.661 ±    3439.111    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       671.545 ±       1.595  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     69378.528 ±    2920.427    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.280 ±       7.352    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        15.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     47559.881 ±     924.203   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1471.420 ±      54.714  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48685.285 ±    1723.575    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1475.703 ±    1158.619  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     48854.922 ±   39160.043    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.741 ±       6.112  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        24.448 ±     201.592    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     77293.476 ±    1146.209   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1647.698 ±      64.043  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33546.927 ±    1310.101    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1606.024 ±    1410.677  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     32716.329 ±   29128.214    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.767 ±       5.697  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        15.608 ±     115.877    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    316786.242 ±   13680.429   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       626.509 ±      32.368  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3112.563 ±      72.472    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       671.614 ±       1.897  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3336.990 ±     136.787    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.020 ±       0.176    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    364535.412 ±    6261.341   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         2.474 ±      21.050  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        10.765 ±      91.605    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     65474.063 ±    2542.941   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1511.586 ±      52.160  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36337.442 ±    1283.258    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1473.084 ±    1156.603  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     35430.194 ±   28341.033    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.791 ±       6.770  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        18.772 ±     160.555    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                                128  thrpt    5     15051.952 ±     987.531   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       613.599 ±      47.340  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     64154.108 ±    3260.735    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       536.184 ±    1154.179  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     56231.832 ±  121122.248    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.666 ±       5.513  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        69.211 ±     572.393    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    144319.065 ±    3378.355   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1891.628 ±      80.651  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20627.171 ±     500.698    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1878.030 ±    1157.542  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     20486.031 ±   12777.542    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.754 ±       4.630  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.255 ±      50.844    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    851603.933 ±   13752.411   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       484.668 ±      49.341  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       895.697 ±      87.753    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.824 ±    1405.440  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       738.343 ±    2595.383    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.010 ±       0.073  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.018 ±       0.136    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    391114.235 ±   26308.731   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       401.223 ±      17.825  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1614.699 ±     113.803    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471.152 ±    1056.881  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1907.595 ±    4319.006    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.017 ±       0.142    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1135836.741 ±   58793.481   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       408.120 ±      54.316  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       565.408 ±      56.573    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       472.860 ±    1062.826  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       653.159 ±    1457.645    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.006 ±       0.049    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     81002.748 ±    3020.077   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3274.369 ±     130.461  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63620.061 ±    1567.580    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3221.427 ±    1159.001  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     62584.327 ±   22167.785    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.037 ±       0.280  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.724 ±       5.411    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        32.000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                  128  thrpt    5    284813.253 ±   15445.818   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1412.684 ±      62.886  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5      7805.702 ±     250.061    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1344.595 ±       5.632  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      7430.200 ±     382.608    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.675 ±       4.733  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.696 ±      25.923    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    268348.520 ±   16170.969   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1630.076 ±      69.084  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9560.499 ±     411.106    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1608.203 ±    1411.771  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9440.583 ±    8476.011    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.741 ±       5.410  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.437 ±      32.472    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1238558.550 ±   29835.056   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       434.065 ±      36.815  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       551.569 ±      55.870    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       399.430 ±    1404.053  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       509.112 ±    1789.619    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.016 ±       0.137    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5   1571494.365 ±   18264.397   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       941.985 ±      30.851  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       943.243 ±      37.883    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       936.786 ±    1411.255  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       938.686 ±    1422.419    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.004 ±       0.036    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1920582.259 ±   19957.358   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       677.219 ±      17.606  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       554.867 ±      18.114    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.453 ±       2.041  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       550.138 ±       4.622    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.010 ±       0.059    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2022990.717 ±  131970.482   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         1.808 ±      15.561  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         1.446 ±      12.445    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     42710.599 ±     859.213   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2131.361 ±      55.881  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78540.748 ±    1069.337    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2006.493 ±      12.642  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     73941.206 ±    1581.926    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.833 ±       6.857  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        30.707 ±     252.841    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                                 128  thrpt    5    143924.610 ±     759.344   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1129.941 ±      38.218  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     12355.851 ±     480.764    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1210.704 ±    1158.629  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     13242.211 ±   12712.580    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.633 ±       5.360  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         6.920 ±      58.607    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     15544.515 ±    1056.762   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1915.088 ±     162.750  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    193881.757 ±    5784.726    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.970 ±    1157.446  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    189811.742 ±  108776.853    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.766 ±       4.377  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        77.619 ±     444.131    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5     97274.159 ±    5039.435   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1310.401 ±      51.115  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21201.721 ±     661.047    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1337.681 ±       5.704  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21644.976 ±    1120.226    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.829 ±       6.956  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13.537 ±     113.692    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    251489.849 ±   11336.037   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       840.332 ±      57.614  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5258.653 ±     280.098    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.498 ±    1159.586  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5044.494 ±    7202.628    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.079 ±       0.454    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     12973.150 ±     206.473   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2087.599 ±      84.618  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    253219.718 ±    9133.140    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2137.545 ±    1146.590  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    259254.731 ±  137999.673    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.912 ±       5.538  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       110.891 ±     674.829    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                   128  thrpt    5     14394.703 ±     407.258   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1807.046 ±      40.280  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5    197555.289 ±    2508.712    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1746.045 ±    1421.045  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    191049.485 ±  158708.351    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.716 ±       5.853  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        78.351 ±     640.285    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     32825.354 ±     715.508   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2747.431 ±     117.753  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    131725.998 ±    3497.714    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2685.895 ±      30.725  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    128780.357 ±    2426.068    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.050 ±       0.263  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         2.393 ±      12.592    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    105803.760 ±    4021.208   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1496.585 ±      47.419  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22260.782 ±     603.741    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1471.852 ±    1154.981  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21887.141 ±   16993.516    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.770 ±       6.498  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.398 ±      96.157    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    179396.335 ±    2535.687   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       585.681 ±      37.356  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5137.911 ±     312.925    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.816 ±    1155.539  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4713.086 ±   10145.625    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.073 ±       0.629    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    193218.341 ±    2877.299   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.224 ±       1.927  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         1.838 ±      15.806    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     47130.773 ±    1063.931   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3328.802 ±     139.558  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111157.786 ±    3115.925    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3226.586 ±    1159.693  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    107750.918 ±   38910.717    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.278 ±       1.467    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        33.000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                  128  thrpt    5      9043.836 ±      84.529   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       973.967 ±      27.198  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5    169478.907 ±    6183.458    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       941.959 ±    1420.308  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    163999.314 ±  248440.466    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         2.176 ±      12.484    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        20.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     27938.814 ±    1495.354   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1465.818 ±      92.988  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     82562.640 ±    1407.289    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.315 ±       7.159  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     75564.079 ±    4282.852    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.787 ±       6.028  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        44.081 ±     337.645    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     28480.926 ±     287.454   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1161.271 ±      27.243  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     64169.850 ±    1884.962    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.762 ±    1151.405  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     66531.654 ±   63810.363    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.878 ±       7.340  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        48.419 ±     404.520    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        30.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    641434.602 ±   15135.574   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1718.476 ±      88.168  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4216.396 ±     173.410    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1612.287 ±    1418.188  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3955.314 ±    3464.476    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.683 ±       5.613  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.670 ±      13.726    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     23016.345 ±     757.735   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1730.267 ±      51.946  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    118306.485 ±    1373.595    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1606.992 ±    1412.184  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    109995.334 ±   99151.416    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.117 ±       0.872  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         8.022 ±      60.001    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                              128  thrpt    5     29321.861 ±      71.538   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1344.364 ±      39.557  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     72158.211 ±    1997.905    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1343.622 ±       5.135  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     72118.602 ±     389.451    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.754 ±       6.354  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        40.442 ±     341.007    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     76502.154 ±    1630.867   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      2036.960 ±      82.302  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41902.680 ±     857.494    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1875.698 ±    1147.501  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     38560.515 ±   22973.710    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.741 ±       4.761  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        15.347 ±      98.881    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        22.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    176959.909 ±    5505.835   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1983.412 ±      53.584  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17639.242 ±     465.206    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2008.626 ±       8.375  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     17863.976 ±     574.126    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.749 ±       5.128  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.636 ±      45.414    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1516168.819 ±   59459.033   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1300.233 ±      41.954  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1349.720 ±      35.614    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1345.262 ±       4.462  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1396.535 ±      56.356    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.600 ±       5.073  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.619 ±       5.235    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1738372.609 ±    4001.689   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.008 ±       0.066  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.007 ±       0.060    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    157024.572 ±    5597.581   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      2028.980 ±      91.428  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20335.623 ±     542.667    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2004.212 ±      10.918  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20088.841 ±     750.092    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.820 ±       5.751  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         8.203 ±      57.579    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                             128  thrpt    5     35547.710 ±     481.718   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       758.006 ±      21.176  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     33557.296 ±    1028.165    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.154 ±    1158.241  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     35718.980 ±   51859.132    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.184 ±       1.586    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     42691.635 ±    3530.582   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1574.601 ±     140.899  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     58045.637 ±    1996.946    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1471.456 ±    1146.576  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     54193.440 ±   40340.429    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.853 ±       7.259  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        31.043 ±     263.968    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    763467.437 ±   49459.629   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1537.563 ±     113.803  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3169.257 ±      88.763    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479.418 ±    1163.439  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3046.032 ±    2280.548    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.625 ±       5.335  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.269 ±      10.835    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     31819.853 ±    1741.474   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2268.344 ±     179.747  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    112176.536 ±    3191.041    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2288.605 ±    1420.551  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    113109.996 ±   67478.508    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.158 ±       1.273  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         7.831 ±      63.025    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                   128  thrpt    5     40952.779 ±    1549.724   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1719.589 ±      35.705  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     66083.965 ±    2636.145    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1606.927 ±    1411.573  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     61820.830 ±   55806.092    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.481 ±       1.691    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        17.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    380782.566 ±    9779.631   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1088.615 ±      20.818  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4499.133 ±     140.489    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1071.222 ±    1413.266  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4431.900 ±    5899.311    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.683 ±       5.879  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.855 ±      24.585    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1937661.446 ±  121877.638   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1166.123 ±      80.235  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       947.124 ±      46.036    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1076.714 ±    1418.289  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       876.099 ±    1170.556    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.575 ±       4.221  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.464 ±       3.417    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2253090.163 ±   15877.977   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    248711.130 ±    5506.767   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1658.208 ±      51.636  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10492.310 ±     255.684    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1600.746 ±    1405.568  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10128.256 ±    8879.338    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.053 ±       0.279    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        16.000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                  128  thrpt    5     53105.943 ±     375.046   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       571.688 ±      36.853  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     16942.057 ±    1201.029    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       536.971 ±    1155.871  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     15924.790 ±   34279.341    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.371 ±       2.129    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     73040.988 ±    1073.447   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1620.236 ±      41.426  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34906.508 ±     969.540    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1608.149 ±    1412.125  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     34646.223 ±   30426.229    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.816 ±       5.503  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        17.666 ±     119.310    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     85934.878 ±    2471.024   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1120.775 ±      89.886  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20523.983 ±    1128.888    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1068.034 ±    1406.796  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19521.569 ±   25286.706    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.895 ±       7.528  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        16.475 ±     138.592    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     98396.129 ±    2608.754   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1215.669 ±      38.893  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19443.534 ±     994.854    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1209.765 ±    1157.294  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     19364.614 ±   18721.337    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.683 ±       4.928  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        10.914 ±      78.784    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     45545.554 ±    1414.018   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2131.007 ±     101.252  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73629.664 ±    1733.083    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2002.149 ±      15.976  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     69182.633 ±    2364.565    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.941 ±       7.795  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        32.652 ±     270.300    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                                 128  thrpt    5     80581.080 ±     739.096   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1466.272 ±      50.978  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     28638.315 ±     977.646    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1476.714 ±    1161.867  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     28842.957 ±   22711.834    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.779 ±       6.261  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        15.209 ±     122.312    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    112650.712 ±   10561.129   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1082.582 ±     107.074  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15124.963 ±     488.534    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1071.697 ±    1413.968  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     15000.564 ±   20036.833    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.741 ±       6.292  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        10.376 ±      88.057    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    313077.920 ±    6336.298   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       480.151 ±      43.706  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2413.488 ±     179.681    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.344 ±    1111.838  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2520.320 ±    5582.620    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.042 ±       0.360    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    708682.628 ±   26808.605   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       903.864 ±      63.396  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2006.918 ±      94.089    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       940.241 ±    1417.287  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2086.085 ±    3123.218    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.019 ±       0.098    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    763293.650 ±   14516.708   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    248227.787 ±   14622.361   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       816.426 ±      61.445  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5176.090 ±     158.100    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       802.113 ±    1148.392  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      5082.684 ±    7212.745    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.027 ±       0.232    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        22.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                                128  thrpt    5     26762.343 ±     220.686   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       368.533 ±      33.888  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     21669.342 ±    2136.202    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       338.763 ±    1216.681  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     19947.587 ±   71671.232    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.490 ±       2.585    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3.000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    124333.556 ±    3729.907   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1748.371 ±      47.836  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22131.523 ±     795.728    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1605.071 ±    1410.541  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     20334.053 ±   18234.386    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.795 ±       6.713  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.161 ±      85.801    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    184851.687 ±    6993.517   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1121.129 ±      56.407  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9545.271 ±     354.511    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1070.091 ±    1409.882  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9118.671 ±   12099.889    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.704 ±       5.790  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.017 ±      49.518    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    522474.990 ±   14930.949   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       351.583 ±      37.515  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1059.034 ±     124.460    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       370.166 ±    1324.685  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1117.484 ±    3991.770    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.629 ±       5.371  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1.890 ±      16.138    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     60933.466 ±    1964.628   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2448.840 ±      83.454  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63249.963 ±    2057.910    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2423.393 ±    1419.781  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     62591.710 ±   36622.704    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.229 ±       1.618  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.899 ±      41.628    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                             128  thrpt    5    161830.679 ±    9442.474   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1790.306 ±     104.228  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17411.170 ±     338.280    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1745.438 ±    1414.456  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16980.502 ±   13852.172    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.720 ±       5.754  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         7.094 ±      56.760    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    182158.500 ±    6684.729   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1187.265 ±      84.974  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10254.690 ±     552.407    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1073.351 ±    1414.832  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      9278.158 ±   12306.163    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.649 ±       5.013  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5.555 ±      42.839    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    549448.907 ±    5927.164   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       556.582 ±      30.118  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1594.340 ±     101.870    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       533.970 ±    1149.410  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1531.341 ±    3296.341    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.012 ±       0.103    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1149298.974 ±   44264.760   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       874.959 ±      46.308  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1198.005 ±      38.248    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.295 ±    1157.422  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1103.763 ±    1579.047    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.017 ±       0.060    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1255481.730 ±   62508.330   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         1.911 ±      16.455  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         2.452 ±      21.113    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    354493.413 ±    8144.571   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       990.260 ±      34.792  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4396.262 ±     187.685    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       934.974 ±    1406.342  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4157.476 ±    6337.600    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.092 ±       0.502    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                            128  thrpt    5     45181.990 ±     444.579   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       348.751 ±      39.940  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     12148.175 ±    1479.655    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.814 ±    1216.974  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     11821.577 ±   42452.678    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.290 ±       2.501    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       603.647 ±      25.142   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1291.660 ±      52.274  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3366220.151 ±   96154.161    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1336.540 ±      11.026  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3483434.524 ±  152532.205    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.152 ±       9.655  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3059.872 ±   25649.951    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        35.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       578.156 ±      20.806   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1225.315 ±      41.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3334148.381 ±   93598.889    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1197.621 ±    1146.659  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3258537.740 ± 3117875.430    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.203 ±       9.867  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3299.423 ±   27071.853    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     42588.838 ±    1280.059   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       715.807 ±      26.130  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26447.162 ±     226.030    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       670.144 ±       1.000  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24761.443 ±     738.800    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.307 ±       1.620    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       579.070 ±      19.145   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1277.205 ±      58.185  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3469905.632 ±   93685.286    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1199.146 ±    1151.957  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3253936.218 ± 3078151.317    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.235 ±      10.458  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3344.639 ±   28311.025    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        36.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                          128  thrpt    5       603.671 ±      26.989   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1289.933 ±      30.832  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5   3361883.650 ±  155407.504    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1338.833 ±       9.726  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5   3489314.076 ±  131552.927    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.045 ±       8.905  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      2701.234 ±   23025.303    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                                128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14079.706 ±     542.953   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1131.939 ±      37.585  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    126528.920 ±    4235.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1202.137 ±    1150.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    134324.361 ±  127968.036    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.058 ±       9.062  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       118.989 ±    1019.557    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     17820.578 ±     236.854   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1087.537 ±      61.272  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     96027.260 ±    5488.546    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1066.802 ±    1405.727  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     94212.090 ±  124317.162    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.083 ±       9.053  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        95.099 ±     795.096    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    204799.533 ±    9847.213   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       764.088 ±      53.150  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5870.784 ±     193.762    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       804.557 ±    1154.336  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6171.615 ±    8657.817    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.064 ±       0.338    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    230491.597 ±   12269.245   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         1.828 ±      15.634  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        12.796 ±     109.459    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     17672.702 ±     302.039   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1146.296 ±      22.487  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    102077.037 ±    2680.306    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1201.499 ±    1149.521  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    107000.412 ±  102482.316    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.199 ±      10.189  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       106.588 ±     905.747    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        35.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                         128  thrpt    5      7027.096 ±     135.668   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5       987.683 ±      23.273  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    221194.061 ±    8321.802    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5       938.221 ±    1413.143  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    210389.366 ±  320349.250    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.747 ±      19.754    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        26.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1545981.960 ±  111401.202   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        65.256 ±      15.989  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        66.505 ±      21.566    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.361 ±     881.361  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       107.769 ±     927.924    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         3.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     76071.006 ±    2729.500   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3252.754 ±     139.484  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67283.627 ±    1214.802    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3110.884 ±    1424.754  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     64328.960 ±   28574.093    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.174 ±       0.916    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        23.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        33.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1835174.987 ±   69774.581   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       992.735 ±      37.570  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       851.320 ±      42.179    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1069.723 ±    1410.238  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       918.907 ±    1228.865    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.021 ±       0.113  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.018 ±       0.097    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2250007.606 ±   66030.831   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       651.139 ±      16.139  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       455.402 ±       8.074    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.579 ±       1.575  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       469.712 ±      13.948    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.009 ±       0.050    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2381267.091 ±  160058.864   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        27.983 ±      30.867  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        18.575 ±      22.168    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     51042.329 ±    2119.615   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2207.768 ±      95.856  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     68068.434 ±    1755.104    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2137.105 ±    1161.099  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     65868.462 ±   34804.097    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.874 ±       7.216  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5        27.182 ±     224.432    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        26.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    873517.408 ±   47150.225   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2834.885 ±     189.691  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5106.430 ±      72.937    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2817.362 ±    1143.013  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      5073.201 ±    1936.773    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.021 ±       0.113  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.038 ±       0.208    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        30.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   5058341.716 ±  265941.772   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       315.014 ±      41.315  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        98.002 ±      10.492    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       235.434 ±    1258.920  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        72.950 ±     390.085    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.007 ±       0.056  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.002 ±       0.017    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5    962877.231 ±   57237.723   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1126.265 ±      69.082  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1840.332 ±      56.715    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1069.201 ±    1410.717  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1751.040 ±    2352.688    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.854 ±       7.195  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.424 ±      12.010    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         8.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   8656507.238 ±  580556.472   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       408.970 ±      42.482  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        74.348 ±       6.316    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       473.437 ±    1064.715  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        86.396 ±     193.072    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.001 ±       0.013    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    489979.922 ±   14745.393   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2190.268 ±      91.511  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      7034.515 ±     185.936    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2148.601 ±    1151.065  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      6899.350 ±    3631.858    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.291 ±       2.465  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.932 ±       7.885    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        16.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        27.000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                  N/A  thrpt    5   1337910.354 ±   45193.559   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                   N/A  thrpt    5      1897.896 ±      85.831  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                              N/A  thrpt    5      2232.342 ±      68.367    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1880.853 ±    1158.593  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      2213.102 ±    1380.881    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.695 ±       5.245  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.809 ±       6.099    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                        N/A  thrpt    5        14.000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                         N/A  thrpt    5        28.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4626.781 ±      59.894   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2329.190 ±     109.546  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    792207.880 ±   35492.136    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2269.956 ±    1411.216  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    771937.823 ±  475934.731    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         1.037 ±       7.274  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       351.940 ±    2467.032    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        30.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      7088.198 ±      81.580   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2419.233 ±      67.710  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    537124.095 ±   14049.601    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2284.167 ±    1419.038  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    507240.653 ±  318291.873    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.208 ±       1.424  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        46.306 ±     316.549    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     46470.407 ±     721.877   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       770.604 ±      18.090  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26097.885 ±     964.896    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       805.969 ±    1157.602  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     27327.972 ±   39838.524    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.425 ±       2.443    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        19.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4594.377 ±      38.717   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1006.400 ±      39.104  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    344749.436 ±   16119.978    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       936.314 ±    1411.913  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    320947.991 ±  486636.812    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.017 ±       0.088  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         5.718 ±      30.150    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        25.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      5007.930 ±      86.406   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       658.792 ±      21.974  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    207014.199 ±    5119.863    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       663.027 ±       5.838  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    208349.895 ±    4415.352    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         3.931 ±      13.819    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6536.188 ±      96.822   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       329.923 ±      36.221  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     79436.102 ±    9675.226    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338.771 ±    1216.733  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     81768.020 ±  293692.221    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         2.010 ±      17.309    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6715.133 ±     142.542   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       289.036 ±      46.524  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     67749.614 ±   12247.712    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.657 ±    1079.099  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     48218.740 ±  254245.302    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         1.956 ±      16.844    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      7970.739 ±     359.044   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1695.018 ±      61.117  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    334692.369 ±    6694.497    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1739.582 ±    1409.531  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    343509.054 ±  278628.786    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.841 ±       5.009  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       164.827 ±     981.824    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     19336.302 ±     356.522   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       492.359 ±      46.117  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     40071.123 ±    4381.624    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       398.991 ±    1402.511  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     32563.557 ±  114467.039    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.007 ±       0.038  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.578 ±       3.128    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     15841.188 ±     677.258   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       433.718 ±      54.506  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     43087.379 ±    5605.738    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       366.707 ±    1310.151  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     36573.966 ±  130387.818    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     22909.639 ±    1439.722   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       433.023 ±      43.784  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     29745.202 ±    2399.338    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       370.647 ±    1326.707  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     25424.776 ±   90987.791    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.851 ±       7.328    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4177.883 ±     228.550   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2672.102 ±     134.717  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5   1006543.742 ±   17566.046    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2552.672 ±    1136.791  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    960991.877 ±  406448.122    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.395 ±       2.613  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       147.843 ±     976.779    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        19.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        30.000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                  N/A  thrpt    5      9817.583 ±     560.896   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                   N/A  thrpt    5      1235.178 ±      49.329  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                              N/A  thrpt    5    198009.150 ±    6092.697    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1208.143 ±    1156.052  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    193859.770 ±  187846.273    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.748 ±       5.144  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       119.306 ±     821.299    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                        N/A  thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                         N/A  thrpt    5        24.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     10199.013 ±     193.632   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2187.121 ±      32.205  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    337509.728 ±    6982.546    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2140.827 ±    1157.894  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    330396.879 ±  179980.223    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.776 ±       6.239  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       119.909 ±     964.144    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     58963.256 ±    1755.566   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       565.113 ±      38.659  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15083.948 ±     887.013    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       531.587 ±    1144.281  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     14182.344 ±   30533.497    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.008 ±       0.062  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.223 ±       1.677    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     46328.220 ±     496.513   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       683.703 ±      19.561  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23222.781 ±     573.785    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       663.851 ±       5.995  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     22548.695 ±     305.006    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.424 ±       2.434    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     86001.031 ±    4683.356   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       663.512 ±      56.446  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12140.738 ±     710.312    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       537.094 ±    1156.136  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      9808.973 ±   21123.560    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.075 ±       0.649    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    105258.753 ±     768.530   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5         0.008 ±       0.069  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         0.124 ±       1.034    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7608.284 ±     119.949   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2420.117 ±     109.031  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    500572.640 ±   16716.752    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2285.833 ±    1418.970  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    472756.653 ±  291840.967    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.171 ±       1.090  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        35.494 ±     226.848    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                                 N/A  thrpt    5      4586.533 ±      32.759   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                  N/A  thrpt    5       485.992 ±      36.420  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                             N/A  thrpt    5    166739.853 ±   13112.761    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       504.177 ±    1116.895  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    173066.839 ±  383186.832    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.016 ±       0.114  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         5.496 ±      39.235    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                       N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                        N/A  thrpt    5        12.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   8504133.022 ±  121712.340   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4673.529 ±      94.705  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       864.817 ±      10.204    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4468.714 ±    1413.553  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       826.882 ±     259.221    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.037 ±       0.105  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.007 ±       0.019    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        33.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        45.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38126132.422 ±  303024.702   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5         0.065 ±       0.559  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5         0.003 ±       0.023    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  10206819.907 ±  204191.259   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3508.486 ±      69.913  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       540.951 ±       2.948    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3499.579 ±    1102.900  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       539.608 ±     171.606    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.050 ±       0.270  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.008 ±       0.041    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        26.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        36.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  48865047.788 ±  513252.726   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         1.979 ±      17.038  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5         0.064 ±       0.551    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31147260.164 ± 2598041.352   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       814.597 ±      41.848  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41.160 ±       1.729    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.900 ±    1157.475  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        41.012 ±      63.013    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.001 ±       0.004    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   9217034.967 ±  230357.843   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3892.079 ±      91.432  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       664.602 ±      10.256    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3641.795 ±    1426.689  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       622.017 ±     250.806    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.002 ±       0.007    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        37.000                    ms
[info] IntBenchmark.readUPickle                                                                            N/A  thrpt    5  11624463.340 ±  306042.598   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                             N/A  thrpt    5      4983.788 ±     104.931  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                        N/A  thrpt    5       674.624 ±       8.988    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      4884.967 ±    1118.266  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       661.386 ±     162.625    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0.112 ±       0.407  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0.015 ±       0.056    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                  N/A  thrpt    5        36.000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                   N/A  thrpt    5        50.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  13643530.188 ±  984488.549   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1649.752 ±      77.731  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       190.333 ±       7.669    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1610.214 ±    1412.792  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       186.231 ±     173.336    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.666 ±       4.896  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.076 ±       0.561    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        25.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  42406226.495 ± 1011862.410   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       884.698 ±      41.484  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.832 ±       1.303    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       800.267 ±    1147.153  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        29.701 ±      42.609    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        18.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  13199311.000 ±  197959.227   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2717.545 ±      32.935  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       323.957 ±       3.121    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2682.467 ±      29.145  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       319.779 ±       6.658    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.046 ±       0.132  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.005 ±       0.016    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        20.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  47853978.925 ± 4247095.462   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1003.854 ±      80.939  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        33.017 ±       1.721    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1075.383 ±    1417.776  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        35.449 ±      47.580    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        21.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  62556090.207 ±  107180.632   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.101 ±       0.865  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.003 ±       0.022    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17829859.664 ±  728666.778   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1689.140 ±      94.679  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       149.090 ±       5.441    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1614.183 ±    1424.355  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       142.391 ±     123.621    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.017 ±       0.088  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.001 ±       0.008    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        15.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2769978.947 ±   38619.846   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2230.738 ±      37.737  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1267.136 ±      25.067    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2144.631 ±    1157.105  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1218.639 ±     674.155    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.730 ±       6.152  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.417 ±       3.514    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeUPickle                                                                           N/A  thrpt    5  11561494.977 ±  374830.090   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                            N/A  thrpt    5      2255.980 ±      69.330  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                       N/A  thrpt    5       307.080 ±       7.738    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2151.646 ±    1150.479  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       292.934 ±     158.689    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.633 ±       5.183  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.085 ±       0.698    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                                 N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                  N/A  thrpt    5        25.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    171463.589 ±    1167.410   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3263.304 ±      51.740  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     29953.677 ±     535.249    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3099.662 ±    1411.999  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28454.552 ±   13076.189    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.021 ±       0.080  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.191 ±       0.735    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        32.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     33833.104 ±    1008.386   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2552.566 ±      89.785  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    118731.152 ±    3785.634    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2560.580 ±    1159.559  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    119169.800 ±   56155.088    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.121 ±       0.952  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5.593 ±      44.075    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    145228.328 ±    2908.112   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1254.797 ±      32.301  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13598.458 ±     223.731    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.192 ±    1148.894  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     13041.853 ±   12484.675    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.837 ±       6.009  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         9.049 ±      65.018    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        27.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    442746.588 ±   20688.243   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1777.691 ±      54.798  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6319.100 ±     216.088    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1747.002 ±    1416.460  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6216.099 ±    5165.127    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.633 ±       5.052  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.229 ±      17.787    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    481862.851 ±    6167.563   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1385.412 ±      29.150  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4525.154 ±     119.111    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1344.731 ±       3.652  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4392.264 ±      50.028    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.604 ±       4.344  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.971 ±      14.185    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        22.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     63704.354 ±    2945.430   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1517.975 ±      52.333  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     37497.761 ±     912.317    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1474.244 ±    1146.623  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     36463.886 ±   29667.390    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.167 ±       1.086  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4.124 ±      26.960    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    319057.171 ±    2823.430   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2383.984 ±      47.464  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11759.607 ±     315.229    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2280.935 ±    1418.844  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11253.171 ±    7060.551    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.737 ±       5.905  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.637 ±      29.150    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        17.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    481769.713 ±   19634.494   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1273.560 ±      82.224  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4159.765 ±     121.421    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.042 ±    1148.616  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3922.100 ±    3650.630    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.887 ±       6.932  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.946 ±      23.062    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1319522.872 ±   43977.672   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2674.425 ±      83.345  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3189.567 ±      53.512    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2557.922 ±    1141.942  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3052.074 ±    1410.753    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.083 ±       0.494  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.100 ±       0.592    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        24.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    104549.767 ±    4485.683   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3504.091 ±     152.362  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52743.343 ±     759.691    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3360.012 ±      70.084  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     50578.639 ±    2060.680    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.439 ±       3.141    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        25.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        33.000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                                 128  thrpt    5    602988.266 ±    3488.296   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2725.620 ±      47.786  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7112.825 ±     122.415    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2555.795 ±    1152.687  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      6670.076 ±    3022.674    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.046 ±       0.351  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.120 ±       0.918    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    340317.806 ±   15792.026   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1172.880 ±      76.709  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5423.913 ±     189.551    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1208.167 ±    1155.893  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5582.492 ±    5283.059    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.695 ±       5.763  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.167 ±      26.231    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    830675.727 ±   24785.663   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       616.991 ±      32.750  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1168.881 ±      63.867    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       533.524 ±    1148.451  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1010.972 ±    2176.519    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.008 ±       0.068    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2089843.741 ±  141024.163   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       995.855 ±      63.104  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       749.964 ±      29.826    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941.215 ±    1418.405  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       707.834 ±    1053.678    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.009 ±       0.054    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2334231.882 ±   97699.120   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         3.560 ±      30.468  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         2.443 ±      20.916    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    473925.049 ±   32238.691   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       702.861 ±      51.891  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2333.661 ±      48.610    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       668.963 ±       1.267  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2221.706 ±     155.426    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.028 ±       0.147    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                                128  thrpt    5    160598.940 ±    1612.650   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       957.822 ±      45.392  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9385.169 ±     450.234    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       941.091 ±    1416.107  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9223.665 ±   13909.950    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.164 ±       0.659    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        21.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     59138.785 ±    1536.892   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2067.235 ±      37.940  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55013.357 ±    1161.233    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2009.849 ±      13.661  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     53487.284 ±    1612.930    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.770 ±       5.641  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        20.588 ±     150.991    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     94734.426 ±    4500.156   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1745.892 ±      59.492  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     29000.626 ±     699.560    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1602.305 ±    1409.304  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     26628.110 ±   23681.959    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.912 ±       7.450  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.047 ±     122.890    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    165699.488 ±    3777.266   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2630.539 ±      59.809  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     24980.891 ±     427.944    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2553.028 ±    1150.629  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24253.427 ±   11216.840    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.083 ±       0.673  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.789 ±       6.374    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     34456.479 ±    1398.836   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2293.271 ±      67.822  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    104741.534 ±    2642.845    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2155.729 ±    1160.783  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     98465.746 ±   53172.972    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.137 ±       0.789  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         6.219 ±      35.548    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        24.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    160707.007 ±    2611.744   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1077.192 ±      21.470  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10547.844 ±     293.395    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1069.128 ±    1410.506  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10478.816 ±   13934.407    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.787 ±       6.686  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.706 ±      65.469    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    455954.365 ±    7590.153   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       520.350 ±      42.449  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1795.848 ±     132.286    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.741 ±    1118.345  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1740.005 ±    3852.691    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.029 ±       0.151    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        12.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    497074.326 ±   30721.930   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         5.054 ±       0.312  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     64665.732 ±    4349.962   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1353.381 ±      84.489  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     32934.535 ±     431.449    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                         128  thrpt    5         0.002 ±       0.019  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                    128  thrpt    5         0.054 ±       0.465    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace                                      128  thrpt    5         0.006 ±       0.056  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                 128  thrpt    5         0.162 ±       1.399    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1338.383 ±      28.736  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     32579.480 ±    2932.972    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.954 ±       8.078  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        23.919 ±     202.701    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        60.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2914133.567 ±   15694.960   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3754.264 ±      40.931  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2027.292 ±      25.649    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3523.728 ±    1176.229  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1902.891 ±     640.711    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.042 ±       0.098  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.022 ±       0.053    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        26.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        34.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    808456.324 ±   50871.852   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       480.358 ±      44.716  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       935.177 ±      89.253    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       399.260 ±    1403.457  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       778.369 ±    2736.563    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.012 ±       0.074  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.025 ±       0.145    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    339794.107 ±   11105.122   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       796.340 ±      17.494  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3687.551 ±      39.461    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       800.870 ±    1151.935  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3712.006 ±    5399.683    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.006 ±       0.054  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.029 ±       0.248    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    748365.288 ±   27863.629   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       685.923 ±      23.849  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1442.387 ±      26.073    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       672.083 ±       2.311  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1413.370 ±      53.347    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.009 ±       0.076    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3361747.306 ±  127809.390   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      2033.754 ±     105.433  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       952.009 ±      21.760    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      1884.322 ±    1156.407  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       881.885 ±     536.408    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.545 ±       3.417  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.258 ±       1.621    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        14.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   8260494.548 ±  263298.294   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       908.380 ±      32.379  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       173.083 ±      10.123    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       941.530 ±    1419.086  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       179.672 ±     274.367    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.001 ±       0.007    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    219294.228 ±    7783.103   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1948.840 ±      49.676  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13987.146 ±     255.687    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1879.142 ±    1164.280  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     13486.693 ±    8355.016    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.346 ±       1.669  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2.460 ±      11.828    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        14.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                                N/A  thrpt    5    321946.906 ±   15550.405   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5       635.540 ±      33.687  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      3106.512 ±     101.432    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       670.840 ±       1.254  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      3279.427 ±     161.851    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.041 ±       0.214    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5        15.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1581473.461 ±   27274.647   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        91.627 ±      26.897  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        91.196 ±      27.517    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.314 ±     880.958  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       102.190 ±     879.883    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.141 ±       1.212  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.141 ±       1.211    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         2.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     73538.209 ±    3856.040   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3245.743 ±     111.432  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69467.753 ±    2135.065    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3109.262 ±    1439.816  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     66625.377 ±   33682.732    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.090 ±       0.775    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        23.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        33.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1573708.651 ±   40766.154   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       847.561 ±      35.588  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       847.493 ±      32.220    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       802.166 ±    1152.891  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       801.969 ±    1149.973    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.004 ±       0.036    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        19.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1699592.513 ±  101574.132   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       491.473 ±      42.458  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       455.133 ±      42.220    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.801 ±    1118.550  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       468.680 ±    1034.631    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.008 ±       0.066    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1800058.049 ±   40534.904   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.682 ±       3.215  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.332 ±       2.853    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     51698.095 ±    1101.004   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2236.585 ±      51.971  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     68082.702 ±    1810.195    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2137.387 ±    1145.009  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     65056.896 ±   34603.900    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.862 ±       7.377  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        26.107 ±     223.433    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    269695.272 ±   31110.308   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1083.911 ±      87.194  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6325.555 ±     276.820    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1075.869 ±    1417.263  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6307.686 ±    8632.689    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.550 ±       4.687  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.163 ±      26.961    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     39958.954 ±     423.617   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2052.109 ±      61.907  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     80821.417 ±    2184.671    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2015.325 ±      23.112  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     79372.846 ±     327.047    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.217 ±       1.688  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         8.547 ±      66.658    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        15.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        25.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    112519.487 ±    6959.502   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1128.868 ±      74.005  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15788.090 ±     536.151    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1203.932 ±    1151.937  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     16852.317 ±   16298.480    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.799 ±       6.749  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        11.077 ±      93.487    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        28.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    306015.907 ±    8025.776   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       422.636 ±      40.007  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2173.476 ±     198.779    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       370.705 ±    1326.947  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1909.353 ±    6843.044    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.064 ±       0.367    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         9.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    366364.288 ±    1388.361   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.725 ±       0.014  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     53016.348 ±    1515.366   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1416.781 ±      82.675  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     42050.464 ±    1576.255    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1469.672 ±    1164.695  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     43599.893 ±   33883.257    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.125 ±       0.856  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         3.701 ±      25.317    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        11.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        18.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     73916.046 ±     883.441   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1595.572 ±      81.343  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     33965.160 ±    1312.692    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1609.390 ±    1413.672  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     34251.517 ±   29893.258    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.766 ±       6.240  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.287 ±     132.615    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        28.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    134824.025 ±     925.538   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       677.350 ±      12.947  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      7905.877 ±     159.068    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       666.314 ±       2.924  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      7777.066 ±      76.169    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.097 ±       0.513    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        18.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    261024.749 ±    3545.010   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1108.310 ±      48.478  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6682.575 ±     361.758    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1075.787 ±    1418.310  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6491.623 ±    8616.681    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.579 ±       4.894  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.489 ±      29.502    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     31576.296 ±     979.701   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1699.402 ±      76.212  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     84691.849 ±    1855.482    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1743.092 ±    1412.737  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     86802.826 ±   68934.644    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.204 ±       1.667  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        10.065 ±      82.222    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        13.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        22.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    177657.038 ±    9920.673   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1009.294 ±      50.907  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8940.717 ±     371.403    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       935.557 ±    1410.866  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      8297.465 ±   12639.167    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.021 ±       0.080  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.185 ±       0.712    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    481057.706 ±   20712.092   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1454.529 ±      70.613  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4758.574 ±      77.849    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1478.661 ±    1156.710  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4835.925 ±    3725.217    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.604 ±       4.796  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.958 ±      15.542    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    521132.219 ±   28041.012   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       982.027 ±      56.985  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2965.688 ±      45.039    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5       941.012 ±    1419.248  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2841.296 ±    4277.140    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.025 ±       0.213    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        18.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     67413.579 ±    2752.200   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1503.749 ±      95.571  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35099.336 ±     983.188    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1465.450 ±    1147.134  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     34186.220 ±   26091.730    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.100 ±       0.771  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         2.352 ±      18.177    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        19.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     97326.817 ±    4626.958   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1597.982 ±      92.138  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25840.389 ±     801.389    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1475.629 ±    1159.842  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     23847.108 ±   18248.374    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.774 ±       6.311  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        12.429 ±     101.211    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    178937.855 ±    7940.114   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       759.020 ±      33.345  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6675.407 ±      89.830    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.604 ±       2.908  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5863.171 ±     241.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.110 ±       0.386    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    278868.807 ±    3251.458   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1016.061 ±      26.939  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5734.466 ±     199.042    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941.012 ±    1417.589  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5315.345 ±    8063.750    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.047 ±       0.406    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        20.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     69992.079 ±    1372.816   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2734.014 ±      85.543  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     61461.730 ±    1014.235    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2543.101 ±    1130.987  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     57146.990 ±   24563.504    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.025 ±       0.143  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.561 ±       3.221    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                               128  thrpt    5    158485.755 ±    6348.160   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1334.497 ±      83.991  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     13250.242 ±     543.629    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1210.028 ±    1157.925  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12023.134 ±   11606.708    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.725 ±       6.194  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         7.184 ±      61.414    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         9.000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        23.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    203896.888 ±   13816.066   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1418.861 ±      53.891  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10952.042 ±     339.886    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.483 ±       4.942  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10356.294 ±     736.503    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.654 ±       4.934  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.182 ±      39.311    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    504269.835 ±   20013.485   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       410.662 ±      47.333  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1281.436 ±     101.730    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       471.122 ±    1056.815  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1465.284 ±    3271.276    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    641518.073 ±   12617.906   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       353.945 ±      32.765  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       868.317 ±      78.577    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.824 ±    1217.023  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       831.371 ±    2985.029    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.031 ±       0.176    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    690680.574 ±   10019.639   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7.523 ±       4.052  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        17.145 ±       9.449    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35333.233 ±    1426.776   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1933.064 ±      77.660  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     86103.254 ±    1892.972    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1875.265 ±    1157.382  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     83613.814 ±   53482.570    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.791 ±       4.804  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        35.533 ±     215.752    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                              128  thrpt    5    125177.287 ±    6710.883   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1335.263 ±      88.697  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     16785.458 ±     497.234    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1344.094 ±       7.213  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     16899.496 ±     947.932    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.662 ±       4.692  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         8.283 ±      58.714    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] NestedStructsBenchmark.readCirce                                                                    128  thrpt    5     81620.038 ±    1683.142   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      3073.822 ±      68.798  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     59263.406 ±     936.113    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2955.679 ±    1407.107  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     56972.066 ±   26563.627    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.029 ±       0.209  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0.558 ±       3.998    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        22.000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        30.000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                             128  thrpt    5    133365.857 ±    8612.511   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1758.977 ±     130.718  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     20756.391 ±     667.701    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1735.984 ±    1419.371  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     20465.431 ±   16265.441    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.129 ±       0.711  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.532 ±       8.390    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        13.000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                            128  thrpt    5    652772.460 ±   17452.431   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1756.180 ±      38.390  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      4234.167 ±     134.927    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1613.191 ±    1419.112  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3893.781 ±    3521.128    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.587 ±       4.876  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.429 ±      11.872    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5        12.000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                                 128  thrpt    5     19509.598 ±    1072.834   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2620.988 ±     182.940  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    211422.211 ±    8659.466    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2673.171 ±      48.184  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    215664.094 ±   11207.716    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.329 ±       1.348  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        26.259 ±     107.006    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        20.000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        36.000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                   128  thrpt    5     75824.005 ±    3070.234   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      3449.457 ±     150.017  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     71592.231 ±     958.752    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3231.269 ±    1124.297  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     67052.786 ±   22699.263    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.021 ±       0.113  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.429 ±       2.338    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        24.000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        33.000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                            128  thrpt    5    284649.860 ±   16782.895   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1359.422 ±     115.015  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7515.147 ±     235.799    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.406 ±    1153.355  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      6636.583 ±    6151.371    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.770 ±       6.363  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.227 ±      34.917    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1238996.312 ±   50379.778   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       643.646 ±      28.295  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       817.553 ±      15.034    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.203 ±       2.428  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       852.634 ±      36.409    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.016 ±       0.092    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1333802.524 ±   50538.167   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         0.118 ±       0.836  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         0.138 ±       0.983    B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                                128  thrpt    5     48034.526 ±    1845.298   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2620.160 ±      65.442  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     85854.108 ±    2190.152    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2539.037 ±    1146.973  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     83226.533 ±   38664.600    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.138 ±       1.184    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        19.000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    843697.602 ±   38734.450   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2278.577 ±     114.498  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4249.700 ±      50.665    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2141.698 ±    1142.801  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3997.834 ±    2256.836    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.808 ±       6.777  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.527 ±      12.812    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1872416.175 ±   60360.529   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1191.439 ±      69.681  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5      1001.317 ±      28.393    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1202.966 ±    1152.045  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      1009.538 ±     948.189    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.868 ±       7.429  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.727 ±       6.223    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        32.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8300918.015 ±   86513.222   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       261.807 ±      29.687  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.637 ±       5.905    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307.003 ±    1079.157  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        58.260 ±     204.791    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.002 ±       0.014    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    278754.079 ±    1626.114   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1821.011 ±      59.230  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10281.280 ±     383.300    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1745.401 ±    1420.546  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      9855.673 ±    8049.177    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.333 ±       2.736  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.883 ±      15.467    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1114021.668 ±   20949.613   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1821.925 ±      92.284  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2573.812 ±     100.905    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1739.887 ±    1411.043  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2458.314 ±    2000.401    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.808 ±       6.645  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.144 ±       9.417    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2781124.813 ±   27169.808   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1223.226 ±      26.839  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       692.123 ±      16.398    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1197.873 ±    1146.731  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       677.865 ±     649.998    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.002 ±       0.020    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6170385.402 ±  459984.218   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       714.498 ±      34.320  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       182.233 ±       8.342    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       804.895 ±    1151.270  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       206.159 ±     310.095    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.003 ±       0.019    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6863552.947 ±   50941.500   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       432.320 ±      29.081  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        99.133 ±       7.279    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       472.830 ±    1062.763  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       108.490 ±     243.759    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.001 ±       0.008    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    426264.509 ±   11013.377   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2397.549 ±      86.414  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8851.835 ±     158.218    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2267.943 ±    1397.747  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      8375.633 ±    5227.010    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.941 ±       7.659  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         3.495 ±      28.464    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        29.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     80373.673 ±    1535.449   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2247.718 ±      67.281  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44003.856 ±     878.107    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2144.939 ±    1142.101  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     42007.543 ±   22978.002    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.758 ±       6.170  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5        14.893 ±     121.325    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        24.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    121364.329 ±    4265.852   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1922.606 ±      96.329  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24931.811 ±     830.595    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1868.590 ±    1142.960  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     24224.029 ±   14631.577    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.924 ±       7.603  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.927 ±      98.043    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    178502.599 ±   10399.526   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2715.701 ±     172.805  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23939.208 ±     359.271    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2554.648 ±    1161.657  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     22504.854 ±    9650.438    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.058 ±       0.286  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.514 ±       2.515    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     61252.036 ±    1000.295   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3110.105 ±      92.525  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79899.735 ±    2259.215    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2948.542 ±    1409.826  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     75756.158 ±   36488.471    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.021 ±       0.113  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.536 ±       2.915    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                      128  thrpt    5    113683.714 ±    7415.905   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                       128  thrpt    5      2281.592 ±     116.341  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                  128  thrpt    5     31585.569 ±     462.653    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                              128  thrpt    5      2148.774 ±    1148.781  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     29781.018 ±   17163.867    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.724 ±       5.656  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.949 ±      77.544    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                            128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                             128  thrpt    5        24.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    190252.524 ±    3814.559   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1349.609 ±      48.547  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11164.628 ±     235.691    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1340.926 ±       5.663  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     11093.142 ±     195.117    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.724 ±       6.104  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         5.981 ±      50.396    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        10.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    454312.887 ±    5981.093   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       403.830 ±      21.265  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1398.928 ±      85.502    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       471.008 ±    1056.510  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1633.137 ±    3658.912    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.014 ±       0.124    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        14.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    657327.144 ±   26786.710   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       365.541 ±      35.769  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       875.265 ±      99.925    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       338.778 ±    1216.807  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       814.556 ±    2918.810    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.072  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.020 ±       0.175    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    717452.415 ±    1201.947   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.302 ±       0.081  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.019 ±       0.158    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     35827.709 ±     792.444   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1945.135 ±      76.011  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85451.646 ±    5007.752    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1874.237 ±    1157.365  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     82366.086 ±   51631.177    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.824 ±       5.085  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        36.379 ±     224.260    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                     128  thrpt    5    124961.562 ±    1228.531   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                      128  thrpt    5      1341.347 ±      40.285  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                                 128  thrpt    5     16894.085 ±     578.342    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1210.127 ±    1156.644  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     15246.190 ±   14631.536    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.691 ±       4.702  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         8.723 ±      59.412    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                           128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                            128  thrpt    5        22.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3508835.925 ±   76032.803   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      3021.691 ±      70.798  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1355.193 ±      21.071    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2960.281 ±    1409.850  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1327.710 ±     634.019    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.021 ±       0.098  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.009 ±       0.044    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        22.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   5918627.786 ±  308953.543   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1147.290 ±      74.068  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       305.068 ±      10.581    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1068.314 ±    1409.548  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       284.508 ±     380.008    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.884 ±       7.535  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.232 ±       1.979    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4106177.364 ±   86533.190   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2267.738 ±      35.590  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       869.067 ±       9.377    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2140.023 ±    1142.047  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       820.207 ±     440.898    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.783 ±       6.697  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.299 ±       2.555    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6730087.553 ±  397300.770   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1308.787 ±      52.646  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       306.044 ±      15.569    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1211.037 ±    1158.296  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       283.908 ±     280.135    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.571 ±       4.778  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.133 ±       1.113    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        20.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4182365.845 ±   62319.024   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2508.170 ±      73.645  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       943.784 ±      17.634    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2411.463 ±    1405.168  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       907.593 ±     534.338    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.158 ±       1.232  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.060 ±       0.467    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                             128  thrpt    5   3989683.875 ±   28454.622   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      2274.953 ±      64.957  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5       897.268 ±      24.352    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2284.603 ±    1428.366  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       901.144 ±     565.488    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.670 ±       5.414  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.265 ±       2.141    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2192485.104 ±   45217.712   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1310.956 ±      45.498  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       941.062 ±      25.262    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1208.639 ±    1157.796  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       867.664 ±     831.737    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.674 ±       5.319  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.483 ±       3.809    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   6022455.277 ±  122828.566   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       603.147 ±      13.885  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       157.602 ±       2.561    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       666.263 ±       1.975  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       174.098 ±       3.956    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.019 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.005 ±       0.034    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4605884.356 ±  168014.485   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1250.709 ±      45.255  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       427.368 ±      15.420    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1200.595 ±    1149.762  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       410.609 ±     397.645    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.001 ±       0.012    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        14.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   6028666.506 ±  142886.386   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       601.132 ±      36.399  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       156.928 ±      10.753    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       536.983 ±    1155.897  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       140.390 ±     302.219    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.001 ±       0.009    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6453021.493 ±  116299.146   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.249 ±       1.661  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.061 ±       0.408    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4539454.581 ±  302341.914   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1284.682 ±      97.793  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       445.356 ±      11.615    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.752 ±       3.779  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       465.263 ±      31.558    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.716 ±       6.032  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.248 ±       2.087    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                            128  thrpt    5    402485.950 ±    3672.719   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       397.961 ±      41.410  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      1556.085 ±     170.946    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370.807 ±    1327.275  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1451.986 ±    5196.489    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.033 ±       0.281    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1580344.050 ±   68864.360   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2130.097 ±     126.793  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2121.082 ±      51.414    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2014.637 ±       7.792  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2006.385 ±      92.717    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.620 ±       5.207  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.628 ±       5.270    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2851252.975 ±   62016.298   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       551.157 ±      32.555  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       304.186 ±      18.512    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       533.141 ±    1147.626  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       294.498 ±     633.972    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.025  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.002 ±       0.014    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1726480.500 ±   86908.811   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       952.468 ±      57.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       868.266 ±      28.673    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       936.085 ±    1410.906  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       852.925 ±    1279.582    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.015 ±       0.061  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.013 ±       0.055    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2403037.346 ±   35861.394   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       463.912 ±      39.194  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       303.796 ±      28.623    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       371.112 ±    1328.576  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       243.623 ±     872.282    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±       0.024    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1631933.657 ±   22669.135   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5       967.461 ±      22.118  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       933.025 ±      31.963    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       937.488 ±    1412.838  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       904.950 ±    1374.385    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.008 ±       0.069    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                          128  thrpt    5   1418733.082 ±   76407.189   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1577.196 ±      71.175  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      1749.729 ±      48.944    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1479.365 ±    1161.804  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1640.137 ±    1253.896    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.600 ±       4.983  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.660 ±       5.482    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                                128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1864230.224 ±  100823.353   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1428.487 ±      50.634  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1206.055 ±      24.448    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1342.415 ±       3.912  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1133.497 ±      59.940    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.641 ±       4.618  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.538 ±       3.864    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   3054220.279 ±   16982.108   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       815.375 ±      31.207  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       420.172 ±      15.666    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       799.763 ±    1150.529  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       412.146 ±     593.223    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.014 ±       0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.007 ±       0.041    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        18.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2972857.507 ±   56367.994   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1305.152 ±      22.621  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       690.956 ±      22.805    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.920 ±    1154.853  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       638.847 ±     617.038    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.733 ±       5.670  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.389 ±       3.013    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3346747.515 ±  117133.669   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       886.940 ±      38.519  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       417.046 ±      12.501    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       806.045 ±    1156.915  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       379.212 ±     547.618    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.002 ±       0.017    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3624868.105 ±  161933.449   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         2.833 ±      24.387  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.256 ±      10.810    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2856919.672 ±   54677.454   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1415.463 ±      42.189  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       779.716 ±      12.024    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1342.369 ±       4.796  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       739.474 ±      15.750    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.689 ±       5.068  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.380 ±       2.799    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     11812.550 ±     147.542   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1394.138 ±      18.297  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    185722.182 ±    1942.954    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1336.389 ±       5.837  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    178029.864 ±    1983.500    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.852 ±       6.667  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       112.964 ±     883.794    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        32.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     22928.104 ±    1098.937   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       353.659 ±      38.229  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     24280.959 ±    3411.064    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       336.397 ±    1204.914  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     23186.064 ±   82850.303    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.568 ±       4.891    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22113.374 ±    1769.785   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       252.541 ±      37.208  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17988.017 ±    3992.394    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307.002 ±    1079.154  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     22020.818 ±   77450.390    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.294 ±       2.534    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      6153.426 ±      63.254   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1924.712 ±      55.868  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    492269.921 ±   11620.260    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1872.970 ±    1158.970  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    479092.970 ±  297681.302    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.512 ±       2.848  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       131.234 ±     731.094    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        26.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     62368.317 ±    1014.501   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       805.738 ±      16.807  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20327.126 ±     605.403    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       794.983 ±    1140.134  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     20061.850 ±   28884.080    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.210 ±       1.105    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     68265.702 ±     592.170   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       469.722 ±      29.369  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10828.800 ±     729.961    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       502.042 ±    1110.999  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     11577.997 ±   25608.920    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.191 ±       1.649    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     76815.557 ±      89.462   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        20.696 ±       0.032  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       424.006 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    315612.451 ±    5728.523   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1890.026 ±      57.691  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9424.181 ±     283.750    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1877.787 ±    1160.110  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9366.900 ±    5872.867    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.721 ±       5.892  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.611 ±      29.537    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    496331.662 ±    8821.312   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       558.139 ±      29.249  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1769.886 ±     117.536    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       532.946 ±    1147.206  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1692.818 ±    3643.998    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.013 ±       0.114    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1271735.675 ±   11343.175   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       686.152 ±       8.349  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       848.955 ±      13.670    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       671.110 ±       1.493  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       830.343 ±       7.270    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.010 ±       0.089    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    101849.870 ±    4657.743   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3252.002 ±     219.470  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     50246.568 ±    1319.032    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3088.542 ±    1405.499  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     47751.214 ±   22687.985    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.050 ±       0.343  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.785 ±       5.417    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        23.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        32.000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    620830.916 ±    6916.960   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1865.408 ±      48.035  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      4728.659 ±     122.641    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1879.328 ±    1156.232  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4764.707 ±    2948.820    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.032 ±       0.111    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        20.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    334058.814 ±   12183.569   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1166.008 ±      41.554  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5493.142 ±     104.622    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.944 ±    1156.088  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5695.780 ±    5511.834    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.679 ±       5.709  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.208 ±      26.981    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    725706.242 ±   43170.694   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       570.863 ±      38.468  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1237.965 ±      84.339    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       533.667 ±    1148.760  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1161.867 ±    2502.165    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.009 ±       0.079    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1662677.171 ±   15585.888   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       791.879 ±      35.848  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       749.539 ±      40.983    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       805.970 ±    1156.078  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       763.403 ±    1104.783    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.012 ±       0.068    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        17.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1727103.699 ±    6361.046   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    467391.362 ±   19932.193   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       712.703 ±      27.622  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2399.803 ±      45.230    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       667.980 ±       2.108  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2249.401 ±     100.056    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.028 ±       0.148    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    160457.912 ±    1932.312   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       966.167 ±      29.202  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      9476.086 ±     389.124    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       941.261 ±    1417.236  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      9239.476 ±   14010.145    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.082 ±       0.432    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        22.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 8276 s, completed Jun 2, 2018 10:53:23 PM
