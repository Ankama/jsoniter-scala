[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 18, 2018 10:14:12 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:991:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1077:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d5(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d10(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e10(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "l"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46567.660 ops/s
[info] # Warmup Iteration   2: 652425.380 ops/s
[info] # Warmup Iteration   3: 794578.031 ops/s
[info] # Warmup Iteration   4: 836893.282 ops/s
[info] # Warmup Iteration   5: 832089.594 ops/s
[info] Iteration   1: 822792.123 ops/s
[info]                  ·gc.alloc.rate:                   2378.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              4550.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3844.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 832011.009 ops/s
[info]                  ·gc.alloc.rate:                   2442.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              4618.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5055.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 844808.273 ops/s
[info]                  ·gc.alloc.rate:                   2430.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              4524.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3733.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 818294.537 ops/s
[info]                  ·gc.alloc.rate:                   2407.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              4628.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5149.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 839003.057 ops/s
[info]                  ·gc.alloc.rate:               2438.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          4574.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3776.922 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   831381.800 ±(99.9%) 42348.709 ops/s [Average]
[info]   (min, avg, max) = (818294.537, 831381.800, 844808.273), stdev = 10997.825
[info]   CI (99.9%): [789033.091, 873730.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2419.399 ±(99.9%) 102.064 MB/sec [Average]
[info]   (min, avg, max) = (2378.687, 2419.399, 2442.226), stdev = 26.506
[info]   CI (99.9%): [2317.335, 2521.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4579.316 ±(99.9%) 170.578 B/op [Average]
[info]   (min, avg, max) = (4524.844, 4579.316, 4628.921), stdev = 44.299
[info]   CI (99.9%): [4408.738, 4749.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2275.893 ±(99.9%) 1405.191 MB/sec [Average]
[info]   (min, avg, max) = (2004.797, 2275.893, 2677.950), stdev = 364.924
[info]   CI (99.9%): [870.702, 3681.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4311.832 ±(99.9%) 2786.222 B/op [Average]
[info]   (min, avg, max) = (3733.049, 4311.832, 5149.267), stdev = 723.573
[info]   CI (99.9%): [1525.610, 7098.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.731 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.934), stdev = 1.748
[info]   CI (99.9%): [≈ 0, 7.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.545 ±(99.9%) 12.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.545, 7.526), stdev = 3.344
[info]   CI (99.9%): [≈ 0, 14.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:53:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56308.499 ops/s
[info] # Warmup Iteration   2: 1661672.142 ops/s
[info] # Warmup Iteration   3: 1906878.704 ops/s
[info] # Warmup Iteration   4: 1953375.107 ops/s
[info] # Warmup Iteration   5: 1955888.921 ops/s
[info] Iteration   1: 1966888.312 ops/s
[info]                  ·gc.alloc.rate:                   1287.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              1029.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     534.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1920410.021 ops/s
[info]                  ·gc.alloc.rate:                   1272.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              1042.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1094.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1964417.313 ops/s
[info]                  ·gc.alloc.rate:                   1320.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              1057.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1070.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1893153.673 ops/s
[info]                  ·gc.alloc.rate:                   1275.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1060.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1111.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1960523.057 ops/s
[info]                  ·gc.alloc.rate:                   1306.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1072.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1941078.475 ±(99.9%) 126441.223 ops/s [Average]
[info]   (min, avg, max) = (1893153.673, 1941078.475, 1966888.312), stdev = 32836.384
[info]   CI (99.9%): [1814637.253, 2067519.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1292.268 ±(99.9%) 79.462 MB/sec [Average]
[info]   (min, avg, max) = (1272.154, 1292.268, 1320.560), stdev = 20.636
[info]   CI (99.9%): [1212.806, 1371.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1047.787 ±(99.9%) 47.405 B/op [Average]
[info]   (min, avg, max) = (1029.965, 1047.787, 1060.338), stdev = 12.311
[info]   CI (99.9%): [1000.382, 1095.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.474 ±(99.9%) 1151.671 MB/sec [Average]
[info]   (min, avg, max) = (667.456, 1202.474, 1337.267), stdev = 299.085
[info]   CI (99.9%): [50.804, 2354.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   976.582 ±(99.9%) 954.744 B/op [Average]
[info]   (min, avg, max) = (534.089, 976.582, 1111.734), stdev = 247.944
[info]   CI (99.9%): [21.838, 1931.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.864 ±(99.9%) 7.237 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.864, 4.226), stdev = 1.879
[info]   CI (99.9%): [≈ 0, 8.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.718 ±(99.9%) 6.017 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.718, 3.513), stdev = 1.563
[info]   CI (99.9%): [≈ 0, 6.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1810681.134 ops/s
[info] # Warmup Iteration   2: 5617139.165 ops/s
[info] # Warmup Iteration   3: 5963476.013 ops/s
[info] # Warmup Iteration   4: 5989942.706 ops/s
[info] # Warmup Iteration   5: 6038065.646 ops/s
[info] Iteration   1: 5902496.586 ops/s
[info]                  ·gc.alloc.rate:                   402.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              107.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6146301.659 ops/s
[info]                  ·gc.alloc.rate:               421.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          107.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6143712.171 ops/s
[info]                  ·gc.alloc.rate:      406.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6015422.989 ops/s
[info]                  ·gc.alloc.rate:               422.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          110.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 6035559.316 ops/s
[info]                  ·gc.alloc.rate:               420.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          109.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   6048698.544 ±(99.9%) 390839.752 ops/s [Average]
[info]   (min, avg, max) = (5902496.586, 6048698.544, 6146301.659), stdev = 101499.842
[info]   CI (99.9%): [5657858.792, 6439538.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   414.476 ±(99.9%) 36.807 MB/sec [Average]
[info]   (min, avg, max) = (402.239, 414.476, 422.079), stdev = 9.559
[info]   CI (99.9%): [377.669, 451.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.846 ±(99.9%) 9.620 B/op [Average]
[info]   (min, avg, max) = (104.000, 107.846, 110.438), stdev = 2.498
[info]   CI (99.9%): [98.226, 117.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.410 ±(99.9%) 1064.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.410, 671.818), stdev = 276.481
[info]   CI (99.9%): [≈ 0, 1538.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   123.675 ±(99.9%) 278.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 123.675, 175.771), stdev = 72.247
[info]   CI (99.9%): [≈ 0, 401.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1896.300 ops/s
[info] # Warmup Iteration   2: 67476.060 ops/s
[info] # Warmup Iteration   3: 256434.641 ops/s
[info] # Warmup Iteration   4: 264003.648 ops/s
[info] # Warmup Iteration   5: 258475.680 ops/s
[info] Iteration   1: 264911.642 ops/s
[info]                  ·gc.alloc.rate:               2241.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          13317.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11930.523 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 261347.457 ops/s
[info]                  ·gc.alloc.rate:                   2245.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              13519.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12113.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.647 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 264094.790 ops/s
[info]                  ·gc.alloc.rate:                   2255.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              13443.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16010.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 265179.780 ops/s
[info]                  ·gc.alloc.rate:                   2277.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              13519.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11977.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 262730.149 ops/s
[info]                  ·gc.alloc.rate:                   2257.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              13523.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12109.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   263652.763 ±(99.9%) 6172.331 ops/s [Average]
[info]   (min, avg, max) = (261347.457, 263652.763, 265179.780), stdev = 1602.935
[info]   CI (99.9%): [257480.433, 269825.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2255.550 ±(99.9%) 54.694 MB/sec [Average]
[info]   (min, avg, max) = (2241.390, 2255.550, 2277.688), stdev = 14.204
[info]   CI (99.9%): [2200.856, 2310.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13464.562 ±(99.9%) 342.438 B/op [Average]
[info]   (min, avg, max) = (13317.068, 13464.562, 13523.764), stdev = 88.930
[info]   CI (99.9%): [13122.124, 13807.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.164 ±(99.9%) 1157.140 MB/sec [Average]
[info]   (min, avg, max) = (2008.021, 2149.164, 2686.640), stdev = 300.506
[info]   CI (99.9%): [992.024, 3306.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12828.292 ±(99.9%) 6857.609 B/op [Average]
[info]   (min, avg, max) = (11930.523, 12828.292, 16010.824), stdev = 1780.899
[info]   CI (99.9%): [5970.682, 19685.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.291 ±(99.9%) 2.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.270), stdev = 0.548
[info]   CI (99.9%): [≈ 0, 2.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.753 ±(99.9%) 12.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.753, 7.647), stdev = 3.304
[info]   CI (99.9%): [≈ 0, 14.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37928.632 ops/s
[info] # Warmup Iteration   2: 767501.506 ops/s
[info] # Warmup Iteration   3: 872664.171 ops/s
[info] # Warmup Iteration   4: 903678.603 ops/s
[info] # Warmup Iteration   5: 898143.437 ops/s
[info] Iteration   1: 910724.490 ops/s
[info]                  ·gc.alloc.rate:                   2426.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              4192.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3477.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 907329.722 ops/s
[info]                  ·gc.alloc.rate:                   2419.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              4195.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4641.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 913119.622 ops/s
[info]                  ·gc.alloc.rate:                   2459.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              4239.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4612.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 916202.389 ops/s
[info]                  ·gc.alloc.rate:               2454.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          4216.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3453.487 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 914324.312 ops/s
[info]                  ·gc.alloc.rate:                   2477.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              4264.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4624.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   912340.107 ±(99.9%) 13224.048 ops/s [Average]
[info]   (min, avg, max) = (907329.722, 912340.107, 916202.389), stdev = 3434.243
[info]   CI (99.9%): [899116.059, 925564.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2447.364 ±(99.9%) 93.728 MB/sec [Average]
[info]   (min, avg, max) = (2419.032, 2447.364, 2477.469), stdev = 24.341
[info]   CI (99.9%): [2353.635, 2541.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4221.567 ±(99.9%) 116.726 B/op [Average]
[info]   (min, avg, max) = (4192.535, 4221.567, 4264.164), stdev = 30.313
[info]   CI (99.9%): [4104.841, 4338.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2412.420 ±(99.9%) 1409.274 MB/sec [Average]
[info]   (min, avg, max) = (2010.631, 2412.420, 2686.797), stdev = 365.984
[info]   CI (99.9%): [1003.145, 3821.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4161.944 ±(99.9%) 2448.106 B/op [Average]
[info]   (min, avg, max) = (3453.487, 4161.944, 4641.598), stdev = 635.765
[info]   CI (99.9%): [1713.839, 6610.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.392 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.747), stdev = 1.660
[info]   CI (99.9%): [≈ 0, 7.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.346 ±(99.9%) 11.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.346, 6.476), stdev = 2.869
[info]   CI (99.9%): [≈ 0, 12.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231635.748 ops/s
[info] # Warmup Iteration   2: 2709074.538 ops/s
[info] # Warmup Iteration   3: 2899850.596 ops/s
[info] # Warmup Iteration   4: 2882555.995 ops/s
[info] # Warmup Iteration   5: 2887161.178 ops/s
[info] Iteration   1: 2913984.737 ops/s
[info]                  ·gc.alloc.rate:                   1252.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              676.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     721.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2912303.758 ops/s
[info]                  ·gc.alloc.rate:                   1253.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              677.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2883574.074 ops/s
[info]                  ·gc.alloc.rate:                   1229.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              671.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2821362.629 ops/s
[info]                  ·gc.alloc.rate:                   1216.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              678.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     746.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2873897.704 ops/s
[info]                  ·gc.alloc.rate:                   1222.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              669.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2881024.580 ±(99.9%) 145123.812 ops/s [Average]
[info]   (min, avg, max) = (2821362.629, 2881024.580, 2913984.737), stdev = 37688.193
[info]   CI (99.9%): [2735900.768, 3026148.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1234.953 ±(99.9%) 65.477 MB/sec [Average]
[info]   (min, avg, max) = (1216.260, 1234.953, 1253.181), stdev = 17.004
[info]   CI (99.9%): [1169.475, 1300.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   674.576 ±(99.9%) 14.867 B/op [Average]
[info]   (min, avg, max) = (669.855, 674.576, 678.456), stdev = 3.861
[info]   CI (99.9%): [659.709, 689.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.743 ±(99.9%) 1150.286 MB/sec [Average]
[info]   (min, avg, max) = (669.370, 1203.743, 1338.650), stdev = 298.726
[info]   CI (99.9%): [53.457, 2354.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   657.428 ±(99.9%) 627.145 B/op [Average]
[info]   (min, avg, max) = (366.649, 657.428, 746.728), stdev = 162.868
[info]   CI (99.9%): [30.283, 1284.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.574 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.787, 3.841), stdev = 1.707
[info]   CI (99.9%): [≈ 0, 7.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.439 ±(99.9%) 3.668 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.439, 2.143), stdev = 0.952
[info]   CI (99.9%): [≈ 0, 4.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 7.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1816796.107 ops/s
[info] # Warmup Iteration   2: 13819703.756 ops/s
[info] # Warmup Iteration   3: 13195583.026 ops/s
[info] # Warmup Iteration   4: 12790598.157 ops/s
[info] # Warmup Iteration   5: 12301733.505 ops/s
[info] Iteration   1: 14448730.487 ops/s
[info]                  ·gc.alloc.rate:               754.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.033 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 14106768.974 ops/s
[info]                  ·gc.alloc.rate:               739.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.805 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 14177254.610 ops/s
[info]                  ·gc.alloc.rate:                   766.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              85.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 14320702.027 ops/s
[info]                  ·gc.alloc.rate:                   747.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14502226.757 ops/s
[info]                  ·gc.alloc.rate:               755.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.944 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14311136.571 ±(99.9%) 653559.712 ops/s [Average]
[info]   (min, avg, max) = (14106768.974, 14311136.571, 14502226.757), stdev = 169727.382
[info]   CI (99.9%): [13657576.858, 14964696.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   752.622 ±(99.9%) 38.960 MB/sec [Average]
[info]   (min, avg, max) = (739.468, 752.622, 766.753), stdev = 10.118
[info]   CI (99.9%): [713.662, 791.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.766 ±(99.9%) 5.126 B/op [Average]
[info]   (min, avg, max) = (81.940, 82.766, 85.123), stdev = 1.331
[info]   CI (99.9%): [77.640, 87.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.727 ±(99.9%) 1156.350 MB/sec [Average]
[info]   (min, avg, max) = (670.478, 805.727, 1342.919), stdev = 300.301
[info]   CI (99.9%): [≈ 0, 1962.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   88.748 ±(99.9%) 129.919 B/op [Average]
[info]   (min, avg, max) = (72.944, 88.748, 149.088), stdev = 33.740
[info]   CI (99.9%): [≈ 0, 218.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1278744.663 ops/s
[info] # Warmup Iteration   2: 16860798.323 ops/s
[info] # Warmup Iteration   3: 17266305.907 ops/s
[info] # Warmup Iteration   4: 17269655.145 ops/s
[info] # Warmup Iteration   5: 17270452.775 ops/s
[info] Iteration   1: 17281741.535 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17275981.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17244780.075 ops/s
[info]                  ·gc.alloc.rate:      2.731 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.249 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17313521.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17255251.055 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   17274255.184 ±(99.9%) 102437.353 ops/s [Average]
[info]   (min, avg, max) = (17244780.075, 17274255.184, 17313521.447), stdev = 26602.655
[info]   CI (99.9%): [17171817.830, 17376692.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.546 ±(99.9%) 4.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.546, 2.731), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.050 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.050, 0.249), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8015.538 ops/s
[info] # Warmup Iteration   2: 347314.973 ops/s
[info] # Warmup Iteration   3: 681981.191 ops/s
[info] # Warmup Iteration   4: 681217.633 ops/s
[info] # Warmup Iteration   5: 685630.328 ops/s
[info] Iteration   1: 688147.214 ops/s
[info]                  ·gc.alloc.rate:               1980.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          4530.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4578.416 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 674239.994 ops/s
[info]                  ·gc.alloc.rate:                   1973.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              4604.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4674.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 677082.231 ops/s
[info]                  ·gc.alloc.rate:               1959.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          4554.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3093.866 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 676094.343 ops/s
[info]                  ·gc.alloc.rate:                        1938.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                   4513.273 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.020 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.046 B/op
[info]                  ·gc.churn.Metaspace:                   0.058 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1982.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          4613.868 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.327 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             5.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      0.485 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              34.000 ms
[info] Iteration   5: 694241.739 ops/s
[info]                  ·gc.alloc.rate:                   1999.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              4531.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4527.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   681961.104 ±(99.9%) 33729.958 ops/s [Average]
[info]   (min, avg, max) = (674239.994, 681961.104, 694241.739), stdev = 8759.563
[info]   CI (99.9%): [648231.147, 715691.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1970.457 ±(99.9%) 87.339 MB/sec [Average]
[info]   (min, avg, max) = (1938.935, 1970.457, 1999.324), stdev = 22.682
[info]   CI (99.9%): [1883.118, 2057.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4546.832 ±(99.9%) 135.933 B/op [Average]
[info]   (min, avg, max) = (4513.273, 4546.832, 4604.306), stdev = 35.301
[info]   CI (99.9%): [4410.898, 4682.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.009 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.012 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.027 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1863.246 ±(99.9%) 1145.562 MB/sec [Average]
[info]   (min, avg, max) = (1331.278, 1863.246, 2003.542), stdev = 297.499
[info]   CI (99.9%): [717.684, 3008.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4297.628 ±(99.9%) 2599.368 B/op [Average]
[info]   (min, avg, max) = (3093.866, 4297.628, 4674.492), stdev = 675.048
[info]   CI (99.9%): [1698.259, 6896.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Old_Gen":
[info]   0.465 ±(99.9%) 4.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.327), stdev = 1.041
[info]   CI (99.9%): [≈ 0, 4.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   1.083 ±(99.9%) 9.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.083, 5.417), stdev = 2.423
[info]   CI (99.9%): [≈ 0, 10.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.989 ±(99.9%) 7.988 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.989, 4.697), stdev = 2.074
[info]   CI (99.9%): [≈ 0, 8.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.307 ±(99.9%) 18.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.307, 10.958), stdev = 4.840
[info]   CI (99.9%): [≈ 0, 20.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 34.000), stdev = 12.787
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167387.121 ops/s
[info] # Warmup Iteration   2: 1898454.236 ops/s
[info] # Warmup Iteration   3: 2085510.629 ops/s
[info] # Warmup Iteration   4: 2101116.525 ops/s
[info] # Warmup Iteration   5: 2108103.383 ops/s
[info] Iteration   1: 2116616.750 ops/s
[info]                  ·gc.alloc.rate:                   2980.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              2215.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2489.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2099446.390 ops/s
[info]                  ·gc.alloc.rate:                   2945.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              2207.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2008.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2126540.912 ops/s
[info]                  ·gc.alloc.rate:                   2982.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              2206.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1987.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2111650.506 ops/s
[info]                  ·gc.alloc.rate:               2961.973 MB/sec
[info]                  ·gc.alloc.rate.norm:          2207.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2006.379 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 2126287.756 ops/s
[info]                  ·gc.alloc.rate:               3009.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          2227.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2498.434 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2116108.463 ±(99.9%) 43488.860 ops/s [Average]
[info]   (min, avg, max) = (2099446.390, 2116108.463, 2126540.912), stdev = 11293.919
[info]   CI (99.9%): [2072619.602, 2159597.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2976.021 ±(99.9%) 92.759 MB/sec [Average]
[info]   (min, avg, max) = (2945.362, 2976.021, 3009.479), stdev = 24.089
[info]   CI (99.9%): [2883.262, 3068.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2213.074 ±(99.9%) 34.060 B/op [Average]
[info]   (min, avg, max) = (2206.763, 2213.074, 2227.548), stdev = 8.845
[info]   CI (99.9%): [2179.014, 2247.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2956.455 ±(99.9%) 1427.709 MB/sec [Average]
[info]   (min, avg, max) = (2679.635, 2956.455, 3375.453), stdev = 370.772
[info]   CI (99.9%): [1528.746, 4384.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2198.056 ±(99.9%) 1040.817 B/op [Average]
[info]   (min, avg, max) = (1987.348, 2198.056, 2498.434), stdev = 270.297
[info]   CI (99.9%): [1157.238, 3238.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:50:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.704 ops/s
[info] # Warmup Iteration   2: 8419723.596 ops/s
[info] # Warmup Iteration   3: 9553814.332 ops/s
[info] # Warmup Iteration   4: 10012662.017 ops/s
[info] # Warmup Iteration   5: 10012040.782 ops/s
[info] Iteration   1: 10036130.744 ops/s
[info]                  ·gc.alloc.rate:                   1259.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9909344.389 ops/s
[info]                  ·gc.alloc.rate:                   1238.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9928129.014 ops/s
[info]                  ·gc.alloc.rate:               1225.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          194.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105.868 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 9772874.645 ops/s
[info]                  ·gc.alloc.rate:               1232.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          198.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 215.207 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 9769035.956 ops/s
[info]                  ·gc.alloc.rate:                   1231.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9883102.950 ±(99.9%) 436054.711 ops/s [Average]
[info]   (min, avg, max) = (9769035.956, 9883102.950, 10036130.744), stdev = 113242.024
[info]   CI (99.9%): [9447048.238, 10319157.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1237.721 ±(99.9%) 50.781 MB/sec [Average]
[info]   (min, avg, max) = (1225.581, 1237.721, 1259.761), stdev = 13.188
[info]   CI (99.9%): [1186.941, 1288.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.083 ±(99.9%) 6.782 B/op [Average]
[info]   (min, avg, max) = (194.214, 197.083, 198.485), stdev = 1.761
[info]   CI (99.9%): [190.301, 203.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1201.756 ±(99.9%) 1148.793 MB/sec [Average]
[info]   (min, avg, max) = (668.077, 1201.756, 1336.520), stdev = 298.338
[info]   CI (99.9%): [52.963, 2350.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   191.474 ±(99.9%) 184.532 B/op [Average]
[info]   (min, avg, max) = (105.868, 191.474, 215.229), stdev = 47.922
[info]   CI (99.9%): [6.941, 376.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 7.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 4.283), stdev = 1.910
[info]   CI (99.9%): [≈ 0, 8.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.139 ±(99.9%) 1.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.139, 0.690), stdev = 0.308
[info]   CI (99.9%): [≈ 0, 1.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101822.661 ops/s
[info] # Warmup Iteration   2: 3188797.689 ops/s
[info] # Warmup Iteration   3: 3273566.522 ops/s
[info] # Warmup Iteration   4: 3302945.933 ops/s
[info] # Warmup Iteration   5: 3234610.301 ops/s
[info] Iteration   1: 3254929.572 ops/s
[info]                  ·gc.alloc.rate:                   2027.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              980.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     970.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 3299510.088 ops/s
[info]                  ·gc.alloc.rate:                   2055.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              980.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     955.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3319945.243 ops/s
[info]                  ·gc.alloc.rate:                   2071.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              981.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3326163.590 ops/s
[info]                  ·gc.alloc.rate:               2089.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          988.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 946.423 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3308086.783 ops/s
[info]                  ·gc.alloc.rate:               2081.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          989.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 953.469 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3301727.055 ±(99.9%) 108305.344 ops/s [Average]
[info]   (min, avg, max) = (3254929.572, 3301727.055, 3326163.590), stdev = 28126.554
[info]   CI (99.9%): [3193421.711, 3410032.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2065.081 ±(99.9%) 94.902 MB/sec [Average]
[info]   (min, avg, max) = (2027.200, 2065.081, 2089.577), stdev = 24.646
[info]   CI (99.9%): [1970.180, 2159.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   984.246 ±(99.9%) 18.188 B/op [Average]
[info]   (min, avg, max) = (980.230, 984.246, 989.968), stdev = 4.723
[info]   CI (99.9%): [966.058, 1002.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2003.285 ±(99.9%) 11.422 MB/sec [Average]
[info]   (min, avg, max) = (2000.132, 2003.285, 2006.696), stdev = 2.966
[info]   CI (99.9%): [1991.863, 2014.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   954.876 ±(99.9%) 36.412 B/op [Average]
[info]   (min, avg, max) = (946.423, 954.876, 970.316), stdev = 9.456
[info]   CI (99.9%): [918.464, 991.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.851 ±(99.9%) 7.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.851, 4.215), stdev = 1.881
[info]   CI (99.9%): [≈ 0, 8.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.412 ±(99.9%) 3.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.412, 2.038), stdev = 0.909
[info]   CI (99.9%): [≈ 0, 3.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3970740.794 ops/s
[info] # Warmup Iteration   2: 13101281.695 ops/s
[info] # Warmup Iteration   3: 13315408.232 ops/s
[info] # Warmup Iteration   4: 13312317.414 ops/s
[info] # Warmup Iteration   5: 13365926.812 ops/s
[info] Iteration   1: 13409253.660 ops/s
[info]                  ·gc.alloc.rate:               1742.888 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158.170 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 13266232.547 ops/s
[info]                  ·gc.alloc.rate:                   1754.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13748032.703 ops/s
[info]                  ·gc.alloc.rate:               1797.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          205.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.044 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13747549.057 ops/s
[info]                  ·gc.alloc.rate:                   1801.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13739590.655 ops/s
[info]                  ·gc.alloc.rate:                   1824.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              209.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13582131.725 ±(99.9%) 880944.650 ops/s [Average]
[info]   (min, avg, max) = (13266232.547, 13582131.725, 13748032.703), stdev = 228778.528
[info]   CI (99.9%): [12701187.075, 14463076.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1784.139 ±(99.9%) 132.611 MB/sec [Average]
[info]   (min, avg, max) = (1742.888, 1784.139, 1824.932), stdev = 34.439
[info]   CI (99.9%): [1651.528, 1916.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.717 ±(99.9%) 7.005 B/op [Average]
[info]   (min, avg, max) = (204.545, 206.717, 209.036), stdev = 1.819
[info]   CI (99.9%): [199.712, 213.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1749.874 ±(99.9%) 1416.686 MB/sec [Average]
[info]   (min, avg, max) = (1345.988, 1749.874, 2022.530), stdev = 367.909
[info]   CI (99.9%): [333.188, 3166.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   202.795 ±(99.9%) 164.822 B/op [Average]
[info]   (min, avg, max) = (154.044, 202.795, 239.940), stdev = 42.804
[info]   CI (99.9%): [37.972, 367.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.790), stdev = 1.227
[info]   CI (99.9%): [≈ 0, 5.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.331), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17267.164 ops/s
[info] # Warmup Iteration   2: 199695.170 ops/s
[info] # Warmup Iteration   3: 322525.978 ops/s
[info] # Warmup Iteration   4: 1014869.106 ops/s
[info] # Warmup Iteration   5: 1136738.867 ops/s
[info] Iteration   1: 1167882.183 ops/s
[info]                  ·gc.alloc.rate:                   2640.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              3557.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3599.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.667 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 1184837.223 ops/s
[info]                  ·gc.alloc.rate:                   2667.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              3542.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3541.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1188149.261 ops/s
[info]                  ·gc.alloc.rate:                   2682.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              3553.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3526.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1188498.822 ops/s
[info]                  ·gc.alloc.rate:               2696.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          3571.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3528.903 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1188862.278 ops/s
[info]                  ·gc.alloc.rate:               2683.809 MB/sec
[info]                  ·gc.alloc.rate.norm:          3552.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2653.048 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1183645.954 ±(99.9%) 34492.600 ops/s [Average]
[info]   (min, avg, max) = (1167882.183, 1183645.954, 1188862.278), stdev = 8957.619
[info]   CI (99.9%): [1149153.353, 1218138.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2674.284 ±(99.9%) 82.293 MB/sec [Average]
[info]   (min, avg, max) = (2640.862, 2674.284, 2696.610), stdev = 21.371
[info]   CI (99.9%): [2591.992, 2756.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3555.618 ±(99.9%) 39.736 B/op [Average]
[info]   (min, avg, max) = (3542.464, 3555.618, 3571.012), stdev = 10.319
[info]   CI (99.9%): [3515.882, 3595.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2533.768 ±(99.9%) 1140.360 MB/sec [Average]
[info]   (min, avg, max) = (2004.040, 2533.768, 2671.649), stdev = 296.148
[info]   CI (99.9%): [1393.408, 3674.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3369.733 ±(99.9%) 1546.954 B/op [Average]
[info]   (min, avg, max) = (2653.048, 3369.733, 3599.404), stdev = 401.739
[info]   CI (99.9%): [1822.779, 4916.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 7.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.206), stdev = 1.824
[info]   CI (99.9%): [≈ 0, 7.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.282 ±(99.9%) 9.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.282, 5.667), stdev = 2.459
[info]   CI (99.9%): [≈ 0, 10.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.200, 17.000), stdev = 4.970
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149398.211 ops/s
[info] # Warmup Iteration   2: 2358516.046 ops/s
[info] # Warmup Iteration   3: 2483750.290 ops/s
[info] # Warmup Iteration   4: 2494915.325 ops/s
[info] # Warmup Iteration   5: 2496119.292 ops/s
[info] Iteration   1: 2491065.113 ops/s
[info]                  ·gc.alloc.rate:                   2180.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              1377.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1272.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2491017.960 ops/s
[info]                  ·gc.alloc.rate:                   2192.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              1384.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1268.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2461720.972 ops/s
[info]                  ·gc.alloc.rate:               2180.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          1392.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1707.653 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2470517.128 ops/s
[info]                  ·gc.alloc.rate:               2189.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          1394.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1279.728 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2490506.271 ops/s
[info]                  ·gc.alloc.rate:                   2207.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              1394.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1271.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2480965.489 ±(99.9%) 53550.289 ops/s [Average]
[info]   (min, avg, max) = (2461720.972, 2480965.489, 2491065.113), stdev = 13906.840
[info]   CI (99.9%): [2427415.199, 2534515.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2189.898 ±(99.9%) 41.876 MB/sec [Average]
[info]   (min, avg, max) = (2180.307, 2189.898, 2207.040), stdev = 10.875
[info]   CI (99.9%): [2148.022, 2231.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1388.824 ±(99.9%) 28.844 B/op [Average]
[info]   (min, avg, max) = (1377.518, 1388.824, 1394.645), stdev = 7.491
[info]   CI (99.9%): [1359.980, 1417.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2143.493 ±(99.9%) 1139.742 MB/sec [Average]
[info]   (min, avg, max) = (2008.076, 2143.493, 2672.952), stdev = 295.987
[info]   CI (99.9%): [1003.751, 3283.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1360.023 ±(99.9%) 748.467 B/op [Average]
[info]   (min, avg, max) = (1268.512, 1360.023, 1707.653), stdev = 194.374
[info]   CI (99.9%): [611.556, 2108.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.725 ±(99.9%) 6.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.582), stdev = 1.597
[info]   CI (99.9%): [≈ 0, 6.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.458 ±(99.9%) 3.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.262), stdev = 1.009
[info]   CI (99.9%): [≈ 0, 4.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:48:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.680 ops/s
[info] # Warmup Iteration   2: 17052345.409 ops/s
[info] # Warmup Iteration   3: 18500664.986 ops/s
[info] # Warmup Iteration   4: 18766228.559 ops/s
[info] # Warmup Iteration   5: 18784831.284 ops/s
[info] Iteration   1: 18817002.378 ops/s
[info]                  ·gc.alloc.rate:                   590.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18706651.953 ops/s
[info]                  ·gc.alloc.rate:               586.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 18764270.738 ops/s
[info]                  ·gc.alloc.rate:                   589.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18497244.992 ops/s
[info]                  ·gc.alloc.rate:               586.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.737 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 18396839.616 ops/s
[info]                  ·gc.alloc.rate:               582.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   18636401.936 ±(99.9%) 695936.049 ops/s [Average]
[info]   (min, avg, max) = (18396839.616, 18636401.936, 18817002.378), stdev = 180732.382
[info]   CI (99.9%): [17940465.887, 19332337.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   586.885 ±(99.9%) 11.898 MB/sec [Average]
[info]   (min, avg, max) = (582.133, 586.885, 590.125), stdev = 3.090
[info]   CI (99.9%): [574.987, 598.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.558 ±(99.9%) 1.077 B/op [Average]
[info]   (min, avg, max) = (49.322, 49.558, 49.923), stdev = 0.280
[info]   CI (99.9%): [48.481, 50.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.714 ±(99.9%) 1.846 MB/sec [Average]
[info]   (min, avg, max) = (666.164, 666.714, 667.232), stdev = 0.479
[info]   CI (99.9%): [664.868, 668.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   56.301 ±(99.9%) 2.222 B/op [Average]
[info]   (min, avg, max) = (55.718, 56.301, 57.075), stdev = 0.577
[info]   CI (99.9%): [54.079, 58.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:48:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 379424.823 ops/s
[info] # Warmup Iteration   2: 6057862.783 ops/s
[info] # Warmup Iteration   3: 6385268.288 ops/s
[info] # Warmup Iteration   4: 6328506.476 ops/s
[info] # Warmup Iteration   5: 6357982.748 ops/s
[info] Iteration   1: 6457879.958 ops/s
[info]                  ·gc.alloc.rate:                   1804.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     325.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6532303.961 ops/s
[info]                  ·gc.alloc.rate:                   1846.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              444.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     483.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 6524764.352 ops/s
[info]                  ·gc.alloc.rate:                   1870.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              451.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     483.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6574600.040 ops/s
[info]                  ·gc.alloc.rate:               1844.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319.563 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6552717.018 ops/s
[info]                  ·gc.alloc.rate:                   1878.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              451.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     481.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6528453.066 ±(99.9%) 169245.351 ops/s [Average]
[info]   (min, avg, max) = (6457879.958, 6528453.066, 6574600.040), stdev = 43952.480
[info]   CI (99.9%): [6359207.715, 6697698.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1848.652 ±(99.9%) 110.510 MB/sec [Average]
[info]   (min, avg, max) = (1804.721, 1848.652, 1878.076), stdev = 28.699
[info]   CI (99.9%): [1738.142, 1959.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   445.606 ±(99.9%) 20.419 B/op [Average]
[info]   (min, avg, max) = (439.824, 445.606, 451.125), stdev = 5.303
[info]   CI (99.9%): [425.187, 466.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.560 ±(99.9%) 1411.684 MB/sec [Average]
[info]   (min, avg, max) = (1334.930, 1737.560, 2008.918), stdev = 366.610
[info]   CI (99.9%): [325.876, 3149.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   418.723 ±(99.9%) 337.663 B/op [Average]
[info]   (min, avg, max) = (319.563, 418.723, 483.766), stdev = 87.690
[info]   CI (99.9%): [81.060, 756.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.697), stdev = 1.630
[info]   CI (99.9%): [≈ 0, 7.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 1.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.890), stdev = 0.393
[info]   CI (99.9%): [≈ 0, 1.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8862251.941 ops/s
[info] # Warmup Iteration   2: 27399854.560 ops/s
[info] # Warmup Iteration   3: 27761335.251 ops/s
[info] # Warmup Iteration   4: 28042030.307 ops/s
[info] # Warmup Iteration   5: 28020107.576 ops/s
[info] Iteration   1: 28146078.016 ops/s
[info]                  ·gc.alloc.rate:               880.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.549 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 28163672.337 ops/s
[info]                  ·gc.alloc.rate:               875.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 27737128.560 ops/s
[info]                  ·gc.alloc.rate:               871.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.122 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 28212198.514 ops/s
[info]                  ·gc.alloc.rate:               891.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.978 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 28013676.854 ops/s
[info]                  ·gc.alloc.rate:                   880.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   28054550.856 ±(99.9%) 739597.092 ops/s [Average]
[info]   (min, avg, max) = (27737128.560, 28054550.856, 28212198.514), stdev = 192071.016
[info]   CI (99.9%): [27314953.764, 28794147.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   880.002 ±(99.9%) 28.619 MB/sec [Average]
[info]   (min, avg, max) = (871.913, 880.002, 891.752), stdev = 7.432
[info]   CI (99.9%): [851.383, 908.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.363 ±(99.9%) 1.161 B/op [Average]
[info]   (min, avg, max) = (48.944, 49.363, 49.744), stdev = 0.301
[info]   CI (99.9%): [48.202, 50.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.297 ±(99.9%) 1157.703 MB/sec [Average]
[info]   (min, avg, max) = (671.518, 806.297, 1344.119), stdev = 300.652
[info]   CI (99.9%): [≈ 0, 1964.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45.188 ±(99.9%) 64.132 B/op [Average]
[info]   (min, avg, max) = (37.526, 45.188, 74.978), stdev = 16.655
[info]   CI (99.9%): [≈ 0, 109.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8508794.980 ops/s
[info] # Warmup Iteration   2: 34436422.750 ops/s
[info] # Warmup Iteration   3: 34885246.727 ops/s
[info] # Warmup Iteration   4: 34991322.443 ops/s
[info] # Warmup Iteration   5: 34777603.723 ops/s
[info] Iteration   1: 34927153.974 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34904459.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34918430.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35004904.367 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34921704.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   34935330.548 ±(99.9%) 153201.450 ops/s [Average]
[info]   (min, avg, max) = (34904459.317, 34935330.548, 35004904.367), stdev = 39785.930
[info]   CI (99.9%): [34782129.098, 35088531.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:47:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26864.907 ops/s
[info] # Warmup Iteration   2: 1549458.166 ops/s
[info] # Warmup Iteration   3: 1802968.428 ops/s
[info] # Warmup Iteration   4: 1838136.524 ops/s
[info] # Warmup Iteration   5: 1841047.203 ops/s
[info] Iteration   1: 1845538.819 ops/s
[info]                  ·gc.alloc.rate:                   2804.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              2391.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2274.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1768493.970 ops/s
[info]                  ·gc.alloc.rate:                        2642.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                   2350.912 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.021 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.019 B/op
[info]                  ·gc.churn.Metaspace:                   0.063 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2268.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          2018.829 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.129 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             1.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      0.315 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              35.000 ms
[info] Iteration   3: 1864701.971 ops/s
[info]                  ·gc.alloc.rate:                   2835.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              2393.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2256.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1860466.746 ops/s
[info]                  ·gc.alloc.rate:                   2856.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2837.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1861464.848 ops/s
[info]                  ·gc.alloc.rate:                   2832.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              2394.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2276.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1840133.271 ±(99.9%) 156810.552 ops/s [Average]
[info]   (min, avg, max) = (1768493.970, 1840133.271, 1864701.971), stdev = 40723.202
[info]   CI (99.9%): [1683322.719, 1996943.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2794.233 ±(99.9%) 335.379 MB/sec [Average]
[info]   (min, avg, max) = (2642.017, 2794.233, 2856.910), stdev = 87.097
[info]   CI (99.9%): [2458.854, 3129.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2389.379 ±(99.9%) 91.565 B/op [Average]
[info]   (min, avg, max) = (2350.912, 2389.379, 2416.502), stdev = 23.779
[info]   CI (99.9%): [2297.814, 2480.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.011 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2731.300 ±(99.9%) 1505.322 MB/sec [Average]
[info]   (min, avg, max) = (2268.813, 2731.300, 3354.547), stdev = 390.927
[info]   CI (99.9%): [1225.978, 4236.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2332.744 ±(99.9%) 1164.187 B/op [Average]
[info]   (min, avg, max) = (2018.829, 2332.744, 2837.425), stdev = 302.336
[info]   CI (99.9%): [1168.557, 3496.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Old_Gen":
[info]   0.426 ±(99.9%) 3.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 2.129), stdev = 0.952
[info]   CI (99.9%): [≈ 0, 4.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   0.379 ±(99.9%) 3.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.894), stdev = 0.847
[info]   CI (99.9%): [≈ 0, 3.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.585 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.150, 0.354), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.130 ±(99.9%) 0.515 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.130, 0.315), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 12.000, 35.000), stdev = 12.865
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87208.443 ops/s
[info] # Warmup Iteration   2: 300970.817 ops/s
[info] # Warmup Iteration   3: 315780.943 ops/s
[info] # Warmup Iteration   4: 313384.666 ops/s
[info] # Warmup Iteration   5: 313329.883 ops/s
[info] Iteration   1: 311861.505 ops/s
[info]                  ·gc.alloc.rate:                   1907.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              9628.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10169.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.338 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 315134.274 ops/s
[info]                  ·gc.alloc.rate:                   1936.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              9667.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10050.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.287 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 316065.308 ops/s
[info]                  ·gc.alloc.rate:               1930.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          9614.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6667.524 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 314727.349 ops/s
[info]                  ·gc.alloc.rate:               1934.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          9669.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10045.333 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 315050.664 ops/s
[info]                  ·gc.alloc.rate:               1951.237 MB/sec
[info]                  ·gc.alloc.rate.norm:          9747.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10044.769 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   314567.820 ±(99.9%) 6132.709 ops/s [Average]
[info]   (min, avg, max) = (311861.505, 314567.820, 316065.308), stdev = 1592.645
[info]   CI (99.9%): [308435.111, 320700.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1932.008 ±(99.9%) 60.109 MB/sec [Average]
[info]   (min, avg, max) = (1907.881, 1932.008, 1951.237), stdev = 15.610
[info]   CI (99.9%): [1871.899, 1992.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9665.543 ±(99.9%) 199.174 B/op [Average]
[info]   (min, avg, max) = (9614.398, 9665.543, 9747.514), stdev = 51.725
[info]   CI (99.9%): [9466.369, 9864.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.374 ±(99.9%) 1159.109 MB/sec [Average]
[info]   (min, avg, max) = (1338.911, 1877.374, 2015.010), stdev = 301.017
[info]   CI (99.9%): [718.264, 3036.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9395.599 ±(99.9%) 5875.943 B/op [Average]
[info]   (min, avg, max) = (6667.524, 9395.599, 10169.481), stdev = 1525.964
[info]   CI (99.9%): [3519.655, 15271.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.039), stdev = 1.323
[info]   CI (99.9%): [≈ 0, 5.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.525 ±(99.9%) 25.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.525, 15.338), stdev = 6.678
[info]   CI (99.9%): [≈ 0, 29.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 10.000), stdev = 3.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100093.707 ops/s
[info] # Warmup Iteration   2: 476232.100 ops/s
[info] # Warmup Iteration   3: 515420.744 ops/s
[info] # Warmup Iteration   4: 515450.973 ops/s
[info] # Warmup Iteration   5: 519513.746 ops/s
[info] Iteration   1: 518132.413 ops/s
[info]                  ·gc.alloc.rate:               674.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          2047.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2020.298 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 516763.282 ops/s
[info]                  ·gc.alloc.rate:               669.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2025.766 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 519849.485 ops/s
[info]                  ·gc.alloc.rate:                   668.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              2024.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2016.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 520708.752 ops/s
[info]                  ·gc.alloc.rate:               674.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2013.422 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 516782.276 ops/s
[info]                  ·gc.alloc.rate:               669.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          2036.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2030.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   518447.241 ±(99.9%) 6884.921 ops/s [Average]
[info]   (min, avg, max) = (516763.282, 518447.241, 520708.752), stdev = 1787.992
[info]   CI (99.9%): [511562.321, 525332.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   671.144 ±(99.9%) 11.169 MB/sec [Average]
[info]   (min, avg, max) = (668.776, 671.144, 674.527), stdev = 2.901
[info]   CI (99.9%): [659.975, 682.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2037.160 ±(99.9%) 31.041 B/op [Average]
[info]   (min, avg, max) = (2024.746, 2037.160, 2047.277), stdev = 8.061
[info]   CI (99.9%): [2006.118, 2068.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.948 ±(99.9%) 3.075 MB/sec [Average]
[info]   (min, avg, max) = (665.142, 665.948, 667.079), stdev = 0.799
[info]   CI (99.9%): [662.873, 669.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2021.399 ±(99.9%) 26.696 B/op [Average]
[info]   (min, avg, max) = (2013.422, 2021.399, 2030.728), stdev = 6.933
[info]   CI (99.9%): [1994.703, 2048.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 688785.541 ops/s
[info] # Warmup Iteration   2: 1303674.155 ops/s
[info] # Warmup Iteration   3: 1328095.626 ops/s
[info] # Warmup Iteration   4: 1273460.987 ops/s
[info] # Warmup Iteration   5: 1336676.710 ops/s
[info] Iteration   1: 1340042.779 ops/s
[info]                  ·gc.alloc.rate:               915.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          1074.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 788.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1280521.397 ops/s
[info]                  ·gc.alloc.rate:                   888.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1092.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1651.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1308893.394 ops/s
[info]                  ·gc.alloc.rate:               888.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          1067.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 808.209 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1339149.343 ops/s
[info]                  ·gc.alloc.rate:                   918.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1078.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1336444.567 ops/s
[info]                  ·gc.alloc.rate:                   930.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              1095.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1584.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1321010.296 ±(99.9%) 100332.137 ops/s [Average]
[info]   (min, avg, max) = (1280521.397, 1321010.296, 1340042.779), stdev = 26055.937
[info]   CI (99.9%): [1220678.159, 1421342.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   908.249 ±(99.9%) 72.599 MB/sec [Average]
[info]   (min, avg, max) = (888.301, 908.249, 930.609), stdev = 18.854
[info]   CI (99.9%): [835.650, 980.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1081.934 ±(99.9%) 45.353 B/op [Average]
[info]   (min, avg, max) = (1067.925, 1081.934, 1095.582), stdev = 11.778
[info]   CI (99.9%): [1036.581, 1127.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.162 ±(99.9%) 1418.419 MB/sec [Average]
[info]   (min, avg, max) = (671.449, 941.162, 1345.711), stdev = 368.359
[info]   CI (99.9%): [≈ 0, 2359.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1124.571 ±(99.9%) 1736.595 B/op [Average]
[info]   (min, avg, max) = (788.622, 1124.571, 1651.422), stdev = 450.988
[info]   CI (99.9%): [≈ 0, 2861.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.051), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15347.043 ops/s
[info] # Warmup Iteration   2: 102305.352 ops/s
[info] # Warmup Iteration   3: 117150.274 ops/s
[info] # Warmup Iteration   4: 120020.040 ops/s
[info] # Warmup Iteration   5: 121300.319 ops/s
[info] Iteration   1: 121682.739 ops/s
[info]                  ·gc.alloc.rate:               3610.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          46690.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3339.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43183.045 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 121752.447 ops/s
[info]                  ·gc.alloc.rate:                   3626.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              46874.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43299.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 121720.506 ops/s
[info]                  ·gc.alloc.rate:                   3626.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              46886.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43475.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 120787.644 ops/s
[info]                  ·gc.alloc.rate:               3626.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          47251.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4051.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52790.749 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 120652.057 ops/s
[info]                  ·gc.alloc.rate:                   3610.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              47095.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44176.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.543 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   121319.079 ±(99.9%) 2116.578 ops/s [Average]
[info]   (min, avg, max) = (120652.057, 121319.079, 121752.447), stdev = 549.669
[info]   CI (99.9%): [119202.501, 123435.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3620.084 ±(99.9%) 34.193 MB/sec [Average]
[info]   (min, avg, max) = (3610.265, 3620.084, 3626.964), stdev = 8.880
[info]   CI (99.9%): [3585.891, 3654.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   46959.760 ±(99.9%) 835.528 B/op [Average]
[info]   (min, avg, max) = (46690.778, 46959.760, 47251.342), stdev = 216.984
[info]   CI (99.9%): [46124.231, 47795.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3498.026 ±(99.9%) 1193.513 MB/sec [Average]
[info]   (min, avg, max) = (3339.214, 3498.026, 4051.594), stdev = 309.952
[info]   CI (99.9%): [2304.513, 4691.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   45385.125 ±(99.9%) 16010.123 B/op [Average]
[info]   (min, avg, max) = (43183.045, 45385.125, 52790.749), stdev = 4157.778
[info]   CI (99.9%): [29375.002, 61395.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.216 ±(99.9%) 0.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 0.543), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 1.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133047.096 ops/s
[info] # Warmup Iteration   2: 335339.652 ops/s
[info] # Warmup Iteration   3: 337481.353 ops/s
[info] # Warmup Iteration   4: 346712.108 ops/s
[info] # Warmup Iteration   5: 347615.318 ops/s
[info] Iteration   1: 347952.539 ops/s
[info]                  ·gc.alloc.rate:               1193.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          5398.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3032.805 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 345283.191 ops/s
[info]                  ·gc.alloc.rate:               1202.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          5479.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6113.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 347022.167 ops/s
[info]                  ·gc.alloc.rate:                   1204.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              5461.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6087.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 346935.558 ops/s
[info]                  ·gc.alloc.rate:                   1204.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              5464.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6092.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.788 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 348440.566 ops/s
[info]                  ·gc.alloc.rate:                   1195.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              5399.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3033.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   347126.804 ±(99.9%) 4658.421 ops/s [Average]
[info]   (min, avg, max) = (345283.191, 347126.804, 348440.566), stdev = 1209.777
[info]   CI (99.9%): [342468.384, 351785.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1200.272 ±(99.9%) 19.913 MB/sec [Average]
[info]   (min, avg, max) = (1193.820, 1200.272, 1204.961), stdev = 5.171
[info]   CI (99.9%): [1180.359, 1220.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5440.695 ±(99.9%) 148.415 B/op [Average]
[info]   (min, avg, max) = (5398.800, 5440.695, 5479.421), stdev = 38.543
[info]   CI (99.9%): [5292.280, 5589.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074.009 ±(99.9%) 1416.194 MB/sec [Average]
[info]   (min, avg, max) = (670.635, 1074.009, 1343.469), stdev = 367.781
[info]   CI (99.9%): [≈ 0, 2490.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4871.993 ±(99.9%) 6464.740 B/op [Average]
[info]   (min, avg, max) = (3032.805, 4871.993, 6113.991), stdev = 1678.873
[info]   CI (99.9%): [≈ 0, 11336.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.040), stdev = 1.321
[info]   CI (99.9%): [≈ 0, 5.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.190 ±(99.9%) 23.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.190, 13.788), stdev = 5.990
[info]   CI (99.9%): [≈ 0, 26.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284214.090 ops/s
[info] # Warmup Iteration   2: 837567.913 ops/s
[info] # Warmup Iteration   3: 889679.569 ops/s
[info] # Warmup Iteration   4: 869691.108 ops/s
[info] # Warmup Iteration   5: 896343.995 ops/s
[info] Iteration   1: 883320.327 ops/s
[info]                  ·gc.alloc.rate:                   655.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              1167.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1186.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 900227.915 ops/s
[info]                  ·gc.alloc.rate:               665.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          1162.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1164.597 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 894980.336 ops/s
[info]                  ·gc.alloc.rate:                   669.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              1177.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 886684.943 ops/s
[info]                  ·gc.alloc.rate:               660.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          1171.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1184.163 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 890904.788 ops/s
[info]                  ·gc.alloc.rate:               659.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          1164.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1179.765 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   891223.662 ±(99.9%) 25712.495 ops/s [Average]
[info]   (min, avg, max) = (883320.327, 891223.662, 900227.915), stdev = 6677.453
[info]   CI (99.9%): [865511.167, 916936.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   662.012 ±(99.9%) 20.680 MB/sec [Average]
[info]   (min, avg, max) = (655.655, 662.012, 669.443), stdev = 5.370
[info]   CI (99.9%): [641.332, 682.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168.829 ±(99.9%) 22.589 B/op [Average]
[info]   (min, avg, max) = (1162.448, 1168.829, 1177.258), stdev = 5.866
[info]   CI (99.9%): [1146.240, 1191.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.023 ±(99.9%) 2.479 MB/sec [Average]
[info]   (min, avg, max) = (666.328, 667.023, 667.843), stdev = 0.644
[info]   CI (99.9%): [664.544, 669.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1177.723 ±(99.9%) 34.573 B/op [Average]
[info]   (min, avg, max) = (1164.597, 1177.723, 1186.892), stdev = 8.978
[info]   CI (99.9%): [1143.150, 1212.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.110), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1575350.672 ops/s
[info] # Warmup Iteration   2: 2334357.994 ops/s
[info] # Warmup Iteration   3: 2564405.062 ops/s
[info] # Warmup Iteration   4: 2584835.603 ops/s
[info] # Warmup Iteration   5: 2538522.075 ops/s
[info] Iteration   1: 2580922.069 ops/s
[info]                  ·gc.alloc.rate:               1223.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 819.384 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2571500.348 ops/s
[info]                  ·gc.alloc.rate:               1228.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          752.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 822.780 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 2586658.732 ops/s
[info]                  ·gc.alloc.rate:               1223.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 409.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2570049.146 ops/s
[info]                  ·gc.alloc.rate:                   1229.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2568084.745 ops/s
[info]                  ·gc.alloc.rate:                   1228.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2575443.008 ±(99.9%) 30720.496 ops/s [Average]
[info]   (min, avg, max) = (2568084.745, 2575443.008, 2586658.732), stdev = 7978.015
[info]   CI (99.9%): [2544722.512, 2606163.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1226.754 ±(99.9%) 10.693 MB/sec [Average]
[info]   (min, avg, max) = (1223.615, 1226.754, 1229.050), stdev = 2.777
[info]   CI (99.9%): [1216.061, 1237.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.660 ±(99.9%) 15.178 B/op [Average]
[info]   (min, avg, max) = (744.514, 749.660, 752.692), stdev = 3.942
[info]   CI (99.9%): [734.483, 764.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.448 ±(99.9%) 1157.318 MB/sec [Average]
[info]   (min, avg, max) = (672.808, 1210.448, 1345.938), stdev = 300.552
[info]   CI (99.9%): [53.131, 2367.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   740.047 ±(99.9%) 711.845 B/op [Average]
[info]   (min, avg, max) = (409.372, 740.047, 824.480), stdev = 184.864
[info]   CI (99.9%): [28.202, 1451.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.608 ±(99.9%) 4.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.560), stdev = 1.111
[info]   CI (99.9%): [≈ 0, 4.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.372 ±(99.9%) 2.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.372, 1.568), stdev = 0.680
[info]   CI (99.9%): [≈ 0, 2.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1824202.712 ops/s
[info] # Warmup Iteration   2: 2783685.791 ops/s
[info] # Warmup Iteration   3: 2600533.088 ops/s
[info] # Warmup Iteration   4: 2530945.965 ops/s
[info] # Warmup Iteration   5: 2725173.836 ops/s
[info] Iteration   1: 2921507.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2600453.366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2921402.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2722076.366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2918623.668 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2816812.613 ±(99.9%) 571310.752 ops/s [Average]
[info]   (min, avg, max) = (2600453.366, 2816812.613, 2921507.604), stdev = 148367.588
[info]   CI (99.9%): [2245501.861, 3388123.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:45:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134008.433 ops/s
[info] # Warmup Iteration   2: 471870.667 ops/s
[info] # Warmup Iteration   3: 487195.358 ops/s
[info] # Warmup Iteration   4: 484105.549 ops/s
[info] # Warmup Iteration   5: 487261.552 ops/s
[info] Iteration   1: 488475.619 ops/s
[info]                  ·gc.alloc.rate:               719.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          2318.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2151.725 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 483749.590 ops/s
[info]                  ·gc.alloc.rate:               715.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2174.889 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 483648.459 ops/s
[info]                  ·gc.alloc.rate:                   724.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              2357.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2175.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 490082.097 ops/s
[info]                  ·gc.alloc.rate:               726.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          2332.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2147.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 489395.225 ops/s
[info]                  ·gc.alloc.rate:                   720.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              2318.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2150.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   487070.198 ±(99.9%) 12052.458 ops/s [Average]
[info]   (min, avg, max) = (483648.459, 487070.198, 490082.097), stdev = 3129.985
[info]   CI (99.9%): [475017.740, 499122.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   721.455 ±(99.9%) 15.893 MB/sec [Average]
[info]   (min, avg, max) = (715.769, 721.455, 726.348), stdev = 4.127
[info]   CI (99.9%): [705.562, 737.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2331.046 ±(99.9%) 61.353 B/op [Average]
[info]   (min, avg, max) = (2318.069, 2331.046, 2357.379), stdev = 15.933
[info]   CI (99.9%): [2269.693, 2392.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.537 ±(99.9%) 1.657 MB/sec [Average]
[info]   (min, avg, max) = (667.849, 668.537, 668.917), stdev = 0.430
[info]   CI (99.9%): [666.880, 670.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2160.091 ±(99.9%) 53.084 B/op [Average]
[info]   (min, avg, max) = (2147.809, 2160.091, 2175.329), stdev = 13.786
[info]   CI (99.9%): [2107.007, 2213.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.135), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6932.410 ops/s
[info] # Warmup Iteration   2: 15496.604 ops/s
[info] # Warmup Iteration   3: 17589.354 ops/s
[info] # Warmup Iteration   4: 17598.714 ops/s
[info] # Warmup Iteration   5: 17372.107 ops/s
[info] Iteration   1: 17381.102 ops/s
[info]                  ·gc.alloc.rate:                   1385.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              125457.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121602.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17200.953 ops/s
[info]                  ·gc.alloc.rate:               1397.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          127839.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122942.382 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 17601.121 ops/s
[info]                  ·gc.alloc.rate:                   1406.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              125745.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120194.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17613.028 ops/s
[info]                  ·gc.alloc.rate:                   1424.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              127229.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120000.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17596.578 ops/s
[info]                  ·gc.alloc.rate:                   1409.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              126061.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119871.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17478.557 ±(99.9%) 703.717 ops/s [Average]
[info]   (min, avg, max) = (17200.953, 17478.557, 17613.028), stdev = 182.753
[info]   CI (99.9%): [16774.840, 18182.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1404.643 ±(99.9%) 55.349 MB/sec [Average]
[info]   (min, avg, max) = (1385.554, 1404.643, 1424.118), stdev = 14.374
[info]   CI (99.9%): [1349.294, 1459.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126466.705 ±(99.9%) 3931.776 B/op [Average]
[info]   (min, avg, max) = (125457.158, 126466.705, 127839.391), stdev = 1021.070
[info]   CI (99.9%): [122534.929, 130398.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.976 ±(99.9%) 6.556 MB/sec [Average]
[info]   (min, avg, max) = (1340.202, 1342.976, 1344.797), stdev = 1.703
[info]   CI (99.9%): [1336.420, 1349.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   120922.167 ±(99.9%) 5103.559 B/op [Average]
[info]   (min, avg, max) = (119871.302, 120922.167, 122942.382), stdev = 1325.378
[info]   CI (99.9%): [115818.608, 126025.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 2.791), stdev = 1.204
[info]   CI (99.9%): [≈ 0, 5.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.122 ±(99.9%) 414.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.122, 249.413), stdev = 107.637
[info]   CI (99.9%): [≈ 0, 482.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12518.020 ops/s
[info] # Warmup Iteration   2: 35991.782 ops/s
[info] # Warmup Iteration   3: 36642.709 ops/s
[info] # Warmup Iteration   4: 33328.798 ops/s
[info] # Warmup Iteration   5: 37717.505 ops/s
[info] Iteration   1: 32819.843 ops/s
[info]                  ·gc.alloc.rate:                   918.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              44018.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64114.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 37837.550 ops/s
[info]                  ·gc.alloc.rate:               1034.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          43019.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27834.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 33694.096 ops/s
[info]                  ·gc.alloc.rate:                   934.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              43667.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62529.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 37757.449 ops/s
[info]                  ·gc.alloc.rate:               1029.716 MB/sec
[info]                  ·gc.alloc.rate.norm:          42920.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27907.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 37569.271 ops/s
[info]                  ·gc.alloc.rate:                   1056.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              44258.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56148.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   35935.642 ±(99.9%) 9498.242 ops/s [Average]
[info]   (min, avg, max) = (32819.843, 35935.642, 37837.550), stdev = 2466.663
[info]   CI (99.9%): [26437.400, 45433.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   994.755 ±(99.9%) 244.162 MB/sec [Average]
[info]   (min, avg, max) = (918.077, 994.755, 1056.541), stdev = 63.408
[info]   CI (99.9%): [750.593, 1238.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43577.088 ±(99.9%) 2284.991 B/op [Average]
[info]   (min, avg, max) = (42920.908, 43577.088, 44258.337), stdev = 593.405
[info]   CI (99.9%): [41292.097, 45862.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.042 ±(99.9%) 1411.703 MB/sec [Average]
[info]   (min, avg, max) = (669.343, 1071.042, 1340.392), stdev = 366.615
[info]   CI (99.9%): [≈ 0, 2482.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47706.834 ±(99.9%) 70665.381 B/op [Average]
[info]   (min, avg, max) = (27834.010, 47706.834, 64114.429), stdev = 18351.575
[info]   CI (99.9%): [≈ 0, 118372.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.357 ±(99.9%) 5.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.357, 2.995), stdev = 1.503
[info]   CI (99.9%): [≈ 0, 7.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15498.704 ops/s
[info] # Warmup Iteration   2: 39776.525 ops/s
[info] # Warmup Iteration   3: 41976.657 ops/s
[info] # Warmup Iteration   4: 41248.396 ops/s
[info] # Warmup Iteration   5: 41863.816 ops/s
[info] Iteration   1: 41941.729 ops/s
[info]                  ·gc.alloc.rate:               628.994 MB/sec
[info]                  ·gc.alloc.rate.norm:          23592.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25172.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 41926.383 ops/s
[info]                  ·gc.alloc.rate:               619.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          23236.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25181.028 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 41863.079 ops/s
[info]                  ·gc.alloc.rate:               622.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          23407.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25232.644 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 41972.697 ops/s
[info]                  ·gc.alloc.rate:               621.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          23313.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25165.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 41901.994 ops/s
[info]                  ·gc.alloc.rate:                   621.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              23323.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25219.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   41921.176 ±(99.9%) 159.317 ops/s [Average]
[info]   (min, avg, max) = (41863.079, 41921.176, 41972.697), stdev = 41.374
[info]   CI (99.9%): [41761.860, 42080.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   622.757 ±(99.9%) 14.478 MB/sec [Average]
[info]   (min, avg, max) = (619.015, 622.757, 628.994), stdev = 3.760
[info]   CI (99.9%): [608.279, 637.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23374.721 ±(99.9%) 524.405 B/op [Average]
[info]   (min, avg, max) = (23236.356, 23374.721, 23592.963), stdev = 136.186
[info]   CI (99.9%): [22850.316, 23899.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.228 ±(99.9%) 1.237 MB/sec [Average]
[info]   (min, avg, max) = (670.821, 671.228, 671.633), stdev = 0.321
[info]   CI (99.9%): [669.990, 672.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25194.057 ±(99.9%) 115.602 B/op [Average]
[info]   (min, avg, max) = (25165.324, 25194.057, 25232.644), stdev = 30.022
[info]   CI (99.9%): [25078.455, 25309.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.313 ±(99.9%) 2.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 1.564), stdev = 0.699
[info]   CI (99.9%): [≈ 0, 3.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:44:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4183.483 ops/s
[info] # Warmup Iteration   2: 26243.376 ops/s
[info] # Warmup Iteration   3: 29689.132 ops/s
[info] # Warmup Iteration   4: 29964.110 ops/s
[info] # Warmup Iteration   5: 29421.024 ops/s
[info] Iteration   1: 29936.165 ops/s
[info]                  ·gc.alloc.rate:               1504.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          79120.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70338.150 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 29811.736 ops/s
[info]                  ·gc.alloc.rate:                   1517.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              80114.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106014.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 30071.636 ops/s
[info]                  ·gc.alloc.rate:                   1518.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              79460.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70146.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30123.314 ops/s
[info]                  ·gc.alloc.rate:               1532.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          80050.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69816.896 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 30116.456 ops/s
[info]                  ·gc.alloc.rate:               1531.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          80060.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69696.187 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30011.862 ±(99.9%) 519.177 ops/s [Average]
[info]   (min, avg, max) = (29811.736, 30011.862, 30123.314), stdev = 134.829
[info]   CI (99.9%): [29492.685, 30531.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1521.066 ±(99.9%) 44.133 MB/sec [Average]
[info]   (min, avg, max) = (1504.979, 1521.066, 1532.390), stdev = 11.461
[info]   CI (99.9%): [1476.933, 1565.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79761.280 ±(99.9%) 1721.185 B/op [Average]
[info]   (min, avg, max) = (79120.123, 79761.280, 80114.643), stdev = 446.986
[info]   CI (99.9%): [78040.094, 81482.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.354 ±(99.9%) 1156.089 MB/sec [Average]
[info]   (min, avg, max) = (1333.665, 1471.354, 2008.410), stdev = 300.233
[info]   CI (99.9%): [315.265, 2627.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77202.532 ±(99.9%) 62028.044 B/op [Average]
[info]   (min, avg, max) = (69696.187, 77202.532, 106014.635), stdev = 16108.486
[info]   CI (99.9%): [15174.488, 139230.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.878 ±(99.9%) 7.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.878, 4.372), stdev = 1.953
[info]   CI (99.9%): [≈ 0, 8.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   45.979 ±(99.9%) 393.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.979, 228.796), stdev = 102.199
[info]   CI (99.9%): [≈ 0, 439.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8127.109 ops/s
[info] # Warmup Iteration   2: 23856.995 ops/s
[info] # Warmup Iteration   3: 24810.467 ops/s
[info] # Warmup Iteration   4: 24666.269 ops/s
[info] # Warmup Iteration   5: 24596.636 ops/s
[info] Iteration   1: 25004.922 ops/s
[info]                  ·gc.alloc.rate:                   1813.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              114120.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126098.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24998.763 ops/s
[info]                  ·gc.alloc.rate:                   1790.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              112714.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84211.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24976.750 ops/s
[info]                  ·gc.alloc.rate:                   1801.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              113523.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126664.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24943.776 ops/s
[info]                  ·gc.alloc.rate:                   1809.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              114181.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127121.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25040.207 ops/s
[info]                  ·gc.alloc.rate:                   1803.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              113382.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84593.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   24992.884 ±(99.9%) 137.372 ops/s [Average]
[info]   (min, avg, max) = (24943.776, 24992.884, 25040.207), stdev = 35.675
[info]   CI (99.9%): [24855.512, 25130.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1803.768 ±(99.9%) 33.988 MB/sec [Average]
[info]   (min, avg, max) = (1790.332, 1803.768, 1813.326), stdev = 8.827
[info]   CI (99.9%): [1769.780, 1837.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   113584.479 ±(99.9%) 2315.014 B/op [Average]
[info]   (min, avg, max) = (112714.385, 113584.479, 114181.746), stdev = 601.202
[info]   CI (99.9%): [111269.466, 115899.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.404 ±(99.9%) 1408.491 MB/sec [Average]
[info]   (min, avg, max) = (1337.598, 1742.404, 2014.753), stdev = 365.781
[info]   CI (99.9%): [333.913, 3150.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   109737.810 ±(99.9%) 89069.346 B/op [Average]
[info]   (min, avg, max) = (84211.519, 109737.810, 127121.136), stdev = 23131.026
[info]   CI (99.9%): [20668.464, 198807.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.574 ±(99.9%) 2.267 B/op [Average]
[info]   (min, avg, max) = (1.308, 1.574, 2.627), stdev = 0.589
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6161.249 ops/s
[info] # Warmup Iteration   2: 22863.834 ops/s
[info] # Warmup Iteration   3: 24645.074 ops/s
[info] # Warmup Iteration   4: 24732.445 ops/s
[info] # Warmup Iteration   5: 24671.607 ops/s
[info] Iteration   1: 24877.991 ops/s
[info]                  ·gc.alloc.rate:               1583.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          100160.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84094.261 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 24907.392 ops/s
[info]                  ·gc.alloc.rate:                   1585.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              100166.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84077.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24849.888 ops/s
[info]                  ·gc.alloc.rate:               1592.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          100842.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126673.752 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 24868.420 ops/s
[info]                  ·gc.alloc.rate:               1595.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          100930.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84609.498 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 24806.009 ops/s
[info]                  ·gc.alloc.rate:               1591.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          100984.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84993.403 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   24861.940 ±(99.9%) 144.580 ops/s [Average]
[info]   (min, avg, max) = (24806.009, 24861.940, 24907.392), stdev = 37.547
[info]   CI (99.9%): [24717.360, 25006.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1589.621 ±(99.9%) 19.134 MB/sec [Average]
[info]   (min, avg, max) = (1583.459, 1589.621, 1595.251), stdev = 4.969
[info]   CI (99.9%): [1570.487, 1608.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100617.010 ±(99.9%) 1604.616 B/op [Average]
[info]   (min, avg, max) = (100160.811, 100617.010, 100984.088), stdev = 416.714
[info]   CI (99.9%): [99012.393, 102221.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1467.456 ±(99.9%) 1146.623 MB/sec [Average]
[info]   (min, avg, max) = (1329.460, 1467.456, 2000.075), stdev = 297.774
[info]   CI (99.9%): [320.834, 2614.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92889.618 ±(99.9%) 72737.833 B/op [Average]
[info]   (min, avg, max) = (84077.174, 92889.618, 126673.752), stdev = 18889.784
[info]   CI (99.9%): [20151.785, 165627.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.263 ±(99.9%) 2.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.263, 1.315), stdev = 0.588
[info]   CI (99.9%): [≈ 0, 2.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10785.684 ops/s
[info] # Warmup Iteration   2: 26346.501 ops/s
[info] # Warmup Iteration   3: 26305.900 ops/s
[info] # Warmup Iteration   4: 27590.288 ops/s
[info] # Warmup Iteration   5: 27377.695 ops/s
[info] Iteration   1: 27551.886 ops/s
[info]                  ·gc.alloc.rate:                   1629.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              93074.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115295.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 27602.583 ops/s
[info]                  ·gc.alloc.rate:                   1616.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              92146.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76762.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27689.098 ops/s
[info]                  ·gc.alloc.rate:                   1633.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              92835.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76483.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27652.362 ops/s
[info]                  ·gc.alloc.rate:                   1657.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              94359.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114612.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.370 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27698.089 ops/s
[info]                  ·gc.alloc.rate:                   1633.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              92825.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76228.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   27638.804 ±(99.9%) 236.546 ops/s [Average]
[info]   (min, avg, max) = (27551.886, 27638.804, 27698.089), stdev = 61.430
[info]   CI (99.9%): [27402.258, 27875.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1634.252 ±(99.9%) 57.507 MB/sec [Average]
[info]   (min, avg, max) = (1616.523, 1634.252, 1657.823), stdev = 14.934
[info]   CI (99.9%): [1576.744, 1691.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93048.397 ±(99.9%) 3121.746 B/op [Average]
[info]   (min, avg, max) = (92146.596, 93048.397, 94359.833), stdev = 810.707
[info]   CI (99.9%): [89926.652, 96170.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.280 ±(99.9%) 1416.237 MB/sec [Average]
[info]   (min, avg, max) = (1341.813, 1613.280, 2018.684), stdev = 367.792
[info]   CI (99.9%): [197.044, 3029.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91876.293 ±(99.9%) 81129.614 B/op [Average]
[info]   (min, avg, max) = (76228.417, 91876.293, 115295.035), stdev = 21069.103
[info]   CI (99.9%): [10746.680, 173005.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.700 ±(99.9%) 3.671 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.700, 2.270), stdev = 0.953
[info]   CI (99.9%): [≈ 0, 4.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39.838 ±(99.9%) 209.270 B/op [Average]
[info]   (min, avg, max) = (1.189, 39.838, 129.377), stdev = 54.347
[info]   CI (99.9%): [≈ 0, 249.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:43:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11053.330 ops/s
[info] # Warmup Iteration   2: 26462.389 ops/s
[info] # Warmup Iteration   3: 27385.526 ops/s
[info] # Warmup Iteration   4: 27765.380 ops/s
[info] # Warmup Iteration   5: 27582.055 ops/s
[info] Iteration   1: 27707.154 ops/s
[info]                  ·gc.alloc.rate:               1582.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          89888.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76395.603 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 27636.396 ops/s
[info]                  ·gc.alloc.rate:                   1591.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              90584.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114944.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 27807.742 ops/s
[info]                  ·gc.alloc.rate:                   1586.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              89733.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76085.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27782.978 ops/s
[info]                  ·gc.alloc.rate:               1598.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          90506.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76038.458 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 27662.118 ops/s
[info]                  ·gc.alloc.rate:                   1604.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              91280.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114495.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27719.278 ±(99.9%) 286.654 ops/s [Average]
[info]   (min, avg, max) = (27636.396, 27719.278, 27807.742), stdev = 74.443
[info]   CI (99.9%): [27432.624, 28005.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1592.558 ±(99.9%) 34.870 MB/sec [Average]
[info]   (min, avg, max) = (1582.447, 1592.558, 1604.741), stdev = 9.056
[info]   CI (99.9%): [1557.688, 1627.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   90398.928 ±(99.9%) 2378.839 B/op [Average]
[info]   (min, avg, max) = (89733.986, 90398.928, 91280.806), stdev = 617.777
[info]   CI (99.9%): [88020.089, 92777.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1612.900 ±(99.9%) 1416.719 MB/sec [Average]
[info]   (min, avg, max) = (1342.862, 1612.900, 2018.989), stdev = 367.917
[info]   CI (99.9%): [196.182, 3029.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   91592.042 ±(99.9%) 81302.393 B/op [Average]
[info]   (min, avg, max) = (76038.458, 91592.042, 114944.658), stdev = 21113.973
[info]   CI (99.9%): [10289.649, 172894.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.671 ±(99.9%) 4.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 2.395), stdev = 1.045
[info]   CI (99.9%): [≈ 0, 4.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   38.107 ±(99.9%) 228.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.107, 136.331), stdev = 59.451
[info]   CI (99.9%): [≈ 0, 267.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2544.690 ops/s
[info] # Warmup Iteration   2: 7126.879 ops/s
[info] # Warmup Iteration   3: 7831.370 ops/s
[info] # Warmup Iteration   4: 7873.833 ops/s
[info] # Warmup Iteration   5: 7885.668 ops/s
[info] Iteration   1: 7913.728 ops/s
[info]                  ·gc.alloc.rate:                   1165.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              231691.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133257.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7861.158 ops/s
[info]                  ·gc.alloc.rate:                   1168.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              233967.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268412.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7852.371 ops/s
[info]                  ·gc.alloc.rate:                   1188.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              238042.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268819.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 7694.680 ops/s
[info]                  ·gc.alloc.rate:               1132.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          231631.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137203.227 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 7701.930 ops/s
[info]                  ·gc.alloc.rate:                   1149.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              234801.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274257.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 795.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7804.773 ±(99.9%) 385.127 ops/s [Average]
[info]   (min, avg, max) = (7694.680, 7804.773, 7913.728), stdev = 100.016
[info]   CI (99.9%): [7419.646, 8189.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1160.830 ±(99.9%) 81.276 MB/sec [Average]
[info]   (min, avg, max) = (1132.479, 1160.830, 1188.277), stdev = 21.107
[info]   CI (99.9%): [1079.554, 1242.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   234026.651 ±(99.9%) 10172.846 B/op [Average]
[info]   (min, avg, max) = (231631.310, 234026.651, 238042.013), stdev = 2641.856
[info]   CI (99.9%): [223853.806, 244199.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1073.214 ±(99.9%) 1415.246 MB/sec [Average]
[info]   (min, avg, max) = (670.394, 1073.214, 1342.118), stdev = 367.535
[info]   CI (99.9%): [≈ 0, 2488.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   216390.084 ±(99.9%) 285476.508 B/op [Average]
[info]   (min, avg, max) = (133257.637, 216390.084, 274257.612), stdev = 74137.343
[info]   CI (99.9%): [≈ 0, 501866.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.658 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.892), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 7.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   163.240 ±(99.9%) 1360.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 163.240, 795.381), stdev = 353.394
[info]   CI (99.9%): [≈ 0, 1524.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6211.768 ops/s
[info] # Warmup Iteration   2: 15899.326 ops/s
[info] # Warmup Iteration   3: 17905.224 ops/s
[info] # Warmup Iteration   4: 18014.412 ops/s
[info] # Warmup Iteration   5: 17794.608 ops/s
[info] Iteration   1: 17712.413 ops/s
[info]                  ·gc.alloc.rate:                   1619.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              143884.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178984.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.850 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 17885.568 ops/s
[info]                  ·gc.alloc.rate:                   1648.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              145004.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118227.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 18207.783 ops/s
[info]                  ·gc.alloc.rate:                   1667.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              144122.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173946.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18128.354 ops/s
[info]                  ·gc.alloc.rate:                   1664.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              144477.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116238.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17919.529 ops/s
[info]                  ·gc.alloc.rate:                   1633.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              143411.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117477.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.828 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17970.729 ±(99.9%) 764.430 ops/s [Average]
[info]   (min, avg, max) = (17712.413, 17970.729, 18207.783), stdev = 198.520
[info]   CI (99.9%): [17206.299, 18735.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1646.473 ±(99.9%) 78.382 MB/sec [Average]
[info]   (min, avg, max) = (1619.574, 1646.473, 1667.411), stdev = 20.356
[info]   CI (99.9%): [1568.090, 1724.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144180.322 ±(99.9%) 2317.594 B/op [Average]
[info]   (min, avg, max) = (143411.994, 144180.322, 145004.442), stdev = 601.872
[info]   CI (99.9%): [141862.728, 146497.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.510 ±(99.9%) 1420.325 MB/sec [Average]
[info]   (min, avg, max) = (1337.785, 1609.510, 2014.667), stdev = 368.854
[info]   CI (99.9%): [189.185, 3029.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   140975.027 ±(99.9%) 124973.577 B/op [Average]
[info]   (min, avg, max) = (116238.570, 140975.027, 178984.750), stdev = 32455.241
[info]   CI (99.9%): [16001.451, 265948.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 4.500 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.783, 2.686), stdev = 1.169
[info]   CI (99.9%): [≈ 0, 5.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.510 ±(99.9%) 395.421 B/op [Average]
[info]   (min, avg, max) = (1.828, 68.510, 236.294), stdev = 102.690
[info]   CI (99.9%): [≈ 0, 463.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 3.808
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16946.404 ops/s
[info] # Warmup Iteration   2: 40030.434 ops/s
[info] # Warmup Iteration   3: 41951.630 ops/s
[info] # Warmup Iteration   4: 40812.616 ops/s
[info] # Warmup Iteration   5: 42201.676 ops/s
[info] Iteration   1: 42321.814 ops/s
[info]                  ·gc.alloc.rate:                   1200.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              44619.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49769.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 42391.497 ops/s
[info]                  ·gc.alloc.rate:               1181.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          43865.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24855.978 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 42244.544 ops/s
[info]                  ·gc.alloc.rate:                   1204.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              44879.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49908.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 42295.526 ops/s
[info]                  ·gc.alloc.rate:                   1192.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              44359.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49874.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 42660.357 ops/s
[info]                  ·gc.alloc.rate:                   1200.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              44298.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24722.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   42382.748 ±(99.9%) 631.448 ops/s [Average]
[info]   (min, avg, max) = (42244.544, 42382.748, 42660.357), stdev = 163.985
[info]   CI (99.9%): [41751.300, 43014.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1195.871 ±(99.9%) 35.277 MB/sec [Average]
[info]   (min, avg, max) = (1181.575, 1195.871, 1204.632), stdev = 9.161
[info]   CI (99.9%): [1160.594, 1231.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44404.527 ±(99.9%) 1461.038 B/op [Average]
[info]   (min, avg, max) = (43865.580, 44404.527, 44879.539), stdev = 379.427
[info]   CI (99.9%): [42943.489, 45865.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.675 ±(99.9%) 1412.480 MB/sec [Average]
[info]   (min, avg, max) = (669.527, 1071.675, 1340.531), stdev = 366.817
[info]   CI (99.9%): [≈ 0, 2484.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39826.192 ±(99.9%) 52857.368 B/op [Average]
[info]   (min, avg, max) = (24722.683, 39826.192, 49908.554), stdev = 13726.891
[info]   CI (99.9%): [≈ 0, 92683.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 5.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 3.206), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 6.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.237 ±(99.9%) 197.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.237, 119.294), stdev = 51.232
[info]   CI (99.9%): [≈ 0, 228.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.200, 7.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:42:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33381.440 ops/s
[info] # Warmup Iteration   2: 65486.810 ops/s
[info] # Warmup Iteration   3: 63932.166 ops/s
[info] # Warmup Iteration   4: 66438.118 ops/s
[info] # Warmup Iteration   5: 66444.574 ops/s
[info] Iteration   1: 66592.266 ops/s
[info]                  ·gc.alloc.rate:               754.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          17842.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15854.595 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 66433.780 ops/s
[info]                  ·gc.alloc.rate:               759.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          17987.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15908.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 66626.034 ops/s
[info]                  ·gc.alloc.rate:               760.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          17963.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15862.242 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 66170.637 ops/s
[info]                  ·gc.alloc.rate:               752.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          17901.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15978.980 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 66248.578 ops/s
[info]                  ·gc.alloc.rate:                   769.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              18276.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31927.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.989 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   66414.259 ±(99.9%) 779.025 ops/s [Average]
[info]   (min, avg, max) = (66170.637, 66414.259, 66626.034), stdev = 202.310
[info]   CI (99.9%): [65635.234, 67193.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   759.373 ±(99.9%) 24.920 MB/sec [Average]
[info]   (min, avg, max) = (752.669, 759.373, 769.488), stdev = 6.472
[info]   CI (99.9%): [734.453, 784.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17994.309 ±(99.9%) 645.584 B/op [Average]
[info]   (min, avg, max) = (17842.915, 17994.309, 18276.930), stdev = 167.656
[info]   CI (99.9%): [17348.725, 18639.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.983 ±(99.9%) 1158.530 MB/sec [Average]
[info]   (min, avg, max) = (670.862, 805.983, 1344.190), stdev = 300.867
[info]   CI (99.9%): [≈ 0, 1964.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19106.285 ±(99.9%) 27598.833 B/op [Average]
[info]   (min, avg, max) = (15854.595, 19106.285, 31927.288), stdev = 7167.329
[info]   CI (99.9%): [≈ 0, 46705.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.198 ±(99.9%) 1.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.198, 0.989), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 1.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2375.818 ops/s
[info] # Warmup Iteration   2: 28901.938 ops/s
[info] # Warmup Iteration   3: 32941.015 ops/s
[info] # Warmup Iteration   4: 32516.115 ops/s
[info] # Warmup Iteration   5: 32431.578 ops/s
[info] Iteration   1: 33050.608 ops/s
[info]                  ·gc.alloc.rate:                   2176.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              103653.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95721.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.635 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33115.922 ops/s
[info]                  ·gc.alloc.rate:                   2181.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              103671.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95704.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33195.770 ops/s
[info]                  ·gc.alloc.rate:                   2173.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              103044.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95569.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.987 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33060.455 ops/s
[info]                  ·gc.alloc.rate:               2205.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          104985.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128245.618 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 33318.666 ops/s
[info]                  ·gc.alloc.rate:               2208.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          104319.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95625.449 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   33148.284 ±(99.9%) 428.733 ops/s [Average]
[info]   (min, avg, max) = (33050.608, 33148.284, 33318.666), stdev = 111.341
[info]   CI (99.9%): [32719.551, 33577.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2189.172 ±(99.9%) 63.946 MB/sec [Average]
[info]   (min, avg, max) = (2173.751, 2189.172, 2208.847), stdev = 16.607
[info]   CI (99.9%): [2125.226, 2253.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   103934.838 ±(99.9%) 2850.870 B/op [Average]
[info]   (min, avg, max) = (103044.789, 103934.838, 104985.613), stdev = 740.362
[info]   CI (99.9%): [101083.967, 106785.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2151.698 ±(99.9%) 1167.261 MB/sec [Average]
[info]   (min, avg, max) = (2010.064, 2151.698, 2693.874), stdev = 303.134
[info]   CI (99.9%): [984.437, 3318.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   102173.364 ±(99.9%) 56122.992 B/op [Average]
[info]   (min, avg, max) = (95569.139, 102173.364, 128245.618), stdev = 14574.963
[info]   CI (99.9%): [46050.372, 158296.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.225 ±(99.9%) 1.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 0.874), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.701 ±(99.9%) 68.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.701, 41.635), stdev = 17.891
[info]   CI (99.9%): [≈ 0, 79.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11101.290 ops/s
[info] # Warmup Iteration   2: 26423.066 ops/s
[info] # Warmup Iteration   3: 27353.814 ops/s
[info] # Warmup Iteration   4: 27371.854 ops/s
[info] # Warmup Iteration   5: 27373.979 ops/s
[info] Iteration   1: 27409.603 ops/s
[info]                  ·gc.alloc.rate:                   1772.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              101766.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115288.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 27530.657 ops/s
[info]                  ·gc.alloc.rate:                   1767.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              101031.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76584.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27629.136 ops/s
[info]                  ·gc.alloc.rate:                   1782.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              101493.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114138.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.186 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27592.442 ops/s
[info]                  ·gc.alloc.rate:                   1769.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              100901.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114216.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27697.854 ops/s
[info]                  ·gc.alloc.rate:               1776.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          100901.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75852.662 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27571.938 ±(99.9%) 420.072 ops/s [Average]
[info]   (min, avg, max) = (27409.603, 27571.938, 27697.854), stdev = 109.091
[info]   CI (99.9%): [27151.866, 27992.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1773.429 ±(99.9%) 23.479 MB/sec [Average]
[info]   (min, avg, max) = (1767.230, 1773.429, 1782.509), stdev = 6.097
[info]   CI (99.9%): [1749.950, 1796.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101218.951 ±(99.9%) 1505.078 B/op [Average]
[info]   (min, avg, max) = (100901.571, 101218.951, 101766.434), stdev = 390.864
[info]   CI (99.9%): [99713.873, 102724.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.925 ±(99.9%) 1407.959 MB/sec [Average]
[info]   (min, avg, max) = (1335.176, 1737.925, 2007.791), stdev = 365.642
[info]   CI (99.9%): [329.966, 3145.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99216.228 ±(99.9%) 80864.494 B/op [Average]
[info]   (min, avg, max) = (75852.662, 99216.228, 115288.661), stdev = 21000.252
[info]   CI (99.9%): [18351.734, 180080.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.976), stdev = 1.769
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.414 ±(99.9%) 389.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.414, 227.308), stdev = 101.126
[info]   CI (99.9%): [≈ 0, 435.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17413.894 ops/s
[info] # Warmup Iteration   2: 33019.750 ops/s
[info] # Warmup Iteration   3: 34174.126 ops/s
[info] # Warmup Iteration   4: 33761.773 ops/s
[info] # Warmup Iteration   5: 34535.966 ops/s
[info] Iteration   1: 34566.206 ops/s
[info]                  ·gc.alloc.rate:               1545.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          70345.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61267.023 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 34295.711 ops/s
[info]                  ·gc.alloc.rate:                   1544.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              70885.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92715.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 34610.944 ops/s
[info]                  ·gc.alloc.rate:                   1556.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              70769.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61187.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34533.301 ops/s
[info]                  ·gc.alloc.rate:                   1554.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              70828.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61234.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34673.784 ops/s
[info]                  ·gc.alloc.rate:               1572.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          71344.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91272.382 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34535.989 ±(99.9%) 555.546 ops/s [Average]
[info]   (min, avg, max) = (34295.711, 34535.989, 34673.784), stdev = 144.273
[info]   CI (99.9%): [33980.443, 35091.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1554.741 ±(99.9%) 43.547 MB/sec [Average]
[info]   (min, avg, max) = (1544.786, 1554.741, 1572.770), stdev = 11.309
[info]   CI (99.9%): [1511.194, 1598.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   70834.583 ±(99.9%) 1369.006 B/op [Average]
[info]   (min, avg, max) = (70345.698, 70834.583, 71344.163), stdev = 355.527
[info]   CI (99.9%): [69465.576, 72203.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.609 ±(99.9%) 1415.585 MB/sec [Average]
[info]   (min, avg, max) = (1343.756, 1613.609, 2020.526), stdev = 367.623
[info]   CI (99.9%): [198.024, 3029.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   73535.376 ±(99.9%) 64914.491 B/op [Average]
[info]   (min, avg, max) = (61187.380, 73535.376, 92715.614), stdev = 16858.087
[info]   CI (99.9%): [8620.885, 138449.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 3.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 2.207), stdev = 0.970
[info]   CI (99.9%): [≈ 0, 4.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.719 ±(99.9%) 171.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.719, 101.260), stdev = 44.457
[info]   CI (99.9%): [≈ 0, 200.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18649.922 ops/s
[info] # Warmup Iteration   2: 33326.993 ops/s
[info] # Warmup Iteration   3: 32374.677 ops/s
[info] # Warmup Iteration   4: 34566.962 ops/s
[info] # Warmup Iteration   5: 34932.584 ops/s
[info] Iteration   1: 34859.555 ops/s
[info]                  ·gc.alloc.rate:               1498.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          67616.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60752.145 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 34858.018 ops/s
[info]                  ·gc.alloc.rate:                   1494.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              67460.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60815.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34848.766 ops/s
[info]                  ·gc.alloc.rate:                   1506.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              68013.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60833.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34897.202 ops/s
[info]                  ·gc.alloc.rate:                   1523.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              68693.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90908.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.144 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34986.500 ops/s
[info]                  ·gc.alloc.rate:                   1509.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              67910.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60408.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   34890.008 ±(99.9%) 219.640 ops/s [Average]
[info]   (min, avg, max) = (34848.766, 34890.008, 34986.500), stdev = 57.040
[info]   CI (99.9%): [34670.369, 35109.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1506.252 ±(99.9%) 43.491 MB/sec [Average]
[info]   (min, avg, max) = (1494.093, 1506.252, 1523.156), stdev = 11.295
[info]   CI (99.9%): [1462.760, 1549.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   67938.919 ±(99.9%) 1834.549 B/op [Average]
[info]   (min, avg, max) = (67460.407, 67938.919, 68693.047), stdev = 476.427
[info]   CI (99.9%): [66104.370, 69773.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1479.761 ±(99.9%) 1153.785 MB/sec [Average]
[info]   (min, avg, max) = (1342.890, 1479.761, 2015.755), stdev = 299.634
[info]   CI (99.9%): [325.976, 2633.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   66743.665 ±(99.9%) 52021.581 B/op [Average]
[info]   (min, avg, max) = (60408.333, 66743.665, 90908.832), stdev = 13509.839
[info]   CI (99.9%): [14722.084, 118765.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 4.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 2.727), stdev = 1.163
[info]   CI (99.9%): [≈ 0, 5.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   29.884 ±(99.9%) 202.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.884, 123.163), stdev = 52.502
[info]   CI (99.9%): [≈ 0, 232.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66060.672 ops/s
[info] # Warmup Iteration   2: 316519.649 ops/s
[info] # Warmup Iteration   3: 326395.980 ops/s
[info] # Warmup Iteration   4: 336256.380 ops/s
[info] # Warmup Iteration   5: 336225.468 ops/s
[info] Iteration   1: 333864.208 ops/s
[info]                  ·gc.alloc.rate:               1869.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          8813.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6330.759 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 338649.731 ops/s
[info]                  ·gc.alloc.rate:                   1923.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              8940.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9358.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 337596.331 ops/s
[info]                  ·gc.alloc.rate:                   1931.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              9002.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9366.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 338461.543 ops/s
[info]                  ·gc.alloc.rate:               1909.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          8877.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9333.273 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 340234.414 ops/s
[info]                  ·gc.alloc.rate:               1919.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          8876.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6195.211 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   337761.245 ±(99.9%) 9154.999 ops/s [Average]
[info]   (min, avg, max) = (333864.208, 337761.245, 340234.414), stdev = 2377.524
[info]   CI (99.9%): [328606.246, 346916.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1910.671 ±(99.9%) 93.868 MB/sec [Average]
[info]   (min, avg, max) = (1869.413, 1910.671, 1931.112), stdev = 24.377
[info]   CI (99.9%): [1816.803, 2004.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8902.106 ±(99.9%) 277.077 B/op [Average]
[info]   (min, avg, max) = (8813.191, 8902.106, 9002.415), stdev = 71.956
[info]   CI (99.9%): [8625.029, 9179.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.582 ±(99.9%) 1410.605 MB/sec [Average]
[info]   (min, avg, max) = (1339.745, 1742.582, 2013.804), stdev = 366.330
[info]   CI (99.9%): [331.977, 3153.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8116.832 ±(99.9%) 6519.315 B/op [Average]
[info]   (min, avg, max) = (6195.211, 8116.832, 9366.389), stdev = 1693.045
[info]   CI (99.9%): [1597.517, 14636.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.664), stdev = 1.636
[info]   CI (99.9%): [≈ 0, 7.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.425 ±(99.9%) 29.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.425, 17.027), stdev = 7.604
[info]   CI (99.9%): [≈ 0, 32.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.710 ops/s
[info] # Warmup Iteration   2: 1419305.785 ops/s
[info] # Warmup Iteration   3: 1509451.740 ops/s
[info] # Warmup Iteration   4: 1527848.950 ops/s
[info] # Warmup Iteration   5: 1528723.760 ops/s
[info] Iteration   1: 1528635.224 ops/s
[info]                  ·gc.alloc.rate:                   503.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              518.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     685.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1540729.182 ops/s
[info]                  ·gc.alloc.rate:      485.644 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1531776.211 ops/s
[info]                  ·gc.alloc.rate:               499.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          513.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 684.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1528644.092 ops/s
[info]                  ·gc.alloc.rate:               500.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          515.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 686.209 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1534753.665 ops/s
[info]                  ·gc.alloc.rate:      483.685 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1532907.675 ±(99.9%) 19472.978 ops/s [Average]
[info]   (min, avg, max) = (1528635.224, 1532907.675, 1540729.182), stdev = 5057.070
[info]   CI (99.9%): [1513434.697, 1552380.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   494.650 ±(99.9%) 35.627 MB/sec [Average]
[info]   (min, avg, max) = (483.685, 494.650, 503.624), stdev = 9.252
[info]   CI (99.9%): [459.023, 530.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   507.877 ±(99.9%) 42.289 B/op [Average]
[info]   (min, avg, max) = (496.000, 507.877, 518.528), stdev = 10.982
[info]   CI (99.9%): [465.588, 550.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.749 ±(99.9%) 1405.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.749, 666.478), stdev = 364.919
[info]   CI (99.9%): [≈ 0, 1804.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   411.301 ±(99.9%) 1445.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 411.301, 686.209), stdev = 375.465
[info]   CI (99.9%): [≈ 0, 1857.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203780.880 ops/s
[info] # Warmup Iteration   2: 602314.863 ops/s
[info] # Warmup Iteration   3: 678115.639 ops/s
[info] # Warmup Iteration   4: 678750.281 ops/s
[info] # Warmup Iteration   5: 669693.405 ops/s
[info] Iteration   1: 678636.850 ops/s
[info]                  ·gc.alloc.rate:               536.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          1243.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1186.497 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 681598.172 ops/s
[info]                  ·gc.alloc.rate:               550.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          1271.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1537.416 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 680735.796 ops/s
[info]                  ·gc.alloc.rate:                   545.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              1260.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1539.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 675839.662 ops/s
[info]                  ·gc.alloc.rate:               535.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          1246.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1552.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 681666.077 ops/s
[info]                  ·gc.alloc.rate:      526.652 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   679695.311 ±(99.9%) 9544.196 ops/s [Average]
[info]   (min, avg, max) = (675839.662, 679695.311, 681666.077), stdev = 2478.597
[info]   CI (99.9%): [670151.115, 689239.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   538.910 ±(99.9%) 35.948 MB/sec [Average]
[info]   (min, avg, max) = (526.652, 538.910, 550.768), stdev = 9.336
[info]   CI (99.9%): [502.961, 574.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1247.772 ±(99.9%) 80.738 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1247.772, 1271.641), stdev = 20.967
[info]   CI (99.9%): [1167.034, 1328.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   501.990 ±(99.9%) 1110.784 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.990, 666.488), stdev = 288.467
[info]   CI (99.9%): [≈ 0, 1612.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1163.071 ±(99.9%) 2573.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1163.071, 1552.075), stdev = 668.270
[info]   CI (99.9%): [≈ 0, 3736.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1025195.206 ops/s
[info] # Warmup Iteration   2: 1793916.643 ops/s
[info] # Warmup Iteration   3: 1879456.525 ops/s
[info] # Warmup Iteration   4: 1883424.081 ops/s
[info] # Warmup Iteration   5: 1879499.394 ops/s
[info] Iteration   1: 1881680.322 ops/s
[info]                  ·gc.alloc.rate:                   380.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              317.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     427.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1882416.535 ops/s
[info]                  ·gc.alloc.rate:               377.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 427.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1888845.511 ops/s
[info]                  ·gc.alloc.rate:      364.854 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1875757.848 ops/s
[info]                  ·gc.alloc.rate:                   379.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     562.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1887367.557 ops/s
[info]                  ·gc.alloc.rate:      364.984 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.357 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1883213.555 ±(99.9%) 19966.645 ops/s [Average]
[info]   (min, avg, max) = (1875757.848, 1883213.555, 1888845.511), stdev = 5185.274
[info]   CI (99.9%): [1863246.910, 1903180.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   373.416 ±(99.9%) 30.120 MB/sec [Average]
[info]   (min, avg, max) = (364.854, 373.416, 380.029), stdev = 7.822
[info]   CI (99.9%): [343.296, 403.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.066 ±(99.9%) 28.059 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.066, 318.661), stdev = 7.287
[info]   CI (99.9%): [284.007, 340.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.769 ±(99.9%) 1216.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.769, 670.443), stdev = 315.970
[info]   CI (99.9%): [≈ 0, 1555.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   283.642 ±(99.9%) 1019.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 283.642, 562.559), stdev = 264.707
[info]   CI (99.9%): [≈ 0, 1302.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12705.274 ops/s
[info] # Warmup Iteration   2: 86363.659 ops/s
[info] # Warmup Iteration   3: 100033.597 ops/s
[info] # Warmup Iteration   4: 100621.546 ops/s
[info] # Warmup Iteration   5: 99891.631 ops/s
[info] Iteration   1: 102328.565 ops/s
[info]                  ·gc.alloc.rate:               3421.973 MB/sec
[info]                  ·gc.alloc.rate.norm:          52631.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3335.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51294.612 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 102322.605 ops/s
[info]                  ·gc.alloc.rate:                   3450.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              53068.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51436.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 102245.793 ops/s
[info]                  ·gc.alloc.rate:               3454.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          53158.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3358.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51693.616 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 102203.181 ops/s
[info]                  ·gc.alloc.rate:               3443.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          53013.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51912.293 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 102292.390 ops/s
[info]                  ·gc.alloc.rate:               3451.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          53087.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3382.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52032.140 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   102278.507 ±(99.9%) 205.455 ops/s [Average]
[info]   (min, avg, max) = (102203.181, 102278.507, 102328.565), stdev = 53.356
[info]   CI (99.9%): [102073.052, 102483.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3444.140 ±(99.9%) 50.179 MB/sec [Average]
[info]   (min, avg, max) = (3421.973, 3444.140, 3454.063), stdev = 13.031
[info]   CI (99.9%): [3393.962, 3494.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52991.861 ±(99.9%) 800.736 B/op [Average]
[info]   (min, avg, max) = (52631.633, 52991.861, 53158.480), stdev = 207.949
[info]   CI (99.9%): [52191.125, 53792.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3358.475 ±(99.9%) 74.752 MB/sec [Average]
[info]   (min, avg, max) = (3335.044, 3358.475, 3382.621), stdev = 19.413
[info]   CI (99.9%): [3283.723, 3433.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51673.841 ±(99.9%) 1195.800 B/op [Average]
[info]   (min, avg, max) = (51294.612, 51673.841, 52032.140), stdev = 310.546
[info]   CI (99.9%): [50478.040, 52869.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.320), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113800.613 ops/s
[info] # Warmup Iteration   2: 346455.095 ops/s
[info] # Warmup Iteration   3: 365434.731 ops/s
[info] # Warmup Iteration   4: 369862.021 ops/s
[info] # Warmup Iteration   5: 369621.479 ops/s
[info] Iteration   1: 369756.933 ops/s
[info]                  ·gc.alloc.rate:               1273.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          5418.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5707.952 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 367460.410 ops/s
[info]                  ·gc.alloc.rate:               1274.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          5457.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5746.560 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 368547.883 ops/s
[info]                  ·gc.alloc.rate:                   1275.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              5447.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5735.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 360797.700 ops/s
[info]                  ·gc.alloc.rate:                   1238.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              5397.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2929.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.349 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 369201.644 ops/s
[info]                  ·gc.alloc.rate:                   1281.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              5460.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5719.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   367152.914 ±(99.9%) 14070.330 ops/s [Average]
[info]   (min, avg, max) = (360797.700, 367152.914, 369756.933), stdev = 3654.020
[info]   CI (99.9%): [353082.584, 381223.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1268.468 ±(99.9%) 66.631 MB/sec [Average]
[info]   (min, avg, max) = (1238.016, 1268.468, 1281.268), stdev = 17.304
[info]   CI (99.9%): [1201.836, 1335.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5436.288 ±(99.9%) 104.171 B/op [Average]
[info]   (min, avg, max) = (5397.968, 5436.288, 5460.562), stdev = 27.053
[info]   CI (99.9%): [5332.117, 5540.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.984 ±(99.9%) 1154.150 MB/sec [Average]
[info]   (min, avg, max) = (671.814, 1207.984, 1343.089), stdev = 299.729
[info]   CI (99.9%): [53.834, 2362.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5167.695 ±(99.9%) 4818.806 B/op [Average]
[info]   (min, avg, max) = (2929.227, 5167.695, 5746.560), stdev = 1251.429
[info]   CI (99.9%): [348.889, 9986.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.062), stdev = 1.328
[info]   CI (99.9%): [≈ 0, 5.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.078 ±(99.9%) 22.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.078, 13.349), stdev = 5.795
[info]   CI (99.9%): [≈ 0, 25.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.839 ops/s
[info] # Warmup Iteration   2: 1490630.717 ops/s
[info] # Warmup Iteration   3: 1546798.068 ops/s
[info] # Warmup Iteration   4: 1556200.111 ops/s
[info] # Warmup Iteration   5: 1560348.168 ops/s
[info] Iteration   1: 1566539.603 ops/s
[info]                  ·gc.alloc.rate:                   749.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     669.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1561720.062 ops/s
[info]                  ·gc.alloc.rate:               739.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 671.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1564027.326 ops/s
[info]                  ·gc.alloc.rate:                   746.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     670.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1557976.376 ops/s
[info]                  ·gc.alloc.rate:                   755.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              762.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1348.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1556907.099 ops/s
[info]                  ·gc.alloc.rate:                   734.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     675.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1561434.093 ±(99.9%) 15560.885 ops/s [Average]
[info]   (min, avg, max) = (1556907.099, 1561434.093, 1566539.603), stdev = 4041.112
[info]   CI (99.9%): [1545873.208, 1576994.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   744.986 ±(99.9%) 31.512 MB/sec [Average]
[info]   (min, avg, max) = (734.601, 744.986, 755.245), stdev = 8.184
[info]   CI (99.9%): [713.474, 776.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   750.795 ±(99.9%) 30.766 B/op [Average]
[info]   (min, avg, max) = (742.233, 750.795, 762.765), stdev = 7.990
[info]   CI (99.9%): [720.029, 781.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.709 ±(99.9%) 1150.778 MB/sec [Average]
[info]   (min, avg, max) = (666.477, 800.709, 1335.313), stdev = 298.853
[info]   CI (99.9%): [≈ 0, 1951.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   807.245 ±(99.9%) 1165.350 B/op [Average]
[info]   (min, avg, max) = (669.583, 807.245, 1348.608), stdev = 302.638
[info]   CI (99.9%): [≈ 0, 1972.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461547.087 ops/s
[info] # Warmup Iteration   2: 993060.165 ops/s
[info] # Warmup Iteration   3: 1003572.869 ops/s
[info] # Warmup Iteration   4: 1008319.682 ops/s
[info] # Warmup Iteration   5: 1025908.501 ops/s
[info] Iteration   1: 1006898.615 ops/s
[info]                  ·gc.alloc.rate:                   726.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              1135.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1043.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1012406.147 ops/s
[info]                  ·gc.alloc.rate:               738.888 MB/sec
[info]                  ·gc.alloc.rate.norm:          1148.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1038.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1006538.949 ops/s
[info]                  ·gc.alloc.rate:               731.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          1143.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1044.694 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1028380.363 ops/s
[info]                  ·gc.alloc.rate:                   743.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1137.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1023.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1043355.933 ops/s
[info]                  ·gc.alloc.rate:               752.277 MB/sec
[info]                  ·gc.alloc.rate.norm:          1134.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1008.864 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1019516.001 ±(99.9%) 61642.531 ops/s [Average]
[info]   (min, avg, max) = (1006538.949, 1019516.001, 1043355.933), stdev = 16008.370
[info]   CI (99.9%): [957873.470, 1081158.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   738.374 ±(99.9%) 39.321 MB/sec [Average]
[info]   (min, avg, max) = (726.209, 738.374, 752.277), stdev = 10.212
[info]   CI (99.9%): [699.053, 777.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1139.780 ±(99.9%) 22.291 B/op [Average]
[info]   (min, avg, max) = (1134.811, 1139.780, 1148.143), stdev = 5.789
[info]   CI (99.9%): [1117.489, 1162.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.343 ±(99.9%) 2.045 MB/sec [Average]
[info]   (min, avg, max) = (667.524, 668.343, 668.792), stdev = 0.531
[info]   CI (99.9%): [666.298, 670.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1031.838 ±(99.9%) 59.099 B/op [Average]
[info]   (min, avg, max) = (1008.864, 1031.838, 1044.694), stdev = 15.348
[info]   CI (99.9%): [972.739, 1090.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.033), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1517800.241 ops/s
[info] # Warmup Iteration   2: 2693395.859 ops/s
[info] # Warmup Iteration   3: 2787235.845 ops/s
[info] # Warmup Iteration   4: 2779272.264 ops/s
[info] # Warmup Iteration   5: 2726030.005 ops/s
[info] Iteration   1: 2798316.301 ops/s
[info]                  ·gc.alloc.rate:               1324.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 753.088 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2795690.196 ops/s
[info]                  ·gc.alloc.rate:                   1333.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     754.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2797294.695 ops/s
[info]                  ·gc.alloc.rate:               1334.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 754.475 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2804920.896 ops/s
[info]                  ·gc.alloc.rate:               1333.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 753.178 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2743322.991 ops/s
[info]                  ·gc.alloc.rate:               1309.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 771.024 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2787909.016 ±(99.9%) 96923.603 ops/s [Average]
[info]   (min, avg, max) = (2743322.991, 2787909.016, 2804920.896), stdev = 25170.752
[info]   CI (99.9%): [2690985.413, 2884832.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1327.205 ±(99.9%) 41.754 MB/sec [Average]
[info]   (min, avg, max) = (1309.442, 1327.205, 1334.961), stdev = 10.843
[info]   CI (99.9%): [1285.450, 1368.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.181 ±(99.9%) 10.620 B/op [Average]
[info]   (min, avg, max) = (744.726, 749.181, 751.153), stdev = 2.758
[info]   CI (99.9%): [738.561, 759.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1341.307 ±(99.9%) 8.074 MB/sec [Average]
[info]   (min, avg, max) = (1339.022, 1341.307, 1344.081), stdev = 2.097
[info]   CI (99.9%): [1333.233, 1349.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   757.188 ±(99.9%) 29.874 B/op [Average]
[info]   (min, avg, max) = (753.088, 757.188, 771.024), stdev = 7.758
[info]   CI (99.9%): [727.315, 787.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1929699.649 ops/s
[info] # Warmup Iteration   2: 3211359.760 ops/s
[info] # Warmup Iteration   3: 3251565.097 ops/s
[info] # Warmup Iteration   4: 3249854.519 ops/s
[info] # Warmup Iteration   5: 3256304.974 ops/s
[info] Iteration   1: 3264920.663 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3229827.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3262768.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3266077.136 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3266974.336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3258113.600 ±(99.9%) 61188.494 ops/s [Average]
[info]   (min, avg, max) = (3229827.657, 3258113.600, 3266974.336), stdev = 15890.458
[info]   CI (99.9%): [3196925.106, 3319302.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138736.194 ops/s
[info] # Warmup Iteration   2: 568503.874 ops/s
[info] # Warmup Iteration   3: 587561.924 ops/s
[info] # Warmup Iteration   4: 586795.005 ops/s
[info] # Warmup Iteration   5: 582941.158 ops/s
[info] Iteration   1: 582641.020 ops/s
[info]                  ·gc.alloc.rate:               670.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          1811.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1804.828 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 582658.825 ops/s
[info]                  ·gc.alloc.rate:               682.963 MB/sec
[info]                  ·gc.alloc.rate.norm:          1844.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1804.778 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 589026.853 ops/s
[info]                  ·gc.alloc.rate:                   675.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              1803.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1787.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 589001.502 ops/s
[info]                  ·gc.alloc.rate:               682.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          1823.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1788.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 588853.935 ops/s
[info]                  ·gc.alloc.rate:               679.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          1815.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1789.288 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   586436.427 ±(99.9%) 13312.548 ops/s [Average]
[info]   (min, avg, max) = (582641.020, 586436.427, 589026.853), stdev = 3457.226
[info]   CI (99.9%): [573123.879, 599748.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   678.050 ±(99.9%) 20.256 MB/sec [Average]
[info]   (min, avg, max) = (670.463, 678.050, 682.963), stdev = 5.260
[info]   CI (99.9%): [657.794, 698.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1819.771 ±(99.9%) 60.439 B/op [Average]
[info]   (min, avg, max) = (1803.817, 1819.771, 1844.817), stdev = 15.696
[info]   CI (99.9%): [1759.332, 1880.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.803 ±(99.9%) 2.397 MB/sec [Average]
[info]   (min, avg, max) = (668.131, 668.803, 669.459), stdev = 0.623
[info]   CI (99.9%): [666.405, 671.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1794.961 ±(99.9%) 34.659 B/op [Average]
[info]   (min, avg, max) = (1787.884, 1794.961, 1804.828), stdev = 9.001
[info]   CI (99.9%): [1760.302, 1829.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48824.340 ops/s
[info] # Warmup Iteration   2: 144583.221 ops/s
[info] # Warmup Iteration   3: 156607.163 ops/s
[info] # Warmup Iteration   4: 160660.428 ops/s
[info] # Warmup Iteration   5: 159948.405 ops/s
[info] Iteration   1: 160920.327 ops/s
[info]                  ·gc.alloc.rate:                   2027.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              19815.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19683.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.748 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 162365.751 ops/s
[info]                  ·gc.alloc.rate:                   2029.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              19674.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13005.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 161674.707 ops/s
[info]                  ·gc.alloc.rate:                   2047.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              19927.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19551.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 159230.250 ops/s
[info]                  ·gc.alloc.rate:                   2011.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              19882.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19851.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 161744.097 ops/s
[info]                  ·gc.alloc.rate:               2063.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          20075.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19568.959 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   161187.026 ±(99.9%) 4651.816 ops/s [Average]
[info]   (min, avg, max) = (159230.250, 161187.026, 162365.751), stdev = 1208.062
[info]   CI (99.9%): [156535.210, 165838.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2035.823 ±(99.9%) 76.198 MB/sec [Average]
[info]   (min, avg, max) = (2011.565, 2035.823, 2063.125), stdev = 19.788
[info]   CI (99.9%): [1959.625, 2112.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19875.115 ±(99.9%) 567.287 B/op [Average]
[info]   (min, avg, max) = (19674.288, 19875.115, 20075.455), stdev = 147.323
[info]   CI (99.9%): [19307.829, 20442.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1876.755 ±(99.9%) 1151.681 MB/sec [Average]
[info]   (min, avg, max) = (1341.745, 1876.755, 2013.989), stdev = 299.088
[info]   CI (99.9%): [725.074, 3028.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18332.250 ±(99.9%) 11476.179 B/op [Average]
[info]   (min, avg, max) = (13005.173, 18332.250, 19851.787), stdev = 2980.327
[info]   CI (99.9%): [6856.071, 29808.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.836 ±(99.9%) 5.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.836, 3.555), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.174 ±(99.9%) 57.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.174, 34.748), stdev = 14.929
[info]   CI (99.9%): [≈ 0, 65.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124214.396 ops/s
[info] # Warmup Iteration   2: 410706.239 ops/s
[info] # Warmup Iteration   3: 454335.021 ops/s
[info] # Warmup Iteration   4: 456765.483 ops/s
[info] # Warmup Iteration   5: 454024.608 ops/s
[info] Iteration   1: 451704.388 ops/s
[info]                  ·gc.alloc.rate:               376.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          1312.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1782.523 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 453166.831 ops/s
[info]                  ·gc.alloc.rate:               382.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          1328.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1776.746 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 456068.129 ops/s
[info]                  ·gc.alloc.rate:      366.549 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.441 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 454846.026 ops/s
[info]                  ·gc.alloc.rate:                   385.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              1332.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2306.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 457001.874 ops/s
[info]                  ·gc.alloc.rate:      367.025 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   454557.450 ±(99.9%) 8261.946 ops/s [Average]
[info]   (min, avg, max) = (451704.388, 454557.450, 457001.874), stdev = 2145.601
[info]   CI (99.9%): [446295.504, 462819.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   375.576 ±(99.9%) 33.050 MB/sec [Average]
[info]   (min, avg, max) = (366.549, 375.576, 385.174), stdev = 8.583
[info]   CI (99.9%): [342.526, 408.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1300.309 ±(99.9%) 130.052 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1300.309, 1332.575), stdev = 33.774
[info]   CI (99.9%): [1170.257, 1430.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   337.965 ±(99.9%) 1212.711 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.965, 666.576), stdev = 314.937
[info]   CI (99.9%): [≈ 0, 1550.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1173.081 ±(99.9%) 4205.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1173.081, 2306.136), stdev = 1092.232
[info]   CI (99.9%): [≈ 0, 5378.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 708182.845 ops/s
[info] # Warmup Iteration   2: 1230269.767 ops/s
[info] # Warmup Iteration   3: 1249077.528 ops/s
[info] # Warmup Iteration   4: 1258699.002 ops/s
[info] # Warmup Iteration   5: 1262935.110 ops/s
[info] Iteration   1: 1258096.763 ops/s
[info]                  ·gc.alloc.rate:               258.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 640.035 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1262640.380 ops/s
[info]                  ·gc.alloc.rate:      243.924 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1254724.129 ops/s
[info]                  ·gc.alloc.rate:               253.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          318.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 641.762 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1260594.507 ops/s
[info]                  ·gc.alloc.rate:      243.503 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1255274.170 ops/s
[info]                  ·gc.alloc.rate:               258.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 641.464 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1258265.990 ±(99.9%) 13069.758 ops/s [Average]
[info]   (min, avg, max) = (1254724.129, 1258265.990, 1262640.380), stdev = 3394.175
[info]   CI (99.9%): [1245196.232, 1271335.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   251.668 ±(99.9%) 28.906 MB/sec [Average]
[info]   (min, avg, max) = (243.503, 251.668, 258.916), stdev = 7.507
[info]   CI (99.9%): [222.762, 280.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   314.778 ±(99.9%) 38.851 B/op [Average]
[info]   (min, avg, max) = (304.000, 314.778, 324.624), stdev = 10.089
[info]   CI (99.9%): [275.928, 353.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.004 ±(99.9%) 1079.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.004, 511.735), stdev = 280.255
[info]   CI (99.9%): [≈ 0, 1386.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   384.652 ±(99.9%) 1352.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 384.652, 641.762), stdev = 351.138
[info]   CI (99.9%): [≈ 0, 1736.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11552.186 ops/s
[info] # Warmup Iteration   2: 74912.086 ops/s
[info] # Warmup Iteration   3: 84409.369 ops/s
[info] # Warmup Iteration   4: 86151.122 ops/s
[info] # Warmup Iteration   5: 87113.787 ops/s
[info] Iteration   1: 86929.101 ops/s
[info]                  ·gc.alloc.rate:                   3471.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              62848.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3336.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60394.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.131 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 87788.862 ops/s
[info]                  ·gc.alloc.rate:                   3526.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              63205.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59972.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 87560.924 ops/s
[info]                  ·gc.alloc.rate:                   3545.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              63712.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4031.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72441.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.122 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 86758.294 ops/s
[info]                  ·gc.alloc.rate:               3476.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          63026.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3370.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61107.219 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 87805.075 ops/s
[info]                  ·gc.alloc.rate:               3529.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          63250.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60650.221 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   87368.451 ±(99.9%) 1895.980 ops/s [Average]
[info]   (min, avg, max) = (86758.294, 87368.451, 87805.075), stdev = 492.380
[info]   CI (99.9%): [85472.471, 89264.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3509.728 ±(99.9%) 129.078 MB/sec [Average]
[info]   (min, avg, max) = (3471.660, 3509.728, 3545.482), stdev = 33.521
[info]   CI (99.9%): [3380.650, 3638.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63208.594 ±(99.9%) 1245.052 B/op [Average]
[info]   (min, avg, max) = (62848.953, 63208.594, 63712.353), stdev = 323.336
[info]   CI (99.9%): [61963.542, 64453.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3493.509 ±(99.9%) 1159.878 MB/sec [Average]
[info]   (min, avg, max) = (3336.072, 3493.509, 4031.263), stdev = 301.217
[info]   CI (99.9%): [2333.631, 4653.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62913.132 ±(99.9%) 20572.396 B/op [Average]
[info]   (min, avg, max) = (59972.031, 62913.132, 72441.848), stdev = 5342.586
[info]   CI (99.9%): [42340.736, 83485.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.525 ±(99.9%) 2.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.525, 1.131), stdev = 0.570
[info]   CI (99.9%): [≈ 0, 2.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94697.029 ops/s
[info] # Warmup Iteration   2: 282093.545 ops/s
[info] # Warmup Iteration   3: 302466.882 ops/s
[info] # Warmup Iteration   4: 304961.253 ops/s
[info] # Warmup Iteration   5: 303880.637 ops/s
[info] Iteration   1: 305614.768 ops/s
[info]                  ·gc.alloc.rate:               1720.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          8857.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6910.917 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 305615.346 ops/s
[info]                  ·gc.alloc.rate:                   1723.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              8875.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10371.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 307509.320 ops/s
[info]                  ·gc.alloc.rate:               1732.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          8865.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6859.499 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 305952.823 ops/s
[info]                  ·gc.alloc.rate:               1739.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          8945.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10327.861 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 306725.496 ops/s
[info]                  ·gc.alloc.rate:               1727.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          8860.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6867.133 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   306283.551 ±(99.9%) 3164.197 ops/s [Average]
[info]   (min, avg, max) = (305614.768, 306283.551, 307509.320), stdev = 821.732
[info]   CI (99.9%): [303119.354, 309447.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1728.591 ±(99.9%) 29.338 MB/sec [Average]
[info]   (min, avg, max) = (1720.337, 1728.591, 1739.644), stdev = 7.619
[info]   CI (99.9%): [1699.252, 1757.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8881.002 ±(99.9%) 140.996 B/op [Average]
[info]   (min, avg, max) = (8857.541, 8881.002, 8945.316), stdev = 36.616
[info]   CI (99.9%): [8740.007, 9021.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.725 ±(99.9%) 1414.930 MB/sec [Average]
[info]   (min, avg, max) = (1338.504, 1608.725, 2013.968), stdev = 367.453
[info]   CI (99.9%): [193.795, 3023.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8267.415 ±(99.9%) 7320.381 B/op [Average]
[info]   (min, avg, max) = (6859.499, 8267.415, 10371.667), stdev = 1901.080
[info]   CI (99.9%): [947.034, 15587.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 6.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.580), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 6.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.688 ±(99.9%) 31.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.688, 18.438), stdev = 8.246
[info]   CI (99.9%): [≈ 0, 35.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 652042.760 ops/s
[info] # Warmup Iteration   2: 1848303.189 ops/s
[info] # Warmup Iteration   3: 1875258.057 ops/s
[info] # Warmup Iteration   4: 1943062.303 ops/s
[info] # Warmup Iteration   5: 1876148.902 ops/s
[info] Iteration   1: 1917817.246 ops/s
[info]                  ·gc.alloc.rate:                   1030.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              845.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1097.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1931360.418 ops/s
[info]                  ·gc.alloc.rate:               1014.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          826.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 545.014 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1931786.915 ops/s
[info]                  ·gc.alloc.rate:                   1022.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              833.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1090.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1909519.178 ops/s
[info]                  ·gc.alloc.rate:               994.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          819.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.793 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1923792.938 ops/s
[info]                  ·gc.alloc.rate:                   1015.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              830.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1095.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1922855.339 ±(99.9%) 36338.334 ops/s [Average]
[info]   (min, avg, max) = (1909519.178, 1922855.339, 1931786.915), stdev = 9436.950
[info]   CI (99.9%): [1886517.005, 1959193.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1015.515 ±(99.9%) 51.922 MB/sec [Average]
[info]   (min, avg, max) = (994.486, 1015.515, 1030.677), stdev = 13.484
[info]   CI (99.9%): [963.593, 1067.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   831.160 ±(99.9%) 36.964 B/op [Average]
[info]   (min, avg, max) = (819.687, 831.160, 845.641), stdev = 9.599
[info]   CI (99.9%): [794.196, 868.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.677 ±(99.9%) 1411.498 MB/sec [Average]
[info]   (min, avg, max) = (668.797, 1070.677, 1339.591), stdev = 366.562
[info]   CI (99.9%): [≈ 0, 2482.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   876.040 ±(99.9%) 1151.768 B/op [Average]
[info]   (min, avg, max) = (545.014, 876.040, 1097.162), stdev = 299.110
[info]   CI (99.9%): [≈ 0, 2027.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1756424.894 ops/s
[info] # Warmup Iteration   2: 2782635.062 ops/s
[info] # Warmup Iteration   3: 2865278.908 ops/s
[info] # Warmup Iteration   4: 2873335.096 ops/s
[info] # Warmup Iteration   5: 2881688.474 ops/s
[info] Iteration   1: 2872028.695 ops/s
[info]                  ·gc.alloc.rate:                   819.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     735.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2882329.589 ops/s
[info]                  ·gc.alloc.rate:               802.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366.662 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2880719.457 ops/s
[info]                  ·gc.alloc.rate:                   790.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2880939.747 ops/s
[info]                  ·gc.alloc.rate:                   790.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              431.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2867629.307 ops/s
[info]                  ·gc.alloc.rate:               792.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369.086 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2876729.359 ±(99.9%) 25097.073 ops/s [Average]
[info]   (min, avg, max) = (2867629.307, 2876729.359, 2882329.589), stdev = 6517.630
[info]   CI (99.9%): [2851632.286, 2901826.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   799.303 ±(99.9%) 48.198 MB/sec [Average]
[info]   (min, avg, max) = (790.286, 799.303, 819.825), stdev = 12.517
[info]   CI (99.9%): [751.105, 847.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   437.237 ±(99.9%) 27.593 B/op [Average]
[info]   (min, avg, max) = (431.751, 437.237, 449.171), stdev = 7.166
[info]   CI (99.9%): [409.644, 464.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.311 ±(99.9%) 1155.038 MB/sec [Average]
[info]   (min, avg, max) = (671.624, 806.311, 1342.895), stdev = 299.960
[info]   CI (99.9%): [≈ 0, 1961.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   441.184 ±(99.9%) 634.095 B/op [Average]
[info]   (min, avg, max) = (366.662, 441.184, 735.755), stdev = 164.672
[info]   CI (99.9%): [≈ 0, 1075.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:36:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1615096.749 ops/s
[info] # Warmup Iteration   2: 3084139.361 ops/s
[info] # Warmup Iteration   3: 3114339.774 ops/s
[info] # Warmup Iteration   4: 3116165.820 ops/s
[info] # Warmup Iteration   5: 3114104.983 ops/s
[info] Iteration   1: 3117623.108 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3116045.377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3115871.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3116703.391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3115515.721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3116351.813 ±(99.9%) 3200.604 ops/s [Average]
[info]   (min, avg, max) = (3115515.721, 3116351.813, 3117623.108), stdev = 831.187
[info]   CI (99.9%): [3113151.208, 3119552.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6625.591 ops/s
[info] # Warmup Iteration   2: 43781.273 ops/s
[info] # Warmup Iteration   3: 46810.479 ops/s
[info] # Warmup Iteration   4: 46237.049 ops/s
[info] # Warmup Iteration   5: 47715.500 ops/s
[info] Iteration   1: 47894.220 ops/s
[info]                  ·gc.alloc.rate:                   2163.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              71075.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66118.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 48032.712 ops/s
[info]                  ·gc.alloc.rate:                   2169.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              71071.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65721.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 48051.654 ops/s
[info]                  ·gc.alloc.rate:                   2156.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              70633.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65653.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 48059.176 ops/s
[info]                  ·gc.alloc.rate:                   2184.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              71523.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65664.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.727 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 47323.383 ops/s
[info]                  ·gc.alloc.rate:               2165.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          71990.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88920.289 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   47872.229 ±(99.9%) 1209.452 ops/s [Average]
[info]   (min, avg, max) = (47323.383, 47872.229, 48059.176), stdev = 314.091
[info]   CI (99.9%): [46662.777, 49081.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2167.811 ±(99.9%) 39.934 MB/sec [Average]
[info]   (min, avg, max) = (2156.551, 2167.811, 2184.438), stdev = 10.371
[info]   CI (99.9%): [2127.877, 2207.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71259.092 ±(99.9%) 1986.476 B/op [Average]
[info]   (min, avg, max) = (70633.696, 71259.092, 71990.531), stdev = 515.881
[info]   CI (99.9%): [69272.616, 73245.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2140.645 ±(99.9%) 1150.717 MB/sec [Average]
[info]   (min, avg, max) = (2004.492, 2140.645, 2675.193), stdev = 298.837
[info]   CI (99.9%): [989.928, 3291.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70415.617 ±(99.9%) 39839.557 B/op [Average]
[info]   (min, avg, max) = (65653.277, 70415.617, 88920.289), stdev = 10346.206
[info]   CI (99.9%): [30576.060, 110255.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 6.553 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 3.893), stdev = 1.702
[info]   CI (99.9%): [≈ 0, 7.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28.039 ±(99.9%) 215.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.039, 127.920), stdev = 55.922
[info]   CI (99.9%): [≈ 0, 243.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59205.426 ops/s
[info] # Warmup Iteration   2: 230126.975 ops/s
[info] # Warmup Iteration   3: 234359.471 ops/s
[info] # Warmup Iteration   4: 244446.741 ops/s
[info] # Warmup Iteration   5: 244031.972 ops/s
[info] Iteration   1: 245409.318 ops/s
[info]                  ·gc.alloc.rate:                   2679.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              17182.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17191.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.534 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 245241.902 ops/s
[info]                  ·gc.alloc.rate:                   2678.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              17188.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17190.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.534 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 245352.106 ops/s
[info]                  ·gc.alloc.rate:               2707.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          17359.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17207.984 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 242213.117 ops/s
[info]                  ·gc.alloc.rate:                   2673.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              17375.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17473.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 244221.616 ops/s
[info]                  ·gc.alloc.rate:               2694.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          17366.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17377.602 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   244487.612 ±(99.9%) 5240.953 ops/s [Average]
[info]   (min, avg, max) = (242213.117, 244487.612, 245409.318), stdev = 1361.059
[info]   CI (99.9%): [239246.658, 249728.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2686.735 ±(99.9%) 53.383 MB/sec [Average]
[info]   (min, avg, max) = (2673.949, 2686.735, 2707.182), stdev = 13.863
[info]   CI (99.9%): [2633.351, 2740.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17294.476 ±(99.9%) 383.296 B/op [Average]
[info]   (min, avg, max) = (17182.905, 17294.476, 17375.170), stdev = 99.541
[info]   CI (99.9%): [16911.180, 17677.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2685.741 ±(99.9%) 27.530 MB/sec [Average]
[info]   (min, avg, max) = (2678.863, 2685.741, 2696.472), stdev = 7.150
[info]   CI (99.9%): [2658.211, 2713.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   17288.377 ±(99.9%) 501.036 B/op [Average]
[info]   (min, avg, max) = (17190.822, 17288.377, 17473.886), stdev = 130.117
[info]   CI (99.9%): [16787.341, 17789.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.268 ±(99.9%) 1.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.268, 0.534), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 9.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93863.153 ops/s
[info] # Warmup Iteration   2: 371985.948 ops/s
[info] # Warmup Iteration   3: 380028.416 ops/s
[info] # Warmup Iteration   4: 383256.425 ops/s
[info] # Warmup Iteration   5: 383896.101 ops/s
[info] Iteration   1: 383621.679 ops/s
[info]                  ·gc.alloc.rate:                   1994.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              8182.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8242.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 385577.293 ops/s
[info]                  ·gc.alloc.rate:                   1990.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              8124.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8189.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.699 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 384232.236 ops/s
[info]                  ·gc.alloc.rate:                   1984.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              8129.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8202.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 387049.631 ops/s
[info]                  ·gc.alloc.rate:               1999.834 MB/sec
[info]                  ·gc.alloc.rate.norm:          8132.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8145.421 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 387080.193 ops/s
[info]                  ·gc.alloc.rate:               2013.609 MB/sec
[info]                  ·gc.alloc.rate.norm:          8187.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8156.599 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   385512.206 ±(99.9%) 6100.236 ops/s [Average]
[info]   (min, avg, max) = (383621.679, 385512.206, 387080.193), stdev = 1584.212
[info]   CI (99.9%): [379411.970, 391612.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1996.593 ±(99.9%) 42.454 MB/sec [Average]
[info]   (min, avg, max) = (1984.629, 1996.593, 2013.609), stdev = 11.025
[info]   CI (99.9%): [1954.139, 2039.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8151.291 ±(99.9%) 119.559 B/op [Average]
[info]   (min, avg, max) = (8124.426, 8151.291, 8187.311), stdev = 31.049
[info]   CI (99.9%): [8031.732, 8270.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2005.406 ±(99.9%) 10.381 MB/sec [Average]
[info]   (min, avg, max) = (2002.474, 2005.406, 2009.063), stdev = 2.696
[info]   CI (99.9%): [1995.025, 2015.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8187.393 ±(99.9%) 148.993 B/op [Average]
[info]   (min, avg, max) = (8145.421, 8187.393, 8242.581), stdev = 38.693
[info]   CI (99.9%): [8038.400, 8336.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.765 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.476), stdev = 1.497
[info]   CI (99.9%): [≈ 0, 6.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.346 ±(99.9%) 23.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.346, 14.263), stdev = 6.143
[info]   CI (99.9%): [≈ 0, 26.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:35:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1335467.829 ops/s
[info] # Warmup Iteration   2: 2237438.281 ops/s
[info] # Warmup Iteration   3: 2244418.488 ops/s
[info] # Warmup Iteration   4: 2273807.008 ops/s
[info] # Warmup Iteration   5: 2280853.858 ops/s
[info] Iteration   1: 2269823.899 ops/s
[info]                  ·gc.alloc.rate:               831.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          576.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 930.751 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2269157.781 ops/s
[info]                  ·gc.alloc.rate:               800.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 465.737 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2283546.852 ops/s
[info]                  ·gc.alloc.rate:               815.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2265230.130 ops/s
[info]                  ·gc.alloc.rate:                   798.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2300156.749 ops/s
[info]                  ·gc.alloc.rate:               810.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 460.146 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2277583.082 ±(99.9%) 55431.990 ops/s [Average]
[info]   (min, avg, max) = (2265230.130, 2277583.082, 2300156.749), stdev = 14395.512
[info]   CI (99.9%): [2222151.093, 2333015.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   811.418 ±(99.9%) 50.598 MB/sec [Average]
[info]   (min, avg, max) = (798.443, 811.418, 831.260), stdev = 13.140
[info]   CI (99.9%): [760.820, 862.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   560.593 ±(99.9%) 35.732 B/op [Average]
[info]   (min, avg, max) = (554.657, 560.593, 576.218), stdev = 9.280
[info]   CI (99.9%): [524.861, 596.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.310 ±(99.9%) 1154.651 MB/sec [Average]
[info]   (min, avg, max) = (671.749, 806.310, 1342.714), stdev = 299.859
[info]   CI (99.9%): [≈ 0, 1960.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   557.378 ±(99.9%) 803.777 B/op [Average]
[info]   (min, avg, max) = (460.146, 557.378, 930.751), stdev = 208.738
[info]   CI (99.9%): [≈ 0, 1361.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4407.407 ops/s
[info] # Warmup Iteration   2: 71081.231 ops/s
[info] # Warmup Iteration   3: 82086.164 ops/s
[info] # Warmup Iteration   4: 84357.178 ops/s
[info] # Warmup Iteration   5: 84163.878 ops/s
[info] Iteration   1: 84345.973 ops/s
[info]                  ·gc.alloc.rate:                   3318.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              61928.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62780.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.496 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 84627.889 ops/s
[info]                  ·gc.alloc.rate:                   3358.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              62452.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62736.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 84665.051 ops/s
[info]                  ·gc.alloc.rate:               3333.103 MB/sec
[info]                  ·gc.alloc.rate.norm:          61959.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50275.379 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 82738.884 ops/s
[info]                  ·gc.alloc.rate:                   3300.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              62774.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64447.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 84366.769 ops/s
[info]                  ·gc.alloc.rate:                   3336.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              62241.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63312.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   84148.913 ±(99.9%) 3086.702 ops/s [Average]
[info]   (min, avg, max) = (82738.884, 84148.913, 84665.051), stdev = 801.607
[info]   CI (99.9%): [81062.211, 87235.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3329.605 ±(99.9%) 82.745 MB/sec [Average]
[info]   (min, avg, max) = (3300.796, 3329.605, 3358.590), stdev = 21.489
[info]   CI (99.9%): [3246.860, 3412.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62271.320 ±(99.9%) 1363.938 B/op [Average]
[info]   (min, avg, max) = (61928.830, 62271.320, 62774.601), stdev = 354.210
[info]   CI (99.9%): [60907.382, 63635.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3245.149 ±(99.9%) 1164.498 MB/sec [Average]
[info]   (min, avg, max) = (2704.578, 3245.149, 3394.064), stdev = 302.416
[info]   CI (99.9%): [2080.651, 4409.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60710.323 ±(99.9%) 22618.411 B/op [Average]
[info]   (min, avg, max) = (50275.379, 60710.323, 64447.046), stdev = 5873.930
[info]   CI (99.9%): [38091.912, 83328.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.187), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.011 ±(99.9%) 5.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.011, 3.496), stdev = 1.416
[info]   CI (99.9%): [≈ 0, 6.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61011.784 ops/s
[info] # Warmup Iteration   2: 251193.984 ops/s
[info] # Warmup Iteration   3: 260128.791 ops/s
[info] # Warmup Iteration   4: 256104.464 ops/s
[info] # Warmup Iteration   5: 261171.160 ops/s
[info] Iteration   1: 262118.331 ops/s
[info]                  ·gc.alloc.rate:                   2105.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              12638.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12095.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.750 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 261771.408 ops/s
[info]                  ·gc.alloc.rate:                   2126.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              12783.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12083.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 262939.095 ops/s
[info]                  ·gc.alloc.rate:               2111.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          12634.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12013.368 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 262795.100 ops/s
[info]                  ·gc.alloc.rate:               2136.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          12796.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12032.055 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 263535.247 ops/s
[info]                  ·gc.alloc.rate:               2142.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          12795.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12013.823 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   262631.836 ±(99.9%) 2682.518 ops/s [Average]
[info]   (min, avg, max) = (261771.408, 262631.836, 263535.247), stdev = 696.642
[info]   CI (99.9%): [259949.318, 265314.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2124.658 ±(99.9%) 61.661 MB/sec [Average]
[info]   (min, avg, max) = (2105.850, 2124.658, 2142.977), stdev = 16.013
[info]   CI (99.9%): [2062.996, 2186.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12729.594 ±(99.9%) 328.016 B/op [Average]
[info]   (min, avg, max) = (12634.110, 12729.594, 12796.453), stdev = 85.185
[info]   CI (99.9%): [12401.578, 13057.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2010.824 ±(99.9%) 11.802 MB/sec [Average]
[info]   (min, avg, max) = (2007.368, 2010.824, 2015.371), stdev = 3.065
[info]   CI (99.9%): [1999.022, 2022.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12047.673 ±(99.9%) 151.021 B/op [Average]
[info]   (min, avg, max) = (12013.368, 12047.673, 12095.769), stdev = 39.220
[info]   CI (99.9%): [11896.652, 12198.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.721 ±(99.9%) 5.896 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 3.457), stdev = 1.531
[info]   CI (99.9%): [≈ 0, 6.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.325 ±(99.9%) 35.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.325, 20.750), stdev = 9.189
[info]   CI (99.9%): [≈ 0, 39.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 656356.566 ops/s
[info] # Warmup Iteration   2: 1415370.819 ops/s
[info] # Warmup Iteration   3: 1477820.590 ops/s
[info] # Warmup Iteration   4: 1476967.451 ops/s
[info] # Warmup Iteration   5: 1475721.872 ops/s
[info] Iteration   1: 1498217.848 ops/s
[info]                  ·gc.alloc.rate:                   899.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1490292.722 ops/s
[info]                  ·gc.alloc.rate:               891.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 705.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1491836.819 ops/s
[info]                  ·gc.alloc.rate:                   907.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              956.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1411.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1497153.794 ops/s
[info]                  ·gc.alloc.rate:               891.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          936.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 703.779 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1498154.985 ops/s
[info]                  ·gc.alloc.rate:                   903.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              948.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     703.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1495131.234 ±(99.9%) 14539.097 ops/s [Average]
[info]   (min, avg, max) = (1490292.722, 1495131.234, 1498217.848), stdev = 3775.757
[info]   CI (99.9%): [1480592.137, 1509670.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   898.596 ±(99.9%) 27.622 MB/sec [Average]
[info]   (min, avg, max) = (891.248, 898.596, 907.170), stdev = 7.173
[info]   CI (99.9%): [870.974, 926.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   945.747 ±(99.9%) 29.513 B/op [Average]
[info]   (min, avg, max) = (936.854, 945.747, 956.986), stdev = 7.664
[info]   CI (99.9%): [916.234, 975.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.959 ±(99.9%) 1152.498 MB/sec [Average]
[info]   (min, avg, max) = (668.483, 802.959, 1338.362), stdev = 299.300
[info]   CI (99.9%): [≈ 0, 1955.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   845.419 ±(99.9%) 1219.309 B/op [Average]
[info]   (min, avg, max) = (702.218, 845.419, 1411.856), stdev = 316.651
[info]   CI (99.9%): [≈ 0, 2064.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.044), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1570117.110 ops/s
[info] # Warmup Iteration   2: 2708445.460 ops/s
[info] # Warmup Iteration   3: 2840433.874 ops/s
[info] # Warmup Iteration   4: 2853134.316 ops/s
[info] # Warmup Iteration   5: 2821539.412 ops/s
[info] Iteration   1: 2844850.224 ops/s
[info]                  ·gc.alloc.rate:               983.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          543.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.490 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 2840905.268 ops/s
[info]                  ·gc.alloc.rate:               981.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          543.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 372.376 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2827220.049 ops/s
[info]                  ·gc.alloc.rate:                   994.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     748.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2843259.271 ops/s
[info]                  ·gc.alloc.rate:               994.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 372.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2836523.557 ops/s
[info]                  ·gc.alloc.rate:               1006.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          558.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 746.627 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2838551.674 ±(99.9%) 27220.784 ops/s [Average]
[info]   (min, avg, max) = (2827220.049, 2838551.674, 2844850.224), stdev = 7069.151
[info]   CI (99.9%): [2811330.890, 2865772.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   991.979 ±(99.9%) 39.603 MB/sec [Average]
[info]   (min, avg, max) = (981.095, 991.979, 1006.943), stdev = 10.285
[info]   CI (99.9%): [952.376, 1031.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   549.956 ±(99.9%) 24.873 B/op [Average]
[info]   (min, avg, max) = (543.521, 549.956, 558.733), stdev = 6.459
[info]   CI (99.9%): [525.083, 574.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.373 ±(99.9%) 1419.626 MB/sec [Average]
[info]   (min, avg, max) = (671.761, 941.373, 1345.564), stdev = 368.672
[info]   CI (99.9%): [≈ 0, 2360.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   522.252 ±(99.9%) 792.052 B/op [Average]
[info]   (min, avg, max) = (371.490, 522.252, 748.525), stdev = 205.693
[info]   CI (99.9%): [≈ 0, 1314.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 2.049
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1349935.783 ops/s
[info] # Warmup Iteration   2: 3028244.919 ops/s
[info] # Warmup Iteration   3: 3073946.632 ops/s
[info] # Warmup Iteration   4: 3174659.218 ops/s
[info] # Warmup Iteration   5: 3163818.098 ops/s
[info] Iteration   1: 3170626.518 ops/s
[info]                  ·gc.alloc.rate:      0.942 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.467 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3172815.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3178107.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3168790.529 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3166351.582 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3171338.379 ±(99.9%) 17206.484 ops/s [Average]
[info]   (min, avg, max) = (3166351.582, 3171338.379, 3178107.384), stdev = 4468.469
[info]   CI (99.9%): [3154131.894, 3188544.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.189 ±(99.9%) 1.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.189, 0.942), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.094 ±(99.9%) 0.805 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.094, 0.467), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 0.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82803.133 ops/s
[info] # Warmup Iteration   2: 373549.380 ops/s
[info] # Warmup Iteration   3: 397431.782 ops/s
[info] # Warmup Iteration   4: 397599.505 ops/s
[info] # Warmup Iteration   5: 403341.004 ops/s
[info] Iteration   1: 401022.503 ops/s
[info]                  ·gc.alloc.rate:                   2600.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              10204.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10483.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 402112.079 ops/s
[info]                  ·gc.alloc.rate:                   2582.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              10102.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10496.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 398631.382 ops/s
[info]                  ·gc.alloc.rate:                   2586.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              10212.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10625.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 401942.662 ops/s
[info]                  ·gc.alloc.rate:                   2581.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              10106.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7925.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 402985.442 ops/s
[info]                  ·gc.alloc.rate:               2615.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          10213.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10561.154 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   401338.814 ±(99.9%) 6415.742 ops/s [Average]
[info]   (min, avg, max) = (398631.382, 401338.814, 402985.442), stdev = 1666.148
[info]   CI (99.9%): [394923.071, 407754.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2593.228 ±(99.9%) 56.299 MB/sec [Average]
[info]   (min, avg, max) = (2581.287, 2593.228, 2615.617), stdev = 14.621
[info]   CI (99.9%): [2536.930, 2649.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10167.691 ±(99.9%) 223.106 B/op [Average]
[info]   (min, avg, max) = (10102.381, 10167.691, 10213.124), stdev = 57.940
[info]   CI (99.9%): [9944.585, 10390.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2554.977 ±(99.9%) 1143.288 MB/sec [Average]
[info]   (min, avg, max) = (2024.296, 2554.977, 2704.749), stdev = 296.908
[info]   CI (99.9%): [1411.689, 3698.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10018.495 ±(99.9%) 4510.420 B/op [Average]
[info]   (min, avg, max) = (7925.578, 10018.495, 10625.416), stdev = 1171.342
[info]   CI (99.9%): [5508.075, 14528.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.164), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7001.138 ops/s
[info] # Warmup Iteration   2: 21836.999 ops/s
[info] # Warmup Iteration   3: 26037.532 ops/s
[info] # Warmup Iteration   4: 25722.365 ops/s
[info] # Warmup Iteration   5: 25862.999 ops/s
[info] Iteration   1: 25649.827 ops/s
[info]                  ·gc.alloc.rate:               1655.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          101573.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123724.938 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 26021.812 ops/s
[info]                  ·gc.alloc.rate:                   1662.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              100556.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81327.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26168.696 ops/s
[info]                  ·gc.alloc.rate:                   1671.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              100544.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80787.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.371 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26165.884 ops/s
[info]                  ·gc.alloc.rate:                   1698.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              102131.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120880.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26231.295 ops/s
[info]                  ·gc.alloc.rate:                   1675.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              100529.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80324.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26047.503 ±(99.9%) 905.695 ops/s [Average]
[info]   (min, avg, max) = (25649.827, 26047.503, 26231.295), stdev = 235.206
[info]   CI (99.9%): [25141.808, 26953.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1672.856 ±(99.9%) 62.579 MB/sec [Average]
[info]   (min, avg, max) = (1655.652, 1672.856, 1698.271), stdev = 16.252
[info]   CI (99.9%): [1610.277, 1735.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   101067.114 ±(99.9%) 2864.072 B/op [Average]
[info]   (min, avg, max) = (100529.418, 101067.114, 102131.686), stdev = 743.790
[info]   CI (99.9%): [98203.042, 103931.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.765 ±(99.9%) 1415.274 MB/sec [Average]
[info]   (min, avg, max) = (1339.023, 1610.765, 2016.720), stdev = 367.542
[info]   CI (99.9%): [195.491, 3026.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97408.974 ±(99.9%) 87600.696 B/op [Average]
[info]   (min, avg, max) = (80324.622, 97408.974, 123724.938), stdev = 22749.623
[info]   CI (99.9%): [9808.278, 185009.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.519), stdev = 1.121
[info]   CI (99.9%): [≈ 0, 5.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.244 ±(99.9%) 260.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.244, 152.351), stdev = 67.738
[info]   CI (99.9%): [≈ 0, 307.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.507
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.804 ops/s
[info] # Warmup Iteration   2: 87354.903 ops/s
[info] # Warmup Iteration   3: 96918.342 ops/s
[info] # Warmup Iteration   4: 99790.664 ops/s
[info] # Warmup Iteration   5: 99885.381 ops/s
[info] Iteration   1: 99576.386 ops/s
[info]                  ·gc.alloc.rate:                   979.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              15474.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21057.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 99535.939 ops/s
[info]                  ·gc.alloc.rate:               962.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          15210.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10538.108 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 99421.146 ops/s
[info]                  ·gc.alloc.rate:               969.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          15343.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21111.561 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 99663.334 ops/s
[info]                  ·gc.alloc.rate:                   967.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              15279.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10535.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 99281.321 ops/s
[info]                  ·gc.alloc.rate:               975.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          15461.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21173.007 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   99495.625 ±(99.9%) 570.321 ops/s [Average]
[info]   (min, avg, max) = (99281.321, 99495.625, 99663.334), stdev = 148.111
[info]   CI (99.9%): [98925.304, 100065.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   970.705 ±(99.9%) 25.756 MB/sec [Average]
[info]   (min, avg, max) = (962.000, 970.705, 979.125), stdev = 6.689
[info]   CI (99.9%): [944.948, 996.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15354.157 ±(99.9%) 440.025 B/op [Average]
[info]   (min, avg, max) = (15210.848, 15354.157, 15474.368), stdev = 114.273
[info]   CI (99.9%): [14914.132, 15794.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1067.074 ±(99.9%) 1406.764 MB/sec [Average]
[info]   (min, avg, max) = (666.475, 1067.074, 1335.623), stdev = 365.332
[info]   CI (99.9%): [≈ 0, 2473.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16883.105 ±(99.9%) 22309.219 B/op [Average]
[info]   (min, avg, max) = (10535.201, 16883.105, 21173.007), stdev = 5793.633
[info]   CI (99.9%): [≈ 0, 39192.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.026), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.146 ±(99.9%) 0.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.411), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24647.609 ops/s
[info] # Warmup Iteration   2: 67281.293 ops/s
[info] # Warmup Iteration   3: 68104.462 ops/s
[info] # Warmup Iteration   4: 69037.985 ops/s
[info] # Warmup Iteration   5: 68750.598 ops/s
[info] Iteration   1: 69154.047 ops/s
[info]                  ·gc.alloc.rate:               1246.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          28370.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30443.165 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 69562.069 ops/s
[info]                  ·gc.alloc.rate:                   1248.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              28244.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30293.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 69616.533 ops/s
[info]                  ·gc.alloc.rate:                   1232.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              27866.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15142.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.471 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 69562.447 ops/s
[info]                  ·gc.alloc.rate:                   1245.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              28168.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30316.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 69550.379 ops/s
[info]                  ·gc.alloc.rate:                   1244.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              28159.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30298.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   69489.095 ±(99.9%) 727.963 ops/s [Average]
[info]   (min, avg, max) = (69154.047, 69489.095, 69616.533), stdev = 189.050
[info]   CI (99.9%): [68761.132, 70217.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1243.420 ±(99.9%) 24.033 MB/sec [Average]
[info]   (min, avg, max) = (1232.635, 1243.420, 1248.560), stdev = 6.241
[info]   CI (99.9%): [1219.387, 1267.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28161.842 ±(99.9%) 713.232 B/op [Average]
[info]   (min, avg, max) = (27866.983, 28161.842, 28370.325), stdev = 185.224
[info]   CI (99.9%): [27448.610, 28875.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.085 ±(99.9%) 1152.233 MB/sec [Average]
[info]   (min, avg, max) = (669.805, 1205.085, 1339.914), stdev = 299.231
[info]   CI (99.9%): [52.851, 2357.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27298.914 ±(99.9%) 26168.159 B/op [Average]
[info]   (min, avg, max) = (15142.734, 27298.914, 30443.165), stdev = 6795.788
[info]   CI (99.9%): [1130.756, 53467.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 5.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.227), stdev = 1.391
[info]   CI (99.9%): [≈ 0, 6.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.651 ±(99.9%) 121.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.651, 73.002), stdev = 31.478
[info]   CI (99.9%): [≈ 0, 139.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55946.441 ops/s
[info] # Warmup Iteration   2: 132287.347 ops/s
[info] # Warmup Iteration   3: 132610.749 ops/s
[info] # Warmup Iteration   4: 135306.343 ops/s
[info] # Warmup Iteration   5: 133664.168 ops/s
[info] Iteration   1: 136401.340 ops/s
[info]                  ·gc.alloc.rate:               939.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          10845.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7747.587 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 133174.344 ops/s
[info]                  ·gc.alloc.rate:                   957.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              11309.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15878.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 136370.417 ops/s
[info]                  ·gc.alloc.rate:                   934.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              10783.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7756.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 134779.647 ops/s
[info]                  ·gc.alloc.rate:               949.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          11084.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15697.758 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 136258.697 ops/s
[info]                  ·gc.alloc.rate:                   930.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              10747.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7771.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   135396.889 ±(99.9%) 5452.465 ops/s [Average]
[info]   (min, avg, max) = (133174.344, 135396.889, 136401.340), stdev = 1415.988
[info]   CI (99.9%): [129944.425, 140849.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   942.281 ±(99.9%) 42.332 MB/sec [Average]
[info]   (min, avg, max) = (930.481, 942.281, 957.372), stdev = 10.993
[info]   CI (99.9%): [899.949, 984.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10954.118 ±(99.9%) 916.730 B/op [Average]
[info]   (min, avg, max) = (10747.760, 10954.118, 11309.251), stdev = 238.072
[info]   CI (99.9%): [10037.388, 11870.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.967 ±(99.9%) 1417.543 MB/sec [Average]
[info]   (min, avg, max) = (671.440, 940.967, 1344.288), stdev = 368.131
[info]   CI (99.9%): [≈ 0, 2358.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10970.400 ±(99.9%) 16936.938 B/op [Average]
[info]   (min, avg, max) = (7747.587, 10970.400, 15878.569), stdev = 4398.469
[info]   CI (99.9%): [≈ 0, 27907.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.094 ±(99.9%) 0.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.365), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.102 ±(99.9%) 7.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.102, 4.309), stdev = 1.820
[info]   CI (99.9%): [≈ 0, 8.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:32:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3929.427 ops/s
[info] # Warmup Iteration   2: 30819.942 ops/s
[info] # Warmup Iteration   3: 36971.491 ops/s
[info] # Warmup Iteration   4: 36588.131 ops/s
[info] # Warmup Iteration   5: 36790.979 ops/s
[info] Iteration   1: 37421.358 ops/s
[info]                  ·gc.alloc.rate:                   1874.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              78832.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84455.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 37866.898 ops/s
[info]                  ·gc.alloc.rate:                   1878.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              78073.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55705.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 37828.575 ops/s
[info]                  ·gc.alloc.rate:                   1903.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              79188.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83337.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 37737.272 ops/s
[info]                  ·gc.alloc.rate:               1885.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          78625.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83427.134 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 37799.859 ops/s
[info]                  ·gc.alloc.rate:                   1901.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              79185.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83315.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.867 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   37730.793 ±(99.9%) 690.566 ops/s [Average]
[info]   (min, avg, max) = (37421.358, 37730.793, 37866.898), stdev = 179.338
[info]   CI (99.9%): [37040.227, 38421.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1888.911 ±(99.9%) 51.105 MB/sec [Average]
[info]   (min, avg, max) = (1874.812, 1888.911, 1903.869), stdev = 13.272
[info]   CI (99.9%): [1837.807, 1940.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78780.772 ±(99.9%) 1782.386 B/op [Average]
[info]   (min, avg, max) = (78073.101, 78780.772, 79188.027), stdev = 462.880
[info]   CI (99.9%): [76998.386, 80563.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1870.827 ±(99.9%) 1141.564 MB/sec [Average]
[info]   (min, avg, max) = (1340.533, 1870.827, 2008.553), stdev = 296.461
[info]   CI (99.9%): [729.263, 3012.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78048.353 ±(99.9%) 48129.611 B/op [Average]
[info]   (min, avg, max) = (55705.513, 78048.353, 84455.937), stdev = 12499.107
[info]   CI (99.9%): [29918.742, 126177.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 7.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 4.456), stdev = 1.983
[info]   CI (99.9%): [≈ 0, 8.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.728 ±(99.9%) 317.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.728, 185.154), stdev = 82.416
[info]   CI (99.9%): [≈ 0, 355.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12106.000 ops/s
[info] # Warmup Iteration   2: 31257.996 ops/s
[info] # Warmup Iteration   3: 31331.357 ops/s
[info] # Warmup Iteration   4: 31750.760 ops/s
[info] # Warmup Iteration   5: 32010.036 ops/s
[info] Iteration   1: 32341.993 ops/s
[info]                  ·gc.alloc.rate:      515.909 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32251.826 ops/s
[info]                  ·gc.alloc.rate:                   533.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              26020.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32668.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 32305.449 ops/s
[info]                  ·gc.alloc.rate:               556.300 MB/sec
[info]                  ·gc.alloc.rate.norm:          27101.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32614.864 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 32321.476 ops/s
[info]                  ·gc.alloc.rate:               534.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          26024.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32613.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 32509.234 ops/s
[info]                  ·gc.alloc.rate:      518.559 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   32345.995 ±(99.9%) 374.206 ops/s [Average]
[info]   (min, avg, max) = (32251.826, 32345.995, 32509.234), stdev = 97.180
[info]   CI (99.9%): [31971.789, 32720.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   531.704 ±(99.9%) 62.010 MB/sec [Average]
[info]   (min, avg, max) = (515.909, 531.704, 556.300), stdev = 16.104
[info]   CI (99.9%): [469.694, 593.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25871.064 ±(99.9%) 3185.490 B/op [Average]
[info]   (min, avg, max) = (25104.013, 25871.064, 27101.791), stdev = 827.262
[info]   CI (99.9%): [22685.574, 29056.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   401.755 ±(99.9%) 1412.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.755, 669.785), stdev = 366.751
[info]   CI (99.9%): [≈ 0, 1813.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19579.449 ±(99.9%) 68824.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19579.449, 32668.451), stdev = 17873.524
[info]   CI (99.9%): [≈ 0, 88404.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 1.016), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 1.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13738.612 ops/s
[info] # Warmup Iteration   2: 31989.693 ops/s
[info] # Warmup Iteration   3: 32522.572 ops/s
[info] # Warmup Iteration   4: 32408.727 ops/s
[info] # Warmup Iteration   5: 32272.228 ops/s
[info] Iteration   1: 32546.574 ops/s
[info]                  ·gc.alloc.rate:      397.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32383.841 ops/s
[info]                  ·gc.alloc.rate:               414.834 MB/sec
[info]                  ·gc.alloc.rate.norm:          20151.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24864.344 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 32612.978 ops/s
[info]                  ·gc.alloc.rate:                   413.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              19965.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32194.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32641.589 ops/s
[info]                  ·gc.alloc.rate:      398.376 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32577.370 ops/s
[info]                  ·gc.alloc.rate:                   414.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              20005.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32228.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   32552.470 ±(99.9%) 388.390 ops/s [Average]
[info]   (min, avg, max) = (32383.841, 32552.470, 32641.589), stdev = 100.864
[info]   CI (99.9%): [32164.081, 32940.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   407.692 ±(99.9%) 34.765 MB/sec [Average]
[info]   (min, avg, max) = (397.265, 407.692, 414.834), stdev = 9.028
[info]   CI (99.9%): [372.927, 442.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19707.622 ±(99.9%) 1776.246 B/op [Average]
[info]   (min, avg, max) = (19208.013, 19707.622, 20151.159), stdev = 461.286
[info]   CI (99.9%): [17931.375, 21483.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.274 ±(99.9%) 1320.835 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.274, 667.354), stdev = 343.017
[info]   CI (99.9%): [≈ 0, 1690.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17857.542 ±(99.9%) 63825.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17857.542, 32228.973), stdev = 16575.299
[info]   CI (99.9%): [≈ 0, 81683.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.603 ±(99.9%) 3.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.603, 2.009), stdev = 0.899
[info]   CI (99.9%): [≈ 0, 4.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18965.240 ops/s
[info] # Warmup Iteration   2: 33772.247 ops/s
[info] # Warmup Iteration   3: 34111.397 ops/s
[info] # Warmup Iteration   4: 33691.412 ops/s
[info] # Warmup Iteration   5: 34737.670 ops/s
[info] Iteration   1: 34774.793 ops/s
[info]                  ·gc.alloc.rate:               359.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          16274.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23154.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 34935.962 ops/s
[info]                  ·gc.alloc.rate:      360.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 16253.844 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 33771.428 ops/s
[info]                  ·gc.alloc.rate:               343.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          16013.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23842.562 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 34725.336 ops/s
[info]                  ·gc.alloc.rate:                   369.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              16726.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30417.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34824.238 ops/s
[info]                  ·gc.alloc.rate:      350.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 15824.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   34606.351 ±(99.9%) 1822.198 ops/s [Average]
[info]   (min, avg, max) = (33771.428, 34606.351, 34935.962), stdev = 473.219
[info]   CI (99.9%): [32784.153, 36428.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   356.695 ±(99.9%) 38.157 MB/sec [Average]
[info]   (min, avg, max) = (343.675, 356.695, 369.128), stdev = 9.909
[info]   CI (99.9%): [318.538, 394.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   16218.572 ±(99.9%) 1306.514 B/op [Average]
[info]   (min, avg, max) = (15824.012, 16218.572, 16726.969), stdev = 339.298
[info]   CI (99.9%): [14912.058, 17525.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.927 ±(99.9%) 1217.495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.927, 671.255), stdev = 316.180
[info]   CI (99.9%): [≈ 0, 1556.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15482.930 ±(99.9%) 55508.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15482.930, 30417.792), stdev = 14415.492
[info]   CI (99.9%): [≈ 0, 70991.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 1.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.943), stdev = 0.422
[info]   CI (99.9%): [≈ 0, 1.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:31:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21859.317 ops/s
[info] # Warmup Iteration   2: 33442.558 ops/s
[info] # Warmup Iteration   3: 33868.618 ops/s
[info] # Warmup Iteration   4: 34310.961 ops/s
[info] # Warmup Iteration   5: 35126.382 ops/s
[info] Iteration   1: 34970.046 ops/s
[info]                  ·gc.alloc.rate:                   398.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              17941.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23024.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 34926.269 ops/s
[info]                  ·gc.alloc.rate:               393.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          17719.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23053.543 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 35106.064 ops/s
[info]                  ·gc.alloc.rate:      382.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 17144.758 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34870.405 ops/s
[info]                  ·gc.alloc.rate:               401.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          18108.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30276.294 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 34925.177 ops/s
[info]                  ·gc.alloc.rate:               396.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          17875.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30228.623 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   34959.592 ±(99.9%) 343.402 ops/s [Average]
[info]   (min, avg, max) = (34870.405, 34959.592, 35106.064), stdev = 89.180
[info]   CI (99.9%): [34616.190, 35302.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   394.511 ±(99.9%) 28.357 MB/sec [Average]
[info]   (min, avg, max) = (382.437, 394.511, 401.378), stdev = 7.364
[info]   CI (99.9%): [366.154, 422.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17758.089 ±(99.9%) 1425.258 B/op [Average]
[info]   (min, avg, max) = (17144.758, 17758.089, 18108.714), stdev = 370.135
[info]   CI (99.9%): [16332.831, 19183.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   473.064 ±(99.9%) 1063.494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.064, 671.072), stdev = 276.186
[info]   CI (99.9%): [≈ 0, 1536.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   21316.600 ±(99.9%) 47941.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21316.600, 30276.294), stdev = 12450.218
[info]   CI (99.9%): [≈ 0, 69257.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.187 ±(99.9%) 1.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.937), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 1.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2414.585 ops/s
[info] # Warmup Iteration   2: 12990.309 ops/s
[info] # Warmup Iteration   3: 14850.607 ops/s
[info] # Warmup Iteration   4: 15475.328 ops/s
[info] # Warmup Iteration   5: 15402.416 ops/s
[info] Iteration   1: 15303.359 ops/s
[info]                  ·gc.alloc.rate:               1111.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          114319.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68952.812 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 15344.088 ops/s
[info]                  ·gc.alloc.rate:                   1130.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              115933.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137605.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 15079.431 ops/s
[info]                  ·gc.alloc.rate:               1131.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          118114.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140092.868 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 15465.510 ops/s
[info]                  ·gc.alloc.rate:               1131.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          115103.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68332.338 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15465.700 ops/s
[info]                  ·gc.alloc.rate:                   1132.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              115182.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136647.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15331.618 ±(99.9%) 610.232 ops/s [Average]
[info]   (min, avg, max) = (15079.431, 15331.618, 15465.700), stdev = 158.475
[info]   CI (99.9%): [14721.386, 15941.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1127.433 ±(99.9%) 34.140 MB/sec [Average]
[info]   (min, avg, max) = (1111.615, 1127.433, 1132.100), stdev = 8.866
[info]   CI (99.9%): [1093.293, 1161.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   115730.677 ±(99.9%) 5582.448 B/op [Average]
[info]   (min, avg, max) = (114319.416, 115730.677, 118114.117), stdev = 1449.744
[info]   CI (99.9%): [110148.229, 121313.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1073.851 ±(99.9%) 1415.993 MB/sec [Average]
[info]   (min, avg, max) = (670.481, 1073.851, 1343.068), stdev = 367.729
[info]   CI (99.9%): [≈ 0, 2489.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110326.111 ±(99.9%) 146605.941 B/op [Average]
[info]   (min, avg, max) = (68332.338, 110326.111, 140092.868), stdev = 38073.097
[info]   CI (99.9%): [≈ 0, 256932.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.414), stdev = 1.525
[info]   CI (99.9%): [≈ 0, 6.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69.903 ±(99.9%) 597.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.903, 347.379), stdev = 155.117
[info]   CI (99.9%): [≈ 0, 667.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2851.881 ops/s
[info] # Warmup Iteration   2: 13731.755 ops/s
[info] # Warmup Iteration   3: 15334.532 ops/s
[info] # Warmup Iteration   4: 15290.285 ops/s
[info] # Warmup Iteration   5: 15399.422 ops/s
[info] Iteration   1: 15307.679 ops/s
[info]                  ·gc.alloc.rate:               1004.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          103301.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137381.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 15408.630 ops/s
[info]                  ·gc.alloc.rate:               993.922 MB/sec
[info]                  ·gc.alloc.rate.norm:          101476.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68274.462 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 15116.356 ops/s
[info]                  ·gc.alloc.rate:                   1009.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              105118.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139220.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 14978.418 ops/s
[info]                  ·gc.alloc.rate:               983.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          103294.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70273.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15391.253 ops/s
[info]                  ·gc.alloc.rate:               987.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          100949.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68456.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15240.467 ±(99.9%) 719.376 ops/s [Average]
[info]   (min, avg, max) = (14978.418, 15240.467, 15408.630), stdev = 186.820
[info]   CI (99.9%): [14521.092, 15959.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   995.831 ±(99.9%) 43.216 MB/sec [Average]
[info]   (min, avg, max) = (983.081, 995.831, 1009.705), stdev = 11.223
[info]   CI (99.9%): [952.614, 1039.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   102828.181 ±(99.9%) 6397.362 B/op [Average]
[info]   (min, avg, max) = (100949.586, 102828.181, 105118.133), stdev = 1661.375
[info]   CI (99.9%): [96430.819, 109225.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.159 ±(99.9%) 1408.083 MB/sec [Average]
[info]   (min, avg, max) = (668.718, 936.159, 1337.274), stdev = 365.675
[info]   CI (99.9%): [≈ 0, 2344.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   96721.296 ±(99.9%) 146210.692 B/op [Average]
[info]   (min, avg, max) = (68274.462, 96721.296, 139220.656), stdev = 37970.452
[info]   CI (99.9%): [≈ 0, 242931.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.433 ±(99.9%) 3.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.433, 2.167), stdev = 0.969
[info]   CI (99.9%): [≈ 0, 4.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65257.504 ops/s
[info] # Warmup Iteration   2: 105266.096 ops/s
[info] # Warmup Iteration   3: 107863.668 ops/s
[info] # Warmup Iteration   4: 107319.157 ops/s
[info] # Warmup Iteration   5: 107104.650 ops/s
[info] Iteration   1: 107340.926 ops/s
[info]                  ·gc.alloc.rate:      279.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 107142.859 ops/s
[info]                  ·gc.alloc.rate:                   288.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              4238.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7515.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 107548.264 ops/s
[info]                  ·gc.alloc.rate:      279.899 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105678.306 ops/s
[info]                  ·gc.alloc.rate:               297.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          4424.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7619.081 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 106669.462 ops/s
[info]                  ·gc.alloc.rate:      289.811 MB/sec
[info]                  ·gc.alloc.rate.norm: 4275.985 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   106875.963 ±(99.9%) 2866.363 ops/s [Average]
[info]   (min, avg, max) = (105678.306, 106875.963, 107548.264), stdev = 744.385
[info]   CI (99.9%): [104009.600, 109742.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   286.966 ±(99.9%) 28.529 MB/sec [Average]
[info]   (min, avg, max) = (279.457, 286.966, 297.095), stdev = 7.409
[info]   CI (99.9%): [258.437, 315.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4226.307 ±(99.9%) 530.497 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4226.307, 4424.641), stdev = 137.768
[info]   CI (99.9%): [3695.810, 4756.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.637 ±(99.9%) 1078.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.637, 511.597), stdev = 280.211
[info]   CI (99.9%): [≈ 0, 1283.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3026.842 ±(99.9%) 15960.293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3026.842, 7619.081), stdev = 4144.837
[info]   CI (99.9%): [≈ 0, 18987.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.306), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:30:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1635.061 ops/s
[info] # Warmup Iteration   2: 10779.580 ops/s
[info] # Warmup Iteration   3: 13643.438 ops/s
[info] # Warmup Iteration   4: 13267.333 ops/s
[info] # Warmup Iteration   5: 13750.037 ops/s
[info] Iteration   1: 13726.846 ops/s
[info]                  ·gc.alloc.rate:               1359.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          155901.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152589.574 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13773.669 ops/s
[info]                  ·gc.alloc.rate:                   1348.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              154075.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152080.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13761.690 ops/s
[info]                  ·gc.alloc.rate:               1347.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          154038.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152288.828 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13702.454 ops/s
[info]                  ·gc.alloc.rate:               1364.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          156665.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153135.707 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 13651.661 ops/s
[info]                  ·gc.alloc.rate:                   1374.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              158427.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153965.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13723.264 ±(99.9%) 188.544 ops/s [Average]
[info]   (min, avg, max) = (13651.661, 13723.264, 13773.669), stdev = 48.964
[info]   CI (99.9%): [13534.720, 13911.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1358.908 ±(99.9%) 43.718 MB/sec [Average]
[info]   (min, avg, max) = (1347.159, 1358.908, 1374.502), stdev = 11.353
[info]   CI (99.9%): [1315.190, 1402.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   155821.769 ±(99.9%) 7135.717 B/op [Average]
[info]   (min, avg, max) = (154038.462, 155821.769, 158427.686), stdev = 1853.123
[info]   CI (99.9%): [148686.052, 162957.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1332.685 ±(99.9%) 7.778 MB/sec [Average]
[info]   (min, avg, max) = (1330.932, 1332.685, 1335.786), stdev = 2.020
[info]   CI (99.9%): [1324.907, 1340.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   152811.874 ±(99.9%) 2915.826 B/op [Average]
[info]   (min, avg, max) = (152080.056, 152811.874, 153965.205), stdev = 757.231
[info]   CI (99.9%): [149896.048, 155727.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.916 ±(99.9%) 12.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.916, 7.199), stdev = 3.128
[info]   CI (99.9%): [≈ 0, 13.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16204.372 ops/s
[info] # Warmup Iteration   2: 42743.966 ops/s
[info] # Warmup Iteration   3: 44089.537 ops/s
[info] # Warmup Iteration   4: 43728.816 ops/s
[info] # Warmup Iteration   5: 45332.045 ops/s
[info] Iteration   1: 45213.545 ops/s
[info]                  ·gc.alloc.rate:                   1152.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              40135.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46679.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 45277.143 ops/s
[info]                  ·gc.alloc.rate:               1151.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          40013.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46647.889 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 45397.368 ops/s
[info]                  ·gc.alloc.rate:               1136.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          39415.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23267.048 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 45188.305 ops/s
[info]                  ·gc.alloc.rate:                   1145.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              39886.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46773.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 45226.226 ops/s
[info]                  ·gc.alloc.rate:                   1171.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              40756.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46757.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   45260.517 ±(99.9%) 319.867 ops/s [Average]
[info]   (min, avg, max) = (45188.305, 45260.517, 45397.368), stdev = 83.068
[info]   CI (99.9%): [44940.651, 45580.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1151.471 ±(99.9%) 48.670 MB/sec [Average]
[info]   (min, avg, max) = (1136.945, 1151.471, 1171.138), stdev = 12.640
[info]   CI (99.9%): [1102.801, 1200.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40041.463 ±(99.9%) 1862.767 B/op [Average]
[info]   (min, avg, max) = (39415.780, 40041.463, 40756.346), stdev = 483.755
[info]   CI (99.9%): [38178.697, 41904.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.114 ±(99.9%) 1155.892 MB/sec [Average]
[info]   (min, avg, max) = (671.136, 1208.114, 1343.579), stdev = 300.181
[info]   CI (99.9%): [52.222, 2364.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42024.998 ±(99.9%) 40378.408 B/op [Average]
[info]   (min, avg, max) = (23267.048, 42024.998, 46773.520), stdev = 10486.144
[info]   CI (99.9%): [1646.591, 82403.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.960 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.476), stdev = 1.548
[info]   CI (99.9%): [≈ 0, 6.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.631 ±(99.9%) 207.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.631, 120.979), stdev = 53.864
[info]   CI (99.9%): [≈ 0, 232.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22327.543 ops/s
[info] # Warmup Iteration   2: 59993.854 ops/s
[info] # Warmup Iteration   3: 63176.795 ops/s
[info] # Warmup Iteration   4: 63549.671 ops/s
[info] # Warmup Iteration   5: 63792.755 ops/s
[info] Iteration   1: 62835.505 ops/s
[info]                  ·gc.alloc.rate:                   1111.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              27826.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33513.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 63886.860 ops/s
[info]                  ·gc.alloc.rate:               1106.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          27261.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16484.773 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 63319.699 ops/s
[info]                  ·gc.alloc.rate:                   1123.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              27930.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33281.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 63224.556 ops/s
[info]                  ·gc.alloc.rate:                   1123.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              27976.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33362.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 63727.324 ops/s
[info]                  ·gc.alloc.rate:                   1112.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              27459.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16558.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.421 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   63398.789 ±(99.9%) 1610.897 ops/s [Average]
[info]   (min, avg, max) = (62835.505, 63398.789, 63886.860), stdev = 418.345
[info]   CI (99.9%): [61787.892, 65009.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1115.546 ±(99.9%) 30.074 MB/sec [Average]
[info]   (min, avg, max) = (1106.735, 1115.546, 1123.898), stdev = 7.810
[info]   CI (99.9%): [1085.471, 1145.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27690.979 ±(99.9%) 1210.896 B/op [Average]
[info]   (min, avg, max) = (27261.483, 27690.979, 27976.887), stdev = 314.466
[info]   CI (99.9%): [26480.083, 28901.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.499 ±(99.9%) 1411.685 MB/sec [Average]
[info]   (min, avg, max) = (669.233, 1071.499, 1340.266), stdev = 366.610
[info]   CI (99.9%): [≈ 0, 2483.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26640.017 ±(99.9%) 35569.954 B/op [Average]
[info]   (min, avg, max) = (16484.773, 26640.017, 33513.118), stdev = 9237.404
[info]   CI (99.9%): [≈ 0, 62209.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.676 ±(99.9%) 5.730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.338), stdev = 1.488
[info]   CI (99.9%): [≈ 0, 6.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.692 ±(99.9%) 141.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.692, 82.421), stdev = 36.744
[info]   CI (99.9%): [≈ 0, 158.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97109.258 ops/s
[info] # Warmup Iteration   2: 167591.897 ops/s
[info] # Warmup Iteration   3: 177462.662 ops/s
[info] # Warmup Iteration   4: 176655.285 ops/s
[info] # Warmup Iteration   5: 177036.957 ops/s
[info] Iteration   1: 176860.624 ops/s
[info]                  ·gc.alloc.rate:                   298.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              2653.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4552.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 176414.891 ops/s
[info]                  ·gc.alloc.rate:               295.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          2634.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4564.168 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 178011.531 ops/s
[info]                  ·gc.alloc.rate:      282.370 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 176824.317 ops/s
[info]                  ·gc.alloc.rate:               292.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          2598.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4553.407 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 177408.534 ops/s
[info]                  ·gc.alloc.rate:      281.782 MB/sec
[info]                  ·gc.alloc.rate.norm: 2498.698 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   177103.980 ±(99.9%) 2380.464 ops/s [Average]
[info]   (min, avg, max) = (176414.891, 177103.980, 178011.531), stdev = 618.199
[info]   CI (99.9%): [174723.516, 179484.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   289.949 ±(99.9%) 28.941 MB/sec [Average]
[info]   (min, avg, max) = (281.782, 289.949, 298.208), stdev = 7.516
[info]   CI (99.9%): [261.008, 318.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2576.462 ±(99.9%) 288.326 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2576.462, 2653.792), stdev = 74.877
[info]   CI (99.9%): [2288.137, 2864.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.968 ±(99.9%) 1079.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.968, 511.651), stdev = 280.222
[info]   CI (99.9%): [≈ 0, 1386.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2734.042 ±(99.9%) 9610.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2734.042, 4564.168), stdev = 2495.831
[info]   CI (99.9%): [≈ 0, 12344.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.370), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86389.376 ops/s
[info] # Warmup Iteration   2: 174840.618 ops/s
[info] # Warmup Iteration   3: 184645.588 ops/s
[info] # Warmup Iteration   4: 184470.184 ops/s
[info] # Warmup Iteration   5: 184745.481 ops/s
[info] Iteration   1: 184908.735 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 183326.442 ops/s
[info]                  ·gc.alloc.rate:      2.322 MB/sec
[info]                  ·gc.alloc.rate.norm: 19.933 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 184874.746 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 185156.393 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185181.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   184689.520 ±(99.9%) 2982.787 ops/s [Average]
[info]   (min, avg, max) = (183326.442, 184689.520, 185181.285), stdev = 774.620
[info]   CI (99.9%): [181706.733, 187672.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.465 ±(99.9%) 3.998 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.465, 2.322), stdev = 1.038
[info]   CI (99.9%): [≈ 0, 4.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3.989 ±(99.9%) 34.321 B/op [Average]
[info]   (min, avg, max) = (0.002, 3.989, 19.933), stdev = 8.913
[info]   CI (99.9%): [≈ 0, 38.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20815.824 ops/s
[info] # Warmup Iteration   2: 53662.800 ops/s
[info] # Warmup Iteration   3: 56150.591 ops/s
[info] # Warmup Iteration   4: 57670.725 ops/s
[info] # Warmup Iteration   5: 57780.760 ops/s
[info] Iteration   1: 57635.383 ops/s
[info]                  ·gc.alloc.rate:                   1122.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              30646.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36571.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 57828.403 ops/s
[info]                  ·gc.alloc.rate:               1105.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          30082.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18229.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 57650.504 ops/s
[info]                  ·gc.alloc.rate:                   1116.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              30469.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36590.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 57609.123 ops/s
[info]                  ·gc.alloc.rate:                   1112.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              30384.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36652.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 56248.851 ops/s
[info]                  ·gc.alloc.rate:                   1081.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              30258.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18768.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   57394.453 ±(99.9%) 2488.368 ops/s [Average]
[info]   (min, avg, max) = (56248.851, 57394.453, 57828.403), stdev = 646.221
[info]   CI (99.9%): [54906.084, 59882.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1107.606 ±(99.9%) 60.235 MB/sec [Average]
[info]   (min, avg, max) = (1081.903, 1107.606, 1122.477), stdev = 15.643
[info]   CI (99.9%): [1047.370, 1167.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30368.455 ±(99.9%) 820.529 B/op [Average]
[info]   (min, avg, max) = (30082.739, 30368.455, 30646.969), stdev = 213.089
[info]   CI (99.9%): [29547.927, 31188.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.460 ±(99.9%) 1413.054 MB/sec [Average]
[info]   (min, avg, max) = (669.872, 1072.460, 1341.624), stdev = 366.966
[info]   CI (99.9%): [≈ 0, 2485.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29362.655 ±(99.9%) 38193.825 B/op [Average]
[info]   (min, avg, max) = (18229.877, 29362.655, 36652.933), stdev = 9918.815
[info]   CI (99.9%): [≈ 0, 67556.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.186), stdev = 1.416
[info]   CI (99.9%): [≈ 0, 6.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.277 ±(99.9%) 152.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.277, 89.113), stdev = 39.600
[info]   CI (99.9%): [≈ 0, 170.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20086.153 ops/s
[info] # Warmup Iteration   2: 87841.096 ops/s
[info] # Warmup Iteration   3: 95575.145 ops/s
[info] # Warmup Iteration   4: 96744.278 ops/s
[info] # Warmup Iteration   5: 95608.813 ops/s
[info] Iteration   1: 96701.971 ops/s
[info]                  ·gc.alloc.rate:                   2131.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              34681.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32742.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 97244.325 ops/s
[info]                  ·gc.alloc.rate:                   2144.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              34703.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32464.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 95978.063 ops/s
[info]                  ·gc.alloc.rate:                   2121.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              34783.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32869.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 97126.990 ops/s
[info]                  ·gc.alloc.rate:                   2192.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              35518.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43329.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 97142.212 ops/s
[info]                  ·gc.alloc.rate:                   2169.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              35149.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32567.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   96838.712 ±(99.9%) 2018.517 ops/s [Average]
[info]   (min, avg, max) = (95978.063, 96838.712, 97244.325), stdev = 524.202
[info]   CI (99.9%): [94820.195, 98857.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2151.707 ±(99.9%) 111.349 MB/sec [Average]
[info]   (min, avg, max) = (2121.522, 2151.707, 2192.141), stdev = 28.917
[info]   CI (99.9%): [2040.358, 2263.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34967.151 ±(99.9%) 1391.421 B/op [Average]
[info]   (min, avg, max) = (34681.154, 34967.151, 35518.384), stdev = 361.347
[info]   CI (99.9%): [33575.731, 36358.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2141.408 ±(99.9%) 1146.938 MB/sec [Average]
[info]   (min, avg, max) = (2004.817, 2141.408, 2674.204), stdev = 297.856
[info]   CI (99.9%): [994.470, 3288.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34794.623 ±(99.9%) 18380.868 B/op [Average]
[info]   (min, avg, max) = (32464.087, 34794.623, 43329.052), stdev = 4773.453
[info]   CI (99.9%): [16413.755, 53175.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.588 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.812, 3.872), stdev = 1.711
[info]   CI (99.9%): [≈ 0, 7.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.214 ±(99.9%) 107.223 B/op [Average]
[info]   (min, avg, max) = (0.337, 13.214, 63.019), stdev = 27.846
[info]   CI (99.9%): [≈ 0, 120.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35371.573 ops/s
[info] # Warmup Iteration   2: 117293.006 ops/s
[info] # Warmup Iteration   3: 117657.982 ops/s
[info] # Warmup Iteration   4: 125904.295 ops/s
[info] # Warmup Iteration   5: 122455.694 ops/s
[info] Iteration   1: 125804.446 ops/s
[info]                  ·gc.alloc.rate:                   1784.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              22296.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25026.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 127102.162 ops/s
[info]                  ·gc.alloc.rate:                   1799.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              22279.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16596.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 127609.595 ops/s
[info]                  ·gc.alloc.rate:                   1807.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              22293.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24713.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 127469.623 ops/s
[info]                  ·gc.alloc.rate:                   1790.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              22106.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16474.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 127064.420 ops/s
[info]                  ·gc.alloc.rate:               1810.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          22427.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24793.810 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   127010.049 ±(99.9%) 2746.931 ops/s [Average]
[info]   (min, avg, max) = (125804.446, 127010.049, 127609.595), stdev = 713.369
[info]   CI (99.9%): [124263.118, 129756.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1798.677 ±(99.9%) 42.679 MB/sec [Average]
[info]   (min, avg, max) = (1784.596, 1798.677, 1810.701), stdev = 11.084
[info]   CI (99.9%): [1755.998, 1841.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22280.914 ±(99.9%) 440.436 B/op [Average]
[info]   (min, avg, max) = (22106.689, 22280.914, 22427.783), stdev = 114.380
[info]   CI (99.9%): [21840.477, 22721.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.758 ±(99.9%) 1403.711 MB/sec [Average]
[info]   (min, avg, max) = (1334.493, 1736.758, 2004.103), stdev = 364.539
[info]   CI (99.9%): [333.048, 3140.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21520.704 ±(99.9%) 17531.195 B/op [Average]
[info]   (min, avg, max) = (16474.086, 21520.704, 25026.185), stdev = 4552.796
[info]   CI (99.9%): [3989.509, 39051.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 7.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 4.143), stdev = 1.827
[info]   CI (99.9%): [≈ 0, 7.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.826 ±(99.9%) 87.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.826, 51.296), stdev = 22.628
[info]   CI (99.9%): [≈ 0, 97.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74145.073 ops/s
[info] # Warmup Iteration   2: 159332.187 ops/s
[info] # Warmup Iteration   3: 164826.119 ops/s
[info] # Warmup Iteration   4: 167141.751 ops/s
[info] # Warmup Iteration   5: 167656.420 ops/s
[info] Iteration   1: 168770.297 ops/s
[info]                  ·gc.alloc.rate:                   1578.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              14719.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12535.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 168295.012 ops/s
[info]                  ·gc.alloc.rate:                   1587.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              14845.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18869.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 169239.908 ops/s
[info]                  ·gc.alloc.rate:                   1581.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              14708.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12501.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 167933.195 ops/s
[info]                  ·gc.alloc.rate:               1583.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          14842.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12579.815 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 168868.047 ops/s
[info]                  ·gc.alloc.rate:               1589.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          14815.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18755.502 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   168621.292 ±(99.9%) 1968.836 ops/s [Average]
[info]   (min, avg, max) = (167933.195, 168621.292, 169239.908), stdev = 511.301
[info]   CI (99.9%): [166652.455, 170590.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1584.265 ±(99.9%) 17.160 MB/sec [Average]
[info]   (min, avg, max) = (1578.548, 1584.265, 1589.618), stdev = 4.456
[info]   CI (99.9%): [1567.106, 1601.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14786.666 ±(99.9%) 258.440 B/op [Average]
[info]   (min, avg, max) = (14708.864, 14786.666, 14845.777), stdev = 67.116
[info]   CI (99.9%): [14528.226, 15045.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.259 ±(99.9%) 1416.234 MB/sec [Average]
[info]   (min, avg, max) = (1342.295, 1612.259, 2017.971), stdev = 367.791
[info]   CI (99.9%): [196.025, 3028.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15048.487 ±(99.9%) 13232.619 B/op [Average]
[info]   (min, avg, max) = (12501.485, 15048.487, 18869.633), stdev = 3436.469
[info]   CI (99.9%): [1815.868, 28281.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 4.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 2.790), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.721 ±(99.9%) 43.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.721, 26.087), stdev = 11.419
[info]   CI (99.9%): [≈ 0, 49.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3143.868 ops/s
[info] # Warmup Iteration   2: 45308.887 ops/s
[info] # Warmup Iteration   3: 53918.503 ops/s
[info] # Warmup Iteration   4: 52128.729 ops/s
[info] # Warmup Iteration   5: 54298.180 ops/s
[info] Iteration   1: 52024.026 ops/s
[info]                  ·gc.alloc.rate:                   2794.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              84526.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81144.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.519 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 52125.001 ops/s
[info]                  ·gc.alloc.rate:               2772.328 MB/sec
[info]                  ·gc.alloc.rate.norm:          83694.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81255.338 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 51770.580 ops/s
[info]                  ·gc.alloc.rate:               2758.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          83867.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82038.344 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 52057.408 ops/s
[info]                  ·gc.alloc.rate:               2786.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          84227.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81762.667 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 52038.798 ops/s
[info]                  ·gc.alloc.rate:               2799.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          84642.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2711.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81958.405 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   52003.163 ±(99.9%) 522.280 ops/s [Average]
[info]   (min, avg, max) = (51770.580, 52003.163, 52125.001), stdev = 135.635
[info]   CI (99.9%): [51480.882, 52525.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2782.257 ±(99.9%) 64.388 MB/sec [Average]
[info]   (min, avg, max) = (2758.747, 2782.257, 2799.941), stdev = 16.721
[info]   CI (99.9%): [2717.870, 2846.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84191.727 ±(99.9%) 1575.911 B/op [Average]
[info]   (min, avg, max) = (83694.174, 84191.727, 84642.871), stdev = 409.259
[info]   CI (99.9%): [82615.817, 85767.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2697.638 ±(99.9%) 43.423 MB/sec [Average]
[info]   (min, avg, max) = (2682.204, 2697.638, 2711.141), stdev = 11.277
[info]   CI (99.9%): [2654.215, 2741.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81631.776 ±(99.9%) 1574.324 B/op [Average]
[info]   (min, avg, max) = (81144.128, 81631.776, 82038.344), stdev = 408.847
[info]   CI (99.9%): [80057.453, 83206.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.504 ±(99.9%) 4.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.519), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 4.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63620.714 ops/s
[info] # Warmup Iteration   2: 175120.711 ops/s
[info] # Warmup Iteration   3: 179619.048 ops/s
[info] # Warmup Iteration   4: 178005.539 ops/s
[info] # Warmup Iteration   5: 181108.571 ops/s
[info] Iteration   1: 181482.075 ops/s
[info]                  ·gc.alloc.rate:               1193.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          10350.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5814.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 180971.616 ops/s
[info]                  ·gc.alloc.rate:               1203.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          10467.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11664.813 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 180594.556 ops/s
[info]                  ·gc.alloc.rate:                   1224.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              10667.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11697.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 180879.724 ops/s
[info]                  ·gc.alloc.rate:                   1214.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              10569.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11688.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 181722.538 ops/s
[info]                  ·gc.alloc.rate:                   1203.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              10427.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5818.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   181130.102 ±(99.9%) 1774.517 ops/s [Average]
[info]   (min, avg, max) = (180594.556, 181130.102, 181722.538), stdev = 460.837
[info]   CI (99.9%): [179355.585, 182904.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1208.089 ±(99.9%) 45.133 MB/sec [Average]
[info]   (min, avg, max) = (1193.549, 1208.089, 1224.150), stdev = 11.721
[info]   CI (99.9%): [1162.956, 1253.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10496.550 ±(99.9%) 476.611 B/op [Average]
[info]   (min, avg, max) = (10350.920, 10496.550, 10667.333), stdev = 123.774
[info]   CI (99.9%): [10019.939, 10973.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.932 ±(99.9%) 1415.987 MB/sec [Average]
[info]   (min, avg, max) = (670.426, 1073.932, 1343.444), stdev = 367.727
[info]   CI (99.9%): [≈ 0, 2489.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9336.623 ±(99.9%) 12374.702 B/op [Average]
[info]   (min, avg, max) = (5814.190, 9336.623, 11697.803), stdev = 3213.671
[info]   CI (99.9%): [≈ 0, 21711.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 2.998), stdev = 1.304
[info]   CI (99.9%): [≈ 0, 5.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.938 ±(99.9%) 43.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.938, 26.083), stdev = 11.343
[info]   CI (99.9%): [≈ 0, 49.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:27:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236096.007 ops/s
[info] # Warmup Iteration   2: 507270.820 ops/s
[info] # Warmup Iteration   3: 518227.414 ops/s
[info] # Warmup Iteration   4: 529268.964 ops/s
[info] # Warmup Iteration   5: 528430.283 ops/s
[info] Iteration   1: 535184.461 ops/s
[info]                  ·gc.alloc.rate:                   557.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              1638.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1956.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 537829.813 ops/s
[info]                  ·gc.alloc.rate:      544.117 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 535597.430 ops/s
[info]                  ·gc.alloc.rate:               560.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1956.594 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 535068.956 ops/s
[info]                  ·gc.alloc.rate:                   567.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              1668.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1961.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 533661.137 ops/s
[info]                  ·gc.alloc.rate:                   561.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              1656.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1966.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   535468.359 ±(99.9%) 5807.742 ops/s [Average]
[info]   (min, avg, max) = (533661.137, 535468.359, 537829.813), stdev = 1508.252
[info]   CI (99.9%): [529660.618, 541276.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   558.218 ±(99.9%) 33.335 MB/sec [Average]
[info]   (min, avg, max) = (544.117, 558.218, 567.318), stdev = 8.657
[info]   CI (99.9%): [524.883, 591.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1640.569 ±(99.9%) 112.927 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1640.569, 1668.527), stdev = 29.327
[info]   CI (99.9%): [1527.642, 1753.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.013 ±(99.9%) 1147.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.013, 666.886), stdev = 297.964
[info]   CI (99.9%): [≈ 0, 1680.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1568.182 ±(99.9%) 3375.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1568.182, 1966.547), stdev = 876.650
[info]   CI (99.9%): [≈ 0, 4943.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.061), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 439275.316 ops/s
[info] # Warmup Iteration   2: 672731.334 ops/s
[info] # Warmup Iteration   3: 680330.607 ops/s
[info] # Warmup Iteration   4: 685224.351 ops/s
[info] # Warmup Iteration   5: 685836.890 ops/s
[info] Iteration   1: 688121.568 ops/s
[info]                  ·gc.alloc.rate:               548.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1534.300 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 689073.509 ops/s
[info]                  ·gc.alloc.rate:      529.358 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.887 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 685645.874 ops/s
[info]                  ·gc.alloc.rate:               541.609 MB/sec
[info]                  ·gc.alloc.rate.norm:          1242.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1539.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 686937.780 ops/s
[info]                  ·gc.alloc.rate:                   551.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1262.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1538.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 687108.017 ops/s
[info]                  ·gc.alloc.rate:                   547.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              1253.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1538.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   687377.350 ±(99.9%) 4981.560 ops/s [Average]
[info]   (min, avg, max) = (685645.874, 687377.350, 689073.509), stdev = 1293.695
[info]   CI (99.9%): [682395.789, 692358.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   543.672 ±(99.9%) 33.676 MB/sec [Average]
[info]   (min, avg, max) = (529.358, 543.672, 551.249), stdev = 8.746
[info]   CI (99.9%): [509.996, 577.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1244.562 ±(99.9%) 81.630 B/op [Average]
[info]   (min, avg, max) = (1208.887, 1244.562, 1262.923), stdev = 21.199
[info]   CI (99.9%): [1162.932, 1326.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.051 ±(99.9%) 1156.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.051, 671.588), stdev = 300.221
[info]   CI (99.9%): [≈ 0, 1693.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1230.127 ±(99.9%) 2647.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1230.127, 1539.836), stdev = 687.665
[info]   CI (99.9%): [≈ 0, 3878.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.048), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422476.722 ops/s
[info] # Warmup Iteration   2: 714106.021 ops/s
[info] # Warmup Iteration   3: 784522.894 ops/s
[info] # Warmup Iteration   4: 784529.407 ops/s
[info] # Warmup Iteration   5: 782824.114 ops/s
[info] Iteration   1: 782153.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 782440.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 784012.341 ops/s
[info]                  ·gc.alloc.rate:      0.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.112 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 782229.243 ops/s
[info]                  ·gc.alloc.rate:      1.684 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.388 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 784369.331 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   783040.972 ±(99.9%) 4091.162 ops/s [Average]
[info]   (min, avg, max) = (782153.385, 783040.972, 784369.331), stdev = 1062.462
[info]   CI (99.9%): [778949.810, 787132.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.348 ±(99.9%) 2.878 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.348, 1.684), stdev = 0.747
[info]   CI (99.9%): [≈ 0, 3.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.700 ±(99.9%) 5.788 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.700, 3.388), stdev = 1.503
[info]   CI (99.9%): [≈ 0, 6.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68262.705 ops/s
[info] # Warmup Iteration   2: 307920.558 ops/s
[info] # Warmup Iteration   3: 331879.110 ops/s
[info] # Warmup Iteration   4: 330893.210 ops/s
[info] # Warmup Iteration   5: 336124.227 ops/s
[info] Iteration   1: 337424.294 ops/s
[info]                  ·gc.alloc.rate:               954.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          4451.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3094.785 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 336395.470 ops/s
[info]                  ·gc.alloc.rate:               947.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          4433.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3107.330 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 331812.428 ops/s
[info]                  ·gc.alloc.rate:                   959.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              4550.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6305.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 337161.627 ops/s
[info]                  ·gc.alloc.rate:               943.912 MB/sec
[info]                  ·gc.alloc.rate.norm:          4406.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3104.817 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 336534.287 ops/s
[info]                  ·gc.alloc.rate:               981.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          4590.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6234.106 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   335865.621 ±(99.9%) 8878.495 ops/s [Average]
[info]   (min, avg, max) = (331812.428, 335865.621, 337424.294), stdev = 2305.717
[info]   CI (99.9%): [326987.127, 344744.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   957.455 ±(99.9%) 57.229 MB/sec [Average]
[info]   (min, avg, max) = (943.912, 957.455, 981.707), stdev = 14.862
[info]   CI (99.9%): [900.226, 1014.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4486.187 ±(99.9%) 306.650 B/op [Average]
[info]   (min, avg, max) = (4406.082, 4486.187, 4590.190), stdev = 79.636
[info]   CI (99.9%): [4179.537, 4792.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   931.199 ±(99.9%) 1407.355 MB/sec [Average]
[info]   (min, avg, max) = (663.515, 931.199, 1333.292), stdev = 365.486
[info]   CI (99.9%): [≈ 0, 2338.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4369.238 ±(99.9%) 6680.864 B/op [Average]
[info]   (min, avg, max) = (3094.785, 4369.238, 6305.150), stdev = 1734.999
[info]   CI (99.9%): [≈ 0, 11050.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14754.619 ops/s
[info] # Warmup Iteration   2: 31093.908 ops/s
[info] # Warmup Iteration   3: 37721.589 ops/s
[info] # Warmup Iteration   4: 37374.069 ops/s
[info] # Warmup Iteration   5: 37416.802 ops/s
[info] Iteration   1: 38130.885 ops/s
[info]                  ·gc.alloc.rate:                   1952.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              80577.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83227.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 38278.899 ops/s
[info]                  ·gc.alloc.rate:                   1945.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              80008.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82796.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38218.117 ops/s
[info]                  ·gc.alloc.rate:                   1950.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              80334.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55139.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38666.061 ops/s
[info]                  ·gc.alloc.rate:                   1956.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              79619.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81748.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.695 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38316.380 ops/s
[info]                  ·gc.alloc.rate:                   1974.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              81105.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82547.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.855 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38322.068 ±(99.9%) 788.169 ops/s [Average]
[info]   (min, avg, max) = (38130.885, 38322.068, 38666.061), stdev = 204.685
[info]   CI (99.9%): [37533.900, 39110.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1955.997 ±(99.9%) 42.482 MB/sec [Average]
[info]   (min, avg, max) = (1945.982, 1955.997, 1974.556), stdev = 11.033
[info]   CI (99.9%): [1913.514, 1998.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80329.182 ±(99.9%) 2170.801 B/op [Average]
[info]   (min, avg, max) = (79619.088, 80329.182, 81105.289), stdev = 563.750
[info]   CI (99.9%): [78158.382, 82499.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.518 ±(99.9%) 1159.453 MB/sec [Average]
[info]   (min, avg, max) = (1338.911, 1877.518, 2016.428), stdev = 301.106
[info]   CI (99.9%): [718.064, 3036.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   77091.688 ±(99.9%) 47299.962 B/op [Average]
[info]   (min, avg, max) = (55139.121, 77091.688, 83227.300), stdev = 12283.650
[info]   CI (99.9%): [29791.726, 124391.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 4.572 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.774, 2.748), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 5.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31.924 ±(99.9%) 188.677 B/op [Average]
[info]   (min, avg, max) = (0.855, 31.924, 113.417), stdev = 48.999
[info]   CI (99.9%): [≈ 0, 220.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.739 ops/s
[info] # Warmup Iteration   2: 271827.425 ops/s
[info] # Warmup Iteration   3: 284733.330 ops/s
[info] # Warmup Iteration   4: 284329.334 ops/s
[info] # Warmup Iteration   5: 291310.502 ops/s
[info] Iteration   1: 298411.019 ops/s
[info]                  ·gc.alloc.rate:                   326.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              1722.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2698.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 298240.156 ops/s
[info]                  ·gc.alloc.rate:               325.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          1718.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2699.825 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 299602.461 ops/s
[info]                  ·gc.alloc.rate:      310.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 298181.459 ops/s
[info]                  ·gc.alloc.rate:                   326.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              1725.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3516.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 299800.402 ops/s
[info]                  ·gc.alloc.rate:      310.880 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   298847.099 ±(99.9%) 3032.599 ops/s [Average]
[info]   (min, avg, max) = (298181.459, 298847.099, 299800.402), stdev = 787.556
[info]   CI (99.9%): [295814.500, 301879.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   320.155 ±(99.9%) 32.969 MB/sec [Average]
[info]   (min, avg, max) = (310.696, 320.155, 326.914), stdev = 8.562
[info]   CI (99.9%): [287.186, 353.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1686.012 ±(99.9%) 190.129 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1686.012, 1725.573), stdev = 49.376
[info]   CI (99.9%): [1495.883, 1876.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   337.916 ±(99.9%) 1212.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.916, 666.143), stdev = 314.850
[info]   CI (99.9%): [≈ 0, 1550.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1782.858 ±(99.9%) 6397.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1782.858, 3516.151), stdev = 1661.352
[info]   CI (99.9%): [≈ 0, 8180.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.110), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34869.916 ops/s
[info] # Warmup Iteration   2: 109089.073 ops/s
[info] # Warmup Iteration   3: 110507.778 ops/s
[info] # Warmup Iteration   4: 114833.367 ops/s
[info] # Warmup Iteration   5: 112328.908 ops/s
[info] Iteration   1: 115117.945 ops/s
[info]                  ·gc.alloc.rate:                   1374.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              18794.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18296.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 115033.929 ops/s
[info]                  ·gc.alloc.rate:               1380.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          18884.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18323.718 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 115103.640 ops/s
[info]                  ·gc.alloc.rate:                   1368.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              18706.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18321.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 115706.874 ops/s
[info]                  ·gc.alloc.rate:                   1387.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              18873.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18212.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 115529.433 ops/s
[info]                  ·gc.alloc.rate:                   1398.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              19046.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18203.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   115298.364 ±(99.9%) 1156.264 ops/s [Average]
[info]   (min, avg, max) = (115033.929, 115298.364, 115706.874), stdev = 300.278
[info]   CI (99.9%): [114142.100, 116454.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1381.793 ±(99.9%) 44.918 MB/sec [Average]
[info]   (min, avg, max) = (1368.078, 1381.793, 1398.091), stdev = 11.665
[info]   CI (99.9%): [1336.874, 1426.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18860.987 ±(99.9%) 485.315 B/op [Average]
[info]   (min, avg, max) = (18706.072, 18860.987, 19046.540), stdev = 126.035
[info]   CI (99.9%): [18375.672, 19346.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.601 ±(99.9%) 5.629 MB/sec [Average]
[info]   (min, avg, max) = (1336.239, 1338.601, 1339.966), stdev = 1.462
[info]   CI (99.9%): [1332.971, 1344.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18271.693 ±(99.9%) 227.260 B/op [Average]
[info]   (min, avg, max) = (18203.909, 18271.693, 18323.718), stdev = 59.019
[info]   CI (99.9%): [18044.433, 18498.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 5.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.164), stdev = 1.362
[info]   CI (99.9%): [≈ 0, 6.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.372 ±(99.9%) 71.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.372, 43.265), stdev = 18.628
[info]   CI (99.9%): [≈ 0, 83.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212793.314 ops/s
[info] # Warmup Iteration   2: 509129.570 ops/s
[info] # Warmup Iteration   3: 548094.598 ops/s
[info] # Warmup Iteration   4: 551626.409 ops/s
[info] # Warmup Iteration   5: 537518.651 ops/s
[info] Iteration   1: 549227.303 ops/s
[info]                  ·gc.alloc.rate:               366.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          1050.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1465.998 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 549009.003 ops/s
[info]                  ·gc.alloc.rate:      357.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 545939.071 ops/s
[info]                  ·gc.alloc.rate:                   370.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              1068.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1474.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 547632.241 ops/s
[info]                  ·gc.alloc.rate:               370.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          1065.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1926.833 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 549540.680 ops/s
[info]                  ·gc.alloc.rate:      357.656 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   548269.660 ±(99.9%) 5749.318 ops/s [Average]
[info]   (min, avg, max) = (545939.071, 548269.660, 549540.680), stdev = 1493.080
[info]   CI (99.9%): [542520.342, 554018.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   364.617 ±(99.9%) 26.049 MB/sec [Average]
[info]   (min, avg, max) = (357.198, 364.617, 370.931), stdev = 6.765
[info]   CI (99.9%): [338.567, 390.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1046.516 ±(99.9%) 83.183 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1046.516, 1068.207), stdev = 21.602
[info]   CI (99.9%): [963.333, 1129.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.803 ±(99.9%) 1216.913 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.803, 670.724), stdev = 316.029
[info]   CI (99.9%): [≈ 0, 1555.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   973.540 ±(99.9%) 3496.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 973.540, 1926.833), stdev = 908.044
[info]   CI (99.9%): [≈ 0, 4470.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4541.219 ops/s
[info] # Warmup Iteration   2: 36980.674 ops/s
[info] # Warmup Iteration   3: 41961.035 ops/s
[info] # Warmup Iteration   4: 41246.539 ops/s
[info] # Warmup Iteration   5: 42125.120 ops/s
[info] Iteration   1: 42375.894 ops/s
[info]                  ·gc.alloc.rate:                   2105.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              78175.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74666.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 42658.963 ops/s
[info]                  ·gc.alloc.rate:                   2101.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              77515.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98651.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42736.175 ops/s
[info]                  ·gc.alloc.rate:               2109.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          77671.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73696.184 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 42559.053 ops/s
[info]                  ·gc.alloc.rate:                   2086.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              77160.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74041.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42549.736 ops/s
[info]                  ·gc.alloc.rate:               2112.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          78111.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74180.191 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   42575.964 ±(99.9%) 522.179 ops/s [Average]
[info]   (min, avg, max) = (42375.894, 42575.964, 42736.175), stdev = 135.608
[info]   CI (99.9%): [42053.785, 43098.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2102.934 ±(99.9%) 38.757 MB/sec [Average]
[info]   (min, avg, max) = (2086.549, 2102.934, 2112.295), stdev = 10.065
[info]   CI (99.9%): [2064.176, 2141.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77726.797 ±(99.9%) 1631.165 B/op [Average]
[info]   (min, avg, max) = (77160.548, 77726.797, 78175.714), stdev = 423.608
[info]   CI (99.9%): [76095.632, 79357.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.898 ±(99.9%) 1152.009 MB/sec [Average]
[info]   (min, avg, max) = (2001.240, 2138.898, 2674.031), stdev = 299.173
[info]   CI (99.9%): [986.889, 3290.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79047.282 ±(99.9%) 42221.782 B/op [Average]
[info]   (min, avg, max) = (73696.184, 79047.282, 98651.918), stdev = 10964.863
[info]   CI (99.9%): [36825.500, 121269.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 5.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 3.415), stdev = 1.477
[info]   CI (99.9%): [≈ 0, 6.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   32.732 ±(99.9%) 211.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.732, 126.795), stdev = 54.826
[info]   CI (99.9%): [≈ 0, 243.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.464
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17676.468 ops/s
[info] # Warmup Iteration   2: 73498.088 ops/s
[info] # Warmup Iteration   3: 74325.948 ops/s
[info] # Warmup Iteration   4: 75347.968 ops/s
[info] # Warmup Iteration   5: 75390.462 ops/s
[info] Iteration   1: 75387.668 ops/s
[info]                  ·gc.alloc.rate:               611.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          12773.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13969.610 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 75446.628 ops/s
[info]                  ·gc.alloc.rate:               614.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          12810.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13958.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 75485.339 ops/s
[info]                  ·gc.alloc.rate:               623.688 MB/sec
[info]                  ·gc.alloc.rate.norm:          13003.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13958.421 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 75040.907 ops/s
[info]                  ·gc.alloc.rate:                   622.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              13050.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14041.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 74605.659 ops/s
[info]                  ·gc.alloc.rate:      591.216 MB/sec
[info]                  ·gc.alloc.rate.norm: 12472.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   75193.240 ±(99.9%) 1435.348 ops/s [Average]
[info]   (min, avg, max) = (74605.659, 75193.240, 75485.339), stdev = 372.755
[info]   CI (99.9%): [73757.892, 76628.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   612.616 ±(99.9%) 50.060 MB/sec [Average]
[info]   (min, avg, max) = (591.216, 612.616, 623.688), stdev = 13.000
[info]   CI (99.9%): [562.557, 662.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12822.013 ±(99.9%) 882.633 B/op [Average]
[info]   (min, avg, max) = (12472.006, 12822.013, 13050.447), stdev = 229.217
[info]   CI (99.9%): [11939.380, 13704.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535.445 ±(99.9%) 1152.586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.445, 669.490), stdev = 299.323
[info]   CI (99.9%): [≈ 0, 1688.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11185.543 ±(99.9%) 24078.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11185.543, 14041.370), stdev = 6253.005
[info]   CI (99.9%): [≈ 0, 35263.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.437), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.812 ops/s
[info] # Warmup Iteration   2: 80811.474 ops/s
[info] # Warmup Iteration   3: 84758.623 ops/s
[info] # Warmup Iteration   4: 88134.159 ops/s
[info] # Warmup Iteration   5: 87795.777 ops/s
[info] Iteration   1: 87729.090 ops/s
[info]                  ·gc.alloc.rate:               511.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          9168.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11950.401 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 88121.295 ops/s
[info]                  ·gc.alloc.rate:      498.174 MB/sec
[info]                  ·gc.alloc.rate.norm: 8897.305 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 88057.637 ops/s
[info]                  ·gc.alloc.rate:               515.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          9205.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11906.301 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 88154.292 ops/s
[info]                  ·gc.alloc.rate:                   514.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              9191.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11904.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 87977.834 ops/s
[info]                  ·gc.alloc.rate:                   522.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              9336.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11928.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   88008.030 ±(99.9%) 654.048 ops/s [Average]
[info]   (min, avg, max) = (87729.090, 88008.030, 88154.292), stdev = 169.854
[info]   CI (99.9%): [87353.981, 88662.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   512.252 ±(99.9%) 33.956 MB/sec [Average]
[info]   (min, avg, max) = (498.174, 512.252, 522.090), stdev = 8.818
[info]   CI (99.9%): [478.296, 546.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9159.847 ±(99.9%) 618.486 B/op [Average]
[info]   (min, avg, max) = (8897.305, 9159.847, 9336.165), stdev = 160.619
[info]   CI (99.9%): [8541.361, 9778.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.243 ±(99.9%) 1147.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.243, 667.064), stdev = 298.092
[info]   CI (99.9%): [≈ 0, 1681.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   9538.033 ±(99.9%) 20531.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9538.033, 11950.401), stdev = 5331.955
[info]   CI (99.9%): [≈ 0, 30069.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.126 ±(99.9%) 0.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.538), stdev = 0.234
[info]   CI (99.9%): [≈ 0, 1.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:24:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35413.194 ops/s
[info] # Warmup Iteration   2: 75262.849 ops/s
[info] # Warmup Iteration   3: 76786.132 ops/s
[info] # Warmup Iteration   4: 78241.872 ops/s
[info] # Warmup Iteration   5: 78392.154 ops/s
[info] Iteration   1: 75838.176 ops/s
[info]                  ·gc.alloc.rate:               467.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          9694.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10617.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 78413.510 ops/s
[info]                  ·gc.alloc.rate:                   477.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13403.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 78627.640 ops/s
[info]                  ·gc.alloc.rate:      463.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 9280.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78523.120 ops/s
[info]                  ·gc.alloc.rate:               477.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          9562.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13384.571 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 78520.702 ops/s
[info]                  ·gc.alloc.rate:               486.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          9743.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13398.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   77984.630 ±(99.9%) 4629.593 ops/s [Average]
[info]   (min, avg, max) = (75838.176, 77984.630, 78627.640), stdev = 1202.291
[info]   CI (99.9%): [73355.036, 82614.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   474.441 ±(99.9%) 34.909 MB/sec [Average]
[info]   (min, avg, max) = (463.696, 474.441, 486.296), stdev = 9.066
[info]   CI (99.9%): [439.532, 509.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9574.487 ±(99.9%) 694.218 B/op [Average]
[info]   (min, avg, max) = (9280.005, 9574.487, 9743.061), stdev = 180.286
[info]   CI (99.9%): [8880.268, 10268.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   503.203 ±(99.9%) 1114.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.203, 668.726), stdev = 289.352
[info]   CI (99.9%): [≈ 0, 1617.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10160.722 ±(99.9%) 22356.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10160.722, 13403.856), stdev = 5806.036
[info]   CI (99.9%): [≈ 0, 32517.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.418), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42247.857 ops/s
[info] # Warmup Iteration   2: 82228.752 ops/s
[info] # Warmup Iteration   3: 84081.332 ops/s
[info] # Warmup Iteration   4: 87379.710 ops/s
[info] # Warmup Iteration   5: 83681.330 ops/s
[info] Iteration   1: 85107.094 ops/s
[info]                  ·gc.alloc.rate:                   511.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              9467.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9460.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 87556.617 ops/s
[info]                  ·gc.alloc.rate:               521.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          9364.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12058.379 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 87654.388 ops/s
[info]                  ·gc.alloc.rate:               513.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          9210.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12044.486 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87618.609 ops/s
[info]                  ·gc.alloc.rate:      495.255 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87266.051 ops/s
[info]                  ·gc.alloc.rate:                   512.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              9238.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12109.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   87040.552 ±(99.9%) 4203.370 ops/s [Average]
[info]   (min, avg, max) = (85107.094, 87040.552, 87654.388), stdev = 1091.602
[info]   CI (99.9%): [82837.182, 91243.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   510.726 ±(99.9%) 36.304 MB/sec [Average]
[info]   (min, avg, max) = (495.255, 510.726, 521.055), stdev = 9.428
[info]   CI (99.9%): [474.422, 547.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9235.491 ±(99.9%) 831.599 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9235.491, 9467.663), stdev = 215.964
[info]   CI (99.9%): [8403.893, 10067.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.990 ±(99.9%) 1119.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.990, 671.440), stdev = 290.627
[info]   CI (99.9%): [≈ 0, 1624.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9134.666 ±(99.9%) 20139.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9134.666, 12109.627), stdev = 5230.059
[info]   CI (99.9%): [≈ 0, 29273.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.152 ±(99.9%) 0.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.385), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51391.355 ops/s
[info] # Warmup Iteration   2: 81886.861 ops/s
[info] # Warmup Iteration   3: 85932.626 ops/s
[info] # Warmup Iteration   4: 87575.557 ops/s
[info] # Warmup Iteration   5: 87176.996 ops/s
[info] Iteration   1: 87470.725 ops/s
[info]                  ·gc.alloc.rate:               444.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          8001.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9204.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 88168.159 ops/s
[info]                  ·gc.alloc.rate:      428.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87890.821 ops/s
[info]                  ·gc.alloc.rate:               447.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          8016.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12012.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 87579.342 ops/s
[info]                  ·gc.alloc.rate:                   442.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              7946.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12055.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.748 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88001.034 ops/s
[info]                  ·gc.alloc.rate:      435.875 MB/sec
[info]                  ·gc.alloc.rate.norm: 7792.515 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   87822.016 ±(99.9%) 1120.816 ops/s [Average]
[info]   (min, avg, max) = (87470.725, 87822.016, 88168.159), stdev = 291.072
[info]   CI (99.9%): [86701.201, 88942.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   439.880 ±(99.9%) 28.980 MB/sec [Average]
[info]   (min, avg, max) = (428.898, 439.880, 447.680), stdev = 7.526
[info]   CI (99.9%): [410.900, 468.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7882.595 ±(99.9%) 595.274 B/op [Average]
[info]   (min, avg, max) = (7656.005, 7882.595, 8016.529), stdev = 154.591
[info]   CI (99.9%): [7287.321, 8477.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.662 ±(99.9%) 1326.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.662, 670.832), stdev = 344.551
[info]   CI (99.9%): [≈ 0, 1697.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6654.522 ±(99.9%) 23810.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6654.522, 12055.212), stdev = 6183.541
[info]   CI (99.9%): [≈ 0, 30465.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 1.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.748), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 1.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1676.225 ops/s
[info] # Warmup Iteration   2: 8725.578 ops/s
[info] # Warmup Iteration   3: 9901.405 ops/s
[info] # Warmup Iteration   4: 10027.913 ops/s
[info] # Warmup Iteration   5: 10084.321 ops/s
[info] Iteration   1: 9967.641 ops/s
[info]                  ·gc.alloc.rate:                   1634.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              258028.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211902.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10026.402 ops/s
[info]                  ·gc.alloc.rate:                   1655.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              259825.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316172.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 490.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9866.131 ops/s
[info]                  ·gc.alloc.rate:                   1623.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              258806.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214008.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9822.170 ops/s
[info]                  ·gc.alloc.rate:                   1645.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              263566.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321702.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10041.255 ops/s
[info]                  ·gc.alloc.rate:                   1654.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              259352.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209422.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9944.720 ±(99.9%) 373.884 ops/s [Average]
[info]   (min, avg, max) = (9822.170, 9944.720, 10041.255), stdev = 97.097
[info]   CI (99.9%): [9570.835, 10318.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1642.549 ±(99.9%) 52.890 MB/sec [Average]
[info]   (min, avg, max) = (1623.260, 1642.549, 1655.258), stdev = 13.735
[info]   CI (99.9%): [1589.659, 1695.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   259915.970 ±(99.9%) 8268.188 B/op [Average]
[info]   (min, avg, max) = (258028.117, 259915.970, 263566.064), stdev = 2147.222
[info]   CI (99.9%): [251647.782, 268184.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.566 ±(99.9%) 1414.817 MB/sec [Average]
[info]   (min, avg, max) = (1336.198, 1608.566, 2014.223), stdev = 367.423
[info]   CI (99.9%): [193.749, 3023.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   254641.767 ±(99.9%) 226220.717 B/op [Average]
[info]   (min, avg, max) = (209422.885, 254641.767, 321702.775), stdev = 58748.802
[info]   CI (99.9%): [28421.051, 480862.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 5.115 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.824, 3.122), stdev = 1.328
[info]   CI (99.9%): [≈ 0, 5.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   129.887 ±(99.9%) 802.695 B/op [Average]
[info]   (min, avg, max) = (3.262, 129.887, 490.099), stdev = 208.457
[info]   CI (99.9%): [≈ 0, 932.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.435
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:23:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 907.503 ops/s
[info] # Warmup Iteration   2: 9100.907 ops/s
[info] # Warmup Iteration   3: 9776.775 ops/s
[info] # Warmup Iteration   4: 10078.298 ops/s
[info] # Warmup Iteration   5: 10076.123 ops/s
[info] Iteration   1: 9980.751 ops/s
[info]                  ·gc.alloc.rate:                   1555.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              245252.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316263.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 10047.483 ops/s
[info]                  ·gc.alloc.rate:                   1560.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              244393.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209715.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 9714.804 ops/s
[info]                  ·gc.alloc.rate:                   1523.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              246768.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217010.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 645.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10096.789 ops/s
[info]                  ·gc.alloc.rate:                   1568.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              244542.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208282.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9997.480 ops/s
[info]                  ·gc.alloc.rate:                   1567.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              246732.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314918.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9967.461 ±(99.9%) 571.282 ops/s [Average]
[info]   (min, avg, max) = (9714.804, 9967.461, 10096.789), stdev = 148.360
[info]   CI (99.9%): [9396.180, 10538.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1555.225 ±(99.9%) 70.560 MB/sec [Average]
[info]   (min, avg, max) = (1523.988, 1555.225, 1568.900), stdev = 18.324
[info]   CI (99.9%): [1484.665, 1625.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245537.943 ±(99.9%) 4443.026 B/op [Average]
[info]   (min, avg, max) = (244393.719, 245537.943, 246768.673), stdev = 1153.840
[info]   CI (99.9%): [241094.917, 249980.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1604.376 ±(99.9%) 1402.187 MB/sec [Average]
[info]   (min, avg, max) = (1336.270, 1604.376, 2005.629), stdev = 364.143
[info]   CI (99.9%): [202.189, 3006.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   253238.063 ±(99.9%) 219558.488 B/op [Average]
[info]   (min, avg, max) = (208282.350, 253238.063, 316263.882), stdev = 57018.642
[info]   CI (99.9%): [33679.575, 472796.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.905 ±(99.9%) 6.667 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.905, 3.985), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   145.934 ±(99.9%) 1080.479 B/op [Average]
[info]   (min, avg, max) = (3.260, 145.934, 645.183), stdev = 280.597
[info]   CI (99.9%): [≈ 0, 1226.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 12.000), stdev = 3.715
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91067.145 ops/s
[info] # Warmup Iteration   2: 154564.562 ops/s
[info] # Warmup Iteration   3: 155609.733 ops/s
[info] # Warmup Iteration   4: 156353.273 ops/s
[info] # Warmup Iteration   5: 156739.015 ops/s
[info] Iteration   1: 157049.582 ops/s
[info]                  ·gc.alloc.rate:      408.713 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 156501.011 ops/s
[info]                  ·gc.alloc.rate:               420.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          4227.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5144.906 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 156694.370 ops/s
[info]                  ·gc.alloc.rate:                   432.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              4347.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6741.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 157210.164 ops/s
[info]                  ·gc.alloc.rate:      409.135 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 155882.120 ops/s
[info]                  ·gc.alloc.rate:               432.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          4366.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6775.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   156667.449 ±(99.9%) 2006.156 ops/s [Average]
[info]   (min, avg, max) = (155882.120, 156667.449, 157210.164), stdev = 520.992
[info]   CI (99.9%): [154661.293, 158673.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   420.696 ±(99.9%) 45.647 MB/sec [Average]
[info]   (min, avg, max) = (408.713, 420.696, 432.816), stdev = 11.854
[info]   CI (99.9%): [375.050, 466.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4226.605 ±(99.9%) 502.687 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4226.605, 4366.290), stdev = 130.546
[info]   CI (99.9%): [3723.918, 4729.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.768 ±(99.9%) 1327.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.768, 671.154), stdev = 344.671
[info]   CI (99.9%): [≈ 0, 1697.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3732.370 ±(99.9%) 13362.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3732.370, 6775.876), stdev = 3470.289
[info]   CI (99.9%): [≈ 0, 17095.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.209), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373.715 ops/s
[info] # Warmup Iteration   2: 4697.421 ops/s
[info] # Warmup Iteration   3: 5452.425 ops/s
[info] # Warmup Iteration   4: 5609.168 ops/s
[info] # Warmup Iteration   5: 5644.292 ops/s
[info] Iteration   1: 5642.204 ops/s
[info]                  ·gc.alloc.rate:               1474.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          411342.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 372938.514 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 5630.893 ops/s
[info]                  ·gc.alloc.rate:                   1461.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              408605.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     373946.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 5656.086 ops/s
[info]                  ·gc.alloc.rate:                   1480.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              411845.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372413.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1176.274 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 5685.132 ops/s
[info]                  ·gc.alloc.rate:                   1487.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              411712.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370053.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.667 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5531.288 ops/s
[info]                  ·gc.alloc.rate:                   1474.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              419366.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568096.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5629.121 ±(99.9%) 224.611 ops/s [Average]
[info]   (min, avg, max) = (5531.288, 5629.121, 5685.132), stdev = 58.331
[info]   CI (99.9%): [5404.510, 5853.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1475.875 ±(99.9%) 36.175 MB/sec [Average]
[info]   (min, avg, max) = (1461.965, 1475.875, 1487.558), stdev = 9.395
[info]   CI (99.9%): [1439.700, 1512.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   412574.410 ±(99.9%) 15483.747 B/op [Average]
[info]   (min, avg, max) = (408605.268, 412574.410, 419366.318), stdev = 4021.080
[info]   CI (99.9%): [397090.663, 428058.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.691 ±(99.9%) 1136.778 MB/sec [Average]
[info]   (min, avg, max) = (1337.019, 1469.691, 1997.792), stdev = 295.218
[info]   CI (99.9%): [332.913, 2606.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   411489.575 ±(99.9%) 337154.098 B/op [Average]
[info]   (min, avg, max) = (370053.109, 411489.575, 568096.941), stdev = 87557.849
[info]   CI (99.9%): [74335.476, 748643.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.950 ±(99.9%) 7.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.950, 4.228), stdev = 1.837
[info]   CI (99.9%): [≈ 0, 8.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   264.379 ±(99.9%) 1967.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 264.379, 1176.274), stdev = 510.925
[info]   CI (99.9%): [≈ 0, 2231.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 9.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8618.338 ops/s
[info] # Warmup Iteration   2: 19700.066 ops/s
[info] # Warmup Iteration   3: 20410.867 ops/s
[info] # Warmup Iteration   4: 20412.160 ops/s
[info] # Warmup Iteration   5: 20327.371 ops/s
[info] Iteration   1: 20194.751 ops/s
[info]                  ·gc.alloc.rate:                   1582.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              123314.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156834.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 20339.327 ops/s
[info]                  ·gc.alloc.rate:                   1574.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              121784.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103862.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 20217.384 ops/s
[info]                  ·gc.alloc.rate:                   1588.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              123654.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104437.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20266.220 ops/s
[info]                  ·gc.alloc.rate:                   1577.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              122407.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155654.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.455 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 20462.051 ops/s
[info]                  ·gc.alloc.rate:               1585.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          121955.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102879.928 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   20295.947 ±(99.9%) 416.373 ops/s [Average]
[info]   (min, avg, max) = (20194.751, 20295.947, 20462.051), stdev = 108.131
[info]   CI (99.9%): [19879.573, 20712.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1581.526 ±(99.9%) 22.849 MB/sec [Average]
[info]   (min, avg, max) = (1574.048, 1581.526, 1588.481), stdev = 5.934
[info]   CI (99.9%): [1558.677, 1604.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122623.619 ±(99.9%) 3185.015 B/op [Average]
[info]   (min, avg, max) = (121784.985, 122623.619, 123654.944), stdev = 827.138
[info]   CI (99.9%): [119438.604, 125808.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1607.915 ±(99.9%) 1409.807 MB/sec [Average]
[info]   (min, avg, max) = (1337.619, 1607.915, 2012.404), stdev = 366.123
[info]   CI (99.9%): [198.108, 3017.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   124733.896 ±(99.9%) 110796.974 B/op [Average]
[info]   (min, avg, max) = (102879.928, 124733.896, 156834.741), stdev = 28773.622
[info]   CI (99.9%): [13936.922, 235530.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 2.956), stdev = 1.263
[info]   CI (99.9%): [≈ 0, 5.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   59.030 ±(99.9%) 376.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.030, 228.730), stdev = 97.678
[info]   CI (99.9%): [≈ 0, 435.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:22:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4612.454 ops/s
[info] # Warmup Iteration   2: 21191.714 ops/s
[info] # Warmup Iteration   3: 22813.920 ops/s
[info] # Warmup Iteration   4: 23220.069 ops/s
[info] # Warmup Iteration   5: 23195.815 ops/s
[info] Iteration   1: 23234.822 ops/s
[info]                  ·gc.alloc.rate:               1568.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          106219.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90693.995 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 23293.763 ops/s
[info]                  ·gc.alloc.rate:                   1572.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              106219.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90554.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23297.804 ops/s
[info]                  ·gc.alloc.rate:                   1585.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              107072.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90579.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23324.372 ops/s
[info]                  ·gc.alloc.rate:               1600.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          107975.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 135336.377 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 23377.471 ops/s
[info]                  ·gc.alloc.rate:               1576.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          106131.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89915.101 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   23305.646 ±(99.9%) 199.420 ops/s [Average]
[info]   (min, avg, max) = (23234.822, 23305.646, 23377.471), stdev = 51.789
[info]   CI (99.9%): [23106.227, 23505.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1580.413 ±(99.9%) 49.106 MB/sec [Average]
[info]   (min, avg, max) = (1568.150, 1580.413, 1600.271), stdev = 12.753
[info]   CI (99.9%): [1531.307, 1629.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106723.813 ±(99.9%) 3073.248 B/op [Average]
[info]   (min, avg, max) = (106131.247, 106723.813, 107975.717), stdev = 798.113
[info]   CI (99.9%): [103650.566, 109797.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.295 ±(99.9%) 1148.382 MB/sec [Average]
[info]   (min, avg, max) = (1335.571, 1472.295, 2005.774), stdev = 298.231
[info]   CI (99.9%): [323.913, 2620.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99415.942 ±(99.9%) 77330.375 B/op [Average]
[info]   (min, avg, max) = (89915.101, 99415.942, 135336.377), stdev = 20082.453
[info]   CI (99.9%): [22085.568, 176746.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.916), stdev = 1.749
[info]   CI (99.9%): [≈ 0, 7.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.183 ±(99.9%) 454.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.183, 264.508), stdev = 118.136
[info]   CI (99.9%): [≈ 0, 508.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86368.485 ops/s
[info] # Warmup Iteration   2: 124066.315 ops/s
[info] # Warmup Iteration   3: 134750.968 ops/s
[info] # Warmup Iteration   4: 130026.454 ops/s
[info] # Warmup Iteration   5: 134611.046 ops/s
[info] Iteration   1: 135032.581 ops/s
[info]                  ·gc.alloc.rate:      298.602 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134563.893 ops/s
[info]                  ·gc.alloc.rate:               307.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          3599.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5983.715 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 135066.437 ops/s
[info]                  ·gc.alloc.rate:      298.662 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 134422.184 ops/s
[info]                  ·gc.alloc.rate:                   313.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              3665.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5989.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 135353.701 ops/s
[info]                  ·gc.alloc.rate:      299.280 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   134887.759 ±(99.9%) 1480.935 ops/s [Average]
[info]   (min, avg, max) = (134422.184, 134887.759, 135353.701), stdev = 384.594
[info]   CI (99.9%): [133406.824, 136368.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   303.495 ±(99.9%) 25.628 MB/sec [Average]
[info]   (min, avg, max) = (298.602, 303.495, 313.199), stdev = 6.655
[info]   CI (99.9%): [277.867, 329.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3540.959 ±(99.9%) 333.803 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3540.959, 3665.499), stdev = 86.687
[info]   CI (99.9%): [3207.156, 3874.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.679 ±(99.9%) 1079.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.679, 511.800), stdev = 280.268
[info]   CI (99.9%): [≈ 0, 1283.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2394.706 ±(99.9%) 12626.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2394.706, 5989.813), stdev = 3279.086
[info]   CI (99.9%): [≈ 0, 15021.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.487), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98235.822 ops/s
[info] # Warmup Iteration   2: 132972.578 ops/s
[info] # Warmup Iteration   3: 139207.182 ops/s
[info] # Warmup Iteration   4: 139334.927 ops/s
[info] # Warmup Iteration   5: 139767.652 ops/s
[info] Iteration   1: 139815.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 139664.543 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 139826.765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 139758.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 139767.493 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   139766.729 ±(99.9%) 247.461 ops/s [Average]
[info]   (min, avg, max) = (139664.543, 139766.729, 139826.765), stdev = 64.265
[info]   CI (99.9%): [139519.268, 140014.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9163.808 ops/s
[info] # Warmup Iteration   2: 21444.247 ops/s
[info] # Warmup Iteration   3: 22882.578 ops/s
[info] # Warmup Iteration   4: 22500.286 ops/s
[info] # Warmup Iteration   5: 22905.186 ops/s
[info] Iteration   1: 22011.773 ops/s
[info]                  ·gc.alloc.rate:                   1543.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              110352.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95831.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 23106.415 ops/s
[info]                  ·gc.alloc.rate:                   1597.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              108803.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137027.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 23319.637 ops/s
[info]                  ·gc.alloc.rate:                   1604.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              108280.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90453.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23090.600 ops/s
[info]                  ·gc.alloc.rate:                   1614.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              110012.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136713.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23352.120 ops/s
[info]                  ·gc.alloc.rate:                   1617.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              108989.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90060.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   22976.109 ±(99.9%) 2126.089 ops/s [Average]
[info]   (min, avg, max) = (22011.773, 22976.109, 23352.120), stdev = 552.139
[info]   CI (99.9%): [20850.020, 25102.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1595.302 ±(99.9%) 115.827 MB/sec [Average]
[info]   (min, avg, max) = (1543.348, 1595.302, 1617.165), stdev = 30.080
[info]   CI (99.9%): [1479.475, 1711.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109287.715 ±(99.9%) 3332.851 B/op [Average]
[info]   (min, avg, max) = (108280.846, 109287.715, 110352.395), stdev = 865.531
[info]   CI (99.9%): [105954.864, 112620.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1606.906 ±(99.9%) 1412.854 MB/sec [Average]
[info]   (min, avg, max) = (1336.294, 1606.906, 2011.805), stdev = 366.914
[info]   CI (99.9%): [194.052, 3019.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110017.191 ±(99.9%) 94801.213 B/op [Average]
[info]   (min, avg, max) = (90060.090, 110017.191, 137027.240), stdev = 24619.574
[info]   CI (99.9%): [15215.979, 204818.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 4.978 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.816, 3.060), stdev = 1.293
[info]   CI (99.9%): [≈ 0, 5.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55.522 ±(99.9%) 338.930 B/op [Average]
[info]   (min, avg, max) = (1.419, 55.522, 208.433), stdev = 88.019
[info]   CI (99.9%): [≈ 0, 394.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27856.209 ops/s
[info] # Warmup Iteration   2: 115098.471 ops/s
[info] # Warmup Iteration   3: 117578.463 ops/s
[info] # Warmup Iteration   4: 125073.842 ops/s
[info] # Warmup Iteration   5: 124420.053 ops/s
[info] Iteration   1: 124659.000 ops/s
[info]                  ·gc.alloc.rate:               1752.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          22120.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16954.430 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 124908.917 ops/s
[info]                  ·gc.alloc.rate:                   1768.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              22278.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25390.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 124555.573 ops/s
[info]                  ·gc.alloc.rate:                   1787.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              22584.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25394.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 125630.066 ops/s
[info]                  ·gc.alloc.rate:                   1775.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              22247.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16764.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 125595.094 ops/s
[info]                  ·gc.alloc.rate:               1789.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          22419.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25151.533 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   125069.730 ±(99.9%) 1971.836 ops/s [Average]
[info]   (min, avg, max) = (124555.573, 125069.730, 125630.066), stdev = 512.079
[info]   CI (99.9%): [123097.894, 127041.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1774.614 ±(99.9%) 58.427 MB/sec [Average]
[info]   (min, avg, max) = (1752.292, 1774.614, 1789.080), stdev = 15.173
[info]   CI (99.9%): [1716.186, 1833.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22329.957 ±(99.9%) 683.078 B/op [Average]
[info]   (min, avg, max) = (22120.264, 22329.957, 22584.062), stdev = 177.393
[info]   CI (99.9%): [21646.880, 23013.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.721 ±(99.9%) 1413.376 MB/sec [Average]
[info]   (min, avg, max) = (1338.237, 1742.721, 2015.075), stdev = 367.049
[info]   CI (99.9%): [329.344, 3156.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21931.004 ±(99.9%) 17832.650 B/op [Average]
[info]   (min, avg, max) = (16764.732, 21931.004, 25394.161), stdev = 4631.083
[info]   CI (99.9%): [4098.354, 39763.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.664), stdev = 1.623
[info]   CI (99.9%): [≈ 0, 7.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.600 ±(99.9%) 78.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.600, 46.164), stdev = 20.445
[info]   CI (99.9%): [≈ 0, 88.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.823 ops/s
[info] # Warmup Iteration   2: 487466.012 ops/s
[info] # Warmup Iteration   3: 547355.780 ops/s
[info] # Warmup Iteration   4: 560060.697 ops/s
[info] # Warmup Iteration   5: 561171.356 ops/s
[info] Iteration   1: 563001.681 ops/s
[info]                  ·gc.alloc.rate:               596.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          1668.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1861.205 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 568126.279 ops/s
[info]                  ·gc.alloc.rate:               610.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          1690.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1844.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 564640.535 ops/s
[info]                  ·gc.alloc.rate:               600.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          1674.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1856.754 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 561871.852 ops/s
[info]                  ·gc.alloc.rate:               606.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          1699.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1865.936 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 565362.590 ops/s
[info]                  ·gc.alloc.rate:                   606.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1856.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   564600.588 ±(99.9%) 9236.579 ops/s [Average]
[info]   (min, avg, max) = (561871.852, 564600.588, 568126.279), stdev = 2398.710
[info]   CI (99.9%): [555364.008, 573837.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   604.347 ±(99.9%) 20.883 MB/sec [Average]
[info]   (min, avg, max) = (596.839, 604.347, 610.395), stdev = 5.423
[info]   CI (99.9%): [583.464, 625.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1684.305 ±(99.9%) 49.293 B/op [Average]
[info]   (min, avg, max) = (1668.126, 1684.305, 1699.655), stdev = 12.801
[info]   CI (99.9%): [1635.012, 1733.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.273 ±(99.9%) 1.807 MB/sec [Average]
[info]   (min, avg, max) = (665.921, 666.273, 667.070), stdev = 0.469
[info]   CI (99.9%): [664.466, 668.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1856.922 ±(99.9%) 30.721 B/op [Average]
[info]   (min, avg, max) = (1844.493, 1856.922, 1865.936), stdev = 7.978
[info]   CI (99.9%): [1826.200, 1887.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91700.488 ops/s
[info] # Warmup Iteration   2: 314393.085 ops/s
[info] # Warmup Iteration   3: 320317.725 ops/s
[info] # Warmup Iteration   4: 323451.339 ops/s
[info] # Warmup Iteration   5: 315706.729 ops/s
[info] Iteration   1: 322765.990 ops/s
[info]                  ·gc.alloc.rate:               469.886 MB/sec
[info]                  ·gc.alloc.rate.norm:          2291.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2494.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 321348.933 ops/s
[info]                  ·gc.alloc.rate:      456.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 2237.722 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 323515.325 ops/s
[info]                  ·gc.alloc.rate:                   482.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              2346.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3242.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 323541.336 ops/s
[info]                  ·gc.alloc.rate:               474.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          2306.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3242.076 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 323932.907 ops/s
[info]                  ·gc.alloc.rate:               484.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          2350.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3241.290 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   323020.898 ±(99.9%) 3949.267 ops/s [Average]
[info]   (min, avg, max) = (321348.933, 323020.898, 323932.907), stdev = 1025.612
[info]   CI (99.9%): [319071.632, 326970.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   473.480 ±(99.9%) 42.168 MB/sec [Average]
[info]   (min, avg, max) = (456.927, 473.480, 484.087), stdev = 10.951
[info]   CI (99.9%): [431.312, 515.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2306.581 ±(99.9%) 178.213 B/op [Average]
[info]   (min, avg, max) = (2237.722, 2306.581, 2350.996), stdev = 46.281
[info]   CI (99.9%): [2128.368, 2484.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.394 ±(99.9%) 1111.963 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.394, 667.405), stdev = 288.773
[info]   CI (99.9%): [≈ 0, 1614.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2444.045 ±(99.9%) 5406.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2444.045, 3242.207), stdev = 1404.051
[info]   CI (99.9%): [≈ 0, 7850.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.203), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 1.789
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327982.069 ops/s
[info] # Warmup Iteration   2: 693845.288 ops/s
[info] # Warmup Iteration   3: 756058.682 ops/s
[info] # Warmup Iteration   4: 766856.311 ops/s
[info] # Warmup Iteration   5: 765040.702 ops/s
[info] Iteration   1: 766059.164 ops/s
[info]                  ·gc.alloc.rate:                   516.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1061.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1051.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 764577.463 ops/s
[info]                  ·gc.alloc.rate:               517.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          1065.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1380.156 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 764586.905 ops/s
[info]                  ·gc.alloc.rate:                   511.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              1053.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1380.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 769050.203 ops/s
[info]                  ·gc.alloc.rate:      500.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 767977.971 ops/s
[info]                  ·gc.alloc.rate:               523.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          1073.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1375.364 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   766450.341 ±(99.9%) 7755.492 ops/s [Average]
[info]   (min, avg, max) = (764577.463, 766450.341, 769050.203), stdev = 2014.077
[info]   CI (99.9%): [758694.849, 774205.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   514.033 ±(99.9%) 33.689 MB/sec [Average]
[info]   (min, avg, max) = (500.362, 514.033, 523.818), stdev = 8.749
[info]   CI (99.9%): [480.344, 547.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1055.512 ±(99.9%) 73.155 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1055.512, 1073.309), stdev = 18.998
[info]   CI (99.9%): [982.358, 1128.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.765 ±(99.9%) 1118.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.765, 671.233), stdev = 290.463
[info]   CI (99.9%): [≈ 0, 1623.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1037.352 ±(99.9%) 2298.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1037.352, 1380.156), stdev = 596.984
[info]   CI (99.9%): [≈ 0, 3336.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7931.469 ops/s
[info] # Warmup Iteration   2: 66286.903 ops/s
[info] # Warmup Iteration   3: 74556.291 ops/s
[info] # Warmup Iteration   4: 76041.073 ops/s
[info] # Warmup Iteration   5: 74720.958 ops/s
[info] Iteration   1: 76109.334 ops/s
[info]                  ·gc.alloc.rate:                   3125.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              64639.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69013.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.596 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 77135.539 ops/s
[info]                  ·gc.alloc.rate:                   3154.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              64365.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54537.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.849 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 76945.835 ops/s
[info]                  ·gc.alloc.rate:                   3201.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              65479.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68539.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.852 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 77334.031 ops/s
[info]                  ·gc.alloc.rate:               3218.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          65483.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68477.935 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 75840.636 ops/s
[info]                  ·gc.alloc.rate:               3131.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          64978.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56035.475 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   76673.075 ±(99.9%) 2536.675 ops/s [Average]
[info]   (min, avg, max) = (75840.636, 76673.075, 77334.031), stdev = 658.766
[info]   CI (99.9%): [74136.400, 79209.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3166.246 ±(99.9%) 160.417 MB/sec [Average]
[info]   (min, avg, max) = (3125.870, 3166.246, 3218.135), stdev = 41.660
[info]   CI (99.9%): [3005.829, 3326.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64989.092 ±(99.9%) 1921.370 B/op [Average]
[info]   (min, avg, max) = (64365.648, 64989.092, 65483.472), stdev = 498.974
[info]   CI (99.9%): [63067.721, 66910.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3085.393 ±(99.9%) 1403.066 MB/sec [Average]
[info]   (min, avg, max) = (2672.879, 3085.393, 3365.295), stdev = 364.372
[info]   CI (99.9%): [1682.327, 4488.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63320.753 ±(99.9%) 28326.187 B/op [Average]
[info]   (min, avg, max) = (54537.587, 63320.753, 69013.357), stdev = 7356.221
[info]   CI (99.9%): [34994.565, 91646.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.271), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.459 ±(99.9%) 9.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.459, 5.596), stdev = 2.351
[info]   CI (99.9%): [≈ 0, 10.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73026.648 ops/s
[info] # Warmup Iteration   2: 194984.800 ops/s
[info] # Warmup Iteration   3: 199411.273 ops/s
[info] # Warmup Iteration   4: 202747.578 ops/s
[info] # Warmup Iteration   5: 203005.634 ops/s
[info] Iteration   1: 203711.895 ops/s
[info]                  ·gc.alloc.rate:               1478.071 MB/sec
[info]                  ·gc.alloc.rate.norm:          11415.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10354.934 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 203208.739 ops/s
[info]                  ·gc.alloc.rate:                   1496.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              11594.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10390.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 203380.948 ops/s
[info]                  ·gc.alloc.rate:                   1486.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              11502.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10387.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 202736.831 ops/s
[info]                  ·gc.alloc.rate:                   1493.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              11592.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10394.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 200516.551 ops/s
[info]                  ·gc.alloc.rate:                   1478.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              11602.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10499.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   202710.993 ±(99.9%) 4914.151 ops/s [Average]
[info]   (min, avg, max) = (200516.551, 202710.993, 203711.895), stdev = 1276.189
[info]   CI (99.9%): [197796.842, 207625.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1486.586 ±(99.9%) 33.166 MB/sec [Average]
[info]   (min, avg, max) = (1478.071, 1486.586, 1496.940), stdev = 8.613
[info]   CI (99.9%): [1453.420, 1519.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11541.392 ±(99.9%) 313.649 B/op [Average]
[info]   (min, avg, max) = (11415.319, 11541.392, 11602.148), stdev = 81.454
[info]   CI (99.9%): [11227.744, 11855.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1340.254 ±(99.9%) 7.452 MB/sec [Average]
[info]   (min, avg, max) = (1337.613, 1340.254, 1342.341), stdev = 1.935
[info]   CI (99.9%): [1332.801, 1347.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10405.349 ±(99.9%) 210.953 B/op [Average]
[info]   (min, avg, max) = (10354.934, 10405.349, 10499.198), stdev = 54.784
[info]   CI (99.9%): [10194.396, 10616.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.539), stdev = 1.567
[info]   CI (99.9%): [≈ 0, 6.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.704 ±(99.9%) 46.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.704, 27.386), stdev = 12.123
[info]   CI (99.9%): [≈ 0, 52.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.723 ops/s
[info] # Warmup Iteration   2: 642506.545 ops/s
[info] # Warmup Iteration   3: 646968.768 ops/s
[info] # Warmup Iteration   4: 659854.685 ops/s
[info] # Warmup Iteration   5: 657430.620 ops/s
[info] Iteration   1: 653477.684 ops/s
[info]                  ·gc.alloc.rate:               369.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          889.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1232.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 660378.759 ops/s
[info]                  ·gc.alloc.rate:      359.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 658541.853 ops/s
[info]                  ·gc.alloc.rate:                   382.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              914.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 660178.963 ops/s
[info]                  ·gc.alloc.rate:      359.794 MB/sec
[info]                  ·gc.alloc.rate.norm: 857.728 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 658283.611 ops/s
[info]                  ·gc.alloc.rate:                   372.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              889.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   658172.174 ±(99.9%) 10734.173 ops/s [Average]
[info]   (min, avg, max) = (653477.684, 658172.174, 660378.759), stdev = 2787.631
[info]   CI (99.9%): [647438.001, 668906.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   368.614 ±(99.9%) 37.305 MB/sec [Average]
[info]   (min, avg, max) = (359.167, 368.614, 382.581), stdev = 9.688
[info]   CI (99.9%): [331.308, 405.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   881.476 ±(99.9%) 94.828 B/op [Average]
[info]   (min, avg, max) = (856.001, 881.476, 914.320), stdev = 24.627
[info]   CI (99.9%): [786.648, 976.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.662 ±(99.9%) 1318.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.662, 665.880), stdev = 342.382
[info]   CI (99.9%): [≈ 0, 1687.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   883.071 ±(99.9%) 3155.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 883.071, 1591.947), stdev = 819.376
[info]   CI (99.9%): [≈ 0, 4038.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.025), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.060), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279702.125 ops/s
[info] # Warmup Iteration   2: 627050.650 ops/s
[info] # Warmup Iteration   3: 660010.090 ops/s
[info] # Warmup Iteration   4: 658044.973 ops/s
[info] # Warmup Iteration   5: 658132.806 ops/s
[info] Iteration   1: 654653.124 ops/s
[info]                  ·gc.alloc.rate:               505.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          1215.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1229.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 654418.639 ops/s
[info]                  ·gc.alloc.rate:               504.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          1213.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1605.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 656855.588 ops/s
[info]                  ·gc.alloc.rate:               512.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          1228.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1599.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 652470.656 ops/s
[info]                  ·gc.alloc.rate:      484.230 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 657076.815 ops/s
[info]                  ·gc.alloc.rate:               510.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          1222.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1600.402 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   655094.964 ±(99.9%) 7348.367 ops/s [Average]
[info]   (min, avg, max) = (652470.656, 655094.964, 657076.815), stdev = 1908.348
[info]   CI (99.9%): [647746.597, 662443.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   503.487 ±(99.9%) 43.487 MB/sec [Average]
[info]   (min, avg, max) = (484.230, 503.487, 512.776), stdev = 11.293
[info]   CI (99.9%): [460.000, 546.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1209.501 ±(99.9%) 92.281 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1209.501, 1228.376), stdev = 23.965
[info]   CI (99.9%): [1117.220, 1301.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.993 ±(99.9%) 1113.600 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.993, 668.147), stdev = 289.199
[info]   CI (99.9%): [≈ 0, 1616.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1207.024 ±(99.9%) 2671.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1207.024, 1605.351), stdev = 693.686
[info]   CI (99.9%): [≈ 0, 3878.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 593961.579 ops/s
[info] # Warmup Iteration   2: 1082650.766 ops/s
[info] # Warmup Iteration   3: 1067093.440 ops/s
[info] # Warmup Iteration   4: 1114270.539 ops/s
[info] # Warmup Iteration   5: 1113016.021 ops/s
[info] Iteration   1: 1117084.179 ops/s
[info]                  ·gc.alloc.rate:               620.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944.605 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1115143.017 ops/s
[info]                  ·gc.alloc.rate:               632.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          892.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 946.281 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1113407.583 ops/s
[info]                  ·gc.alloc.rate:               630.065 MB/sec
[info]                  ·gc.alloc.rate.norm:          890.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 948.659 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1114592.530 ops/s
[info]                  ·gc.alloc.rate:               620.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 947.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1112390.987 ops/s
[info]                  ·gc.alloc.rate:                   622.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     950.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1114523.659 ±(99.9%) 6871.680 ops/s [Average]
[info]   (min, avg, max) = (1112390.987, 1114523.659, 1117084.179), stdev = 1784.553
[info]   CI (99.9%): [1107651.979, 1121395.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   625.134 ±(99.9%) 21.390 MB/sec [Average]
[info]   (min, avg, max) = (620.352, 625.134, 632.157), stdev = 5.555
[info]   CI (99.9%): [603.744, 646.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   882.739 ±(99.9%) 31.399 B/op [Average]
[info]   (min, avg, max) = (874.595, 882.739, 892.207), stdev = 8.154
[info]   CI (99.9%): [851.340, 914.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.023 ±(99.9%) 2.181 MB/sec [Average]
[info]   (min, avg, max) = (670.459, 671.023, 671.790), stdev = 0.566
[info]   CI (99.9%): [668.842, 673.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   947.538 ±(99.9%) 8.622 B/op [Average]
[info]   (min, avg, max) = (944.605, 947.538, 950.470), stdev = 2.239
[info]   CI (99.9%): [938.915, 956.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 726773.620 ops/s
[info] # Warmup Iteration   2: 1128853.803 ops/s
[info] # Warmup Iteration   3: 1195135.743 ops/s
[info] # Warmup Iteration   4: 1195202.999 ops/s
[info] # Warmup Iteration   5: 1195810.353 ops/s
[info] Iteration   1: 1196261.044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1173875.574 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1195395.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1195350.683 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1196612.768 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1191499.033 ±(99.9%) 37994.163 ops/s [Average]
[info]   (min, avg, max) = (1173875.574, 1191499.033, 1196612.768), stdev = 9866.964
[info]   CI (99.9%): [1153504.870, 1229493.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11332.511 ops/s
[info] # Warmup Iteration   2: 31095.890 ops/s
[info] # Warmup Iteration   3: 34196.964 ops/s
[info] # Warmup Iteration   4: 34222.478 ops/s
[info] # Warmup Iteration   5: 33856.942 ops/s
[info] Iteration   1: 34177.368 ops/s
[info]                  ·gc.alloc.rate:                   1936.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              89189.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92700.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34544.585 ops/s
[info]                  ·gc.alloc.rate:                   1962.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              89365.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91594.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34529.706 ops/s
[info]                  ·gc.alloc.rate:                   1972.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              89892.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91422.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34566.581 ops/s
[info]                  ·gc.alloc.rate:                   1974.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              89866.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91293.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34605.506 ops/s
[info]                  ·gc.alloc.rate:                   1949.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              88657.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60861.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34484.749 ±(99.9%) 670.729 ops/s [Average]
[info]   (min, avg, max) = (34177.368, 34484.749, 34605.506), stdev = 174.186
[info]   CI (99.9%): [33814.021, 35155.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1958.927 ±(99.9%) 60.887 MB/sec [Average]
[info]   (min, avg, max) = (1936.829, 1958.927, 1974.226), stdev = 15.812
[info]   CI (99.9%): [1898.041, 2019.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89394.229 ±(99.9%) 1979.193 B/op [Average]
[info]   (min, avg, max) = (88657.261, 89394.229, 89892.683), stdev = 513.990
[info]   CI (99.9%): [87415.035, 91373.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.720 ±(99.9%) 1155.032 MB/sec [Average]
[info]   (min, avg, max) = (1338.170, 1874.720, 2013.074), stdev = 299.958
[info]   CI (99.9%): [719.688, 3029.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85574.612 ±(99.9%) 53240.772 B/op [Average]
[info]   (min, avg, max) = (60861.214, 85574.612, 92700.953), stdev = 13826.459
[info]   CI (99.9%): [32333.840, 138815.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 4.943 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.824, 2.998), stdev = 1.284
[info]   CI (99.9%): [≈ 0, 5.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.850 ±(99.9%) 227.618 B/op [Average]
[info]   (min, avg, max) = (0.949, 37.850, 138.039), stdev = 59.112
[info]   CI (99.9%): [≈ 0, 265.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31090.918 ops/s
[info] # Warmup Iteration   2: 120824.193 ops/s
[info] # Warmup Iteration   3: 125310.606 ops/s
[info] # Warmup Iteration   4: 132035.390 ops/s
[info] # Warmup Iteration   5: 131883.753 ops/s
[info] Iteration   1: 132341.224 ops/s
[info]                  ·gc.alloc.rate:                   1703.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              20256.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23917.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 133214.853 ops/s
[info]                  ·gc.alloc.rate:                   1694.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              20023.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15854.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 133110.767 ops/s
[info]                  ·gc.alloc.rate:                   1707.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              20186.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23767.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.861 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 133687.144 ops/s
[info]                  ·gc.alloc.rate:                   1713.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              20171.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15731.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 133551.803 ops/s
[info]                  ·gc.alloc.rate:                   1738.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              20488.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23622.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   133181.158 ±(99.9%) 2023.858 ops/s [Average]
[info]   (min, avg, max) = (132341.224, 133181.158, 133687.144), stdev = 525.590
[info]   CI (99.9%): [131157.300, 135205.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1711.507 ±(99.9%) 63.978 MB/sec [Average]
[info]   (min, avg, max) = (1694.889, 1711.507, 1738.669), stdev = 16.615
[info]   CI (99.9%): [1647.529, 1775.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20225.481 ±(99.9%) 654.453 B/op [Average]
[info]   (min, avg, max) = (20023.605, 20225.481, 20488.970), stdev = 169.959
[info]   CI (99.9%): [19571.028, 20879.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1740.806 ±(99.9%) 1412.027 MB/sec [Average]
[info]   (min, avg, max) = (1336.260, 1740.806, 2011.031), stdev = 366.699
[info]   CI (99.9%): [328.779, 3152.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20578.631 ±(99.9%) 16828.851 B/op [Average]
[info]   (min, avg, max) = (15731.032, 20578.631, 23917.337), stdev = 4370.399
[info]   CI (99.9%): [3749.780, 37407.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 5.290 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.812, 3.206), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 6.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.593 ±(99.9%) 62.494 B/op [Average]
[info]   (min, avg, max) = (0.245, 9.593, 37.875), stdev = 16.229
[info]   CI (99.9%): [≈ 0, 72.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66557.184 ops/s
[info] # Warmup Iteration   2: 194305.846 ops/s
[info] # Warmup Iteration   3: 198029.055 ops/s
[info] # Warmup Iteration   4: 201727.614 ops/s
[info] # Warmup Iteration   5: 202759.403 ops/s
[info] Iteration   1: 202784.038 ops/s
[info]                  ·gc.alloc.rate:                   1237.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              9602.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10371.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 202899.798 ops/s
[info]                  ·gc.alloc.rate:                   1233.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              9567.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10370.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 204039.554 ops/s
[info]                  ·gc.alloc.rate:               1236.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          9538.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5161.438 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 203304.820 ops/s
[info]                  ·gc.alloc.rate:                   1233.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              9548.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10363.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 203296.365 ops/s
[info]                  ·gc.alloc.rate:                   1258.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              9741.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10355.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   203264.915 ±(99.9%) 1893.484 ops/s [Average]
[info]   (min, avg, max) = (202784.038, 203264.915, 204039.554), stdev = 491.732
[info]   CI (99.9%): [201371.431, 205158.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1239.920 ±(99.9%) 39.952 MB/sec [Average]
[info]   (min, avg, max) = (1233.674, 1239.920, 1258.246), stdev = 10.376
[info]   CI (99.9%): [1199.968, 1279.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9599.679 ±(99.9%) 318.824 B/op [Average]
[info]   (min, avg, max) = (9538.779, 9599.679, 9741.177), stdev = 82.798
[info]   CI (99.9%): [9280.855, 9918.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.869 ±(99.9%) 1151.001 MB/sec [Average]
[info]   (min, avg, max) = (669.163, 1203.869, 1339.017), stdev = 298.911
[info]   CI (99.9%): [52.868, 2354.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9324.427 ±(99.9%) 8961.182 B/op [Average]
[info]   (min, avg, max) = (5161.438, 9324.427, 10371.395), stdev = 2327.190
[info]   CI (99.9%): [363.245, 18285.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 5.933 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 3.561), stdev = 1.541
[info]   CI (99.9%): [≈ 0, 6.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.543 ±(99.9%) 45.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.543, 27.558), stdev = 11.925
[info]   CI (99.9%): [≈ 0, 52.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124766.090 ops/s
[info] # Warmup Iteration   2: 227970.458 ops/s
[info] # Warmup Iteration   3: 252559.907 ops/s
[info] # Warmup Iteration   4: 253252.040 ops/s
[info] # Warmup Iteration   5: 247877.060 ops/s
[info] Iteration   1: 251147.018 ops/s
[info]                  ·gc.alloc.rate:                   1348.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              8453.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8421.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 251379.334 ops/s
[info]                  ·gc.alloc.rate:                   1361.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              8524.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8420.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 252091.910 ops/s
[info]                  ·gc.alloc.rate:                   1351.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              8439.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8400.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 254018.266 ops/s
[info]                  ·gc.alloc.rate:                   1361.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              8436.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8328.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 253919.149 ops/s
[info]                  ·gc.alloc.rate:               1362.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          8444.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8324.063 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   252511.136 ±(99.9%) 5297.780 ops/s [Average]
[info]   (min, avg, max) = (251147.018, 252511.136, 254018.266), stdev = 1375.817
[info]   CI (99.9%): [247213.355, 257808.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1357.326 ±(99.9%) 24.584 MB/sec [Average]
[info]   (min, avg, max) = (1348.913, 1357.326, 1362.443), stdev = 6.384
[info]   CI (99.9%): [1332.742, 1381.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8459.645 ±(99.9%) 141.650 B/op [Average]
[info]   (min, avg, max) = (8436.059, 8459.645, 8524.417), stdev = 36.786
[info]   CI (99.9%): [8317.995, 8601.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.395 ±(99.9%) 4.115 MB/sec [Average]
[info]   (min, avg, max) = (1342.952, 1344.395, 1345.789), stdev = 1.069
[info]   CI (99.9%): [1340.280, 1348.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8379.177 ±(99.9%) 188.403 B/op [Average]
[info]   (min, avg, max) = (8324.063, 8379.177, 8421.886), stdev = 48.928
[info]   CI (99.9%): [8190.774, 8567.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 4.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.519), stdev = 1.086
[info]   CI (99.9%): [≈ 0, 4.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.714 ±(99.9%) 26.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.714, 15.726), stdev = 6.781
[info]   CI (99.9%): [≈ 0, 29.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.286
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5964.427 ops/s
[info] # Warmup Iteration   2: 55134.780 ops/s
[info] # Warmup Iteration   3: 68933.633 ops/s
[info] # Warmup Iteration   4: 70103.318 ops/s
[info] # Warmup Iteration   5: 69411.698 ops/s
[info] Iteration   1: 70059.700 ops/s
[info]                  ·gc.alloc.rate:                   2819.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              63335.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60005.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 70331.385 ops/s
[info]                  ·gc.alloc.rate:                   2805.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              62779.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60014.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 70326.730 ops/s
[info]                  ·gc.alloc.rate:               2846.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          63688.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60212.097 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 70020.371 ops/s
[info]                  ·gc.alloc.rate:               2835.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          63713.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60670.702 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 70584.341 ops/s
[info]                  ·gc.alloc.rate:                   2856.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              63703.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60335.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   70264.505 ±(99.9%) 886.875 ops/s [Average]
[info]   (min, avg, max) = (70020.371, 70264.505, 70584.341), stdev = 230.319
[info]   CI (99.9%): [69377.631, 71151.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2832.850 ±(99.9%) 79.192 MB/sec [Average]
[info]   (min, avg, max) = (2805.707, 2832.850, 2856.998), stdev = 20.566
[info]   CI (99.9%): [2753.658, 2912.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63444.146 ±(99.9%) 1555.646 B/op [Average]
[info]   (min, avg, max) = (62779.486, 63444.146, 63713.401), stdev = 403.996
[info]   CI (99.9%): [61888.500, 64999.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2690.123 ±(99.9%) 53.770 MB/sec [Average]
[info]   (min, avg, max) = (2671.154, 2690.123, 2705.960), stdev = 13.964
[info]   CI (99.9%): [2636.353, 2743.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60247.782 ±(99.9%) 1055.564 B/op [Average]
[info]   (min, avg, max) = (60005.848, 60247.782, 60670.702), stdev = 274.127
[info]   CI (99.9%): [59192.217, 61303.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.838 ±(99.9%) 3.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.838, 2.329), stdev = 1.009
[info]   CI (99.9%): [≈ 0, 4.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74068.177 ops/s
[info] # Warmup Iteration   2: 178294.378 ops/s
[info] # Warmup Iteration   3: 182509.364 ops/s
[info] # Warmup Iteration   4: 177240.856 ops/s
[info] # Warmup Iteration   5: 183795.690 ops/s
[info] Iteration   1: 183947.995 ops/s
[info]                  ·gc.alloc.rate:               1208.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          10338.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5710.925 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 181634.522 ops/s
[info]                  ·gc.alloc.rate:                   1232.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              10681.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11567.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 182762.773 ops/s
[info]                  ·gc.alloc.rate:               1236.619 MB/sec
[info]                  ·gc.alloc.rate.norm:          10648.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11501.318 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 183567.591 ops/s
[info]                  ·gc.alloc.rate:                   1230.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              10553.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11462.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 179262.982 ops/s
[info]                  ·gc.alloc.rate:               1193.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          10481.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5877.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   182235.173 ±(99.9%) 7250.610 ops/s [Average]
[info]   (min, avg, max) = (179262.982, 182235.173, 183947.995), stdev = 1882.960
[info]   CI (99.9%): [174984.563, 189485.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1220.483 ±(99.9%) 71.492 MB/sec [Average]
[info]   (min, avg, max) = (1193.835, 1220.483, 1236.619), stdev = 18.566
[info]   CI (99.9%): [1148.991, 1291.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10540.954 ±(99.9%) 531.323 B/op [Average]
[info]   (min, avg, max) = (10338.478, 10540.954, 10681.832), stdev = 137.983
[info]   CI (99.9%): [10009.630, 11072.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1068.887 ±(99.9%) 1407.597 MB/sec [Average]
[info]   (min, avg, max) = (667.449, 1068.887, 1337.003), stdev = 365.549
[info]   CI (99.9%): [≈ 0, 2476.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9224.064 ±(99.9%) 12058.889 B/op [Average]
[info]   (min, avg, max) = (5710.925, 9224.064, 11567.468), stdev = 3131.655
[info]   CI (99.9%): [≈ 0, 21282.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.180), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275554.352 ops/s
[info] # Warmup Iteration   2: 703331.384 ops/s
[info] # Warmup Iteration   3: 681891.865 ops/s
[info] # Warmup Iteration   4: 705273.196 ops/s
[info] # Warmup Iteration   5: 709099.959 ops/s
[info] Iteration   1: 705232.422 ops/s
[info]                  ·gc.alloc.rate:               731.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          1631.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1488.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 717999.826 ops/s
[info]                  ·gc.alloc.rate:               751.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1463.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 719627.148 ops/s
[info]                  ·gc.alloc.rate:               748.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          1636.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1460.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 713556.636 ops/s
[info]                  ·gc.alloc.rate:                   738.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1629.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1474.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 719183.017 ops/s
[info]                  ·gc.alloc.rate:               744.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          1628.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1462.869 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   715119.810 ±(99.9%) 23209.850 ops/s [Average]
[info]   (min, avg, max) = (705232.422, 715119.810, 719627.148), stdev = 6027.524
[info]   CI (99.9%): [691909.960, 738329.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   742.830 ±(99.9%) 31.140 MB/sec [Average]
[info]   (min, avg, max) = (731.184, 742.830, 751.504), stdev = 8.087
[info]   CI (99.9%): [711.690, 773.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1634.673 ±(99.9%) 29.435 B/op [Average]
[info]   (min, avg, max) = (1628.331, 1634.673, 1647.059), stdev = 7.644
[info]   CI (99.9%): [1605.237, 1664.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.000 ±(99.9%) 1.943 MB/sec [Average]
[info]   (min, avg, max) = (667.241, 668.000, 668.471), stdev = 0.505
[info]   CI (99.9%): [666.057, 669.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1470.094 ±(99.9%) 45.338 B/op [Average]
[info]   (min, avg, max) = (1460.475, 1470.094, 1488.855), stdev = 11.774
[info]   CI (99.9%): [1424.756, 1515.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401341.961 ops/s
[info] # Warmup Iteration   2: 640840.353 ops/s
[info] # Warmup Iteration   3: 701080.372 ops/s
[info] # Warmup Iteration   4: 712656.157 ops/s
[info] # Warmup Iteration   5: 699729.435 ops/s
[info] Iteration   1: 711378.807 ops/s
[info]                  ·gc.alloc.rate:               563.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1484.077 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 708413.605 ops/s
[info]                  ·gc.alloc.rate:      543.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 711691.960 ops/s
[info]                  ·gc.alloc.rate:                   561.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              1241.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1483.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 703400.722 ops/s
[info]                  ·gc.alloc.rate:               564.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          1262.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1502.437 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 703662.280 ops/s
[info]                  ·gc.alloc.rate:               560.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1501.872 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   707709.475 ±(99.9%) 15494.371 ops/s [Average]
[info]   (min, avg, max) = (703400.722, 707709.475, 711691.960), stdev = 4023.839
[info]   CI (99.9%): [692215.104, 723203.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   558.625 ±(99.9%) 32.756 MB/sec [Average]
[info]   (min, avg, max) = (543.720, 558.625, 564.292), stdev = 8.507
[info]   CI (99.9%): [525.869, 591.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1242.260 ±(99.9%) 79.433 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1242.260, 1262.164), stdev = 20.628
[info]   CI (99.9%): [1162.827, 1321.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.964 ±(99.9%) 1155.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.964, 671.714), stdev = 300.172
[info]   CI (99.9%): [≈ 0, 1692.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1194.360 ±(99.9%) 2571.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1194.360, 1502.437), stdev = 667.731
[info]   CI (99.9%): [≈ 0, 3765.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:16:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331568.218 ops/s
[info] # Warmup Iteration   2: 746820.834 ops/s
[info] # Warmup Iteration   3: 774200.419 ops/s
[info] # Warmup Iteration   4: 774967.801 ops/s
[info] # Warmup Iteration   5: 775983.898 ops/s
[info] Iteration   1: 776020.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 776122.929 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 776035.885 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 775726.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 776182.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   776017.576 ±(99.9%) 675.827 ops/s [Average]
[info]   (min, avg, max) = (775726.655, 776017.576, 776182.317), stdev = 175.510
[info]   CI (99.9%): [775341.749, 776693.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112847.219 ops/s
[info] # Warmup Iteration   2: 352897.828 ops/s
[info] # Warmup Iteration   3: 343993.663 ops/s
[info] # Warmup Iteration   4: 359156.311 ops/s
[info] # Warmup Iteration   5: 355968.507 ops/s
[info] Iteration   1: 353618.627 ops/s
[info]                  ·gc.alloc.rate:               993.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          4423.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2952.942 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 354832.265 ops/s
[info]                  ·gc.alloc.rate:                   1019.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              4519.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5891.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 358963.521 ops/s
[info]                  ·gc.alloc.rate:               1009.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          4426.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2914.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 354620.360 ops/s
[info]                  ·gc.alloc.rate:                   1002.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              4449.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5905.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 359335.045 ops/s
[info]                  ·gc.alloc.rate:               999.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          4378.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2916.180 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   356273.964 ±(99.9%) 10272.572 ops/s [Average]
[info]   (min, avg, max) = (353618.627, 356273.964, 359335.045), stdev = 2667.754
[info]   CI (99.9%): [346001.392, 366546.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1005.050 ±(99.9%) 37.727 MB/sec [Average]
[info]   (min, avg, max) = (993.989, 1005.050, 1019.423), stdev = 9.798
[info]   CI (99.9%): [967.323, 1042.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4439.385 ±(99.9%) 198.799 B/op [Average]
[info]   (min, avg, max) = (4378.640, 4439.385, 4519.623), stdev = 51.628
[info]   CI (99.9%): [4240.586, 4638.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   930.767 ±(99.9%) 1402.664 MB/sec [Average]
[info]   (min, avg, max) = (663.607, 930.767, 1330.703), stdev = 364.267
[info]   CI (99.9%): [≈ 0, 2333.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4116.225 ±(99.9%) 6265.544 B/op [Average]
[info]   (min, avg, max) = (2914.837, 4116.225, 5905.476), stdev = 1627.142
[info]   CI (99.9%): [≈ 0, 10381.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1857.186 ops/s
[info] # Warmup Iteration   2: 10892.577 ops/s
[info] # Warmup Iteration   3: 11692.039 ops/s
[info] # Warmup Iteration   4: 11765.069 ops/s
[info] # Warmup Iteration   5: 11419.699 ops/s
[info] Iteration   1: 11762.572 ops/s
[info]                  ·gc.alloc.rate:                   1489.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              199255.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179590.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11660.996 ops/s
[info]                  ·gc.alloc.rate:                   1477.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              199282.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181250.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11663.195 ops/s
[info]                  ·gc.alloc.rate:                   1479.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              199669.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271896.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 505.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11664.695 ops/s
[info]                  ·gc.alloc.rate:                   1477.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              199312.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180813.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11429.979 ops/s
[info]                  ·gc.alloc.rate:                   1458.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              200848.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184179.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11636.287 ±(99.9%) 474.164 ops/s [Average]
[info]   (min, avg, max) = (11429.979, 11636.287, 11762.572), stdev = 123.139
[info]   CI (99.9%): [11162.124, 12110.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1476.516 ±(99.9%) 42.229 MB/sec [Average]
[info]   (min, avg, max) = (1458.934, 1476.516, 1489.166), stdev = 10.967
[info]   CI (99.9%): [1434.287, 1518.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   199673.767 ±(99.9%) 2609.625 B/op [Average]
[info]   (min, avg, max) = (199255.952, 199673.767, 200848.139), stdev = 677.711
[info]   CI (99.9%): [197064.142, 202283.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475.799 ±(99.9%) 1160.701 MB/sec [Average]
[info]   (min, avg, max) = (1337.855, 1475.799, 2015.001), stdev = 301.430
[info]   CI (99.9%): [315.098, 2636.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   199546.176 ±(99.9%) 155874.176 B/op [Average]
[info]   (min, avg, max) = (179590.365, 199546.176, 271896.314), stdev = 40480.029
[info]   CI (99.9%): [43672.000, 355420.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.828 ±(99.9%) 6.300 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.828, 3.747), stdev = 1.636
[info]   CI (99.9%): [≈ 0, 7.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   111.809 ±(99.9%) 850.069 B/op [Average]
[info]   (min, avg, max) = (2.785, 111.809, 505.592), stdev = 220.760
[info]   CI (99.9%): [≈ 0, 961.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1042.613 ops/s
[info] # Warmup Iteration   2: 9968.540 ops/s
[info] # Warmup Iteration   3: 10799.056 ops/s
[info] # Warmup Iteration   4: 11188.178 ops/s
[info] # Warmup Iteration   5: 10909.144 ops/s
[info] Iteration   1: 11108.783 ops/s
[info]                  ·gc.alloc.rate:                   1292.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              183107.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189234.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 11166.203 ops/s
[info]                  ·gc.alloc.rate:               1306.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          184094.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 188422.601 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 11228.870 ops/s
[info]                  ·gc.alloc.rate:               1285.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          180209.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93737.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 11182.276 ops/s
[info]                  ·gc.alloc.rate:                   1306.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              183882.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188340.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 11238.402 ops/s
[info]                  ·gc.alloc.rate:                   1300.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              182088.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187215.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11184.907 ±(99.9%) 201.435 ops/s [Average]
[info]   (min, avg, max) = (11108.783, 11184.907, 11238.402), stdev = 52.312
[info]   CI (99.9%): [10983.472, 11386.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1298.274 ±(99.9%) 34.719 MB/sec [Average]
[info]   (min, avg, max) = (1285.737, 1298.274, 1306.532), stdev = 9.016
[info]   CI (99.9%): [1263.555, 1332.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   182676.566 ±(99.9%) 6114.490 B/op [Average]
[info]   (min, avg, max) = (180209.368, 182676.566, 184094.714), stdev = 1587.914
[info]   CI (99.9%): [176562.075, 188791.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.334 ±(99.9%) 1150.651 MB/sec [Average]
[info]   (min, avg, max) = (668.790, 1203.334, 1338.204), stdev = 298.820
[info]   CI (99.9%): [52.683, 2353.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   169390.250 ±(99.9%) 162870.904 B/op [Average]
[info]   (min, avg, max) = (93737.895, 169390.250, 189234.463), stdev = 42297.057
[info]   CI (99.9%): [6519.346, 332261.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 6.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 3.957), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   124.804 ±(99.9%) 936.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.804, 556.940), stdev = 243.117
[info]   CI (99.9%): [≈ 0, 1060.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:15:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117261.735 ops/s
[info] # Warmup Iteration   2: 260982.159 ops/s
[info] # Warmup Iteration   3: 273771.664 ops/s
[info] # Warmup Iteration   4: 274971.690 ops/s
[info] # Warmup Iteration   5: 272624.460 ops/s
[info] Iteration   1: 275857.080 ops/s
[info]                  ·gc.alloc.rate:               1835.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          10471.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7677.170 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 276139.402 ops/s
[info]                  ·gc.alloc.rate:                   1861.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              10609.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11507.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 271008.250 ops/s
[info]                  ·gc.alloc.rate:                   1829.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              10625.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11702.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 270381.320 ops/s
[info]                  ·gc.alloc.rate:               1811.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          10546.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7816.976 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 276601.776 ops/s
[info]                  ·gc.alloc.rate:                   1879.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              10695.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11463.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   273997.566 ±(99.9%) 11685.992 ops/s [Average]
[info]   (min, avg, max) = (270381.320, 273997.566, 276601.776), stdev = 3034.815
[info]   CI (99.9%): [262311.574, 285683.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1843.594 ±(99.9%) 103.387 MB/sec [Average]
[info]   (min, avg, max) = (1811.882, 1843.594, 1879.623), stdev = 26.849
[info]   CI (99.9%): [1740.207, 1946.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10589.741 ±(99.9%) 325.029 B/op [Average]
[info]   (min, avg, max) = (10471.994, 10589.741, 10695.312), stdev = 84.409
[info]   CI (99.9%): [10264.712, 10914.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.472 ±(99.9%) 1417.361 MB/sec [Average]
[info]   (min, avg, max) = (1342.914, 1747.472, 2019.000), stdev = 368.084
[info]   CI (99.9%): [330.110, 3164.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10033.688 ±(99.9%) 8047.479 B/op [Average]
[info]   (min, avg, max) = (7677.170, 10033.688, 11702.771), stdev = 2089.905
[info]   CI (99.9%): [1986.209, 18081.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.060), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 5.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.750 ±(99.9%) 29.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.750, 17.441), stdev = 7.663
[info]   CI (99.9%): [≈ 0, 33.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1050.425 ops/s
[info] # Warmup Iteration   2: 7765.202 ops/s
[info] # Warmup Iteration   3: 8703.646 ops/s
[info] # Warmup Iteration   4: 8781.655 ops/s
[info] # Warmup Iteration   5: 8781.624 ops/s
[info] Iteration   1: 8782.099 ops/s
[info]                  ·gc.alloc.rate:               1564.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          280433.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239701.800 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 8817.218 ops/s
[info]                  ·gc.alloc.rate:                   1576.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              281430.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238988.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8779.071 ops/s
[info]                  ·gc.alloc.rate:                   1598.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              286608.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359675.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 794.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8728.174 ops/s
[info]                  ·gc.alloc.rate:                   1561.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              281580.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240463.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8795.998 ops/s
[info]                  ·gc.alloc.rate:               1576.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          281935.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 238366.902 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8780.512 ±(99.9%) 126.705 ops/s [Average]
[info]   (min, avg, max) = (8728.174, 8780.512, 8817.218), stdev = 32.905
[info]   CI (99.9%): [8653.807, 8907.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1575.655 ±(99.9%) 55.952 MB/sec [Average]
[info]   (min, avg, max) = (1561.618, 1575.655, 1598.689), stdev = 14.531
[info]   CI (99.9%): [1519.703, 1631.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   282397.488 ±(99.9%) 9315.205 B/op [Average]
[info]   (min, avg, max) = (280433.194, 282397.488, 286608.551), stdev = 2419.129
[info]   CI (99.9%): [273082.283, 291712.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.828 ±(99.9%) 1154.744 MB/sec [Average]
[info]   (min, avg, max) = (1332.603, 1469.828, 2006.254), stdev = 299.883
[info]   CI (99.9%): [315.084, 2624.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   263439.271 ±(99.9%) 207177.815 B/op [Average]
[info]   (min, avg, max) = (238366.902, 263439.271, 359675.539), stdev = 53803.421
[info]   CI (99.9%): [56261.456, 470617.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.928 ±(99.9%) 7.551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.928, 4.434), stdev = 1.961
[info]   CI (99.9%): [≈ 0, 8.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   166.470 ±(99.9%) 1353.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 166.470, 794.851), stdev = 351.562
[info]   CI (99.9%): [≈ 0, 1520.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7965.938 ops/s
[info] # Warmup Iteration   2: 25447.075 ops/s
[info] # Warmup Iteration   3: 26201.270 ops/s
[info] # Warmup Iteration   4: 26317.717 ops/s
[info] # Warmup Iteration   5: 26002.966 ops/s
[info] Iteration   1: 26373.584 ops/s
[info]                  ·gc.alloc.rate:                   1387.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              82776.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80057.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 26312.861 ops/s
[info]                  ·gc.alloc.rate:                   1384.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              82817.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80282.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 26350.935 ops/s
[info]                  ·gc.alloc.rate:                   1387.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              82843.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80209.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26351.249 ops/s
[info]                  ·gc.alloc.rate:                   1386.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              82779.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80127.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26343.045 ops/s
[info]                  ·gc.alloc.rate:               1386.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          82848.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79995.360 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26346.335 ±(99.9%) 84.344 ops/s [Average]
[info]   (min, avg, max) = (26312.861, 26346.335, 26373.584), stdev = 21.904
[info]   CI (99.9%): [26261.991, 26430.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1386.319 ±(99.9%) 3.981 MB/sec [Average]
[info]   (min, avg, max) = (1384.623, 1386.319, 1387.110), stdev = 1.034
[info]   CI (99.9%): [1382.339, 1390.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82813.236 ±(99.9%) 131.273 B/op [Average]
[info]   (min, avg, max) = (82776.616, 82813.236, 82848.681), stdev = 34.091
[info]   CI (99.9%): [82681.963, 82944.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.476 ±(99.9%) 5.699 MB/sec [Average]
[info]   (min, avg, max) = (1339.019, 1341.476, 1342.930), stdev = 1.480
[info]   CI (99.9%): [1335.776, 1347.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80134.477 ±(99.9%) 443.280 B/op [Average]
[info]   (min, avg, max) = (79995.360, 80134.477, 80282.721), stdev = 115.118
[info]   CI (99.9%): [79691.196, 80577.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 5.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.039), stdev = 1.307
[info]   CI (99.9%): [≈ 0, 5.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.749 ±(99.9%) 300.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.749, 181.526), stdev = 78.076
[info]   CI (99.9%): [≈ 0, 347.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10881.173 ops/s
[info] # Warmup Iteration   2: 29049.154 ops/s
[info] # Warmup Iteration   3: 29873.712 ops/s
[info] # Warmup Iteration   4: 30043.174 ops/s
[info] # Warmup Iteration   5: 30043.385 ops/s
[info] Iteration   1: 29999.235 ops/s
[info]                  ·gc.alloc.rate:                   1246.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              65403.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70210.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 29835.301 ops/s
[info]                  ·gc.alloc.rate:                   1236.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              65173.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70631.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 29905.305 ops/s
[info]                  ·gc.alloc.rate:               1248.694 MB/sec
[info]                  ·gc.alloc.rate.norm:          65714.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70533.747 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 29947.389 ops/s
[info]                  ·gc.alloc.rate:                   1237.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              65027.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35236.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 29948.190 ops/s
[info]                  ·gc.alloc.rate:                   1264.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              66431.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70382.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   29927.084 ±(99.9%) 235.504 ops/s [Average]
[info]   (min, avg, max) = (29835.301, 29927.084, 29999.235), stdev = 61.160
[info]   CI (99.9%): [29691.580, 30162.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1246.576 ±(99.9%) 43.551 MB/sec [Average]
[info]   (min, avg, max) = (1236.036, 1246.576, 1264.195), stdev = 11.310
[info]   CI (99.9%): [1203.025, 1290.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65550.111 ±(99.9%) 2143.720 B/op [Average]
[info]   (min, avg, max) = (65027.931, 65550.111, 66431.549), stdev = 556.717
[info]   CI (99.9%): [63406.390, 67693.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.582 ±(99.9%) 1151.904 MB/sec [Average]
[info]   (min, avg, max) = (670.455, 1205.582, 1340.274), stdev = 299.146
[info]   CI (99.9%): [53.678, 2357.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63398.751 ±(99.9%) 60625.326 B/op [Average]
[info]   (min, avg, max) = (35236.103, 63398.751, 70631.292), stdev = 15744.205
[info]   CI (99.9%): [2773.425, 124024.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 5.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.166), stdev = 1.363
[info]   CI (99.9%): [≈ 0, 6.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.159 ±(99.9%) 275.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.159, 166.406), stdev = 71.641
[info]   CI (99.9%): [≈ 0, 317.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:14:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283155.314 ops/s
[info] # Warmup Iteration   2: 598519.027 ops/s
[info] # Warmup Iteration   3: 630043.334 ops/s
[info] # Warmup Iteration   4: 630306.145 ops/s
[info] # Warmup Iteration   5: 630248.166 ops/s
[info] Iteration   1: 632963.035 ops/s
[info]                  ·gc.alloc.rate:               1159.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          2883.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1671.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 625845.195 ops/s
[info]                  ·gc.alloc.rate:                   1171.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              2946.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3382.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 633060.087 ops/s
[info]                  ·gc.alloc.rate:               1181.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          2937.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3346.123 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 633772.119 ops/s
[info]                  ·gc.alloc.rate:                   1170.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              2905.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1671.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 632171.829 ops/s
[info]                  ·gc.alloc.rate:                   1168.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              2908.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3353.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   631562.453 ±(99.9%) 12499.113 ops/s [Average]
[info]   (min, avg, max) = (625845.195, 631562.453, 633772.119), stdev = 3245.980
[info]   CI (99.9%): [619063.340, 644061.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1170.192 ±(99.9%) 30.414 MB/sec [Average]
[info]   (min, avg, max) = (1159.454, 1170.192, 1181.523), stdev = 7.898
[info]   CI (99.9%): [1139.778, 1200.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2916.086 ±(99.9%) 98.601 B/op [Average]
[info]   (min, avg, max) = (2883.033, 2916.086, 2946.248), stdev = 25.606
[info]   CI (99.9%): [2817.485, 3014.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.670 ±(99.9%) 1420.170 MB/sec [Average]
[info]   (min, avg, max) = (672.127, 1076.670, 1347.003), stdev = 368.814
[info]   CI (99.9%): [≈ 0, 2496.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2684.936 ±(99.9%) 3562.901 B/op [Average]
[info]   (min, avg, max) = (1671.274, 2684.936, 3382.238), stdev = 925.274
[info]   CI (99.9%): [≈ 0, 6247.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 5.001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.915), stdev = 1.299
[info]   CI (99.9%): [≈ 0, 5.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.472 ±(99.9%) 12.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.472, 7.256), stdev = 3.233
[info]   CI (99.9%): [≈ 0, 13.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320399.009 ops/s
[info] # Warmup Iteration   2: 748302.658 ops/s
[info] # Warmup Iteration   3: 779805.034 ops/s
[info] # Warmup Iteration   4: 779284.060 ops/s
[info] # Warmup Iteration   5: 779322.215 ops/s
[info] Iteration   1: 779494.665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 779559.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 778116.173 ops/s
[info]                  ·gc.alloc.rate:      0.795 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.607 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 779509.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 779001.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   779136.168 ±(99.9%) 2362.403 ops/s [Average]
[info]   (min, avg, max) = (778116.173, 779136.168, 779559.230), stdev = 613.509
[info]   CI (99.9%): [776773.765, 781498.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.159 ±(99.9%) 1.368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.159, 0.795), stdev = 0.355
[info]   CI (99.9%): [≈ 0, 1.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.322 ±(99.9%) 2.767 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.322, 1.607), stdev = 0.719
[info]   CI (99.9%): [≈ 0, 3.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9395.437 ops/s
[info] # Warmup Iteration   2: 26370.973 ops/s
[info] # Warmup Iteration   3: 29320.506 ops/s
[info] # Warmup Iteration   4: 29439.358 ops/s
[info] # Warmup Iteration   5: 29003.700 ops/s
[info] Iteration   1: 29842.361 ops/s
[info]                  ·gc.alloc.rate:               1352.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          71332.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70684.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 29308.753 ops/s
[info]                  ·gc.alloc.rate:                   1321.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              70970.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71970.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 30185.118 ops/s
[info]                  ·gc.alloc.rate:                   1359.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              70887.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69951.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 29788.004 ops/s
[info]                  ·gc.alloc.rate:                   1355.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              71592.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70918.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.274 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 29942.494 ops/s
[info]                  ·gc.alloc.rate:                   1361.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              71523.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70376.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   29813.346 ±(99.9%) 1234.298 ops/s [Average]
[info]   (min, avg, max) = (29308.753, 29813.346, 30185.118), stdev = 320.543
[info]   CI (99.9%): [28579.048, 31047.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1350.003 ±(99.9%) 62.041 MB/sec [Average]
[info]   (min, avg, max) = (1321.844, 1350.003, 1361.085), stdev = 16.112
[info]   CI (99.9%): [1287.962, 1412.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71261.254 ±(99.9%) 1230.509 B/op [Average]
[info]   (min, avg, max) = (70887.256, 71261.254, 71592.558), stdev = 319.559
[info]   CI (99.9%): [70030.745, 72491.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1340.766 ±(99.9%) 4.555 MB/sec [Average]
[info]   (min, avg, max) = (1339.251, 1340.766, 1342.264), stdev = 1.183
[info]   CI (99.9%): [1336.211, 1345.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70780.371 ±(99.9%) 2916.238 B/op [Average]
[info]   (min, avg, max) = (69951.377, 70780.371, 71970.216), stdev = 757.338
[info]   CI (99.9%): [67864.133, 73696.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.809), stdev = 1.677
[info]   CI (99.9%): [≈ 0, 7.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   42.888 ±(99.9%) 341.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.888, 201.274), stdev = 88.624
[info]   CI (99.9%): [≈ 0, 384.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4726.097 ops/s
[info] # Warmup Iteration   2: 30817.604 ops/s
[info] # Warmup Iteration   3: 34381.309 ops/s
[info] # Warmup Iteration   4: 31681.104 ops/s
[info] # Warmup Iteration   5: 34126.284 ops/s
[info] Iteration   1: 34564.393 ops/s
[info]                  ·gc.alloc.rate:               1823.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          83012.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91677.285 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 34832.051 ops/s
[info]                  ·gc.alloc.rate:                   1831.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              82767.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60739.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34802.465 ops/s
[info]                  ·gc.alloc.rate:                   1844.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              83410.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90880.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34839.200 ops/s
[info]                  ·gc.alloc.rate:               1843.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          83283.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90668.948 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 35031.829 ops/s
[info]                  ·gc.alloc.rate:                   1841.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              82723.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60121.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   34813.988 ±(99.9%) 641.011 ops/s [Average]
[info]   (min, avg, max) = (34564.393, 34813.988, 35031.829), stdev = 166.468
[info]   CI (99.9%): [34172.977, 35454.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1836.972 ±(99.9%) 34.608 MB/sec [Average]
[info]   (min, avg, max) = (1823.623, 1836.972, 1844.448), stdev = 8.988
[info]   CI (99.9%): [1802.364, 1871.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83039.459 ±(99.9%) 1173.809 B/op [Average]
[info]   (min, avg, max) = (82723.648, 83039.459, 83410.883), stdev = 304.835
[info]   CI (99.9%): [81865.649, 84213.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.648 ±(99.9%) 1410.943 MB/sec [Average]
[info]   (min, avg, max) = (1338.235, 1742.648, 2013.979), stdev = 366.417
[info]   CI (99.9%): [331.704, 3153.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   78817.428 ±(99.9%) 64655.551 B/op [Average]
[info]   (min, avg, max) = (60121.270, 78817.428, 91677.285), stdev = 16790.841
[info]   CI (99.9%): [14161.877, 143472.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.810), stdev = 1.690
[info]   CI (99.9%): [≈ 0, 7.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.552 ±(99.9%) 294.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.552, 172.127), stdev = 76.363
[info]   CI (99.9%): [≈ 0, 329.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.362
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3120.659 ops/s
[info] # Warmup Iteration   2: 33476.866 ops/s
[info] # Warmup Iteration   3: 35080.723 ops/s
[info] # Warmup Iteration   4: 35126.323 ops/s
[info] # Warmup Iteration   5: 35077.812 ops/s
[info] Iteration   1: 34291.706 ops/s
[info]                  ·gc.alloc.rate:               1545.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          70940.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92069.118 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 35344.992 ops/s
[info]                  ·gc.alloc.rate:                   1561.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              69503.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59620.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 35674.997 ops/s
[info]                  ·gc.alloc.rate:                   1575.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              69484.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59098.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 35520.656 ops/s
[info]                  ·gc.alloc.rate:                   1607.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              71217.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88753.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35645.640 ops/s
[info]                  ·gc.alloc.rate:               1572.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          69437.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58876.712 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   35295.598 ±(99.9%) 2218.188 ops/s [Average]
[info]   (min, avg, max) = (34291.706, 35295.598, 35674.997), stdev = 576.056
[info]   CI (99.9%): [33077.411, 37513.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1572.476 ±(99.9%) 87.286 MB/sec [Average]
[info]   (min, avg, max) = (1545.938, 1572.476, 1607.309), stdev = 22.668
[info]   CI (99.9%): [1485.190, 1659.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   70116.776 ±(99.9%) 3405.511 B/op [Average]
[info]   (min, avg, max) = (69437.298, 70116.776, 71217.724), stdev = 884.400
[info]   CI (99.9%): [66711.265, 73522.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1604.386 ±(99.9%) 1407.277 MB/sec [Average]
[info]   (min, avg, max) = (1333.555, 1604.386, 2006.364), stdev = 365.465
[info]   CI (99.9%): [197.109, 3011.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   71683.651 ±(99.9%) 65993.642 B/op [Average]
[info]   (min, avg, max) = (58876.712, 71683.651, 92069.118), stdev = 17138.339
[info]   CI (99.9%): [5690.010, 137677.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.880 ±(99.9%) 7.388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.880, 4.312), stdev = 1.919
[info]   CI (99.9%): [≈ 0, 8.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38.818 ±(99.9%) 325.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.818, 190.197), stdev = 84.631
[info]   CI (99.9%): [≈ 0, 364.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 2.966
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234578.345 ops/s
[info] # Warmup Iteration   2: 446925.486 ops/s
[info] # Warmup Iteration   3: 466445.831 ops/s
[info] # Warmup Iteration   4: 467965.019 ops/s
[info] # Warmup Iteration   5: 455321.168 ops/s
[info] Iteration   1: 469700.034 ops/s
[info]                  ·gc.alloc.rate:               1253.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          4200.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4504.321 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 463184.289 ops/s
[info]                  ·gc.alloc.rate:                   1243.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              4223.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4570.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 469277.040 ops/s
[info]                  ·gc.alloc.rate:                   1262.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              4232.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4512.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 470173.225 ops/s
[info]                  ·gc.alloc.rate:                   1251.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              4188.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2254.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.989 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 470824.425 ops/s
[info]                  ·gc.alloc.rate:                   1263.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              4223.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4498.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   468631.803 ±(99.9%) 11933.336 ops/s [Average]
[info]   (min, avg, max) = (463184.289, 468631.803, 470824.425), stdev = 3099.049
[info]   CI (99.9%): [456698.467, 480565.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1254.778 ±(99.9%) 32.622 MB/sec [Average]
[info]   (min, avg, max) = (1243.102, 1254.778, 1263.701), stdev = 8.472
[info]   CI (99.9%): [1222.156, 1287.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4213.716 ±(99.9%) 71.482 B/op [Average]
[info]   (min, avg, max) = (4188.400, 4213.716, 4232.463), stdev = 18.564
[info]   CI (99.9%): [4142.234, 4285.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.898 ±(99.9%) 1156.909 MB/sec [Average]
[info]   (min, avg, max) = (673.446, 1210.898, 1345.937), stdev = 300.446
[info]   CI (99.9%): [53.989, 2367.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4067.927 ±(99.9%) 3905.517 B/op [Average]
[info]   (min, avg, max) = (2254.302, 4067.927, 4570.029), stdev = 1014.250
[info]   CI (99.9%): [162.410, 7973.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.608 ±(99.9%) 4.500 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.685), stdev = 1.169
[info]   CI (99.9%): [≈ 0, 5.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.035 ±(99.9%) 15.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.035, 8.989), stdev = 3.911
[info]   CI (99.9%): [≈ 0, 17.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1307.335 ops/s
[info] # Warmup Iteration   2: 15573.049 ops/s
[info] # Warmup Iteration   3: 18348.483 ops/s
[info] # Warmup Iteration   4: 18257.710 ops/s
[info] # Warmup Iteration   5: 18011.087 ops/s
[info] Iteration   1: 18445.047 ops/s
[info]                  ·gc.alloc.rate:                   1882.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              160633.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170878.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 18232.490 ops/s
[info]                  ·gc.alloc.rate:                   1882.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              162498.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172970.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 393.539 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 18651.093 ops/s
[info]                  ·gc.alloc.rate:                   1899.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              160312.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112423.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18653.218 ops/s
[info]                  ·gc.alloc.rate:               1913.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          161426.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168448.878 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 18689.887 ops/s
[info]                  ·gc.alloc.rate:               1917.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          161477.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168246.695 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18534.347 ±(99.9%) 748.267 ops/s [Average]
[info]   (min, avg, max) = (18232.490, 18534.347, 18689.887), stdev = 194.323
[info]   CI (99.9%): [17786.080, 19282.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1899.226 ±(99.9%) 63.306 MB/sec [Average]
[info]   (min, avg, max) = (1882.627, 1899.226, 1917.656), stdev = 16.440
[info]   CI (99.9%): [1835.920, 1962.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   161269.834 ±(99.9%) 3276.774 B/op [Average]
[info]   (min, avg, max) = (160312.969, 161269.834, 162498.187), stdev = 850.968
[info]   CI (99.9%): [157993.060, 164546.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1866.722 ±(99.9%) 1150.361 MB/sec [Average]
[info]   (min, avg, max) = (1332.341, 1866.722, 2004.114), stdev = 298.745
[info]   CI (99.9%): [716.362, 3017.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   158593.721 ±(99.9%) 99663.797 B/op [Average]
[info]   (min, avg, max) = (112423.716, 158593.721, 172970.475), stdev = 25882.371
[info]   CI (99.9%): [58929.924, 258257.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 7.834 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 4.560), stdev = 2.035
[info]   CI (99.9%): [≈ 0, 8.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79.414 ±(99.9%) 676.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.414, 393.539), stdev = 175.603
[info]   CI (99.9%): [≈ 0, 755.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.162
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:12:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19184.576 ops/s
[info] # Warmup Iteration   2: 54438.383 ops/s
[info] # Warmup Iteration   3: 55735.829 ops/s
[info] # Warmup Iteration   4: 56928.040 ops/s
[info] # Warmup Iteration   5: 56773.859 ops/s
[info] Iteration   1: 56739.572 ops/s
[info]                  ·gc.alloc.rate:                   1757.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              48737.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55866.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 56550.766 ops/s
[info]                  ·gc.alloc.rate:                   1735.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              48301.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37393.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 56192.121 ops/s
[info]                  ·gc.alloc.rate:                   1740.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              48746.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56289.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.831 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 56641.297 ops/s
[info]                  ·gc.alloc.rate:                   1725.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              47955.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37185.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 56596.097 ops/s
[info]                  ·gc.alloc.rate:                   1765.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              49104.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55835.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   56543.971 ±(99.9%) 803.793 ops/s [Average]
[info]   (min, avg, max) = (56192.121, 56543.971, 56739.572), stdev = 208.743
[info]   CI (99.9%): [55740.177, 57347.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1745.065 ±(99.9%) 62.611 MB/sec [Average]
[info]   (min, avg, max) = (1725.871, 1745.065, 1765.855), stdev = 16.260
[info]   CI (99.9%): [1682.454, 1807.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48568.822 ±(99.9%) 1716.575 B/op [Average]
[info]   (min, avg, max) = (47955.065, 48568.822, 49104.092), stdev = 445.789
[info]   CI (99.9%): [46852.247, 50285.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.842 ±(99.9%) 1412.394 MB/sec [Average]
[info]   (min, avg, max) = (1338.278, 1742.842, 2014.389), stdev = 366.794
[info]   CI (99.9%): [330.448, 3155.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   48514.211 ±(99.9%) 39463.671 B/op [Average]
[info]   (min, avg, max) = (37185.384, 48514.211, 56289.991), stdev = 10248.590
[info]   CI (99.9%): [9050.540, 87977.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 5.834 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.750, 3.456), stdev = 1.515
[info]   CI (99.9%): [≈ 0, 6.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.863 ±(99.9%) 162.330 B/op [Average]
[info]   (min, avg, max) = (0.577, 20.863, 96.172), stdev = 42.157
[info]   CI (99.9%): [≈ 0, 183.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30056.179 ops/s
[info] # Warmup Iteration   2: 144153.789 ops/s
[info] # Warmup Iteration   3: 151595.562 ops/s
[info] # Warmup Iteration   4: 153077.006 ops/s
[info] # Warmup Iteration   5: 145747.366 ops/s
[info] Iteration   1: 153289.870 ops/s
[info]                  ·gc.alloc.rate:                   1847.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              18968.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20617.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 153532.554 ops/s
[info]                  ·gc.alloc.rate:                   1866.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              19133.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20595.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.761 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 154578.301 ops/s
[info]                  ·gc.alloc.rate:               1852.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          18857.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13605.538 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 154213.109 ops/s
[info]                  ·gc.alloc.rate:               1873.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          19119.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20436.606 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 154109.522 ops/s
[info]                  ·gc.alloc.rate:               1886.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          19266.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20477.210 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   153944.671 ±(99.9%) 2018.676 ops/s [Average]
[info]   (min, avg, max) = (153289.870, 153944.671, 154578.301), stdev = 524.244
[info]   CI (99.9%): [151925.995, 155963.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1865.360 ±(99.9%) 60.581 MB/sec [Average]
[info]   (min, avg, max) = (1847.440, 1865.360, 1886.500), stdev = 15.733
[info]   CI (99.9%): [1804.779, 1925.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19069.204 ±(99.9%) 610.061 B/op [Average]
[info]   (min, avg, max) = (18857.893, 19069.204, 19266.235), stdev = 158.431
[info]   CI (99.9%): [18459.143, 19679.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1872.308 ±(99.9%) 1152.722 MB/sec [Average]
[info]   (min, avg, max) = (1336.820, 1872.308, 2009.113), stdev = 299.358
[info]   CI (99.9%): [719.586, 3025.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19146.452 ±(99.9%) 11930.874 B/op [Average]
[info]   (min, avg, max) = (13605.538, 19146.452, 20617.510), stdev = 3098.410
[info]   CI (99.9%): [7215.577, 31077.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 6.660 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.879), stdev = 1.730
[info]   CI (99.9%): [≈ 0, 7.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.047 ±(99.9%) 68.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.047, 39.761), stdev = 17.730
[info]   CI (99.9%): [≈ 0, 76.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.130
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 705854.679 ops/s
[info] # Warmup Iteration   2: 1077367.969 ops/s
[info] # Warmup Iteration   3: 1182253.776 ops/s
[info] # Warmup Iteration   4: 1185057.360 ops/s
[info] # Warmup Iteration   5: 1189907.356 ops/s
[info] Iteration   1: 1186034.770 ops/s
[info]                  ·gc.alloc.rate:                   1314.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1784.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1187870.763 ops/s
[info]                  ·gc.alloc.rate:               1300.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          1723.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 891.432 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1158496.739 ops/s
[info]                  ·gc.alloc.rate:                   1283.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              1743.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1828.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1172201.702 ops/s
[info]                  ·gc.alloc.rate:                   1297.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              1742.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1808.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1175026.737 ops/s
[info]                  ·gc.alloc.rate:                   1299.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              1741.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1800.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1175926.142 ±(99.9%) 45696.405 ops/s [Average]
[info]   (min, avg, max) = (1158496.739, 1175926.142, 1187870.763), stdev = 11867.211
[info]   CI (99.9%): [1130229.737, 1221622.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1299.255 ±(99.9%) 42.791 MB/sec [Average]
[info]   (min, avg, max) = (1283.286, 1299.255, 1314.559), stdev = 11.113
[info]   CI (99.9%): [1256.464, 1342.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1738.919 ±(99.9%) 33.614 B/op [Average]
[info]   (min, avg, max) = (1723.441, 1738.919, 1744.177), stdev = 8.729
[info]   CI (99.9%): [1705.306, 1772.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.950 ±(99.9%) 1158.385 MB/sec [Average]
[info]   (min, avg, max) = (672.814, 1210.950, 1346.932), stdev = 300.829
[info]   CI (99.9%): [52.565, 2369.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1622.655 ±(99.9%) 1575.157 B/op [Average]
[info]   (min, avg, max) = (891.432, 1622.655, 1828.072), stdev = 409.063
[info]   CI (99.9%): [47.499, 3197.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 5.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 3.081), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 5.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.844 ±(99.9%) 7.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.844, 4.137), stdev = 1.841
[info]   CI (99.9%): [≈ 0, 7.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 736404.274 ops/s
[info] # Warmup Iteration   2: 1264058.116 ops/s
[info] # Warmup Iteration   3: 1369186.470 ops/s
[info] # Warmup Iteration   4: 1353881.098 ops/s
[info] # Warmup Iteration   5: 1364926.134 ops/s
[info] Iteration   1: 1359618.804 ops/s
[info]                  ·gc.alloc.rate:      0.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1369166.819 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1369342.149 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1364542.725 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1364814.544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1365497.008 ±(99.9%) 15424.499 ops/s [Average]
[info]   (min, avg, max) = (1359618.804, 1365497.008, 1369342.149), stdev = 4005.693
[info]   CI (99.9%): [1350072.509, 1380921.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.005 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.005, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:11:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11556.500 ops/s
[info] # Warmup Iteration   2: 67223.674 ops/s
[info] # Warmup Iteration   3: 68651.094 ops/s
[info] # Warmup Iteration   4: 69450.254 ops/s
[info] # Warmup Iteration   5: 67763.166 ops/s
[info] Iteration   1: 67086.930 ops/s
[info]                  ·gc.alloc.rate:                   1674.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              39281.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31451.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 69738.358 ops/s
[info]                  ·gc.alloc.rate:                   1776.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              40097.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45407.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.729 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 70090.445 ops/s
[info]                  ·gc.alloc.rate:                   1760.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              39532.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30035.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 69942.961 ops/s
[info]                  ·gc.alloc.rate:                   1782.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              40106.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45103.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 70225.061 ops/s
[info]                  ·gc.alloc.rate:               1762.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          39498.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29949.077 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   69416.751 ±(99.9%) 5063.128 ops/s [Average]
[info]   (min, avg, max) = (67086.930, 69416.751, 70225.061), stdev = 1314.878
[info]   CI (99.9%): [64353.623, 74479.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1751.340 ±(99.9%) 169.281 MB/sec [Average]
[info]   (min, avg, max) = (1674.451, 1751.340, 1782.321), stdev = 43.962
[info]   CI (99.9%): [1582.059, 1920.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39703.026 ±(99.9%) 1449.693 B/op [Average]
[info]   (min, avg, max) = (39281.335, 39703.026, 40106.066), stdev = 376.481
[info]   CI (99.9%): [38253.333, 41152.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1606.257 ±(99.9%) 1413.150 MB/sec [Average]
[info]   (min, avg, max) = (1336.289, 1606.257, 2012.115), stdev = 366.991
[info]   CI (99.9%): [193.107, 3019.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36389.447 ±(99.9%) 31252.667 B/op [Average]
[info]   (min, avg, max) = (29949.077, 36389.447, 45407.576), stdev = 8116.219
[info]   CI (99.9%): [5136.780, 67642.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.976), stdev = 1.762
[info]   CI (99.9%): [≈ 0, 7.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.609 ±(99.9%) 153.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.609, 89.729), stdev = 39.761
[info]   CI (99.9%): [≈ 0, 171.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 9.000), stdev = 2.864
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2754.271 ops/s
[info] # Warmup Iteration   2: 16308.636 ops/s
[info] # Warmup Iteration   3: 17769.756 ops/s
[info] # Warmup Iteration   4: 17765.282 ops/s
[info] # Warmup Iteration   5: 17689.460 ops/s
[info] Iteration   1: 17697.910 ops/s
[info]                  ·gc.alloc.rate:               1557.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          138456.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119424.282 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 17450.846 ops/s
[info]                  ·gc.alloc.rate:               1567.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          141301.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121121.252 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 17579.575 ops/s
[info]                  ·gc.alloc.rate:                   1557.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              139467.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120278.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17817.676 ops/s
[info]                  ·gc.alloc.rate:                   1590.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177469.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17873.821 ops/s
[info]                  ·gc.alloc.rate:                   1581.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              139242.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117772.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   17683.966 ±(99.9%) 665.170 ops/s [Average]
[info]   (min, avg, max) = (17450.846, 17683.966, 17873.821), stdev = 172.742
[info]   CI (99.9%): [17018.796, 18349.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1570.989 ±(99.9%) 56.481 MB/sec [Average]
[info]   (min, avg, max) = (1557.355, 1570.989, 1590.398), stdev = 14.668
[info]   CI (99.9%): [1514.507, 1627.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   139789.865 ±(99.9%) 4280.369 B/op [Average]
[info]   (min, avg, max) = (138456.772, 139789.865, 141301.343), stdev = 1111.598
[info]   CI (99.9%): [135509.496, 144070.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475.502 ±(99.9%) 1148.755 MB/sec [Average]
[info]   (min, avg, max) = (1337.869, 1475.502, 2009.149), stdev = 298.328
[info]   CI (99.9%): [326.747, 2624.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   131213.243 ±(99.9%) 99684.057 B/op [Average]
[info]   (min, avg, max) = (117772.716, 131213.243, 177469.429), stdev = 25887.633
[info]   CI (99.9%): [31529.187, 230897.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.934), stdev = 1.753
[info]   CI (99.9%): [≈ 0, 7.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   71.543 ±(99.9%) 604.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.543, 352.204), stdev = 156.902
[info]   CI (99.9%): [≈ 0, 675.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2648.045 ops/s
[info] # Warmup Iteration   2: 15456.907 ops/s
[info] # Warmup Iteration   3: 17027.895 ops/s
[info] # Warmup Iteration   4: 17109.680 ops/s
[info] # Warmup Iteration   5: 17150.485 ops/s
[info] Iteration   1: 17148.007 ops/s
[info]                  ·gc.alloc.rate:                   1406.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              129042.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122734.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17005.033 ops/s
[info]                  ·gc.alloc.rate:               1417.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          131088.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123851.442 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 16609.535 ops/s
[info]                  ·gc.alloc.rate:                   1377.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              130543.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126905.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367.530 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17252.847 ops/s
[info]                  ·gc.alloc.rate:                   1422.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              129734.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122041.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16333.437 ops/s
[info]                  ·gc.alloc.rate:                   1362.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              131218.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128632.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   16869.772 ±(99.9%) 1488.655 ops/s [Average]
[info]   (min, avg, max) = (16333.437, 16869.772, 17252.847), stdev = 386.599
[info]   CI (99.9%): [15381.117, 18358.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1397.140 ±(99.9%) 99.962 MB/sec [Average]
[info]   (min, avg, max) = (1362.404, 1397.140, 1422.245), stdev = 25.960
[info]   CI (99.9%): [1297.179, 1497.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   130325.348 ±(99.9%) 3562.421 B/op [Average]
[info]   (min, avg, max) = (129042.192, 130325.348, 131218.595), stdev = 925.149
[info]   CI (99.9%): [126762.928, 133887.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337.831 ±(99.9%) 5.577 MB/sec [Average]
[info]   (min, avg, max) = (1335.557, 1337.831, 1339.305), stdev = 1.448
[info]   CI (99.9%): [1332.254, 1343.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   124833.157 ±(99.9%) 10873.929 B/op [Average]
[info]   (min, avg, max) = (122041.195, 124833.157, 128632.854), stdev = 2823.925
[info]   CI (99.9%): [113959.228, 135707.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.922 ±(99.9%) 6.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.922, 3.879), stdev = 1.678
[info]   CI (99.9%): [≈ 0, 7.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   86.904 ±(99.9%) 612.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.904, 367.530), stdev = 159.101
[info]   CI (99.9%): [≈ 0, 699.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294567.367 ops/s
[info] # Warmup Iteration   2: 643539.202 ops/s
[info] # Warmup Iteration   3: 685837.191 ops/s
[info] # Warmup Iteration   4: 684645.529 ops/s
[info] # Warmup Iteration   5: 682169.260 ops/s
[info] Iteration   1: 686607.275 ops/s
[info]                  ·gc.alloc.rate:                   1823.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              4180.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3084.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 671070.577 ops/s
[info]                  ·gc.alloc.rate:                   1822.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              4273.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4735.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 686479.133 ops/s
[info]                  ·gc.alloc.rate:                   1851.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              4244.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4620.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 688078.349 ops/s
[info]                  ·gc.alloc.rate:                   1830.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              4186.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3071.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 688962.492 ops/s
[info]                  ·gc.alloc.rate:               1873.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          4279.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4605.552 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   684239.565 ±(99.9%) 28627.554 ops/s [Average]
[info]   (min, avg, max) = (671070.577, 684239.565, 688962.492), stdev = 7434.485
[info]   CI (99.9%): [655612.011, 712867.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1840.314 ±(99.9%) 85.110 MB/sec [Average]
[info]   (min, avg, max) = (1822.014, 1840.314, 1873.683), stdev = 22.103
[info]   CI (99.9%): [1755.204, 1925.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4232.746 ±(99.9%) 180.446 B/op [Average]
[info]   (min, avg, max) = (4180.388, 4232.746, 4279.414), stdev = 46.861
[info]   CI (99.9%): [4052.300, 4413.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1748.014 ±(99.9%) 1419.156 MB/sec [Average]
[info]   (min, avg, max) = (1342.944, 1748.014, 2019.183), stdev = 368.550
[info]   CI (99.9%): [328.858, 3167.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4023.487 ±(99.9%) 3328.579 B/op [Average]
[info]   (min, avg, max) = (3071.813, 4023.487, 4735.483), stdev = 864.421
[info]   CI (99.9%): [694.908, 7352.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.562 ±(99.9%) 4.571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.686), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 5.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.317 ±(99.9%) 10.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.317, 6.298), stdev = 2.785
[info]   CI (99.9%): [≈ 0, 12.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1144.356 ops/s
[info] # Warmup Iteration   2: 10991.127 ops/s
[info] # Warmup Iteration   3: 13024.865 ops/s
[info] # Warmup Iteration   4: 12885.838 ops/s
[info] # Warmup Iteration   5: 13019.222 ops/s
[info] Iteration   1: 12994.692 ops/s
[info]                  ·gc.alloc.rate:                   1766.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              213929.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161961.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 12973.793 ops/s
[info]                  ·gc.alloc.rate:                   1770.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              214703.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243557.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 505.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 13081.528 ops/s
[info]                  ·gc.alloc.rate:                   1778.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              213957.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160604.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13022.436 ops/s
[info]                  ·gc.alloc.rate:                   1802.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              217877.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241514.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13031.867 ops/s
[info]                  ·gc.alloc.rate:                   1789.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              216108.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241329.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13020.863 ±(99.9%) 157.645 ops/s [Average]
[info]   (min, avg, max) = (12973.793, 13020.863, 13081.528), stdev = 40.940
[info]   CI (99.9%): [12863.218, 13178.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1781.490 ±(99.9%) 57.550 MB/sec [Average]
[info]   (min, avg, max) = (1766.403, 1781.490, 1802.844), stdev = 14.946
[info]   CI (99.9%): [1723.940, 1839.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   215315.155 ±(99.9%) 6480.688 B/op [Average]
[info]   (min, avg, max) = (213929.522, 215315.155, 217877.167), stdev = 1683.014
[info]   CI (99.9%): [208834.468, 221795.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1735.445 ±(99.9%) 1403.740 MB/sec [Average]
[info]   (min, avg, max) = (1334.946, 1735.445, 2007.887), stdev = 364.547
[info]   CI (99.9%): [331.705, 3139.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   209793.582 ±(99.9%) 170564.818 B/op [Average]
[info]   (min, avg, max) = (160604.273, 209793.582, 243557.958), stdev = 44295.142
[info]   CI (99.9%): [39228.763, 380358.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.953 ±(99.9%) 6.959 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.953, 4.164), stdev = 1.807
[info]   CI (99.9%): [≈ 0, 7.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   115.546 ±(99.9%) 844.259 B/op [Average]
[info]   (min, avg, max) = (2.516, 115.546, 505.055), stdev = 219.251
[info]   CI (99.9%): [≈ 0, 959.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12421.156 ops/s
[info] # Warmup Iteration   2: 41805.520 ops/s
[info] # Warmup Iteration   3: 44611.715 ops/s
[info] # Warmup Iteration   4: 44158.300 ops/s
[info] # Warmup Iteration   5: 44806.522 ops/s
[info] Iteration   1: 45004.103 ops/s
[info]                  ·gc.alloc.rate:               1746.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          61087.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46919.175 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 44384.714 ops/s
[info]                  ·gc.alloc.rate:                   1737.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              61595.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71407.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.990 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 45199.413 ops/s
[info]                  ·gc.alloc.rate:                   1747.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              60848.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46620.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45168.838 ops/s
[info]                  ·gc.alloc.rate:                   1752.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              61056.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69911.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.725 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 45240.615 ops/s
[info]                  ·gc.alloc.rate:                   1770.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              61600.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69823.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.724 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   44999.537 ±(99.9%) 1367.874 ops/s [Average]
[info]   (min, avg, max) = (44384.714, 44999.537, 45240.615), stdev = 355.233
[info]   CI (99.9%): [43631.663, 46367.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1750.865 ±(99.9%) 47.620 MB/sec [Average]
[info]   (min, avg, max) = (1737.083, 1750.865, 1770.662), stdev = 12.367
[info]   CI (99.9%): [1703.245, 1798.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61237.809 ±(99.9%) 1314.929 B/op [Average]
[info]   (min, avg, max) = (60848.840, 61237.809, 61600.393), stdev = 341.483
[info]   CI (99.9%): [59922.880, 62552.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1741.552 ±(99.9%) 1410.605 MB/sec [Average]
[info]   (min, avg, max) = (1338.940, 1741.552, 2013.782), stdev = 366.330
[info]   CI (99.9%): [330.947, 3152.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   60936.381 ±(99.9%) 49857.312 B/op [Average]
[info]   (min, avg, max) = (46620.902, 60936.381, 71407.385), stdev = 12947.786
[info]   CI (99.9%): [11079.069, 110793.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.976), stdev = 1.771
[info]   CI (99.9%): [≈ 0, 7.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28.633 ±(99.9%) 241.860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.633, 140.990), stdev = 62.810
[info]   CI (99.9%): [≈ 0, 270.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19664.935 ops/s
[info] # Warmup Iteration   2: 56903.059 ops/s
[info] # Warmup Iteration   3: 60013.915 ops/s
[info] # Warmup Iteration   4: 58657.328 ops/s
[info] # Warmup Iteration   5: 59802.910 ops/s
[info] Iteration   1: 59915.467 ops/s
[info]                  ·gc.alloc.rate:                   1823.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              47882.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35207.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 56058.122 ops/s
[info]                  ·gc.alloc.rate:                   1722.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              48369.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56443.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 60418.867 ops/s
[info]                  ·gc.alloc.rate:               1839.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          47911.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34825.862 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 58740.661 ops/s
[info]                  ·gc.alloc.rate:                   1828.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              48986.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53707.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 59772.452 ops/s
[info]                  ·gc.alloc.rate:                   1831.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              48219.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52820.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   58981.114 ±(99.9%) 6716.053 ops/s [Average]
[info]   (min, avg, max) = (56058.122, 58981.114, 60418.867), stdev = 1744.138
[info]   CI (99.9%): [52265.061, 65697.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1808.960 ±(99.9%) 186.811 MB/sec [Average]
[info]   (min, avg, max) = (1722.812, 1808.960, 1839.254), stdev = 48.514
[info]   CI (99.9%): [1622.149, 1995.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48273.958 ±(99.9%) 1727.259 B/op [Average]
[info]   (min, avg, max) = (47882.375, 48273.958, 48986.729), stdev = 448.564
[info]   CI (99.9%): [46546.699, 50001.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1739.682 ±(99.9%) 1409.606 MB/sec [Average]
[info]   (min, avg, max) = (1336.913, 1739.682, 2010.372), stdev = 366.070
[info]   CI (99.9%): [330.076, 3149.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46601.003 ±(99.9%) 41047.200 B/op [Average]
[info]   (min, avg, max) = (34825.862, 46601.003, 56443.226), stdev = 10659.827
[info]   CI (99.9%): [5553.803, 87648.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.832), stdev = 1.679
[info]   CI (99.9%): [≈ 0, 7.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23.412 ±(99.9%) 181.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.412, 107.599), stdev = 47.190
[info]   CI (99.9%): [≈ 0, 205.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 736766.362 ops/s
[info] # Warmup Iteration   2: 1260744.167 ops/s
[info] # Warmup Iteration   3: 1338301.342 ops/s
[info] # Warmup Iteration   4: 1362112.345 ops/s
[info] # Warmup Iteration   5: 1358300.904 ops/s
[info] Iteration   1: 1358427.693 ops/s
[info]                  ·gc.alloc.rate:                   1267.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              1469.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1339236.882 ops/s
[info]                  ·gc.alloc.rate:               1258.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          1478.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1580.547 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1355885.873 ops/s
[info]                  ·gc.alloc.rate:                   1274.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              1479.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1561.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1356280.184 ops/s
[info]                  ·gc.alloc.rate:                   1287.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              1493.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1563.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1359144.157 ops/s
[info]                  ·gc.alloc.rate:               1276.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          1477.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1556.727 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1353794.958 ±(99.9%) 31786.011 ops/s [Average]
[info]   (min, avg, max) = (1339236.882, 1353794.958, 1359144.157), stdev = 8254.726
[info]   CI (99.9%): [1322008.946, 1385580.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1272.685 ±(99.9%) 41.133 MB/sec [Average]
[info]   (min, avg, max) = (1258.066, 1272.685, 1287.028), stdev = 10.682
[info]   CI (99.9%): [1231.552, 1313.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1479.505 ±(99.9%) 33.825 B/op [Average]
[info]   (min, avg, max) = (1469.001, 1479.505, 1493.412), stdev = 8.784
[info]   CI (99.9%): [1445.680, 1513.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.286 ±(99.9%) 4.420 MB/sec [Average]
[info]   (min, avg, max) = (1344.276, 1345.286, 1347.069), stdev = 1.148
[info]   CI (99.9%): [1340.866, 1349.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1563.951 ±(99.9%) 37.255 B/op [Average]
[info]   (min, avg, max) = (1556.727, 1563.951, 1580.547), stdev = 9.675
[info]   CI (99.9%): [1526.696, 1601.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 4.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.852), stdev = 1.266
[info]   CI (99.9%): [≈ 0, 5.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.681 ±(99.9%) 5.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 3.310), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 712553.637 ops/s
[info] # Warmup Iteration   2: 1527573.567 ops/s
[info] # Warmup Iteration   3: 1575854.287 ops/s
[info] # Warmup Iteration   4: 1567470.892 ops/s
[info] # Warmup Iteration   5: 1576304.024 ops/s
[info] Iteration   1: 1572126.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1506565.623 ops/s
[info]                  ·gc.alloc.rate:      19.621 MB/sec
[info]                  ·gc.alloc.rate.norm: 20.498 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1576538.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1577305.479 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1577513.123 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1562009.815 ±(99.9%) 119645.989 ops/s [Average]
[info]   (min, avg, max) = (1506565.623, 1562009.815, 1577513.123), stdev = 31071.683
[info]   CI (99.9%): [1442363.826, 1681655.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.925 ±(99.9%) 33.789 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.925, 19.621), stdev = 8.775
[info]   CI (99.9%): [≈ 0, 37.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4.100 ±(99.9%) 35.297 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.100, 20.498), stdev = 9.167
[info]   CI (99.9%): [≈ 0, 39.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1703.907 ops/s
[info] # Warmup Iteration   2: 3621.955 ops/s
[info] # Warmup Iteration   3: 3670.315 ops/s
[info] # Warmup Iteration   4: 3878.860 ops/s
[info] # Warmup Iteration   5: 3880.093 ops/s
[info] Iteration   1: 3912.822 ops/s
[info]                  ·gc.alloc.rate:      528.187 MB/sec
[info]                  ·gc.alloc.rate.norm: 212448.110 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3863.728 ops/s
[info]                  ·gc.alloc.rate:               534.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          217820.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 272521.240 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3900.193 ops/s
[info]                  ·gc.alloc.rate:               526.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          212448.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 270006.304 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3892.384 ops/s
[info]                  ·gc.alloc.rate:               525.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          212448.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 270626.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3884.846 ops/s
[info]                  ·gc.alloc.rate:               537.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          217755.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 271183.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3890.795 ±(99.9%) 70.584 ops/s [Average]
[info]   (min, avg, max) = (3863.728, 3890.795, 3912.822), stdev = 18.330
[info]   CI (99.9%): [3820.210, 3961.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   530.511 ±(99.9%) 20.519 MB/sec [Average]
[info]   (min, avg, max) = (525.477, 530.511, 537.520), stdev = 5.329
[info]   CI (99.9%): [509.993, 551.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214584.046 ±(99.9%) 11262.522 B/op [Average]
[info]   (min, avg, max) = (212448.110, 214584.046, 217820.560), stdev = 2924.841
[info]   CI (99.9%): [203321.525, 225846.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   535.425 ±(99.9%) 1152.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.425, 669.405), stdev = 299.311
[info]   CI (99.9%): [≈ 0, 1687.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   216867.462 ±(99.9%) 466837.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 216867.462, 272521.240), stdev = 121236.150
[info]   CI (99.9%): [≈ 0, 683704.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33308.170 ops/s
[info] # Warmup Iteration   2: 114209.824 ops/s
[info] # Warmup Iteration   3: 118556.715 ops/s
[info] # Warmup Iteration   4: 125694.195 ops/s
[info] # Warmup Iteration   5: 123968.025 ops/s
[info] Iteration   1: 125490.512 ops/s
[info]                  ·gc.alloc.rate:                   1980.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              24841.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25292.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.723 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 125826.193 ops/s
[info]                  ·gc.alloc.rate:                   1997.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              24981.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25193.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 125993.053 ops/s
[info]                  ·gc.alloc.rate:                   2000.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              24991.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25105.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.520 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 122752.197 ops/s
[info]                  ·gc.alloc.rate:                   1956.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              25081.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25760.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 122980.246 ops/s
[info]                  ·gc.alloc.rate:                   1917.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              24534.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17160.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   124608.440 ±(99.9%) 6171.483 ops/s [Average]
[info]   (min, avg, max) = (122752.197, 124608.440, 125993.053), stdev = 1602.715
[info]   CI (99.9%): [118436.957, 130779.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1970.599 ±(99.9%) 132.044 MB/sec [Average]
[info]   (min, avg, max) = (1917.978, 1970.599, 2000.700), stdev = 34.291
[info]   CI (99.9%): [1838.554, 2102.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24886.169 ±(99.9%) 826.861 B/op [Average]
[info]   (min, avg, max) = (24534.011, 24886.169, 25081.437), stdev = 214.733
[info]   CI (99.9%): [24059.308, 25713.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.297 ±(99.9%) 1155.504 MB/sec [Average]
[info]   (min, avg, max) = (1341.527, 1878.297, 2016.957), stdev = 300.081
[info]   CI (99.9%): [722.793, 3033.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23702.487 ±(99.9%) 14116.092 B/op [Average]
[info]   (min, avg, max) = (17160.283, 23702.487, 25760.013), stdev = 3665.904
[info]   CI (99.9%): [9586.396, 37818.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 4.575 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.737, 2.769), stdev = 1.188
[info]   CI (99.9%): [≈ 0, 5.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.238 ±(99.9%) 57.368 B/op [Average]
[info]   (min, avg, max) = (0.266, 9.238, 34.723), stdev = 14.898
[info]   CI (99.9%): [≈ 0, 66.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.853 ops/s
[info] # Warmup Iteration   2: 352594.304 ops/s
[info] # Warmup Iteration   3: 375878.191 ops/s
[info] # Warmup Iteration   4: 382100.563 ops/s
[info] # Warmup Iteration   5: 383024.330 ops/s
[info] Iteration   1: 374425.140 ops/s
[info]                  ·gc.alloc.rate:                   784.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              3298.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5606.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 382912.204 ops/s
[info]                  ·gc.alloc.rate:               790.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          3250.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2740.849 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 382253.496 ops/s
[info]                  ·gc.alloc.rate:                   780.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              3212.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2748.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 382707.059 ops/s
[info]                  ·gc.alloc.rate:               783.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          3223.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2744.971 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 382839.318 ops/s
[info]                  ·gc.alloc.rate:                   782.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              3217.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2745.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   381027.444 ±(99.9%) 14246.073 ops/s [Average]
[info]   (min, avg, max) = (374425.140, 381027.444, 382912.204), stdev = 3699.660
[info]   CI (99.9%): [366781.370, 395273.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   784.555 ±(99.9%) 14.710 MB/sec [Average]
[info]   (min, avg, max) = (780.523, 784.555, 790.759), stdev = 3.820
[info]   CI (99.9%): [769.845, 799.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3240.726 ±(99.9%) 136.535 B/op [Average]
[info]   (min, avg, max) = (3212.832, 3240.726, 3298.694), stdev = 35.458
[info]   CI (99.9%): [3104.192, 3377.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.693 ±(99.9%) 1147.398 MB/sec [Average]
[info]   (min, avg, max) = (666.832, 800.693, 1333.727), stdev = 297.976
[info]   CI (99.9%): [≈ 0, 1948.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3317.065 ±(99.9%) 4927.202 B/op [Average]
[info]   (min, avg, max) = (2740.849, 3317.065, 5606.041), stdev = 1279.579
[info]   CI (99.9%): [≈ 0, 8244.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.034), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.142), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74228.805 ops/s
[info] # Warmup Iteration   2: 251004.604 ops/s
[info] # Warmup Iteration   3: 265731.726 ops/s
[info] # Warmup Iteration   4: 273325.152 ops/s
[info] # Warmup Iteration   5: 272164.737 ops/s
[info] Iteration   1: 273069.979 ops/s
[info]                  ·gc.alloc.rate:               624.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          3596.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3845.248 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 272975.019 ops/s
[info]                  ·gc.alloc.rate:               622.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          3590.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3846.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 272986.098 ops/s
[info]                  ·gc.alloc.rate:                   623.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              3595.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3850.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 273906.193 ops/s
[info]                  ·gc.alloc.rate:               621.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          3573.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3837.299 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 274557.417 ops/s
[info]                  ·gc.alloc.rate:      602.875 MB/sec
[info]                  ·gc.alloc.rate.norm: 3456.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   273498.941 ±(99.9%) 2728.077 ops/s [Average]
[info]   (min, avg, max) = (272975.019, 273498.941, 274557.417), stdev = 708.473
[info]   CI (99.9%): [270770.864, 276227.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   619.043 ±(99.9%) 34.961 MB/sec [Average]
[info]   (min, avg, max) = (602.875, 619.043, 624.172), stdev = 9.079
[info]   CI (99.9%): [584.081, 654.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3562.308 ±(99.9%) 231.625 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3562.308, 3596.894), stdev = 60.152
[info]   CI (99.9%): [3330.683, 3793.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.014 ±(99.9%) 1149.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.014, 667.845), stdev = 298.523
[info]   CI (99.9%): [≈ 0, 1683.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3075.845 ±(99.9%) 6621.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3075.845, 3850.089), stdev = 1719.456
[info]   CI (99.9%): [≈ 0, 9696.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.240), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315440.068 ops/s
[info] # Warmup Iteration   2: 497509.605 ops/s
[info] # Warmup Iteration   3: 519001.708 ops/s
[info] # Warmup Iteration   4: 517179.717 ops/s
[info] # Warmup Iteration   5: 518964.783 ops/s
[info] Iteration   1: 505604.768 ops/s
[info]                  ·gc.alloc.rate:               661.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          2059.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2088.128 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 519171.679 ops/s
[info]                  ·gc.alloc.rate:               676.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          2049.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2035.348 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 522199.953 ops/s
[info]                  ·gc.alloc.rate:      658.383 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 519526.025 ops/s
[info]                  ·gc.alloc.rate:                   674.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              2041.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2034.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 521327.551 ops/s
[info]                  ·gc.alloc.rate:               675.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          2037.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2029.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   517565.995 ±(99.9%) 26195.260 ops/s [Average]
[info]   (min, avg, max) = (505604.768, 517565.995, 522199.953), stdev = 6802.826
[info]   CI (99.9%): [491370.735, 543761.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   669.039 ±(99.9%) 32.131 MB/sec [Average]
[info]   (min, avg, max) = (658.383, 669.039, 676.054), stdev = 8.344
[info]   CI (99.9%): [636.907, 701.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2034.479 ±(99.9%) 113.294 B/op [Average]
[info]   (min, avg, max) = (1984.001, 2034.479, 2059.580), stdev = 29.422
[info]   CI (99.9%): [1921.184, 2147.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.202 ±(99.9%) 1156.370 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.202, 672.187), stdev = 300.306
[info]   CI (99.9%): [≈ 0, 1693.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1637.351 ±(99.9%) 3525.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1637.351, 2088.128), stdev = 915.623
[info]   CI (99.9%): [≈ 0, 5163.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.189), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4788.012 ops/s
[info] # Warmup Iteration   2: 62192.803 ops/s
[info] # Warmup Iteration   3: 65570.664 ops/s
[info] # Warmup Iteration   4: 67212.714 ops/s
[info] # Warmup Iteration   5: 67781.217 ops/s
[info] Iteration   1: 68258.560 ops/s
[info]                  ·gc.alloc.rate:                   2871.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              66181.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61531.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.920 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 68581.378 ops/s
[info]                  ·gc.alloc.rate:                   2857.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              65569.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61246.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.777 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68182.948 ops/s
[info]                  ·gc.alloc.rate:               2881.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          66507.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61736.115 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 68193.089 ops/s
[info]                  ·gc.alloc.rate:               2882.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          66534.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61911.553 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 68369.401 ops/s
[info]                  ·gc.alloc.rate:               2889.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          66517.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61948.833 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68317.075 ±(99.9%) 636.757 ops/s [Average]
[info]   (min, avg, max) = (68182.948, 68317.075, 68581.378), stdev = 165.364
[info]   CI (99.9%): [67680.318, 68953.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2876.618 ±(99.9%) 47.681 MB/sec [Average]
[info]   (min, avg, max) = (2857.699, 2876.618, 2889.650), stdev = 12.382
[info]   CI (99.9%): [2828.937, 2924.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66261.834 ±(99.9%) 1594.176 B/op [Average]
[info]   (min, avg, max) = (65569.435, 66261.834, 66534.107), stdev = 414.002
[info]   CI (99.9%): [64667.658, 67856.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2677.497 ±(99.9%) 35.848 MB/sec [Average]
[info]   (min, avg, max) = (2669.279, 2677.497, 2691.192), stdev = 9.310
[info]   CI (99.9%): [2641.649, 2713.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61674.906 ±(99.9%) 1121.096 B/op [Average]
[info]   (min, avg, max) = (61246.169, 61674.906, 61948.833), stdev = 291.145
[info]   CI (99.9%): [60553.810, 62796.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.208), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.339 ±(99.9%) 8.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.339, 4.777), stdev = 2.094
[info]   CI (99.9%): [≈ 0, 9.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48938.630 ops/s
[info] # Warmup Iteration   2: 125367.852 ops/s
[info] # Warmup Iteration   3: 133641.502 ops/s
[info] # Warmup Iteration   4: 136470.214 ops/s
[info] # Warmup Iteration   5: 135079.550 ops/s
[info] Iteration   1: 134474.081 ops/s
[info]                  ·gc.alloc.rate:               1164.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          13632.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7847.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 135965.232 ops/s
[info]                  ·gc.alloc.rate:                   1193.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              13813.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15525.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 136117.670 ops/s
[info]                  ·gc.alloc.rate:                   1199.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              13871.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15520.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 136159.451 ops/s
[info]                  ·gc.alloc.rate:                   1201.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              13889.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15523.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 136293.498 ops/s
[info]                  ·gc.alloc.rate:                   1201.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              13875.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7753.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   135801.986 ±(99.9%) 2893.755 ops/s [Average]
[info]   (min, avg, max) = (134474.081, 135801.986, 136293.498), stdev = 751.499
[info]   CI (99.9%): [132908.231, 138695.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1192.233 ±(99.9%) 60.357 MB/sec [Average]
[info]   (min, avg, max) = (1164.867, 1192.233, 1201.699), stdev = 15.674
[info]   CI (99.9%): [1131.877, 1252.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13816.441 ±(99.9%) 410.858 B/op [Average]
[info]   (min, avg, max) = (13632.861, 13816.441, 13889.630), stdev = 106.699
[info]   CI (99.9%): [13405.584, 14227.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.701 ±(99.9%) 1415.479 MB/sec [Average]
[info]   (min, avg, max) = (670.502, 1073.701, 1342.962), stdev = 367.595
[info]   CI (99.9%): [≈ 0, 2489.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12433.970 ±(99.9%) 16287.651 B/op [Average]
[info]   (min, avg, max) = (7753.953, 12433.970, 15525.235), stdev = 4229.851
[info]   CI (99.9%): [≈ 0, 28721.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.081), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 5.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.084 ±(99.9%) 59.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.084, 35.613), stdev = 15.480
[info]   CI (99.9%): [≈ 0, 67.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.869 ops/s
[info] # Warmup Iteration   2: 201241.348 ops/s
[info] # Warmup Iteration   3: 206016.256 ops/s
[info] # Warmup Iteration   4: 209958.774 ops/s
[info] # Warmup Iteration   5: 209371.256 ops/s
[info] Iteration   1: 200046.611 ops/s
[info]                  ·gc.alloc.rate:                   168.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              1329.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4025.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.506 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 209217.614 ops/s
[info]                  ·gc.alloc.rate:      163.952 MB/sec
[info]                  ·gc.alloc.rate.norm: 1233.356 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 209386.521 ops/s
[info]                  ·gc.alloc.rate:      163.911 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 207598.454 ops/s
[info]                  ·gc.alloc.rate:               176.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          1340.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3878.695 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 207860.207 ops/s
[info]                  ·gc.alloc.rate:      162.705 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   206821.881 ±(99.9%) 14901.344 ops/s [Average]
[info]   (min, avg, max) = (200046.611, 206821.881, 209386.521), stdev = 3869.832
[info]   CI (99.9%): [191920.537, 221723.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   167.266 ±(99.9%) 22.499 MB/sec [Average]
[info]   (min, avg, max) = (162.705, 167.266, 176.784), stdev = 5.843
[info]   CI (99.9%): [144.767, 189.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1273.414 ±(99.9%) 216.492 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1273.414, 1340.295), stdev = 56.222
[info]   CI (99.9%): [1056.922, 1489.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.647 ±(99.9%) 1079.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.647, 511.637), stdev = 280.224
[info]   CI (99.9%): [≈ 0, 1283.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1580.784 ±(99.9%) 8337.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1580.784, 4025.224), stdev = 2165.197
[info]   CI (99.9%): [≈ 0, 9918.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 3.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.394, 1.971), stdev = 0.881
[info]   CI (99.9%): [≈ 0, 3.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   3.101 ±(99.9%) 26.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.101, 15.506), stdev = 6.935
[info]   CI (99.9%): [≈ 0, 29.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187685.437 ops/s
[info] # Warmup Iteration   2: 412485.599 ops/s
[info] # Warmup Iteration   3: 420252.154 ops/s
[info] # Warmup Iteration   4: 418641.803 ops/s
[info] # Warmup Iteration   5: 426310.636 ops/s
[info] Iteration   1: 427487.867 ops/s
[info]                  ·gc.alloc.rate:      419.369 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 428161.821 ops/s
[info]                  ·gc.alloc.rate:               431.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          1585.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1880.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 428761.649 ops/s
[info]                  ·gc.alloc.rate:               442.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          1622.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2450.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 431087.376 ops/s
[info]                  ·gc.alloc.rate:      423.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 406431.893 ops/s
[info]                  ·gc.alloc.rate:               425.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2584.720 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   424386.121 ±(99.9%) 38998.256 ops/s [Average]
[info]   (min, avg, max) = (406431.893, 424386.121, 431087.376), stdev = 10127.723
[info]   CI (99.9%): [385387.865, 463384.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   428.358 ±(99.9%) 34.534 MB/sec [Average]
[info]   (min, avg, max) = (419.369, 428.358, 442.319), stdev = 8.968
[info]   CI (99.9%): [393.824, 462.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1588.857 ±(99.9%) 178.944 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1588.857, 1647.531), stdev = 46.471
[info]   CI (99.9%): [1409.913, 1767.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.432 ±(99.9%) 1321.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.432, 667.755), stdev = 343.208
[info]   CI (99.9%): [≈ 0, 1691.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1383.076 ±(99.9%) 4967.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1383.076, 2584.720), stdev = 1289.941
[info]   CI (99.9%): [≈ 0, 6350.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295780.469 ops/s
[info] # Warmup Iteration   2: 437721.996 ops/s
[info] # Warmup Iteration   3: 438598.838 ops/s
[info] # Warmup Iteration   4: 470726.491 ops/s
[info] # Warmup Iteration   5: 471291.263 ops/s
[info] Iteration   1: 467092.649 ops/s
[info]                  ·gc.alloc.rate:               382.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          1287.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1723.830 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 467271.809 ops/s
[info]                  ·gc.alloc.rate:               383.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          1289.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1723.119 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 471635.131 ops/s
[info]                  ·gc.alloc.rate:      369.202 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 470315.552 ops/s
[info]                  ·gc.alloc.rate:               393.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          1317.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2244.791 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 471819.671 ops/s
[info]                  ·gc.alloc.rate:      369.328 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   469626.962 ±(99.9%) 8882.469 ops/s [Average]
[info]   (min, avg, max) = (467092.649, 469626.962, 471819.671), stdev = 2306.749
[info]   CI (99.9%): [460744.494, 478509.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   379.528 ±(99.9%) 39.992 MB/sec [Average]
[info]   (min, avg, max) = (369.202, 379.528, 393.682), stdev = 10.386
[info]   CI (99.9%): [339.535, 419.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1271.833 ±(99.9%) 147.041 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1271.833, 1317.406), stdev = 38.186
[info]   CI (99.9%): [1124.792, 1418.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.867 ±(99.9%) 1217.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.867, 670.814), stdev = 316.083
[info]   CI (99.9%): [≈ 0, 1555.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1138.348 ±(99.9%) 4084.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1138.348, 2244.791), stdev = 1060.735
[info]   CI (99.9%): [≈ 0, 5222.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307725.991 ops/s
[info] # Warmup Iteration   2: 455852.047 ops/s
[info] # Warmup Iteration   3: 492214.679 ops/s
[info] # Warmup Iteration   4: 502511.342 ops/s
[info] # Warmup Iteration   5: 504237.894 ops/s
[info] Iteration   1: 504051.051 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 504053.590 ops/s
[info]                  ·gc.alloc.rate:      0.248 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.774 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 502776.160 ops/s
[info]                  ·gc.alloc.rate:      0.932 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.917 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 503960.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 504091.969 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   503786.675 ±(99.9%) 2183.129 ops/s [Average]
[info]   (min, avg, max) = (502776.160, 503786.675, 504091.969), stdev = 566.952
[info]   CI (99.9%): [501603.546, 505969.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.236 ±(99.9%) 1.553 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.236, 0.932), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 1.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.739 ±(99.9%) 4.863 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.739, 2.917), stdev = 1.263
[info]   CI (99.9%): [≈ 0, 5.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8318.047 ops/s
[info] # Warmup Iteration   2: 27491.722 ops/s
[info] # Warmup Iteration   3: 29181.331 ops/s
[info] # Warmup Iteration   4: 29016.325 ops/s
[info] # Warmup Iteration   5: 28982.851 ops/s
[info] Iteration   1: 29188.407 ops/s
[info]                  ·gc.alloc.rate:                   1591.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              85808.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72337.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 28306.102 ops/s
[info]                  ·gc.alloc.rate:                   1571.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              87404.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111928.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164.355 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 29234.830 ops/s
[info]                  ·gc.alloc.rate:                   1604.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              86390.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72185.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 29234.473 ops/s
[info]                  ·gc.alloc.rate:                   1591.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              85700.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72011.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29210.650 ops/s
[info]                  ·gc.alloc.rate:                   1604.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              86412.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107994.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   29034.892 ±(99.9%) 1570.525 ops/s [Average]
[info]   (min, avg, max) = (28306.102, 29034.892, 29234.830), stdev = 407.860
[info]   CI (99.9%): [27464.368, 30605.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1592.928 ±(99.9%) 51.603 MB/sec [Average]
[info]   (min, avg, max) = (1571.973, 1592.928, 1604.787), stdev = 13.401
[info]   CI (99.9%): [1541.325, 1644.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86343.582 ±(99.9%) 2606.711 B/op [Average]
[info]   (min, avg, max) = (85700.656, 86343.582, 87404.982), stdev = 676.955
[info]   CI (99.9%): [83736.871, 88950.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.688 ±(99.9%) 1411.266 MB/sec [Average]
[info]   (min, avg, max) = (1337.671, 1607.688, 2013.020), stdev = 366.501
[info]   CI (99.9%): [196.422, 3018.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87291.508 ±(99.9%) 79868.387 B/op [Average]
[info]   (min, avg, max) = (72011.375, 87291.508, 111928.108), stdev = 20741.567
[info]   CI (99.9%): [7423.121, 167159.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 4.940 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.833, 2.956), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   45.871 ±(99.9%) 274.279 B/op [Average]
[info]   (min, avg, max) = (1.121, 45.871, 164.355), stdev = 71.229
[info]   CI (99.9%): [≈ 0, 320.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.435
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 627.586 ops/s
[info] # Warmup Iteration   2: 6853.055 ops/s
[info] # Warmup Iteration   3: 7931.855 ops/s
[info] # Warmup Iteration   4: 8077.669 ops/s
[info] # Warmup Iteration   5: 8077.769 ops/s
[info] Iteration   1: 8067.596 ops/s
[info]                  ·gc.alloc.rate:               1159.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          226105.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130211.073 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 8113.993 ops/s
[info]                  ·gc.alloc.rate:                   1182.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              229309.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258914.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8101.224 ops/s
[info]                  ·gc.alloc.rate:               1181.694 MB/sec
[info]                  ·gc.alloc.rate.norm:          229568.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 259329.422 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8095.459 ops/s
[info]                  ·gc.alloc.rate:                   1190.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              231438.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259651.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8114.791 ops/s
[info]                  ·gc.alloc.rate:               1155.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          224114.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129570.251 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8098.613 ±(99.9%) 73.996 ops/s [Average]
[info]   (min, avg, max) = (8067.596, 8098.613, 8114.791), stdev = 19.216
[info]   CI (99.9%): [8024.617, 8172.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1173.986 ±(99.9%) 59.322 MB/sec [Average]
[info]   (min, avg, max) = (1155.700, 1173.986, 1190.518), stdev = 15.406
[info]   CI (99.9%): [1114.664, 1233.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228107.224 ±(99.9%) 11329.705 B/op [Average]
[info]   (min, avg, max) = (224114.342, 228107.224, 231438.448), stdev = 2942.288
[info]   CI (99.9%): [216777.518, 239436.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1068.323 ±(99.9%) 1407.356 MB/sec [Average]
[info]   (min, avg, max) = (667.746, 1068.323, 1335.643), stdev = 365.486
[info]   CI (99.9%): [≈ 0, 2475.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   207535.174 ±(99.9%) 272934.649 B/op [Average]
[info]   (min, avg, max) = (129570.251, 207535.174, 259651.091), stdev = 70880.262
[info]   CI (99.9%): [≈ 0, 480469.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.617 ±(99.9%) 8.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.617, 4.047), stdev = 2.214
[info]   CI (99.9%): [≈ 0, 10.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:05:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 579.722 ops/s
[info] # Warmup Iteration   2: 7600.909 ops/s
[info] # Warmup Iteration   3: 8414.022 ops/s
[info] # Warmup Iteration   4: 8525.026 ops/s
[info] # Warmup Iteration   5: 8515.584 ops/s
[info] Iteration   1: 8517.910 ops/s
[info]                  ·gc.alloc.rate:                   1149.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              212338.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246944.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 8574.868 ops/s
[info]                  ·gc.alloc.rate:               1130.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          207478.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122682.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 8510.539 ops/s
[info]                  ·gc.alloc.rate:                   1148.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              212375.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247361.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8451.627 ops/s
[info]                  ·gc.alloc.rate:               1133.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          211170.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 249306.572 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 8541.268 ops/s
[info]                  ·gc.alloc.rate:                   1123.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              206944.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123416.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 740.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8519.242 ±(99.9%) 174.650 ops/s [Average]
[info]   (min, avg, max) = (8451.627, 8519.242, 8574.868), stdev = 45.356
[info]   CI (99.9%): [8344.592, 8693.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1137.053 ±(99.9%) 44.218 MB/sec [Average]
[info]   (min, avg, max) = (1123.109, 1137.053, 1149.289), stdev = 11.483
[info]   CI (99.9%): [1092.836, 1181.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   210061.410 ±(99.9%) 10215.077 B/op [Average]
[info]   (min, avg, max) = (206944.820, 210061.410, 212375.080), stdev = 2652.823
[info]   CI (99.9%): [199846.333, 220276.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.248 ±(99.9%) 1410.079 MB/sec [Average]
[info]   (min, avg, max) = (668.420, 1070.248, 1338.785), stdev = 366.193
[info]   CI (99.9%): [≈ 0, 2480.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   197942.182 ±(99.9%) 263283.791 B/op [Average]
[info]   (min, avg, max) = (122682.292, 197942.182, 249306.572), stdev = 68373.965
[info]   CI (99.9%): [≈ 0, 461225.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.896 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 4.020), stdev = 1.791
[info]   CI (99.9%): [≈ 0, 7.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   150.446 ±(99.9%) 1270.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 150.446, 740.686), stdev = 329.969
[info]   CI (99.9%): [≈ 0, 1421.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91980.450 ops/s
[info] # Warmup Iteration   2: 177678.331 ops/s
[info] # Warmup Iteration   3: 188216.693 ops/s
[info] # Warmup Iteration   4: 190333.039 ops/s
[info] # Warmup Iteration   5: 185240.375 ops/s
[info] Iteration   1: 190440.667 ops/s
[info]                  ·gc.alloc.rate:               1652.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          13648.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11117.816 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 190468.081 ops/s
[info]                  ·gc.alloc.rate:                   1649.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              13633.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11121.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 190664.710 ops/s
[info]                  ·gc.alloc.rate:                   1678.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              13853.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16641.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 191057.927 ops/s
[info]                  ·gc.alloc.rate:               1669.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          13748.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11051.331 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 190658.221 ops/s
[info]                  ·gc.alloc.rate:               1679.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          13863.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16615.216 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   190657.921 ±(99.9%) 949.654 ops/s [Average]
[info]   (min, avg, max) = (190440.667, 190657.921, 191057.927), stdev = 246.622
[info]   CI (99.9%): [189708.267, 191607.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1665.745 ±(99.9%) 54.199 MB/sec [Average]
[info]   (min, avg, max) = (1649.889, 1665.745, 1679.380), stdev = 14.075
[info]   CI (99.9%): [1611.546, 1719.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   13749.513 ±(99.9%) 419.873 B/op [Average]
[info]   (min, avg, max) = (13633.446, 13749.513, 13863.214), stdev = 109.040
[info]   CI (99.9%): [13329.640, 14169.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.424 ±(99.9%) 1413.078 MB/sec [Average]
[info]   (min, avg, max) = (1341.568, 1612.424, 2016.075), stdev = 366.972
[info]   CI (99.9%): [199.346, 3025.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13309.577 ±(99.9%) 11667.128 B/op [Average]
[info]   (min, avg, max) = (11051.331, 13309.577, 16641.838), stdev = 3029.916
[info]   CI (99.9%): [1642.449, 24976.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.464 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.665), stdev = 1.159
[info]   CI (99.9%): [≈ 0, 5.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.091 ±(99.9%) 36.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.091, 22.018), stdev = 9.579
[info]   CI (99.9%): [≈ 0, 41.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 700.272 ops/s
[info] # Warmup Iteration   2: 6415.747 ops/s
[info] # Warmup Iteration   3: 7610.564 ops/s
[info] # Warmup Iteration   4: 7782.044 ops/s
[info] # Warmup Iteration   5: 7574.416 ops/s
[info] Iteration   1: 7790.786 ops/s
[info]                  ·gc.alloc.rate:               1305.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          263638.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 269914.469 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 7749.792 ops/s
[info]                  ·gc.alloc.rate:                   1289.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              261890.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271477.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7808.853 ops/s
[info]                  ·gc.alloc.rate:               1282.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          258446.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134780.477 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7773.717 ops/s
[info]                  ·gc.alloc.rate:                   1291.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              261377.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270909.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 842.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7768.084 ops/s
[info]                  ·gc.alloc.rate:                   1314.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              266241.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270848.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7778.246 ±(99.9%) 86.693 ops/s [Average]
[info]   (min, avg, max) = (7749.792, 7778.246, 7808.853), stdev = 22.514
[info]   CI (99.9%): [7691.553, 7864.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1296.568 ±(99.9%) 50.104 MB/sec [Average]
[info]   (min, avg, max) = (1282.349, 1296.568, 1314.594), stdev = 13.012
[info]   CI (99.9%): [1246.465, 1346.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   262318.675 ±(99.9%) 11093.340 B/op [Average]
[info]   (min, avg, max) = (258446.050, 262318.675, 266241.675), stdev = 2880.905
[info]   CI (99.9%): [251225.336, 273412.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1203.471 ±(99.9%) 1151.032 MB/sec [Average]
[info]   (min, avg, max) = (668.749, 1203.471, 1338.179), stdev = 298.919
[info]   CI (99.9%): [52.439, 2354.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   243585.949 ±(99.9%) 234221.925 B/op [Average]
[info]   (min, avg, max) = (134780.477, 243585.949, 271477.300), stdev = 60826.690
[info]   CI (99.9%): [9364.024, 477807.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 7.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 4.163), stdev = 1.822
[info]   CI (99.9%): [≈ 0, 7.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   186.274 ±(99.9%) 1419.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 186.274, 842.798), stdev = 368.765
[info]   CI (99.9%): [≈ 0, 1606.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6426.087 ops/s
[info] # Warmup Iteration   2: 18698.140 ops/s
[info] # Warmup Iteration   3: 19689.603 ops/s
[info] # Warmup Iteration   4: 20450.955 ops/s
[info] # Warmup Iteration   5: 20137.166 ops/s
[info] Iteration   1: 20302.287 ops/s
[info]                  ·gc.alloc.rate:                   1157.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              89696.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103922.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 20289.889 ops/s
[info]                  ·gc.alloc.rate:               1158.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          89847.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104036.059 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 20523.047 ops/s
[info]                  ·gc.alloc.rate:               1157.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          88762.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51440.348 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 20505.408 ops/s
[info]                  ·gc.alloc.rate:               1171.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          89875.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103073.247 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 20412.200 ops/s
[info]                  ·gc.alloc.rate:                   1165.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              89856.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103542.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20406.566 ±(99.9%) 421.188 ops/s [Average]
[info]   (min, avg, max) = (20289.889, 20406.566, 20523.047), stdev = 109.381
[info]   CI (99.9%): [19985.378, 20827.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1161.955 ±(99.9%) 23.938 MB/sec [Average]
[info]   (min, avg, max) = (1157.072, 1161.955, 1171.000), stdev = 6.217
[info]   CI (99.9%): [1138.017, 1185.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89607.654 ±(99.9%) 1839.954 B/op [Average]
[info]   (min, avg, max) = (88762.440, 89607.654, 89875.730), stdev = 477.830
[info]   CI (99.9%): [87767.700, 91447.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.812 ±(99.9%) 1155.973 MB/sec [Average]
[info]   (min, avg, max) = (670.798, 1207.812, 1343.498), stdev = 300.203
[info]   CI (99.9%): [51.839, 2363.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   93203.073 ±(99.9%) 89909.113 B/op [Average]
[info]   (min, avg, max) = (51440.348, 93203.073, 104036.059), stdev = 23349.111
[info]   CI (99.9%): [3293.960, 183112.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.721 ±(99.9%) 6.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 3.582), stdev = 1.600
[info]   CI (99.9%): [≈ 0, 6.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55.535 ±(99.9%) 474.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.535, 276.063), stdev = 123.281
[info]   CI (99.9%): [≈ 0, 530.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7739.664 ops/s
[info] # Warmup Iteration   2: 23339.020 ops/s
[info] # Warmup Iteration   3: 23327.632 ops/s
[info] # Warmup Iteration   4: 23929.145 ops/s
[info] # Warmup Iteration   5: 23792.529 ops/s
[info] Iteration   1: 24026.554 ops/s
[info]                  ·gc.alloc.rate:               1057.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          69246.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43810.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 24053.200 ops/s
[info]                  ·gc.alloc.rate:               1072.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          70196.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87566.579 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 24058.224 ops/s
[info]                  ·gc.alloc.rate:                   1067.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              69826.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87635.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 24076.641 ops/s
[info]                  ·gc.alloc.rate:               1051.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          68716.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43804.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 23873.989 ops/s
[info]                  ·gc.alloc.rate:                   1057.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              69657.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88376.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   24017.722 ±(99.9%) 316.993 ops/s [Average]
[info]   (min, avg, max) = (23873.989, 24017.722, 24076.641), stdev = 82.322
[info]   CI (99.9%): [23700.728, 24334.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1061.147 ±(99.9%) 33.689 MB/sec [Average]
[info]   (min, avg, max) = (1051.249, 1061.147, 1072.836), stdev = 8.749
[info]   CI (99.9%): [1027.457, 1094.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69528.622 ±(99.9%) 2186.136 B/op [Average]
[info]   (min, avg, max) = (68716.813, 69528.622, 70196.327), stdev = 567.733
[info]   CI (99.9%): [67342.486, 71714.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.623 ±(99.9%) 1413.578 MB/sec [Average]
[info]   (min, avg, max) = (668.829, 1071.623, 1341.181), stdev = 367.102
[info]   CI (99.9%): [≈ 0, 2485.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   70238.893 ±(99.9%) 92917.005 B/op [Average]
[info]   (min, avg, max) = (43804.969, 70238.893, 88376.715), stdev = 24130.251
[info]   CI (99.9%): [≈ 0, 163155.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.664 ±(99.9%) 5.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.297), stdev = 1.472
[info]   CI (99.9%): [≈ 0, 6.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.726 ±(99.9%) 373.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.726, 217.267), stdev = 97.014
[info]   CI (99.9%): [≈ 0, 417.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193223.773 ops/s
[info] # Warmup Iteration   2: 345458.333 ops/s
[info] # Warmup Iteration   3: 377523.445 ops/s
[info] # Warmup Iteration   4: 377604.067 ops/s
[info] # Warmup Iteration   5: 377797.173 ops/s
[info] Iteration   1: 378687.563 ops/s
[info]                  ·gc.alloc.rate:               879.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          3655.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2790.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 378571.163 ops/s
[info]                  ·gc.alloc.rate:               876.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          3642.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2791.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 377072.489 ops/s
[info]                  ·gc.alloc.rate:                   887.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5610.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 376436.999 ops/s
[info]                  ·gc.alloc.rate:               868.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          3629.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2811.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 375021.013 ops/s
[info]                  ·gc.alloc.rate:               864.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          3627.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2822.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   377157.845 ±(99.9%) 5912.481 ops/s [Average]
[info]   (min, avg, max) = (375021.013, 377157.845, 378687.563), stdev = 1535.452
[info]   CI (99.9%): [371245.365, 383070.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   875.184 ±(99.9%) 35.685 MB/sec [Average]
[info]   (min, avg, max) = (864.407, 875.184, 887.652), stdev = 9.267
[info]   CI (99.9%): [839.500, 910.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3652.081 ±(99.9%) 121.805 B/op [Average]
[info]   (min, avg, max) = (3627.710, 3652.081, 3704.837), stdev = 31.632
[info]   CI (99.9%): [3530.275, 3773.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.416 ±(99.9%) 1157.741 MB/sec [Average]
[info]   (min, avg, max) = (671.452, 806.416, 1344.255), stdev = 300.662
[info]   CI (99.9%): [≈ 0, 1964.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3365.294 ±(99.9%) 4833.432 B/op [Average]
[info]   (min, avg, max) = (2790.651, 3365.294, 5610.585), stdev = 1255.227
[info]   CI (99.9%): [≈ 0, 8198.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.174), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168163.690 ops/s
[info] # Warmup Iteration   2: 405759.374 ops/s
[info] # Warmup Iteration   3: 425561.592 ops/s
[info] # Warmup Iteration   4: 425571.783 ops/s
[info] # Warmup Iteration   5: 424976.854 ops/s
[info] Iteration   1: 425403.951 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 424873.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 424592.644 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 424887.221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 423386.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   424628.807 ±(99.9%) 2901.750 ops/s [Average]
[info]   (min, avg, max) = (423386.748, 424628.807, 425403.951), stdev = 753.575
[info]   CI (99.9%): [421727.057, 427530.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6848.915 ops/s
[info] # Warmup Iteration   2: 23754.374 ops/s
[info] # Warmup Iteration   3: 24872.231 ops/s
[info] # Warmup Iteration   4: 25025.630 ops/s
[info] # Warmup Iteration   5: 24863.233 ops/s
[info] Iteration   1: 24527.806 ops/s
[info]                  ·gc.alloc.rate:               1177.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          75553.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42999.652 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 25263.071 ops/s
[info]                  ·gc.alloc.rate:               1225.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          76320.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83494.337 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 25265.468 ops/s
[info]                  ·gc.alloc.rate:                   1211.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              75458.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83529.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 25109.515 ops/s
[info]                  ·gc.alloc.rate:                   1216.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              76253.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84114.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 25268.771 ops/s
[info]                  ·gc.alloc.rate:                   1207.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              75206.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41802.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.898 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   25086.926 ±(99.9%) 1231.450 ops/s [Average]
[info]   (min, avg, max) = (24527.806, 25086.926, 25268.771), stdev = 319.804
[info]   CI (99.9%): [23855.476, 26318.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1207.765 ±(99.9%) 70.034 MB/sec [Average]
[info]   (min, avg, max) = (1177.461, 1207.765, 1225.270), stdev = 18.188
[info]   CI (99.9%): [1137.731, 1277.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75758.425 ±(99.9%) 1922.711 B/op [Average]
[info]   (min, avg, max) = (75206.249, 75758.425, 76320.028), stdev = 499.322
[info]   CI (99.9%): [73835.714, 77681.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1073.084 ±(99.9%) 1414.669 MB/sec [Average]
[info]   (min, avg, max) = (670.123, 1073.084, 1342.231), stdev = 367.385
[info]   CI (99.9%): [≈ 0, 2487.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67188.014 ±(99.9%) 87149.446 B/op [Average]
[info]   (min, avg, max) = (41802.798, 67188.014, 84114.059), stdev = 22632.434
[info]   CI (99.9%): [≈ 0, 154337.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 5.605 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.373), stdev = 1.456
[info]   CI (99.9%): [≈ 0, 6.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50.834 ±(99.9%) 351.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.834, 211.381), stdev = 91.227
[info]   CI (99.9%): [≈ 0, 402.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.000, 7.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2239.037 ops/s
[info] # Warmup Iteration   2: 12182.109 ops/s
[info] # Warmup Iteration   3: 13269.699 ops/s
[info] # Warmup Iteration   4: 13319.706 ops/s
[info] # Warmup Iteration   5: 13119.084 ops/s
[info] Iteration   1: 13032.315 ops/s
[info]                  ·gc.alloc.rate:               1281.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          154736.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162024.863 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 13260.781 ops/s
[info]                  ·gc.alloc.rate:               1300.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          154279.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159306.389 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 13286.143 ops/s
[info]                  ·gc.alloc.rate:                   1298.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              153836.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159073.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13215.363 ops/s
[info]                  ·gc.alloc.rate:                   1292.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              153900.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160007.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 468.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13235.567 ops/s
[info]                  ·gc.alloc.rate:                   1280.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              152293.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79684.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13206.034 ±(99.9%) 387.713 ops/s [Average]
[info]   (min, avg, max) = (13032.315, 13206.034, 13286.143), stdev = 100.688
[info]   CI (99.9%): [12818.321, 13593.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1290.673 ±(99.9%) 35.897 MB/sec [Average]
[info]   (min, avg, max) = (1280.753, 1290.673, 1300.083), stdev = 9.322
[info]   CI (99.9%): [1254.776, 1326.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   153809.348 ±(99.9%) 3542.780 B/op [Average]
[info]   (min, avg, max) = (152293.859, 153809.348, 154736.265), stdev = 920.049
[info]   CI (99.9%): [150266.568, 157352.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1208.190 ±(99.9%) 1158.222 MB/sec [Average]
[info]   (min, avg, max) = (670.129, 1208.190, 1343.608), stdev = 300.786
[info]   CI (99.9%): [49.969, 2366.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   144019.413 ±(99.9%) 138557.306 B/op [Average]
[info]   (min, avg, max) = (79684.806, 144019.413, 162024.863), stdev = 35982.892
[info]   CI (99.9%): [5462.108, 282576.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.934), stdev = 1.755
[info]   CI (99.9%): [≈ 0, 7.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   94.696 ±(99.9%) 804.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.696, 468.539), stdev = 208.988
[info]   CI (99.9%): [≈ 0, 899.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1666.198 ops/s
[info] # Warmup Iteration   2: 12783.577 ops/s
[info] # Warmup Iteration   3: 13822.603 ops/s
[info] # Warmup Iteration   4: 13847.421 ops/s
[info] # Warmup Iteration   5: 13815.825 ops/s
[info] Iteration   1: 13818.252 ops/s
[info]                  ·gc.alloc.rate:               1228.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          139970.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76139.364 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 13849.262 ops/s
[info]                  ·gc.alloc.rate:                   1239.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              140815.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151975.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13829.704 ops/s
[info]                  ·gc.alloc.rate:                   1235.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              140559.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152298.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13579.928 ops/s
[info]                  ·gc.alloc.rate:                   1225.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              142054.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155217.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 429.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 13925.431 ops/s
[info]                  ·gc.alloc.rate:                   1249.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              141258.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151210.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13800.515 ±(99.9%) 501.344 ops/s [Average]
[info]   (min, avg, max) = (13579.928, 13800.515, 13925.431), stdev = 130.197
[info]   CI (99.9%): [13299.172, 14301.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1235.795 ±(99.9%) 36.471 MB/sec [Average]
[info]   (min, avg, max) = (1225.716, 1235.795, 1249.872), stdev = 9.471
[info]   CI (99.9%): [1199.324, 1272.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   140931.646 ±(99.9%) 3009.993 B/op [Average]
[info]   (min, avg, max) = (139970.127, 140931.646, 142054.415), stdev = 781.686
[info]   CI (99.9%): [137921.653, 143941.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.308 ±(99.9%) 1153.342 MB/sec [Average]
[info]   (min, avg, max) = (668.513, 1204.308, 1339.292), stdev = 299.519
[info]   CI (99.9%): [50.965, 2357.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   137368.315 ±(99.9%) 131929.780 B/op [Average]
[info]   (min, avg, max) = (76139.364, 137368.315, 155217.350), stdev = 34261.745
[info]   CI (99.9%): [5438.535, 269298.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.958 ±(99.9%) 5.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.958, 3.705), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 6.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   110.418 ±(99.9%) 695.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.418, 429.444), stdev = 180.698
[info]   CI (99.9%): [≈ 0, 806.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96169.590 ops/s
[info] # Warmup Iteration   2: 254940.657 ops/s
[info] # Warmup Iteration   3: 274543.817 ops/s
[info] # Warmup Iteration   4: 271459.258 ops/s
[info] # Warmup Iteration   5: 271545.954 ops/s
[info] Iteration   1: 278186.207 ops/s
[info]                  ·gc.alloc.rate:                   1650.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              9337.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11411.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 278990.185 ops/s
[info]                  ·gc.alloc.rate:                   1660.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              9361.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7592.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 281051.424 ops/s
[info]                  ·gc.alloc.rate:                   1657.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              9282.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7533.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 279981.023 ops/s
[info]                  ·gc.alloc.rate:                   1699.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              9553.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11326.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 279991.934 ops/s
[info]                  ·gc.alloc.rate:                   1659.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              9328.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7541.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   279640.154 ±(99.9%) 4204.104 ops/s [Average]
[info]   (min, avg, max) = (278186.207, 279640.154, 281051.424), stdev = 1091.793
[info]   CI (99.9%): [275436.050, 283844.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1665.533 ±(99.9%) 74.381 MB/sec [Average]
[info]   (min, avg, max) = (1650.701, 1665.533, 1699.429), stdev = 19.317
[info]   CI (99.9%): [1591.152, 1739.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9372.711 ±(99.9%) 403.741 B/op [Average]
[info]   (min, avg, max) = (9282.833, 9372.711, 9553.247), stdev = 104.850
[info]   CI (99.9%): [8968.971, 9776.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.158 ±(99.9%) 1416.511 MB/sec [Average]
[info]   (min, avg, max) = (1341.572, 1613.158, 2017.321), stdev = 367.864
[info]   CI (99.9%): [196.647, 3029.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9081.215 ±(99.9%) 8044.490 B/op [Average]
[info]   (min, avg, max) = (7533.447, 9081.215, 11411.903), stdev = 2089.128
[info]   CI (99.9%): [1036.725, 17125.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 4.795 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.629, 2.853), stdev = 1.245
[info]   CI (99.9%): [≈ 0, 5.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.545 ±(99.9%) 27.038 B/op [Average]
[info]   (min, avg, max) = (0.117, 3.545, 16.089), stdev = 7.022
[info]   CI (99.9%): [≈ 0, 30.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 701.474 ops/s
[info] # Warmup Iteration   2: 9506.464 ops/s
[info] # Warmup Iteration   3: 12415.873 ops/s
[info] # Warmup Iteration   4: 12297.644 ops/s
[info] # Warmup Iteration   5: 12294.114 ops/s
[info] Iteration   1: 12278.119 ops/s
[info]                  ·gc.alloc.rate:                   1519.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              194778.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171034.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12394.120 ops/s
[info]                  ·gc.alloc.rate:                   1542.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              195807.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254552.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 12416.184 ops/s
[info]                  ·gc.alloc.rate:                   1538.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              195022.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169795.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12458.885 ops/s
[info]                  ·gc.alloc.rate:                   1544.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              195126.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169475.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12434.890 ops/s
[info]                  ·gc.alloc.rate:               1553.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          196583.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169886.680 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12396.440 ±(99.9%) 270.731 ops/s [Average]
[info]   (min, avg, max) = (12278.119, 12396.440, 12458.885), stdev = 70.308
[info]   CI (99.9%): [12125.709, 12667.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1539.618 ±(99.9%) 48.024 MB/sec [Average]
[info]   (min, avg, max) = (1519.497, 1539.618, 1553.216), stdev = 12.472
[info]   CI (99.9%): [1491.594, 1587.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   195463.903 ±(99.9%) 2821.982 B/op [Average]
[info]   (min, avg, max) = (194778.875, 195463.903, 196583.094), stdev = 732.860
[info]   CI (99.9%): [192641.921, 198285.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.493 ±(99.9%) 1145.699 MB/sec [Average]
[info]   (min, avg, max) = (1334.260, 1472.493, 2004.709), stdev = 297.534
[info]   CI (99.9%): [326.793, 2618.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   186948.775 ±(99.9%) 145540.188 B/op [Average]
[info]   (min, avg, max) = (169475.328, 186948.775, 254552.672), stdev = 37796.325
[info]   CI (99.9%): [41408.587, 332488.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.283 ±(99.9%) 1.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.283, 1.042), stdev = 0.443
[info]   CI (99.9%): [≈ 0, 1.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.882 ±(99.9%) 215.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.882, 132.011), stdev = 56.081
[info]   CI (99.9%): [≈ 0, 251.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9021.639 ops/s
[info] # Warmup Iteration   2: 31152.898 ops/s
[info] # Warmup Iteration   3: 32984.613 ops/s
[info] # Warmup Iteration   4: 33237.822 ops/s
[info] # Warmup Iteration   5: 33471.179 ops/s
[info] Iteration   1: 33440.197 ops/s
[info]                  ·gc.alloc.rate:               1433.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          67487.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63125.868 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 33529.749 ops/s
[info]                  ·gc.alloc.rate:               1435.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          67369.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62987.725 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 33516.526 ops/s
[info]                  ·gc.alloc.rate:                   1447.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              67939.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63047.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 33593.293 ops/s
[info]                  ·gc.alloc.rate:                   1449.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              67902.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62855.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32861.177 ops/s
[info]                  ·gc.alloc.rate:               1432.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          68605.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64130.162 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   33388.188 ±(99.9%) 1153.625 ops/s [Average]
[info]   (min, avg, max) = (32861.177, 33388.188, 33593.293), stdev = 299.593
[info]   CI (99.9%): [32234.563, 34541.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1439.640 ±(99.9%) 30.725 MB/sec [Average]
[info]   (min, avg, max) = (1432.518, 1439.640, 1449.427), stdev = 7.979
[info]   CI (99.9%): [1408.915, 1470.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67861.047 ±(99.9%) 1869.099 B/op [Average]
[info]   (min, avg, max) = (67369.760, 67861.047, 68605.187), stdev = 485.399
[info]   CI (99.9%): [65991.948, 69730.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.357 ±(99.9%) 5.454 MB/sec [Average]
[info]   (min, avg, max) = (1339.077, 1341.357, 1342.902), stdev = 1.417
[info]   CI (99.9%): [1335.903, 1346.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63229.367 ±(99.9%) 1975.881 B/op [Average]
[info]   (min, avg, max) = (62855.886, 63229.367, 64130.162), stdev = 513.130
[info]   CI (99.9%): [61253.486, 65205.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 5.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.019), stdev = 1.308
[info]   CI (99.9%): [≈ 0, 5.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   34.590 ±(99.9%) 236.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.590, 141.743), stdev = 61.406
[info]   CI (99.9%): [≈ 0, 271.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.280
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21363.731 ops/s
[info] # Warmup Iteration   2: 75145.113 ops/s
[info] # Warmup Iteration   3: 81711.930 ops/s
[info] # Warmup Iteration   4: 82035.651 ops/s
[info] # Warmup Iteration   5: 82546.577 ops/s
[info] Iteration   1: 82402.010 ops/s
[info]                  ·gc.alloc.rate:                   2070.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              39546.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38431.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 82626.668 ops/s
[info]                  ·gc.alloc.rate:                   2076.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              39556.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38230.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 82357.650 ops/s
[info]                  ·gc.alloc.rate:               2057.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          39313.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38304.786 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 82730.233 ops/s
[info]                  ·gc.alloc.rate:               2093.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          39828.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38163.331 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 82497.672 ops/s
[info]                  ·gc.alloc.rate:               2089.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          39859.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38322.861 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   82522.846 ±(99.9%) 597.511 ops/s [Average]
[info]   (min, avg, max) = (82357.650, 82522.846, 82730.233), stdev = 155.172
[info]   CI (99.9%): [81925.335, 83120.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2077.517 ±(99.9%) 55.988 MB/sec [Average]
[info]   (min, avg, max) = (2057.528, 2077.517, 2093.592), stdev = 14.540
[info]   CI (99.9%): [2021.529, 2133.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39620.781 ±(99.9%) 869.900 B/op [Average]
[info]   (min, avg, max) = (39313.381, 39620.781, 39859.066), stdev = 225.910
[info]   CI (99.9%): [38750.881, 40490.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.756 ±(99.9%) 11.012 MB/sec [Average]
[info]   (min, avg, max) = (2004.742, 2007.756, 2012.150), stdev = 2.860
[info]   CI (99.9%): [1996.744, 2018.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38290.683 ±(99.9%) 389.306 B/op [Average]
[info]   (min, avg, max) = (38163.331, 38290.683, 38431.585), stdev = 101.101
[info]   CI (99.9%): [37901.378, 38679.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.587 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.830), stdev = 1.711
[info]   CI (99.9%): [≈ 0, 7.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.711 ±(99.9%) 125.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.711, 73.161), stdev = 32.675
[info]   CI (99.9%): [≈ 0, 140.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371215.986 ops/s
[info] # Warmup Iteration   2: 628536.207 ops/s
[info] # Warmup Iteration   3: 610136.533 ops/s
[info] # Warmup Iteration   4: 627955.685 ops/s
[info] # Warmup Iteration   5: 633926.246 ops/s
[info] Iteration   1: 634348.255 ops/s
[info]                  ·gc.alloc.rate:               894.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          2219.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1665.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 631717.274 ops/s
[info]                  ·gc.alloc.rate:                   905.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              2255.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3347.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 634259.594 ops/s
[info]                  ·gc.alloc.rate:               886.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          2199.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1667.807 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 634886.679 ops/s
[info]                  ·gc.alloc.rate:               887.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          2199.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1667.043 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 634063.969 ops/s
[info]                  ·gc.alloc.rate:               883.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          2193.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1669.225 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   633855.154 ±(99.9%) 4749.305 ops/s [Average]
[info]   (min, avg, max) = (631717.274, 633855.154, 634886.679), stdev = 1233.379
[info]   CI (99.9%): [629105.849, 638604.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   891.458 ±(99.9%) 33.091 MB/sec [Average]
[info]   (min, avg, max) = (883.848, 891.458, 905.124), stdev = 8.594
[info]   CI (99.9%): [858.367, 924.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2213.567 ±(99.9%) 96.660 B/op [Average]
[info]   (min, avg, max) = (2193.980, 2213.567, 2255.032), stdev = 25.102
[info]   CI (99.9%): [2116.906, 2310.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.421 ±(99.9%) 1156.366 MB/sec [Average]
[info]   (min, avg, max) = (671.439, 806.421, 1343.621), stdev = 300.305
[info]   CI (99.9%): [≈ 0, 1962.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2003.509 ±(99.9%) 2893.058 B/op [Average]
[info]   (min, avg, max) = (1665.965, 2003.509, 3347.506), stdev = 751.318
[info]   CI (99.9%): [≈ 0, 4896.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.156), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:01:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 454060.105 ops/s
[info] # Warmup Iteration   2: 721471.432 ops/s
[info] # Warmup Iteration   3: 729991.217 ops/s
[info] # Warmup Iteration   4: 730566.832 ops/s
[info] # Warmup Iteration   5: 732335.430 ops/s
[info] Iteration   1: 732481.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 730890.240 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 727042.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 730856.686 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 727457.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   729745.625 ±(99.9%) 9147.151 ops/s [Average]
[info]   (min, avg, max) = (727042.285, 729745.625, 732481.317), stdev = 2375.486
[info]   CI (99.9%): [720598.474, 738892.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19618.628 ops/s
[info] # Warmup Iteration   2: 71083.845 ops/s
[info] # Warmup Iteration   3: 73578.974 ops/s
[info] # Warmup Iteration   4: 73621.926 ops/s
[info] # Warmup Iteration   5: 73606.965 ops/s
[info] Iteration   1: 73671.623 ops/s
[info]                  ·gc.alloc.rate:                   2131.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              45517.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42955.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.671 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 73534.761 ops/s
[info]                  ·gc.alloc.rate:                   2113.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              45241.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43135.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73872.199 ops/s
[info]                  ·gc.alloc.rate:               2124.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          45250.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43036.661 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 74256.280 ops/s
[info]                  ·gc.alloc.rate:               2161.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          45807.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42885.317 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 74236.894 ops/s
[info]                  ·gc.alloc.rate:               2161.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          45826.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42995.726 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   73914.351 ±(99.9%) 1256.236 ops/s [Average]
[info]   (min, avg, max) = (73534.761, 73914.351, 74256.280), stdev = 326.240
[info]   CI (99.9%): [72658.116, 75170.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2138.527 ±(99.9%) 85.025 MB/sec [Average]
[info]   (min, avg, max) = (2113.837, 2138.527, 2161.848), stdev = 22.081
[info]   CI (99.9%): [2053.502, 2223.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45528.530 ±(99.9%) 1100.490 B/op [Average]
[info]   (min, avg, max) = (45241.063, 45528.530, 45826.249), stdev = 285.794
[info]   CI (99.9%): [44428.040, 46629.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2019.794 ±(99.9%) 25.973 MB/sec [Average]
[info]   (min, avg, max) = (2011.155, 2019.794, 2028.318), stdev = 6.745
[info]   CI (99.9%): [1993.821, 2045.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   43001.786 ±(99.9%) 359.847 B/op [Average]
[info]   (min, avg, max) = (42885.317, 43001.786, 43135.816), stdev = 93.451
[info]   CI (99.9%): [42641.940, 43361.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.312), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.780 ±(99.9%) 11.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.780, 6.671), stdev = 2.899
[info]   CI (99.9%): [≈ 0, 12.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5086.770 ops/s
[info] # Warmup Iteration   2: 14670.799 ops/s
[info] # Warmup Iteration   3: 16543.311 ops/s
[info] # Warmup Iteration   4: 16759.428 ops/s
[info] # Warmup Iteration   5: 16607.416 ops/s
[info] Iteration   1: 16606.799 ops/s
[info]                  ·gc.alloc.rate:               870.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          82472.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63571.104 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16331.962 ops/s
[info]                  ·gc.alloc.rate:               878.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          84678.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64641.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 16563.186 ops/s
[info]                  ·gc.alloc.rate:                   896.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              85078.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127082.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 16800.862 ops/s
[info]                  ·gc.alloc.rate:               882.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          82633.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62899.584 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 16762.505 ops/s
[info]                  ·gc.alloc.rate:               877.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          82340.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63042.145 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   16613.063 ±(99.9%) 718.189 ops/s [Average]
[info]   (min, avg, max) = (16331.962, 16613.063, 16800.862), stdev = 186.511
[info]   CI (99.9%): [15894.874, 17331.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   880.955 ±(99.9%) 37.551 MB/sec [Average]
[info]   (min, avg, max) = (870.239, 880.955, 896.557), stdev = 9.752
[info]   CI (99.9%): [843.404, 918.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83440.904 ±(99.9%) 5099.515 B/op [Average]
[info]   (min, avg, max) = (82340.638, 83440.904, 85078.742), stdev = 1324.328
[info]   CI (99.9%): [78341.389, 88540.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   804.759 ±(99.9%) 1150.415 MB/sec [Average]
[info]   (min, avg, max) = (670.794, 804.759, 1339.195), stdev = 298.759
[info]   CI (99.9%): [≈ 0, 1955.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   76247.416 ±(99.9%) 109458.958 B/op [Average]
[info]   (min, avg, max) = (62899.584, 76247.416, 127082.921), stdev = 28426.144
[info]   CI (99.9%): [≈ 0, 185706.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.394 ±(99.9%) 3.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.394, 1.971), stdev = 0.881
[info]   CI (99.9%): [≈ 0, 3.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4259.317 ops/s
[info] # Warmup Iteration   2: 15605.500 ops/s
[info] # Warmup Iteration   3: 17477.632 ops/s
[info] # Warmup Iteration   4: 17381.030 ops/s
[info] # Warmup Iteration   5: 17487.588 ops/s
[info] Iteration   1: 17492.885 ops/s
[info]                  ·gc.alloc.rate:               760.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          68449.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60052.192 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17175.352 ops/s
[info]                  ·gc.alloc.rate:               768.362 MB/sec
[info]                  ·gc.alloc.rate.norm:          70405.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61224.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 17129.002 ops/s
[info]                  ·gc.alloc.rate:               763.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          70147.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61389.314 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17521.294 ops/s
[info]                  ·gc.alloc.rate:               768.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          68994.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60075.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17503.107 ops/s
[info]                  ·gc.alloc.rate:               764.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          68715.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60137.684 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17364.328 ±(99.9%) 749.431 ops/s [Average]
[info]   (min, avg, max) = (17129.002, 17364.328, 17521.294), stdev = 194.625
[info]   CI (99.9%): [16614.897, 18113.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   765.052 ±(99.9%) 12.263 MB/sec [Average]
[info]   (min, avg, max) = (760.831, 765.052, 768.362), stdev = 3.185
[info]   CI (99.9%): [752.788, 777.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69342.644 ±(99.9%) 3383.742 B/op [Average]
[info]   (min, avg, max) = (68449.838, 69342.644, 70405.201), stdev = 878.747
[info]   CI (99.9%): [65958.903, 72726.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.336 ±(99.9%) 2.163 MB/sec [Average]
[info]   (min, avg, max) = (667.490, 668.336, 668.874), stdev = 0.562
[info]   CI (99.9%): [666.172, 670.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   60576.005 ±(99.9%) 2582.490 B/op [Average]
[info]   (min, avg, max) = (60052.192, 60576.005, 61389.314), stdev = 670.664
[info]   CI (99.9%): [57993.516, 63158.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:00:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64126.406 ops/s
[info] # Warmup Iteration   2: 124798.111 ops/s
[info] # Warmup Iteration   3: 129625.264 ops/s
[info] # Warmup Iteration   4: 130761.925 ops/s
[info] # Warmup Iteration   5: 129674.196 ops/s
[info] Iteration   1: 129822.292 ops/s
[info]                  ·gc.alloc.rate:               338.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          4103.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6202.011 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 130008.485 ops/s
[info]                  ·gc.alloc.rate:      330.576 MB/sec
[info]                  ·gc.alloc.rate.norm: 4001.480 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 129649.515 ops/s
[info]                  ·gc.alloc.rate:               339.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          4124.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6210.286 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 130243.568 ops/s
[info]                  ·gc.alloc.rate:      327.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 129788.624 ops/s
[info]                  ·gc.alloc.rate:                   352.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              4275.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8130.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   129902.497 ±(99.9%) 884.313 ops/s [Average]
[info]   (min, avg, max) = (129649.515, 129902.497, 130243.568), stdev = 229.653
[info]   CI (99.9%): [129018.184, 130786.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   337.694 ±(99.9%) 37.933 MB/sec [Average]
[info]   (min, avg, max) = (327.100, 337.694, 352.540), stdev = 9.851
[info]   CI (99.9%): [299.761, 375.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4091.336 ±(99.9%) 481.334 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4091.336, 4275.114), stdev = 125.001
[info]   CI (99.9%): [3610.002, 4572.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.723 ±(99.9%) 1216.570 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.723, 670.450), stdev = 315.939
[info]   CI (99.9%): [≈ 0, 1555.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4108.516 ±(99.9%) 14755.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4108.516, 8130.281), stdev = 3831.924
[info]   CI (99.9%): [≈ 0, 18863.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.252), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1734.156 ops/s
[info] # Warmup Iteration   2: 10670.398 ops/s
[info] # Warmup Iteration   3: 13555.658 ops/s
[info] # Warmup Iteration   4: 13718.058 ops/s
[info] # Warmup Iteration   5: 13791.021 ops/s
[info] Iteration   1: 13679.816 ops/s
[info]                  ·gc.alloc.rate:               1068.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          122911.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153650.141 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 13748.002 ops/s
[info]                  ·gc.alloc.rate:               1072.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          122769.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152966.581 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 13834.902 ops/s
[info]                  ·gc.alloc.rate:               1057.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          120302.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76078.212 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13551.046 ops/s
[info]                  ·gc.alloc.rate:                   1061.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              123227.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155383.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 13522.551 ops/s
[info]                  ·gc.alloc.rate:               1042.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          121328.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77877.604 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   13667.263 ±(99.9%) 506.573 ops/s [Average]
[info]   (min, avg, max) = (13522.551, 13667.263, 13834.902), stdev = 131.555
[info]   CI (99.9%): [13160.691, 14173.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1060.496 ±(99.9%) 44.720 MB/sec [Average]
[info]   (min, avg, max) = (1042.464, 1060.496, 1072.469), stdev = 11.614
[info]   CI (99.9%): [1015.775, 1105.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122107.683 ±(99.9%) 4795.393 B/op [Average]
[info]   (min, avg, max) = (120302.038, 122107.683, 123227.177), stdev = 1245.348
[info]   CI (99.9%): [117312.290, 126903.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1069.664 ±(99.9%) 1408.409 MB/sec [Average]
[info]   (min, avg, max) = (668.863, 1069.664, 1338.503), stdev = 365.759
[info]   CI (99.9%): [≈ 0, 2478.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   123191.162 ±(99.9%) 162499.975 B/op [Average]
[info]   (min, avg, max) = (76078.212, 123191.162, 155383.274), stdev = 42200.728
[info]   CI (99.9%): [≈ 0, 285691.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.484 ±(99.9%) 4.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.484, 2.418), stdev = 1.081
[info]   CI (99.9%): [≈ 0, 4.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17227.033 ops/s
[info] # Warmup Iteration   2: 44746.787 ops/s
[info] # Warmup Iteration   3: 46615.528 ops/s
[info] # Warmup Iteration   4: 47172.532 ops/s
[info] # Warmup Iteration   5: 47143.898 ops/s
[info] Iteration   1: 46404.405 ops/s
[info]                  ·gc.alloc.rate:               1429.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          48473.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45524.447 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 47224.688 ops/s
[info]                  ·gc.alloc.rate:                   1451.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              48375.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44756.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 46935.463 ops/s
[info]                  ·gc.alloc.rate:                   1471.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              49325.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67592.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 47223.288 ops/s
[info]                  ·gc.alloc.rate:                   1454.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              48469.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44670.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 47360.224 ops/s
[info]                  ·gc.alloc.rate:               1468.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          48791.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44496.849 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   47029.614 ±(99.9%) 1472.107 ops/s [Average]
[info]   (min, avg, max) = (46404.405, 47029.614, 47360.224), stdev = 382.301
[info]   CI (99.9%): [45557.507, 48501.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1454.983 ±(99.9%) 63.686 MB/sec [Average]
[info]   (min, avg, max) = (1429.473, 1454.983, 1471.022), stdev = 16.539
[info]   CI (99.9%): [1391.298, 1518.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48687.316 ±(99.9%) 1501.964 B/op [Average]
[info]   (min, avg, max) = (48375.756, 48687.316, 49325.899), stdev = 390.055
[info]   CI (99.9%): [47185.352, 50189.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1476.167 ±(99.9%) 1161.567 MB/sec [Average]
[info]   (min, avg, max) = (1339.012, 1476.167, 2015.776), stdev = 301.655
[info]   CI (99.9%): [314.600, 2637.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49408.067 ±(99.9%) 39172.540 B/op [Average]
[info]   (min, avg, max) = (44496.849, 49408.067, 67592.420), stdev = 10172.984
[info]   CI (99.9%): [10235.527, 88580.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.806 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.435), stdev = 1.508
[info]   CI (99.9%): [≈ 0, 6.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.839 ±(99.9%) 194.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.839, 115.176), stdev = 50.565
[info]   CI (99.9%): [≈ 0, 219.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25276.597 ops/s
[info] # Warmup Iteration   2: 74188.916 ops/s
[info] # Warmup Iteration   3: 77893.674 ops/s
[info] # Warmup Iteration   4: 77782.852 ops/s
[info] # Warmup Iteration   5: 78480.153 ops/s
[info] Iteration   1: 78091.165 ops/s
[info]                  ·gc.alloc.rate:               1666.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          33578.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40304.027 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 78341.434 ops/s
[info]                  ·gc.alloc.rate:                   1666.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              33477.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26819.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 78344.342 ops/s
[info]                  ·gc.alloc.rate:               1655.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          33261.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26859.455 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 77878.249 ops/s
[info]                  ·gc.alloc.rate:               1672.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          33792.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40629.644 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 78312.159 ops/s
[info]                  ·gc.alloc.rate:               1655.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          33269.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26982.508 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   78193.470 ±(99.9%) 790.493 ops/s [Average]
[info]   (min, avg, max) = (77878.249, 78193.470, 78344.342), stdev = 205.288
[info]   CI (99.9%): [77402.977, 78983.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1663.165 ±(99.9%) 28.250 MB/sec [Average]
[info]   (min, avg, max) = (1655.366, 1663.165, 1672.092), stdev = 7.336
[info]   CI (99.9%): [1634.914, 1691.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33475.938 ±(99.9%) 859.148 B/op [Average]
[info]   (min, avg, max) = (33261.847, 33475.938, 33792.415), stdev = 223.118
[info]   CI (99.9%): [32616.790, 34335.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1604.984 ±(99.9%) 1406.631 MB/sec [Average]
[info]   (min, avg, max) = (1335.093, 1604.984, 2010.407), stdev = 365.298
[info]   CI (99.9%): [198.353, 3011.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32319.125 ±(99.9%) 28644.711 B/op [Average]
[info]   (min, avg, max) = (26819.991, 32319.125, 40629.644), stdev = 7438.941
[info]   CI (99.9%): [3674.414, 60963.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.418), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149418.109 ops/s
[info] # Warmup Iteration   2: 278724.556 ops/s
[info] # Warmup Iteration   3: 300762.724 ops/s
[info] # Warmup Iteration   4: 301226.939 ops/s
[info] # Warmup Iteration   5: 299908.566 ops/s
[info] Iteration   1: 301402.711 ops/s
[info]                  ·gc.alloc.rate:                   600.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              3137.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3502.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 300074.577 ops/s
[info]                  ·gc.alloc.rate:               603.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          3163.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3518.336 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 302017.674 ops/s
[info]                  ·gc.alloc.rate:      578.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 299873.593 ops/s
[info]                  ·gc.alloc.rate:               588.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          3091.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3524.155 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 294380.745 ops/s
[info]                  ·gc.alloc.rate:                   583.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              3117.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3589.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   299549.860 ±(99.9%) 11651.466 ops/s [Average]
[info]   (min, avg, max) = (294380.745, 299549.860, 302017.674), stdev = 3025.849
[info]   CI (99.9%): [287898.394, 311201.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   590.980 ±(99.9%) 41.406 MB/sec [Average]
[info]   (min, avg, max) = (578.857, 590.980, 603.235), stdev = 10.753
[info]   CI (99.9%): [549.574, 632.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3105.115 ±(99.9%) 217.695 B/op [Average]
[info]   (min, avg, max) = (3016.001, 3105.115, 3163.740), stdev = 56.535
[info]   CI (99.9%): [2887.420, 3322.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.902 ±(99.9%) 1155.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.902, 671.466), stdev = 300.138
[info]   CI (99.9%): [≈ 0, 1692.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2827.028 ±(99.9%) 6086.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2827.028, 3589.928), stdev = 1580.708
[info]   CI (99.9%): [≈ 0, 8913.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.088 ±(99.9%) 0.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.223), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191247.979 ops/s
[info] # Warmup Iteration   2: 358678.120 ops/s
[info] # Warmup Iteration   3: 365228.166 ops/s
[info] # Warmup Iteration   4: 365195.774 ops/s
[info] # Warmup Iteration   5: 365304.757 ops/s
[info] Iteration   1: 365215.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 364387.254 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 365208.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 365133.596 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 365263.913 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   365041.714 ±(99.9%) 1420.167 ops/s [Average]
[info]   (min, avg, max) = (364387.254, 365041.714, 365263.913), stdev = 368.813
[info]   CI (99.9%): [363621.547, 366461.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12979.739 ops/s
[info] # Warmup Iteration   2: 62476.762 ops/s
[info] # Warmup Iteration   3: 65746.616 ops/s
[info] # Warmup Iteration   4: 66963.324 ops/s
[info] # Warmup Iteration   5: 66452.333 ops/s
[info] Iteration   1: 66118.002 ops/s
[info]                  ·gc.alloc.rate:                   1526.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              36324.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47849.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 66646.413 ops/s
[info]                  ·gc.alloc.rate:                   1530.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              36147.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31683.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 66585.139 ops/s
[info]                  ·gc.alloc.rate:                   1530.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              36178.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31710.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 66856.722 ops/s
[info]                  ·gc.alloc.rate:                   1549.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              36487.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31519.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 66670.681 ops/s
[info]                  ·gc.alloc.rate:                   1558.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              36773.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47313.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.491 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   66575.391 ±(99.9%) 1059.052 ops/s [Average]
[info]   (min, avg, max) = (66118.002, 66575.391, 66856.722), stdev = 275.033
[info]   CI (99.9%): [65516.339, 67634.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1539.124 ±(99.9%) 54.328 MB/sec [Average]
[info]   (min, avg, max) = (1526.108, 1539.124, 1558.246), stdev = 14.109
[info]   CI (99.9%): [1484.796, 1593.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36382.064 ±(99.9%) 990.045 B/op [Average]
[info]   (min, avg, max) = (36147.000, 36382.064, 36773.388), stdev = 257.112
[info]   CI (99.9%): [35392.019, 37372.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.474 ±(99.9%) 1406.494 MB/sec [Average]
[info]   (min, avg, max) = (1338.947, 1607.474, 2010.296), stdev = 365.262
[info]   CI (99.9%): [200.980, 3013.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   38015.200 ±(99.9%) 33635.933 B/op [Average]
[info]   (min, avg, max) = (31519.849, 38015.200, 47849.228), stdev = 8735.145
[info]   CI (99.9%): [4379.267, 71651.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.695 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.804, 3.914), stdev = 1.739
[info]   CI (99.9%): [≈ 0, 7.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.992 ±(99.9%) 158.235 B/op [Average]
[info]   (min, avg, max) = (0.490, 18.992, 92.501), stdev = 41.093
[info]   CI (99.9%): [≈ 0, 177.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50528.941 ops/s
[info] # Warmup Iteration   2: 132216.289 ops/s
[info] # Warmup Iteration   3: 138217.754 ops/s
[info] # Warmup Iteration   4: 144646.400 ops/s
[info] # Warmup Iteration   5: 140602.165 ops/s
[info] Iteration   1: 143853.961 ops/s
[info]                  ·gc.alloc.rate:                   1879.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              20559.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22060.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 144587.354 ops/s
[info]                  ·gc.alloc.rate:                   1872.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              20382.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14618.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 144444.151 ops/s
[info]                  ·gc.alloc.rate:                   1912.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              20839.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21897.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 143873.554 ops/s
[info]                  ·gc.alloc.rate:                   1876.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              20529.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21970.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 145456.664 ops/s
[info]                  ·gc.alloc.rate:               1897.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          20537.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14495.081 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   144443.137 ±(99.9%) 2524.735 ops/s [Average]
[info]   (min, avg, max) = (143853.961, 144443.137, 145456.664), stdev = 655.666
[info]   CI (99.9%): [141918.402, 146967.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1887.904 ±(99.9%) 65.731 MB/sec [Average]
[info]   (min, avg, max) = (1872.538, 1887.904, 1912.998), stdev = 17.070
[info]   CI (99.9%): [1822.172, 1953.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20569.645 ±(99.9%) 640.290 B/op [Average]
[info]   (min, avg, max) = (20382.465, 20569.645, 20839.445), stdev = 166.281
[info]   CI (99.9%): [19929.354, 21209.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.538 ±(99.9%) 1414.002 MB/sec [Average]
[info]   (min, avg, max) = (1339.570, 1743.538, 2016.322), stdev = 367.212
[info]   CI (99.9%): [329.537, 3157.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19008.518 ±(99.9%) 15650.688 B/op [Average]
[info]   (min, avg, max) = (14495.081, 19008.518, 22060.938), stdev = 4064.434
[info]   CI (99.9%): [3357.830, 34659.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 2.769), stdev = 1.171
[info]   CI (99.9%): [≈ 0, 5.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.189 ±(99.9%) 49.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.189, 30.291), stdev = 12.814
[info]   CI (99.9%): [≈ 0, 57.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.700 ops/s
[info] # Warmup Iteration   2: 799226.452 ops/s
[info] # Warmup Iteration   3: 847237.906 ops/s
[info] # Warmup Iteration   4: 853111.893 ops/s
[info] # Warmup Iteration   5: 853476.805 ops/s
[info] Iteration   1: 857296.592 ops/s
[info]                  ·gc.alloc.rate:      474.998 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 824450.007 ops/s
[info]                  ·gc.alloc.rate:                   471.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              900.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1271.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 851995.033 ops/s
[info]                  ·gc.alloc.rate:                   491.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              908.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 857044.357 ops/s
[info]                  ·gc.alloc.rate:      475.161 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.611 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 855914.916 ops/s
[info]                  ·gc.alloc.rate:                   490.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   849340.181 ±(99.9%) 54198.922 ops/s [Average]
[info]   (min, avg, max) = (824450.007, 849340.181, 857296.592), stdev = 14075.288
[info]   CI (99.9%): [795141.258, 903539.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   480.860 ±(99.9%) 36.656 MB/sec [Average]
[info]   (min, avg, max) = (471.799, 480.860, 491.831), stdev = 9.519
[info]   CI (99.9%): [444.204, 517.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   891.093 ±(99.9%) 67.075 B/op [Average]
[info]   (min, avg, max) = (872.001, 891.093, 908.498), stdev = 17.419
[info]   CI (99.9%): [824.018, 958.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.198 ±(99.9%) 1403.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.198, 666.365), stdev = 364.417
[info]   CI (99.9%): [≈ 0, 1802.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   744.440 ±(99.9%) 2617.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 744.440, 1271.707), stdev = 679.846
[info]   CI (99.9%): [≈ 0, 3362.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.869 ±(99.9%) 7.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.869, 4.306), stdev = 1.921
[info]   CI (99.9%): [≈ 0, 8.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1.659 ±(99.9%) 14.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.659, 8.217), stdev = 3.666
[info]   CI (99.9%): [≈ 0, 15.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121778.026 ops/s
[info] # Warmup Iteration   2: 357437.619 ops/s
[info] # Warmup Iteration   3: 377916.783 ops/s
[info] # Warmup Iteration   4: 379990.372 ops/s
[info] # Warmup Iteration   5: 398686.984 ops/s
[info] Iteration   1: 396164.903 ops/s
[info]                  ·gc.alloc.rate:               412.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          1638.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2032.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 392088.136 ops/s
[info]                  ·gc.alloc.rate:               401.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          1612.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2053.494 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 397030.760 ops/s
[info]                  ·gc.alloc.rate:      395.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568.231 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 397154.213 ops/s
[info]                  ·gc.alloc.rate:                   420.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2641.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 395351.753 ops/s
[info]                  ·gc.alloc.rate:                   413.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1647.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2653.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   395557.953 ±(99.9%) 7977.375 ops/s [Average]
[info]   (min, avg, max) = (392088.136, 395557.953, 397154.213), stdev = 2071.699
[info]   CI (99.9%): [387580.578, 403535.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   408.771 ±(99.9%) 38.045 MB/sec [Average]
[info]   (min, avg, max) = (395.633, 408.771, 420.087), stdev = 9.880
[info]   CI (99.9%): [370.726, 446.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1626.344 ±(99.9%) 144.587 B/op [Average]
[info]   (min, avg, max) = (1568.231, 1626.344, 1664.541), stdev = 37.549
[info]   CI (99.9%): [1481.757, 1770.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.239 ±(99.9%) 1057.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.239, 666.537), stdev = 274.583
[info]   CI (99.9%): [≈ 0, 1528.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1876.023 ±(99.9%) 4202.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1876.023, 2653.176), stdev = 1091.406
[info]   CI (99.9%): [≈ 0, 6078.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 583992.959 ops/s
[info] # Warmup Iteration   2: 1048111.245 ops/s
[info] # Warmup Iteration   3: 1136927.929 ops/s
[info] # Warmup Iteration   4: 1139749.149 ops/s
[info] # Warmup Iteration   5: 1138586.492 ops/s
[info] Iteration   1: 1076754.292 ops/s
[info]                  ·gc.alloc.rate:               381.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 747.751 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1129852.186 ops/s
[info]                  ·gc.alloc.rate:               408.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          568.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 712.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1139850.527 ops/s
[info]                  ·gc.alloc.rate:      394.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1153675.759 ops/s
[info]                  ·gc.alloc.rate:               422.983 MB/sec
[info]                  ·gc.alloc.rate.norm:          577.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 914.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1137042.605 ops/s
[info]                  ·gc.alloc.rate:               406.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 928.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1127435.074 ±(99.9%) 114056.530 ops/s [Average]
[info]   (min, avg, max) = (1076754.292, 1127435.074, 1153675.759), stdev = 29620.119
[info]   CI (99.9%): [1013378.544, 1241491.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   402.714 ±(99.9%) 60.125 MB/sec [Average]
[info]   (min, avg, max) = (381.695, 402.714, 422.983), stdev = 15.614
[info]   CI (99.9%): [342.588, 462.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   562.026 ±(99.9%) 47.766 B/op [Average]
[info]   (min, avg, max) = (544.000, 562.026, 577.047), stdev = 12.405
[info]   CI (99.9%): [514.260, 609.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   472.880 ±(99.9%) 1062.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.880, 670.461), stdev = 276.000
[info]   CI (99.9%): [≈ 0, 1535.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   660.613 ±(99.9%) 1469.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 660.613, 928.027), stdev = 381.694
[info]   CI (99.9%): [≈ 0, 2130.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6667.525 ops/s
[info] # Warmup Iteration   2: 72316.497 ops/s
[info] # Warmup Iteration   3: 80797.356 ops/s
[info] # Warmup Iteration   4: 82115.192 ops/s
[info] # Warmup Iteration   5: 82136.350 ops/s
[info] Iteration   1: 81894.561 ops/s
[info]                  ·gc.alloc.rate:                   3309.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              63568.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64112.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 82944.594 ops/s
[info]                  ·gc.alloc.rate:                   3363.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              63814.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63431.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 82655.764 ops/s
[info]                  ·gc.alloc.rate:                   3352.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              63833.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63896.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 82906.011 ops/s
[info]                  ·gc.alloc.rate:               3363.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          63854.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63969.484 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 81682.154 ops/s
[info]                  ·gc.alloc.rate:               3288.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          63368.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52084.182 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   82416.617 ±(99.9%) 2267.826 ops/s [Average]
[info]   (min, avg, max) = (81682.154, 82416.617, 82944.594), stdev = 588.947
[info]   CI (99.9%): [80148.791, 84684.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3335.514 ±(99.9%) 132.682 MB/sec [Average]
[info]   (min, avg, max) = (3288.753, 3335.514, 3363.843), stdev = 34.457
[info]   CI (99.9%): [3202.832, 3468.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63688.069 ±(99.9%) 819.734 B/op [Average]
[info]   (min, avg, max) = (63368.676, 63688.069, 63854.921), stdev = 212.882
[info]   CI (99.9%): [62868.335, 64507.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3221.878 ±(99.9%) 1117.735 MB/sec [Average]
[info]   (min, avg, max) = (2703.102, 3221.878, 3369.878), stdev = 290.272
[info]   CI (99.9%): [2104.143, 4339.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61498.865 ±(99.9%) 20289.626 B/op [Average]
[info]   (min, avg, max) = (52084.182, 61498.865, 64112.574), stdev = 5269.151
[info]   CI (99.9%): [41209.240, 81788.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.638 ±(99.9%) 3.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.638, 2.400), stdev = 1.005
[info]   CI (99.9%): [≈ 0, 4.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59381.647 ops/s
[info] # Warmup Iteration   2: 262725.061 ops/s
[info] # Warmup Iteration   3: 270970.213 ops/s
[info] # Warmup Iteration   4: 275099.269 ops/s
[info] # Warmup Iteration   5: 276214.568 ops/s
[info] Iteration   1: 275482.826 ops/s
[info]                  ·gc.alloc.rate:                   1665.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              9513.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11493.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 273325.224 ops/s
[info]                  ·gc.alloc.rate:                   1663.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              9577.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7728.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 277667.729 ops/s
[info]                  ·gc.alloc.rate:                   1702.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              9647.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11395.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 277424.563 ops/s
[info]                  ·gc.alloc.rate:               1687.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          9571.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7588.518 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 276809.555 ops/s
[info]                  ·gc.alloc.rate:               1684.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          9575.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7604.881 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   276141.979 ±(99.9%) 6884.792 ops/s [Average]
[info]   (min, avg, max) = (273325.224, 276141.979, 277667.729), stdev = 1787.959
[info]   CI (99.9%): [269257.187, 283026.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1680.635 ±(99.9%) 63.213 MB/sec [Average]
[info]   (min, avg, max) = (1663.667, 1680.635, 1702.882), stdev = 16.416
[info]   CI (99.9%): [1617.422, 1743.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9577.197 ±(99.9%) 182.840 B/op [Average]
[info]   (min, avg, max) = (9513.743, 9577.197, 9647.615), stdev = 47.483
[info]   CI (99.9%): [9394.357, 9760.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.192 ±(99.9%) 1417.987 MB/sec [Average]
[info]   (min, avg, max) = (1337.520, 1608.192, 2011.766), stdev = 368.247
[info]   CI (99.9%): [190.205, 3026.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9162.295 ±(99.9%) 8026.418 B/op [Average]
[info]   (min, avg, max) = (7588.518, 9162.295, 11493.705), stdev = 2084.435
[info]   CI (99.9%): [1135.878, 17188.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.352), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.119 ±(99.9%) 32.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.119, 19.298), stdev = 8.500
[info]   CI (99.9%): [≈ 0, 36.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.719 ops/s
[info] # Warmup Iteration   2: 1179828.311 ops/s
[info] # Warmup Iteration   3: 1187699.001 ops/s
[info] # Warmup Iteration   4: 1186232.313 ops/s
[info] # Warmup Iteration   5: 1250099.465 ops/s
[info] Iteration   1: 1243539.136 ops/s
[info]                  ·gc.alloc.rate:               439.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 647.511 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1244443.134 ops/s
[info]                  ·gc.alloc.rate:               442.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          559.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 841.625 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1251348.570 ops/s
[info]                  ·gc.alloc.rate:      426.179 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1246885.936 ops/s
[info]                  ·gc.alloc.rate:                   439.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     839.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1245831.694 ops/s
[info]                  ·gc.alloc.rate:               443.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          559.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 841.539 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1246409.694 ±(99.9%) 11720.903 ops/s [Average]
[info]   (min, avg, max) = (1243539.136, 1246409.694, 1251348.570), stdev = 3043.881
[info]   CI (99.9%): [1234688.792, 1258130.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   438.236 ±(99.9%) 26.627 MB/sec [Average]
[info]   (min, avg, max) = (426.179, 438.236, 443.223), stdev = 6.915
[info]   CI (99.9%): [411.609, 464.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   553.350 ±(99.9%) 38.075 B/op [Average]
[info]   (min, avg, max) = (536.000, 553.350, 559.918), stdev = 9.888
[info]   CI (99.9%): [515.275, 591.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   501.779 ±(99.9%) 1110.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.779, 666.149), stdev = 288.336
[info]   CI (99.9%): [≈ 0, 1612.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   634.134 ±(99.9%) 1402.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 634.134, 841.625), stdev = 364.264
[info]   CI (99.9%): [≈ 0, 2036.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567641.467 ops/s
[info] # Warmup Iteration   2: 1508502.970 ops/s
[info] # Warmup Iteration   3: 1531527.325 ops/s
[info] # Warmup Iteration   4: 1545622.763 ops/s
[info] # Warmup Iteration   5: 1560278.195 ops/s
[info] Iteration   1: 1542365.510 ops/s
[info]                  ·gc.alloc.rate:               920.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          938.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 682.467 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1547970.795 ops/s
[info]                  ·gc.alloc.rate:                   942.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1360.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1562393.693 ops/s
[info]                  ·gc.alloc.rate:               928.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          934.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 674.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1554925.093 ops/s
[info]                  ·gc.alloc.rate:                   942.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1351.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1548928.001 ops/s
[info]                  ·gc.alloc.rate:               931.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          946.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 680.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1551316.618 ±(99.9%) 29372.681 ops/s [Average]
[info]   (min, avg, max) = (1542365.510, 1551316.618, 1562393.693), stdev = 7627.992
[info]   CI (99.9%): [1521943.937, 1580689.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   933.037 ±(99.9%) 37.096 MB/sec [Average]
[info]   (min, avg, max) = (920.151, 933.037, 942.748), stdev = 9.634
[info]   CI (99.9%): [895.941, 970.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   946.339 ±(99.9%) 37.108 B/op [Average]
[info]   (min, avg, max) = (934.872, 946.339, 958.460), stdev = 9.637
[info]   CI (99.9%): [909.231, 983.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.573 ±(99.9%) 1408.802 MB/sec [Average]
[info]   (min, avg, max) = (668.805, 936.573, 1338.043), stdev = 365.861
[info]   CI (99.9%): [≈ 0, 2345.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   949.802 ±(99.9%) 1427.116 B/op [Average]
[info]   (min, avg, max) = (674.090, 949.802, 1360.343), stdev = 370.617
[info]   CI (99.9%): [≈ 0, 2376.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:56:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1013283.146 ops/s
[info] # Warmup Iteration   2: 1792180.538 ops/s
[info] # Warmup Iteration   3: 1865810.945 ops/s
[info] # Warmup Iteration   4: 1919670.020 ops/s
[info] # Warmup Iteration   5: 1910607.474 ops/s
[info] Iteration   1: 1927511.875 ops/s
[info]                  ·gc.alloc.rate:               674.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 547.716 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1880784.318 ops/s
[info]                  ·gc.alloc.rate:               655.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1889985.279 ops/s
[info]                  ·gc.alloc.rate:                   668.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              556.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1897122.021 ops/s
[info]                  ·gc.alloc.rate:               666.402 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 557.036 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1897076.440 ops/s
[info]                  ·gc.alloc.rate:                   663.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1898495.987 ±(99.9%) 67577.429 ops/s [Average]
[info]   (min, avg, max) = (1880784.318, 1898495.987, 1927511.875), stdev = 17549.644
[info]   CI (99.9%): [1830918.557, 1966073.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   665.894 ±(99.9%) 26.575 MB/sec [Average]
[info]   (min, avg, max) = (655.937, 665.894, 674.832), stdev = 6.901
[info]   CI (99.9%): [639.319, 692.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   551.939 ±(99.9%) 11.432 B/op [Average]
[info]   (min, avg, max) = (548.867, 551.939, 556.682), stdev = 2.969
[info]   CI (99.9%): [540.506, 563.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.445 ±(99.9%) 1.899 MB/sec [Average]
[info]   (min, avg, max) = (670.850, 671.445, 672.102), stdev = 0.493
[info]   CI (99.9%): [669.546, 673.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   556.577 ±(99.9%) 20.125 B/op [Average]
[info]   (min, avg, max) = (547.716, 556.577, 561.346), stdev = 5.226
[info]   CI (99.9%): [536.453, 576.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1122081.786 ops/s
[info] # Warmup Iteration   2: 1986026.135 ops/s
[info] # Warmup Iteration   3: 1924395.598 ops/s
[info] # Warmup Iteration   4: 2040356.877 ops/s
[info] # Warmup Iteration   5: 2041701.979 ops/s
[info] Iteration   1: 2043224.246 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2040796.689 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2040589.482 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2039686.693 ops/s
[info]                  ·gc.alloc.rate:      0.304 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.234 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2042774.043 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2041414.231 ±(99.9%) 5830.644 ops/s [Average]
[info]   (min, avg, max) = (2039686.693, 2041414.231, 2043224.246), stdev = 1514.200
[info]   CI (99.9%): [2035583.587, 2047244.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.061 ±(99.9%) 0.522 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.061, 0.304), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.047 ±(99.9%) 0.403 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.047, 0.234), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10676.685 ops/s
[info] # Warmup Iteration   2: 40259.476 ops/s
[info] # Warmup Iteration   3: 41942.432 ops/s
[info] # Warmup Iteration   4: 40921.213 ops/s
[info] # Warmup Iteration   5: 42336.073 ops/s
[info] Iteration   1: 42377.972 ops/s
[info]                  ·gc.alloc.rate:                   2098.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              77933.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74763.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 42275.944 ops/s
[info]                  ·gc.alloc.rate:                   2105.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              78381.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74717.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.775 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 42363.754 ops/s
[info]                  ·gc.alloc.rate:                   2096.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              77885.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74466.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42721.270 ops/s
[info]                  ·gc.alloc.rate:                   2127.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              78373.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73892.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42629.242 ops/s
[info]                  ·gc.alloc.rate:               2136.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          78879.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74149.935 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   42473.637 ±(99.9%) 735.270 ops/s [Average]
[info]   (min, avg, max) = (42275.944, 42473.637, 42721.270), stdev = 190.947
[info]   CI (99.9%): [41738.367, 43208.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2112.915 ±(99.9%) 69.639 MB/sec [Average]
[info]   (min, avg, max) = (2096.493, 2112.915, 2136.500), stdev = 18.085
[info]   CI (99.9%): [2043.276, 2182.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78290.631 ±(99.9%) 1555.577 B/op [Average]
[info]   (min, avg, max) = (77885.759, 78290.631, 78879.238), stdev = 403.978
[info]   CI (99.9%): [76735.054, 79846.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.808 ±(99.9%) 12.640 MB/sec [Average]
[info]   (min, avg, max) = (2004.468, 2007.808, 2013.083), stdev = 3.283
[info]   CI (99.9%): [1995.168, 2020.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74398.122 ±(99.9%) 1438.598 B/op [Average]
[info]   (min, avg, max) = (73892.116, 74398.122, 74763.983), stdev = 373.599
[info]   CI (99.9%): [72959.524, 75836.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 6.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.893), stdev = 1.719
[info]   CI (99.9%): [≈ 0, 7.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   30.461 ±(99.9%) 245.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.461, 144.574), stdev = 63.839
[info]   CI (99.9%): [≈ 0, 276.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4643.785 ops/s
[info] # Warmup Iteration   2: 12905.462 ops/s
[info] # Warmup Iteration   3: 14602.217 ops/s
[info] # Warmup Iteration   4: 14509.403 ops/s
[info] # Warmup Iteration   5: 14558.438 ops/s
[info] Iteration   1: 14037.670 ops/s
[info]                  ·gc.alloc.rate:                   1864.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              209094.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226108.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 294.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 14502.507 ops/s
[info]                  ·gc.alloc.rate:                   1909.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              207027.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218149.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14453.744 ops/s
[info]                  ·gc.alloc.rate:                   1908.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              207809.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145941.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14481.975 ops/s
[info]                  ·gc.alloc.rate:                   1924.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              209126.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218257.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14673.185 ops/s
[info]                  ·gc.alloc.rate:                   1929.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              206958.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215559.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   14429.816 ±(99.9%) 906.301 ops/s [Average]
[info]   (min, avg, max) = (14037.670, 14429.816, 14673.185), stdev = 235.364
[info]   CI (99.9%): [13523.515, 15336.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1907.408 ±(99.9%) 98.252 MB/sec [Average]
[info]   (min, avg, max) = (1864.955, 1907.408, 1929.764), stdev = 25.516
[info]   CI (99.9%): [1809.156, 2005.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   208003.176 ±(99.9%) 4098.853 B/op [Average]
[info]   (min, avg, max) = (206958.911, 208003.176, 209126.086), stdev = 1064.459
[info]   CI (99.9%): [203904.323, 212102.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.484 ±(99.9%) 1156.393 MB/sec [Average]
[info]   (min, avg, max) = (1340.298, 1877.484, 2016.708), stdev = 300.312
[info]   CI (99.9%): [721.091, 3033.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204803.400 ±(99.9%) 127615.919 B/op [Average]
[info]   (min, avg, max) = (145941.817, 204803.400, 226108.536), stdev = 33141.449
[info]   CI (99.9%): [77187.481, 332419.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.778 ±(99.9%) 4.395 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.778, 2.623), stdev = 1.141
[info]   CI (99.9%): [≈ 0, 5.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   86.320 ±(99.9%) 491.660 B/op [Average]
[info]   (min, avg, max) = (2.262, 86.320, 294.072), stdev = 127.683
[info]   CI (99.9%): [≈ 0, 577.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27743.499 ops/s
[info] # Warmup Iteration   2: 88000.546 ops/s
[info] # Warmup Iteration   3: 97141.102 ops/s
[info] # Warmup Iteration   4: 99105.315 ops/s
[info] # Warmup Iteration   5: 99340.907 ops/s
[info] Iteration   1: 99595.905 ops/s
[info]                  ·gc.alloc.rate:               1340.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          21176.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21126.681 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 99688.384 ops/s
[info]                  ·gc.alloc.rate:                   1335.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              21080.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21117.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 100109.923 ops/s
[info]                  ·gc.alloc.rate:               1351.008 MB/sec
[info]                  ·gc.alloc.rate.norm:          21239.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21049.434 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 100647.459 ops/s
[info]                  ·gc.alloc.rate:                   1344.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              21024.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20948.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 100929.534 ops/s
[info]                  ·gc.alloc.rate:                   1361.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              21228.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20836.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   100194.241 ±(99.9%) 2251.120 ops/s [Average]
[info]   (min, avg, max) = (99595.905, 100194.241, 100929.534), stdev = 584.609
[info]   CI (99.9%): [97943.122, 102445.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1346.434 ±(99.9%) 39.140 MB/sec [Average]
[info]   (min, avg, max) = (1335.256, 1346.434, 1361.369), stdev = 10.165
[info]   CI (99.9%): [1307.294, 1385.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21149.866 ±(99.9%) 362.138 B/op [Average]
[info]   (min, avg, max) = (21024.555, 21149.866, 21239.369), stdev = 94.046
[info]   CI (99.9%): [20787.728, 21512.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337.863 ±(99.9%) 5.339 MB/sec [Average]
[info]   (min, avg, max) = (1336.244, 1337.863, 1339.598), stdev = 1.386
[info]   CI (99.9%): [1332.525, 1343.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21015.824 ±(99.9%) 473.471 B/op [Average]
[info]   (min, avg, max) = (20836.694, 21015.824, 21126.681), stdev = 122.959
[info]   CI (99.9%): [20542.353, 21489.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.762 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.976), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 7.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.086 ±(99.9%) 105.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.086, 62.176), stdev = 27.463
[info]   CI (99.9%): [≈ 0, 118.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107968.183 ops/s
[info] # Warmup Iteration   2: 241501.162 ops/s
[info] # Warmup Iteration   3: 258858.992 ops/s
[info] # Warmup Iteration   4: 258947.469 ops/s
[info] # Warmup Iteration   5: 251157.821 ops/s
[info] Iteration   1: 260711.247 ops/s
[info]                  ·gc.alloc.rate:               870.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          5252.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4051.638 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 258992.949 ops/s
[info]                  ·gc.alloc.rate:               859.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          5224.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4078.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 259730.748 ops/s
[info]                  ·gc.alloc.rate:                   861.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              5223.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4070.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 251994.840 ops/s
[info]                  ·gc.alloc.rate:               850.922 MB/sec
[info]                  ·gc.alloc.rate.norm:          5313.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8396.030 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 259877.194 ops/s
[info]                  ·gc.alloc.rate:                   861.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              5217.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4072.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   258261.396 ±(99.9%) 13692.337 ops/s [Average]
[info]   (min, avg, max) = (251994.840, 258261.396, 260711.247), stdev = 3555.857
[info]   CI (99.9%): [244569.058, 271953.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   860.865 ±(99.9%) 26.414 MB/sec [Average]
[info]   (min, avg, max) = (850.922, 860.865, 870.153), stdev = 6.860
[info]   CI (99.9%): [834.451, 887.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5245.995 ±(99.9%) 153.622 B/op [Average]
[info]   (min, avg, max) = (5217.454, 5245.995, 5313.194), stdev = 39.895
[info]   CI (99.9%): [5092.373, 5399.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.284 ±(99.9%) 1158.867 MB/sec [Average]
[info]   (min, avg, max) = (671.165, 806.284, 1344.646), stdev = 300.954
[info]   CI (99.9%): [≈ 0, 1965.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4933.922 ±(99.9%) 7452.550 B/op [Average]
[info]   (min, avg, max) = (4051.638, 4933.922, 8396.030), stdev = 1935.404
[info]   CI (99.9%): [≈ 0, 12386.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.101 ±(99.9%) 0.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.378), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2419.106 ops/s
[info] # Warmup Iteration   2: 11296.834 ops/s
[info] # Warmup Iteration   3: 13250.871 ops/s
[info] # Warmup Iteration   4: 13270.728 ops/s
[info] # Warmup Iteration   5: 13273.445 ops/s
[info] Iteration   1: 13209.049 ops/s
[info]                  ·gc.alloc.rate:                   2118.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              252367.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239304.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 13386.594 ops/s
[info]                  ·gc.alloc.rate:                   2136.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              251215.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235496.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13390.941 ops/s
[info]                  ·gc.alloc.rate:               2135.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          250983.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 234939.270 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 13237.148 ops/s
[info]                  ·gc.alloc.rate:               2138.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          254317.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 237808.705 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13377.602 ops/s
[info]                  ·gc.alloc.rate:               2160.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          254115.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 235676.879 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   13320.267 ±(99.9%) 344.195 ops/s [Average]
[info]   (min, avg, max) = (13209.049, 13320.267, 13390.941), stdev = 89.386
[info]   CI (99.9%): [12976.072, 13664.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2137.877 ±(99.9%) 57.428 MB/sec [Average]
[info]   (min, avg, max) = (2118.073, 2137.877, 2160.004), stdev = 14.914
[info]   CI (99.9%): [2080.449, 2195.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   252599.669 ±(99.9%) 6037.076 B/op [Average]
[info]   (min, avg, max) = (250983.338, 252599.669, 254317.796), stdev = 1567.810
[info]   CI (99.9%): [246562.592, 258636.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.794 ±(99.9%) 14.151 MB/sec [Average]
[info]   (min, avg, max) = (1998.988, 2002.794, 2008.444), stdev = 3.675
[info]   CI (99.9%): [1988.643, 2016.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   236645.325 ±(99.9%) 7098.675 B/op [Average]
[info]   (min, avg, max) = (234939.270, 236645.325, 239304.870), stdev = 1843.503
[info]   CI (99.9%): [229546.650, 243744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.903 ±(99.9%) 6.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.903, 4.080), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   107.509 ±(99.9%) 819.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.509, 486.150), stdev = 212.833
[info]   CI (99.9%): [≈ 0, 927.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:54:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7379.113 ops/s
[info] # Warmup Iteration   2: 30026.973 ops/s
[info] # Warmup Iteration   3: 32826.369 ops/s
[info] # Warmup Iteration   4: 32863.320 ops/s
[info] # Warmup Iteration   5: 32709.808 ops/s
[info] Iteration   1: 32784.429 ops/s
[info]                  ·gc.alloc.rate:                   2727.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              130942.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128585.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.997 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 33268.841 ops/s
[info]                  ·gc.alloc.rate:                   2796.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              132274.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126695.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.954 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33322.328 ops/s
[info]                  ·gc.alloc.rate:                   2801.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              132290.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126683.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.950 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33278.140 ops/s
[info]                  ·gc.alloc.rate:                   2797.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              132302.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127216.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 32788.505 ops/s
[info]                  ·gc.alloc.rate:                   2758.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              132428.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129477.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.999 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   33088.449 ±(99.9%) 1064.372 ops/s [Average]
[info]   (min, avg, max) = (32784.429, 33088.449, 33322.328), stdev = 276.414
[info]   CI (99.9%): [32024.077, 34152.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2776.409 ±(99.9%) 124.184 MB/sec [Average]
[info]   (min, avg, max) = (2727.668, 2776.409, 2801.708), stdev = 32.250
[info]   CI (99.9%): [2652.225, 2900.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   132047.528 ±(99.9%) 2390.533 B/op [Average]
[info]   (min, avg, max) = (130942.348, 132047.528, 132428.005), stdev = 620.814
[info]   CI (99.9%): [129656.995, 134438.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2685.450 ±(99.9%) 31.717 MB/sec [Average]
[info]   (min, avg, max) = (2678.202, 2685.450, 2697.447), stdev = 8.237
[info]   CI (99.9%): [2653.733, 2717.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127731.659 ±(99.9%) 4799.729 B/op [Average]
[info]   (min, avg, max) = (126683.007, 127731.659, 129477.314), stdev = 1246.474
[info]   CI (99.9%): [122931.930, 132531.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.377 ±(99.9%) 5.139 B/op [Average]
[info]   (min, avg, max) = (0.985, 2.377, 3.997), stdev = 1.335
[info]   CI (99.9%): [≈ 0, 7.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34368.937 ops/s
[info] # Warmup Iteration   2: 102022.295 ops/s
[info] # Warmup Iteration   3: 104872.425 ops/s
[info] # Warmup Iteration   4: 104804.877 ops/s
[info] # Warmup Iteration   5: 106067.502 ops/s
[info] Iteration   1: 105736.198 ops/s
[info]                  ·gc.alloc.rate:                   1504.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              22389.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29906.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.930 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 106059.132 ops/s
[info]                  ·gc.alloc.rate:                   1505.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              22334.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19889.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 105913.037 ops/s
[info]                  ·gc.alloc.rate:                   1503.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              22348.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19936.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 106258.377 ops/s
[info]                  ·gc.alloc.rate:                   1495.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              22150.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19831.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 107075.301 ops/s
[info]                  ·gc.alloc.rate:                   1520.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              22339.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19659.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   106208.409 ±(99.9%) 2006.874 ops/s [Average]
[info]   (min, avg, max) = (105736.198, 106208.409, 107075.301), stdev = 521.179
[info]   CI (99.9%): [104201.535, 108215.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1505.769 ±(99.9%) 34.225 MB/sec [Average]
[info]   (min, avg, max) = (1495.497, 1505.769, 1520.066), stdev = 8.888
[info]   CI (99.9%): [1471.545, 1539.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22312.634 ±(99.9%) 357.860 B/op [Average]
[info]   (min, avg, max) = (22150.952, 22312.634, 22389.415), stdev = 92.935
[info]   CI (99.9%): [21954.774, 22670.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1473.565 ±(99.9%) 1153.063 MB/sec [Average]
[info]   (min, avg, max) = (1337.693, 1473.565, 2009.225), stdev = 299.447
[info]   CI (99.9%): [320.502, 2626.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21844.700 ±(99.9%) 17357.357 B/op [Average]
[info]   (min, avg, max) = (19659.576, 21844.700, 29906.052), stdev = 4507.651
[info]   CI (99.9%): [4487.343, 39202.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 5.643 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.774, 3.393), stdev = 1.466
[info]   CI (99.9%): [≈ 0, 6.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.501 ±(99.9%) 83.870 B/op [Average]
[info]   (min, avg, max) = (0.927, 11.501, 50.422), stdev = 21.781
[info]   CI (99.9%): [≈ 0, 95.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113335.770 ops/s
[info] # Warmup Iteration   2: 165370.627 ops/s
[info] # Warmup Iteration   3: 179301.805 ops/s
[info] # Warmup Iteration   4: 179365.890 ops/s
[info] # Warmup Iteration   5: 178786.251 ops/s
[info] Iteration   1: 178674.083 ops/s
[info]                  ·gc.alloc.rate:               590.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          5203.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5911.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 179213.186 ops/s
[info]                  ·gc.alloc.rate:               590.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          5183.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5894.032 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 179456.399 ops/s
[info]                  ·gc.alloc.rate:               596.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          5230.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5888.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 179964.796 ops/s
[info]                  ·gc.alloc.rate:      573.553 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 179399.564 ops/s
[info]                  ·gc.alloc.rate:                   588.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              5164.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5890.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   179341.606 ±(99.9%) 1792.702 ops/s [Average]
[info]   (min, avg, max) = (178674.083, 179341.606, 179964.796), stdev = 465.559
[info]   CI (99.9%): [177548.903, 181134.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   587.975 ±(99.9%) 33.025 MB/sec [Average]
[info]   (min, avg, max) = (573.553, 587.975, 596.426), stdev = 8.576
[info]   CI (99.9%): [554.950, 620.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5159.622 ±(99.9%) 323.378 B/op [Average]
[info]   (min, avg, max) = (5016.003, 5159.622, 5230.603), stdev = 83.980
[info]   CI (99.9%): [4836.244, 5483.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.096 ±(99.9%) 1156.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.096, 671.482), stdev = 300.246
[info]   CI (99.9%): [≈ 0, 1693.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4717.033 ±(99.9%) 10153.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4717.033, 5911.710), stdev = 2636.917
[info]   CI (99.9%): [≈ 0, 14870.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106214.248 ops/s
[info] # Warmup Iteration   2: 191099.677 ops/s
[info] # Warmup Iteration   3: 194079.239 ops/s
[info] # Warmup Iteration   4: 194689.150 ops/s
[info] # Warmup Iteration   5: 194809.667 ops/s
[info] Iteration   1: 194836.767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 194839.565 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 194812.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 194128.442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 194224.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   194568.507 ±(99.9%) 1384.061 ops/s [Average]
[info]   (min, avg, max) = (194128.442, 194568.507, 194839.565), stdev = 359.436
[info]   CI (99.9%): [193184.446, 195952.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:53:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11043.245 ops/s
[info] # Warmup Iteration   2: 47555.174 ops/s
[info] # Warmup Iteration   3: 48721.252 ops/s
[info] # Warmup Iteration   4: 48498.699 ops/s
[info] # Warmup Iteration   5: 49745.478 ops/s
[info] Iteration   1: 49504.475 ops/s
[info]                  ·gc.alloc.rate:                   3463.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              110125.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106352.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 49787.459 ops/s
[info]                  ·gc.alloc.rate:                   3526.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              111432.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106036.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.632 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 49666.223 ops/s
[info]                  ·gc.alloc.rate:                   3517.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              111475.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3365.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106656.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 49772.591 ops/s
[info]                  ·gc.alloc.rate:               3527.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          111507.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3377.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106780.684 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 49977.269 ops/s
[info]                  ·gc.alloc.rate:               3539.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          111473.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3385.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106619.736 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   49741.604 ±(99.9%) 668.376 ops/s [Average]
[info]   (min, avg, max) = (49504.475, 49741.604, 49977.269), stdev = 173.575
[info]   CI (99.9%): [49073.228, 50409.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3514.999 ±(99.9%) 114.127 MB/sec [Average]
[info]   (min, avg, max) = (3463.843, 3514.999, 3539.698), stdev = 29.638
[info]   CI (99.9%): [3400.872, 3629.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111202.810 ±(99.9%) 2321.992 B/op [Average]
[info]   (min, avg, max) = (110125.175, 111202.810, 111507.920), stdev = 603.014
[info]   CI (99.9%): [108880.818, 113524.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3365.972 ±(99.9%) 62.436 MB/sec [Average]
[info]   (min, avg, max) = (3345.186, 3365.972, 3385.582), stdev = 16.214
[info]   CI (99.9%): [3303.536, 3428.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106489.224 ±(99.9%) 1144.112 B/op [Average]
[info]   (min, avg, max) = (106036.840, 106489.224, 106780.684), stdev = 297.122
[info]   CI (99.9%): [105345.112, 107633.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.923 ±(99.9%) 4.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.923, 2.632), stdev = 1.102
[info]   CI (99.9%): [≈ 0, 5.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5309.540 ops/s
[info] # Warmup Iteration   2: 24243.357 ops/s
[info] # Warmup Iteration   3: 26504.772 ops/s
[info] # Warmup Iteration   4: 26561.871 ops/s
[info] # Warmup Iteration   5: 25685.902 ops/s
[info] Iteration   1: 26637.313 ops/s
[info]                  ·gc.alloc.rate:                   1439.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              85015.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79326.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.230 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 26578.005 ops/s
[info]                  ·gc.alloc.rate:                   1431.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              84757.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79544.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26735.242 ops/s
[info]                  ·gc.alloc.rate:                   1425.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              83904.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79113.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 26837.248 ops/s
[info]                  ·gc.alloc.rate:                   1443.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              84644.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78718.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26872.941 ops/s
[info]                  ·gc.alloc.rate:               1443.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          84536.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78456.909 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   26732.150 ±(99.9%) 485.670 ops/s [Average]
[info]   (min, avg, max) = (26578.005, 26732.150, 26872.941), stdev = 126.127
[info]   CI (99.9%): [26246.480, 27217.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1436.492 ±(99.9%) 30.564 MB/sec [Average]
[info]   (min, avg, max) = (1425.351, 1436.492, 1443.423), stdev = 7.937
[info]   CI (99.9%): [1405.928, 1467.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84571.594 ±(99.9%) 1592.034 B/op [Average]
[info]   (min, avg, max) = (83904.145, 84571.594, 85015.676), stdev = 413.446
[info]   CI (99.9%): [82979.560, 86163.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.378 ±(99.9%) 6.424 MB/sec [Average]
[info]   (min, avg, max) = (1339.618, 1342.378, 1343.973), stdev = 1.668
[info]   CI (99.9%): [1335.954, 1348.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79031.940 ±(99.9%) 1705.784 B/op [Average]
[info]   (min, avg, max) = (78456.909, 79031.940, 79544.560), stdev = 442.987
[info]   CI (99.9%): [77326.155, 80737.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 5.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.060), stdev = 1.316
[info]   CI (99.9%): [≈ 0, 5.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45.801 ±(99.9%) 298.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.801, 180.138), stdev = 77.474
[info]   CI (99.9%): [≈ 0, 344.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5078.181 ops/s
[info] # Warmup Iteration   2: 26175.390 ops/s
[info] # Warmup Iteration   3: 29427.367 ops/s
[info] # Warmup Iteration   4: 29737.988 ops/s
[info] # Warmup Iteration   5: 29046.263 ops/s
[info] Iteration   1: 29819.959 ops/s
[info]                  ·gc.alloc.rate:               1228.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          64821.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70526.185 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 29789.056 ops/s
[info]                  ·gc.alloc.rate:                   1216.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              64265.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70654.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 29746.644 ops/s
[info]                  ·gc.alloc.rate:               1221.930 MB/sec
[info]                  ·gc.alloc.rate.norm:          64649.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70804.960 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 29765.300 ops/s
[info]                  ·gc.alloc.rate:                   1209.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              63973.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70817.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 29935.717 ops/s
[info]                  ·gc.alloc.rate:                   1215.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              63894.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35215.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.361 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   29811.335 ±(99.9%) 287.807 ops/s [Average]
[info]   (min, avg, max) = (29746.644, 29811.335, 29935.717), stdev = 74.742
[info]   CI (99.9%): [29523.529, 30099.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1218.366 ±(99.9%) 27.227 MB/sec [Average]
[info]   (min, avg, max) = (1209.861, 1218.366, 1228.424), stdev = 7.071
[info]   CI (99.9%): [1191.139, 1245.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   64320.997 ±(99.9%) 1568.580 B/op [Average]
[info]   (min, avg, max) = (63894.530, 64320.997, 64821.519), stdev = 407.355
[info]   CI (99.9%): [62752.418, 65889.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.236 ±(99.9%) 1150.503 MB/sec [Average]
[info]   (min, avg, max) = (669.762, 1204.236, 1339.286), stdev = 298.782
[info]   CI (99.9%): [53.733, 2354.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63603.688 ±(99.9%) 61110.084 B/op [Average]
[info]   (min, avg, max) = (35215.203, 63603.688, 70817.362), stdev = 15870.095
[info]   CI (99.9%): [2493.603, 124713.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 6.375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 3.810), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.199 ±(99.9%) 337.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.199, 201.436), stdev = 87.547
[info]   CI (99.9%): [≈ 0, 383.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 8.000), stdev = 2.387
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323129.531 ops/s
[info] # Warmup Iteration   2: 603780.601 ops/s
[info] # Warmup Iteration   3: 646058.332 ops/s
[info] # Warmup Iteration   4: 645197.950 ops/s
[info] # Warmup Iteration   5: 645759.579 ops/s
[info] Iteration   1: 643005.614 ops/s
[info]                  ·gc.alloc.rate:                   1727.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              4228.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4939.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 646210.585 ops/s
[info]                  ·gc.alloc.rate:                   1721.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              4191.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3280.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 630498.668 ops/s
[info]                  ·gc.alloc.rate:                   1731.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              4322.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5031.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 646271.695 ops/s
[info]                  ·gc.alloc.rate:                   1721.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              4192.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3270.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 647311.180 ops/s
[info]                  ·gc.alloc.rate:                   1765.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              4291.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4897.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   642659.548 ±(99.9%) 26906.463 ops/s [Average]
[info]   (min, avg, max) = (630498.668, 642659.548, 647311.180), stdev = 6987.523
[info]   CI (99.9%): [615753.085, 669566.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1733.482 ±(99.9%) 70.867 MB/sec [Average]
[info]   (min, avg, max) = (1721.174, 1733.482, 1765.452), stdev = 18.404
[info]   CI (99.9%): [1662.615, 1804.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4245.328 ±(99.9%) 228.065 B/op [Average]
[info]   (min, avg, max) = (4191.991, 4245.328, 4322.893), stdev = 59.228
[info]   CI (99.9%): [4017.263, 4473.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.771 ±(99.9%) 1416.051 MB/sec [Average]
[info]   (min, avg, max) = (1342.929, 1747.771, 2018.051), stdev = 367.744
[info]   CI (99.9%): [331.719, 3163.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4284.048 ±(99.9%) 3550.180 B/op [Average]
[info]   (min, avg, max) = (3270.458, 4284.048, 5031.917), stdev = 921.970
[info]   CI (99.9%): [733.869, 7834.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 4.386 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.591, 2.623), stdev = 1.139
[info]   CI (99.9%): [≈ 0, 4.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.443 ±(99.9%) 10.678 B/op [Average]
[info]   (min, avg, max) = (0.051, 1.443, 6.388), stdev = 2.773
[info]   CI (99.9%): [≈ 0, 12.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500.600 ops/s
[info] # Warmup Iteration   2: 15644.790 ops/s
[info] # Warmup Iteration   3: 24196.245 ops/s
[info] # Warmup Iteration   4: 24440.678 ops/s
[info] # Warmup Iteration   5: 24472.363 ops/s
[info] Iteration   1: 24013.921 ops/s
[info]                  ·gc.alloc.rate:               1816.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          119010.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130957.393 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 24252.689 ops/s
[info]                  ·gc.alloc.rate:                   1803.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              117016.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86675.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24191.217 ops/s
[info]                  ·gc.alloc.rate:               1825.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          118772.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130681.969 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 24541.849 ops/s
[info]                  ·gc.alloc.rate:                   1837.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              117859.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129160.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24544.741 ops/s
[info]                  ·gc.alloc.rate:                   1825.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              117043.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86327.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   24308.883 ±(99.9%) 890.465 ops/s [Average]
[info]   (min, avg, max) = (24013.921, 24308.883, 24544.741), stdev = 231.251
[info]   CI (99.9%): [23418.418, 25199.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1821.765 ±(99.9%) 49.366 MB/sec [Average]
[info]   (min, avg, max) = (1803.174, 1821.765, 1837.814), stdev = 12.820
[info]   CI (99.9%): [1772.399, 1871.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   117940.414 ±(99.9%) 3602.889 B/op [Average]
[info]   (min, avg, max) = (117016.089, 117940.414, 119010.045), stdev = 935.659
[info]   CI (99.9%): [114337.525, 121543.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1740.781 ±(99.9%) 1405.535 MB/sec [Average]
[info]   (min, avg, max) = (1335.633, 1740.781, 2014.025), stdev = 365.013
[info]   CI (99.9%): [335.245, 3146.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   112760.527 ±(99.9%) 92343.111 B/op [Average]
[info]   (min, avg, max) = (86327.688, 112760.527, 130957.393), stdev = 23981.213
[info]   CI (99.9%): [20417.416, 205103.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.071 ±(99.9%) 4.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.071, 2.670), stdev = 1.118
[info]   CI (99.9%): [≈ 0, 5.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22477.824 ops/s
[info] # Warmup Iteration   2: 69968.110 ops/s
[info] # Warmup Iteration   3: 72463.116 ops/s
[info] # Warmup Iteration   4: 74292.431 ops/s
[info] # Warmup Iteration   5: 73998.046 ops/s
[info] Iteration   1: 74025.837 ops/s
[info]                  ·gc.alloc.rate:                   1970.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              41902.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42834.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.961 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 74110.704 ops/s
[info]                  ·gc.alloc.rate:                   1959.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              41605.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42728.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.472 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 74071.485 ops/s
[info]                  ·gc.alloc.rate:                   1971.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              41895.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42661.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.539 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 74349.603 ops/s
[info]                  ·gc.alloc.rate:               1992.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          42164.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42487.923 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 74585.874 ops/s
[info]                  ·gc.alloc.rate:               1972.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          41605.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28268.089 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   74228.701 ±(99.9%) 907.119 ops/s [Average]
[info]   (min, avg, max) = (74025.837, 74228.701, 74585.874), stdev = 235.576
[info]   CI (99.9%): [73321.582, 75135.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1973.292 ±(99.9%) 46.003 MB/sec [Average]
[info]   (min, avg, max) = (1959.149, 1973.292, 1992.316), stdev = 11.947
[info]   CI (99.9%): [1927.289, 2019.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41834.901 ±(99.9%) 907.092 B/op [Average]
[info]   (min, avg, max) = (41605.677, 41834.901, 42164.438), stdev = 235.569
[info]   CI (99.9%): [40927.809, 42741.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1876.440 ±(99.9%) 1154.633 MB/sec [Average]
[info]   (min, avg, max) = (1340.071, 1876.440, 2014.739), stdev = 299.854
[info]   CI (99.9%): [721.807, 3031.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39796.136 ±(99.9%) 24819.730 B/op [Average]
[info]   (min, avg, max) = (28268.089, 39796.136, 42834.427), stdev = 6445.605
[info]   CI (99.9%): [14976.407, 64615.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 2.914), stdev = 1.240
[info]   CI (99.9%): [≈ 0, 5.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.194 ±(99.9%) 101.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.194, 61.961), stdev = 26.362
[info]   CI (99.9%): [≈ 0, 117.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37806.350 ops/s
[info] # Warmup Iteration   2: 153002.347 ops/s
[info] # Warmup Iteration   3: 150232.848 ops/s
[info] # Warmup Iteration   4: 152280.731 ops/s
[info] # Warmup Iteration   5: 151831.874 ops/s
[info] Iteration   1: 152181.786 ops/s
[info]                  ·gc.alloc.rate:                   1687.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              17445.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13854.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 155193.689 ops/s
[info]                  ·gc.alloc.rate:                   1729.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              17535.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20394.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 155993.414 ops/s
[info]                  ·gc.alloc.rate:                   1727.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              17432.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13495.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 155213.596 ops/s
[info]                  ·gc.alloc.rate:                   1745.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              17700.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20325.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 155833.411 ops/s
[info]                  ·gc.alloc.rate:               1741.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          17584.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13499.087 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   154883.179 ±(99.9%) 5977.397 ops/s [Average]
[info]   (min, avg, max) = (152181.786, 154883.179, 155993.414), stdev = 1552.311
[info]   CI (99.9%): [148905.782, 160860.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1726.354 ±(99.9%) 88.433 MB/sec [Average]
[info]   (min, avg, max) = (1687.530, 1726.354, 1745.604), stdev = 22.966
[info]   CI (99.9%): [1637.921, 1814.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17539.665 ±(99.9%) 423.623 B/op [Average]
[info]   (min, avg, max) = (17432.378, 17539.665, 17700.767), stdev = 110.014
[info]   CI (99.9%): [17116.042, 17963.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606.087 ±(99.9%) 1412.735 MB/sec [Average]
[info]   (min, avg, max) = (1336.625, 1606.087, 2011.516), stdev = 366.883
[info]   CI (99.9%): [193.352, 3018.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16313.663 ±(99.9%) 14234.057 B/op [Average]
[info]   (min, avg, max) = (13495.412, 16313.663, 20394.213), stdev = 3696.539
[info]   CI (99.9%): [2079.606, 30547.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.665), stdev = 1.623
[info]   CI (99.9%): [≈ 0, 7.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.727 ±(99.9%) 63.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.727, 37.154), stdev = 16.455
[info]   CI (99.9%): [≈ 0, 71.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 9.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 899314.359 ops/s
[info] # Warmup Iteration   2: 1385124.821 ops/s
[info] # Warmup Iteration   3: 1474271.386 ops/s
[info] # Warmup Iteration   4: 1517574.743 ops/s
[info] # Warmup Iteration   5: 1523499.553 ops/s
[info] Iteration   1: 1502451.786 ops/s
[info]                  ·gc.alloc.rate:                   1270.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1330.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     704.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1521147.394 ops/s
[info]                  ·gc.alloc.rate:                   1302.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1347.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1391.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1525008.502 ops/s
[info]                  ·gc.alloc.rate:               1304.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          1346.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1388.761 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1523133.952 ops/s
[info]                  ·gc.alloc.rate:                   1302.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1345.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1391.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1529740.386 ops/s
[info]                  ·gc.alloc.rate:               1308.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          1346.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1383.045 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1520296.404 ±(99.9%) 40321.543 ops/s [Average]
[info]   (min, avg, max) = (1502451.786, 1520296.404, 1529740.386), stdev = 10471.377
[info]   CI (99.9%): [1479974.861, 1560617.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1297.843 ±(99.9%) 59.487 MB/sec [Average]
[info]   (min, avg, max) = (1270.607, 1297.843, 1308.814), stdev = 15.449
[info]   CI (99.9%): [1238.356, 1357.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1343.279 ±(99.9%) 26.712 B/op [Average]
[info]   (min, avg, max) = (1330.987, 1343.279, 1347.869), stdev = 6.937
[info]   CI (99.9%): [1316.567, 1369.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.053 ±(99.9%) 1160.032 MB/sec [Average]
[info]   (min, avg, max) = (672.152, 1211.053, 1347.164), stdev = 301.257
[info]   CI (99.9%): [51.021, 2371.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1251.859 ±(99.9%) 1179.187 B/op [Average]
[info]   (min, avg, max) = (704.093, 1251.859, 1391.790), stdev = 306.231
[info]   CI (99.9%): [72.672, 2431.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 4.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.852), stdev = 1.267
[info]   CI (99.9%): [≈ 0, 5.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.607 ±(99.9%) 5.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.607, 2.947), stdev = 1.308
[info]   CI (99.9%): [≈ 0, 5.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1041759.423 ops/s
[info] # Warmup Iteration   2: 1695933.065 ops/s
[info] # Warmup Iteration   3: 1772225.882 ops/s
[info] # Warmup Iteration   4: 1771560.953 ops/s
[info] # Warmup Iteration   5: 1772187.348 ops/s
[info] Iteration   1: 1762005.516 ops/s
[info]                  ·gc.alloc.rate:      5.242 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.682 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1771250.435 ops/s
[info]                  ·gc.alloc.rate:      0.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.823 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1773115.137 ops/s
[info]                  ·gc.alloc.rate:      0.154 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.136 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1772699.577 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1773589.836 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1770532.100 ±(99.9%) 18660.574 ops/s [Average]
[info]   (min, avg, max) = (1762005.516, 1770532.100, 1773589.836), stdev = 4846.092
[info]   CI (99.9%): [1751871.526, 1789192.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.265 ±(99.9%) 8.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.265, 5.242), stdev = 2.256
[info]   CI (99.9%): [≈ 0, 9.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.128 ±(99.9%) 7.762 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.128, 4.682), stdev = 2.016
[info]   CI (99.9%): [≈ 0, 8.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45688.943 ops/s
[info] # Warmup Iteration   2: 139604.665 ops/s
[info] # Warmup Iteration   3: 151024.862 ops/s
[info] # Warmup Iteration   4: 152191.796 ops/s
[info] # Warmup Iteration   5: 152030.179 ops/s
[info] Iteration   1: 154255.946 ops/s
[info]                  ·gc.alloc.rate:                   1994.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              20340.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20488.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 154669.079 ops/s
[info]                  ·gc.alloc.rate:                   2007.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              20426.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20412.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 152292.911 ops/s
[info]                  ·gc.alloc.rate:                   1979.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              20455.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20686.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 155271.564 ops/s
[info]                  ·gc.alloc.rate:                   2017.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              20447.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20289.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 155316.684 ops/s
[info]                  ·gc.alloc.rate:               2031.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          20585.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20315.118 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   154361.237 ±(99.9%) 4765.084 ops/s [Average]
[info]   (min, avg, max) = (152292.911, 154361.237, 155316.684), stdev = 1237.477
[info]   CI (99.9%): [149596.153, 159126.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2006.115 ±(99.9%) 78.077 MB/sec [Average]
[info]   (min, avg, max) = (1979.405, 2006.115, 2031.996), stdev = 20.276
[info]   CI (99.9%): [1928.038, 2084.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20451.088 ±(99.9%) 338.740 B/op [Average]
[info]   (min, avg, max) = (20340.503, 20451.088, 20585.635), stdev = 87.970
[info]   CI (99.9%): [20112.347, 20789.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.758 ±(99.9%) 11.826 MB/sec [Average]
[info]   (min, avg, max) = (2001.692, 2004.758, 2008.953), stdev = 3.071
[info]   CI (99.9%): [1992.932, 2016.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20438.418 ±(99.9%) 615.225 B/op [Average]
[info]   (min, avg, max) = (20289.705, 20438.418, 20686.657), stdev = 159.772
[info]   CI (99.9%): [19823.192, 21053.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.850 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.850, 3.478), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.666 ±(99.9%) 58.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.666, 35.470), stdev = 15.188
[info]   CI (99.9%): [≈ 0, 67.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8911.411 ops/s
[info] # Warmup Iteration   2: 40803.732 ops/s
[info] # Warmup Iteration   3: 43907.185 ops/s
[info] # Warmup Iteration   4: 42153.087 ops/s
[info] # Warmup Iteration   5: 44184.586 ops/s
[info] Iteration   1: 43942.248 ops/s
[info]                  ·gc.alloc.rate:                   1606.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              57523.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47932.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 43874.759 ops/s
[info]                  ·gc.alloc.rate:                   1627.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              58397.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72068.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 44379.476 ops/s
[info]                  ·gc.alloc.rate:                   1632.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              57879.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47460.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 43420.679 ops/s
[info]                  ·gc.alloc.rate:                   1595.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              57841.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48409.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 44387.647 ops/s
[info]                  ·gc.alloc.rate:                   1644.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              58326.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70952.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   44000.962 ±(99.9%) 1550.932 ops/s [Average]
[info]   (min, avg, max) = (43420.679, 44000.962, 44387.647), stdev = 402.772
[info]   CI (99.9%): [42450.030, 45551.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1621.459 ±(99.9%) 77.084 MB/sec [Average]
[info]   (min, avg, max) = (1595.799, 1621.459, 1644.983), stdev = 20.018
[info]   CI (99.9%): [1544.375, 1698.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57993.596 ±(99.9%) 1402.767 B/op [Average]
[info]   (min, avg, max) = (57523.761, 57993.596, 58397.276), stdev = 364.294
[info]   CI (99.9%): [56590.829, 59396.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1604.533 ±(99.9%) 1408.066 MB/sec [Average]
[info]   (min, avg, max) = (1335.592, 1604.533, 2009.116), stdev = 365.670
[info]   CI (99.9%): [196.467, 3012.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   57364.752 ±(99.9%) 49763.555 B/op [Average]
[info]   (min, avg, max) = (47460.667, 57364.752, 72068.393), stdev = 12923.437
[info]   CI (99.9%): [7601.198, 107128.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 5.445 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.874, 3.289), stdev = 1.414
[info]   CI (99.9%): [≈ 0, 6.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.281 ±(99.9%) 195.273 B/op [Average]
[info]   (min, avg, max) = (0.738, 31.281, 117.983), stdev = 50.712
[info]   CI (99.9%): [≈ 0, 226.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431996.347 ops/s
[info] # Warmup Iteration   2: 704573.966 ops/s
[info] # Warmup Iteration   3: 780909.631 ops/s
[info] # Warmup Iteration   4: 783696.348 ops/s
[info] # Warmup Iteration   5: 793342.291 ops/s
[info] Iteration   1: 790055.342 ops/s
[info]                  ·gc.alloc.rate:                   1585.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              3157.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4021.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 792565.651 ops/s
[info]                  ·gc.alloc.rate:                   1588.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              3154.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2674.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 794519.141 ops/s
[info]                  ·gc.alloc.rate:                   1588.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              3147.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2665.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 794531.006 ops/s
[info]                  ·gc.alloc.rate:                   1630.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              3228.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3991.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 795451.693 ops/s
[info]                  ·gc.alloc.rate:                   1592.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              3151.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2657.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   793424.567 ±(99.9%) 8308.150 ops/s [Average]
[info]   (min, avg, max) = (790055.342, 793424.567, 795451.693), stdev = 2157.600
[info]   CI (99.9%): [785116.416, 801732.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1597.095 ±(99.9%) 72.175 MB/sec [Average]
[info]   (min, avg, max) = (1585.086, 1597.095, 1630.276), stdev = 18.744
[info]   CI (99.9%): [1524.920, 1669.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3167.848 ±(99.9%) 130.847 B/op [Average]
[info]   (min, avg, max) = (3147.443, 3167.848, 3228.251), stdev = 33.981
[info]   CI (99.9%): [3037.001, 3298.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.963 ±(99.9%) 1417.808 MB/sec [Average]
[info]   (min, avg, max) = (1342.958, 1613.963, 2018.752), stdev = 368.200
[info]   CI (99.9%): [196.155, 3031.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3202.059 ±(99.9%) 2828.842 B/op [Average]
[info]   (min, avg, max) = (2657.179, 3202.059, 4021.654), stdev = 734.641
[info]   CI (99.9%): [373.217, 6030.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.272 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.625, 2.602), stdev = 1.109
[info]   CI (99.9%): [≈ 0, 4.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.240 ±(99.9%) 8.484 B/op [Average]
[info]   (min, avg, max) = (0.041, 1.240, 5.167), stdev = 2.203
[info]   CI (99.9%): [≈ 0, 9.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 923.631 ops/s
[info] # Warmup Iteration   2: 26112.006 ops/s
[info] # Warmup Iteration   3: 30322.360 ops/s
[info] # Warmup Iteration   4: 30772.215 ops/s
[info] # Warmup Iteration   5: 30303.570 ops/s
[info] Iteration   1: 30843.514 ops/s
[info]                  ·gc.alloc.rate:                   2251.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              114888.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136838.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.865 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 30599.209 ops/s
[info]                  ·gc.alloc.rate:                   2231.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              114773.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103675.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 30943.360 ops/s
[info]                  ·gc.alloc.rate:               2255.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          114736.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102655.421 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 31052.620 ops/s
[info]                  ·gc.alloc.rate:               2278.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          115481.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102460.662 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 30962.996 ops/s
[info]                  ·gc.alloc.rate:               2299.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          116840.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137282.900 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   30880.340 ±(99.9%) 669.378 ops/s [Average]
[info]   (min, avg, max) = (30599.209, 30880.340, 31052.620), stdev = 173.835
[info]   CI (99.9%): [30210.962, 31549.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2263.344 ±(99.9%) 100.530 MB/sec [Average]
[info]   (min, avg, max) = (2231.537, 2263.344, 2299.202), stdev = 26.107
[info]   CI (99.9%): [2162.813, 2363.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   115344.228 ±(99.9%) 3421.421 B/op [Average]
[info]   (min, avg, max) = (114736.961, 115344.228, 116840.099), stdev = 888.532
[info]   CI (99.9%): [111922.807, 118765.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2287.780 ±(99.9%) 1419.610 MB/sec [Average]
[info]   (min, avg, max) = (2015.756, 2287.780, 2701.480), stdev = 368.668
[info]   CI (99.9%): [868.169, 3707.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   116582.518 ±(99.9%) 72007.340 B/op [Average]
[info]   (min, avg, max) = (102460.662, 116582.518, 137282.900), stdev = 18700.077
[info]   CI (99.9%): [44575.178, 188589.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.196 ±(99.9%) 1.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.958), stdev = 0.426
[info]   CI (99.9%): [≈ 0, 1.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.987 ±(99.9%) 83.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.987, 48.865), stdev = 21.738
[info]   CI (99.9%): [≈ 0, 93.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134118.975 ops/s
[info] # Warmup Iteration   2: 301502.060 ops/s
[info] # Warmup Iteration   3: 315787.678 ops/s
[info] # Warmup Iteration   4: 319436.455 ops/s
[info] # Warmup Iteration   5: 318212.613 ops/s
[info] Iteration   1: 317959.931 ops/s
[info]                  ·gc.alloc.rate:               1533.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          7588.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6627.604 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 316014.822 ops/s
[info]                  ·gc.alloc.rate:                   1562.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              7783.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10014.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 317922.533 ops/s
[info]                  ·gc.alloc.rate:                   1556.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              7703.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6629.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 311408.840 ops/s
[info]                  ·gc.alloc.rate:                   1514.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              7651.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6757.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 320235.884 ops/s
[info]                  ·gc.alloc.rate:               1554.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          7636.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6567.227 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   316708.402 ±(99.9%) 12778.392 ops/s [Average]
[info]   (min, avg, max) = (311408.840, 316708.402, 320235.884), stdev = 3318.508
[info]   CI (99.9%): [303930.009, 329486.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1544.180 ±(99.9%) 76.877 MB/sec [Average]
[info]   (min, avg, max) = (1514.510, 1544.180, 1562.831), stdev = 19.965
[info]   CI (99.9%): [1467.303, 1621.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7672.695 ±(99.9%) 286.017 B/op [Average]
[info]   (min, avg, max) = (7588.888, 7672.695, 7783.503), stdev = 74.278
[info]   CI (99.9%): [7386.678, 7958.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.630 ±(99.9%) 1158.355 MB/sec [Average]
[info]   (min, avg, max) = (1336.590, 1472.630, 2010.752), stdev = 300.821
[info]   CI (99.9%): [314.276, 2630.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7319.227 ±(99.9%) 5807.513 B/op [Average]
[info]   (min, avg, max) = (6567.227, 7319.227, 10014.322), stdev = 1508.193
[info]   CI (99.9%): [1511.714, 13126.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 5.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.268), stdev = 1.418
[info]   CI (99.9%): [≈ 0, 6.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.772 ±(99.9%) 27.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.772, 16.277), stdev = 7.062
[info]   CI (99.9%): [≈ 0, 30.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1261837.594 ops/s
[info] # Warmup Iteration   2: 1781298.841 ops/s
[info] # Warmup Iteration   3: 1982314.540 ops/s
[info] # Warmup Iteration   4: 1970607.621 ops/s
[info] # Warmup Iteration   5: 1982061.931 ops/s
[info] Iteration   1: 1981329.882 ops/s
[info]                  ·gc.alloc.rate:                   1192.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              947.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1067.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1987684.761 ops/s
[info]                  ·gc.alloc.rate:               1177.162 MB/sec
[info]                  ·gc.alloc.rate.norm:          932.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532.455 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1966290.602 ops/s
[info]                  ·gc.alloc.rate:               1189.964 MB/sec
[info]                  ·gc.alloc.rate.norm:          952.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1076.794 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1976571.535 ops/s
[info]                  ·gc.alloc.rate:                   1205.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              959.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1071.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1968345.577 ops/s
[info]                  ·gc.alloc.rate:                   1190.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1075.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1976044.472 ±(99.9%) 34339.922 ops/s [Average]
[info]   (min, avg, max) = (1966290.602, 1976044.472, 1987684.761), stdev = 8917.969
[info]   CI (99.9%): [1941704.550, 2010384.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1191.038 ±(99.9%) 38.552 MB/sec [Average]
[info]   (min, avg, max) = (1177.162, 1191.038, 1205.337), stdev = 10.012
[info]   CI (99.9%): [1152.486, 1229.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   948.664 ±(99.9%) 39.607 B/op [Average]
[info]   (min, avg, max) = (932.105, 948.664, 959.765), stdev = 10.286
[info]   CI (99.9%): [909.056, 988.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.637 ±(99.9%) 1158.509 MB/sec [Average]
[info]   (min, avg, max) = (672.441, 1210.637, 1345.951), stdev = 300.861
[info]   CI (99.9%): [52.128, 2369.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   964.893 ±(99.9%) 930.955 B/op [Average]
[info]   (min, avg, max) = (532.455, 964.893, 1076.794), stdev = 241.766
[info]   CI (99.9%): [33.938, 1895.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.477), stdev = 1.070
[info]   CI (99.9%): [≈ 0, 4.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.491 ±(99.9%) 3.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.491, 1.973), stdev = 0.852
[info]   CI (99.9%): [≈ 0, 3.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1287459.625 ops/s
[info] # Warmup Iteration   2: 2166262.158 ops/s
[info] # Warmup Iteration   3: 2254966.778 ops/s
[info] # Warmup Iteration   4: 2254701.386 ops/s
[info] # Warmup Iteration   5: 2255253.809 ops/s
[info] Iteration   1: 2254636.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2252648.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2247551.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2262297.052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2262961.021 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2256018.871 ±(99.9%) 25292.599 ops/s [Average]
[info]   (min, avg, max) = (2247551.443, 2256018.871, 2262961.021), stdev = 6568.408
[info]   CI (99.9%): [2230726.273, 2281311.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91370.666 ops/s
[info] # Warmup Iteration   2: 234424.884 ops/s
[info] # Warmup Iteration   3: 245648.538 ops/s
[info] # Warmup Iteration   4: 248799.067 ops/s
[info] # Warmup Iteration   5: 247841.296 ops/s
[info] Iteration   1: 248765.217 ops/s
[info]                  ·gc.alloc.rate:               1647.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          10425.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8460.370 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 239943.218 ops/s
[info]                  ·gc.alloc.rate:                   1622.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              10643.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8778.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 246485.574 ops/s
[info]                  ·gc.alloc.rate:                   1654.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              10560.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12806.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.728 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 249338.022 ops/s
[info]                  ·gc.alloc.rate:                   1664.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              10509.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8426.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 249352.545 ops/s
[info]                  ·gc.alloc.rate:                   1666.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              10511.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12630.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   246776.915 ±(99.9%) 15394.243 ops/s [Average]
[info]   (min, avg, max) = (239943.218, 246776.915, 249352.545), stdev = 3997.836
[info]   CI (99.9%): [231382.672, 262171.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1651.141 ±(99.9%) 67.974 MB/sec [Average]
[info]   (min, avg, max) = (1622.678, 1651.141, 1666.246), stdev = 17.653
[info]   CI (99.9%): [1583.166, 1719.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10530.012 ±(99.9%) 307.665 B/op [Average]
[info]   (min, avg, max) = (10425.512, 10530.012, 10643.420), stdev = 79.900
[info]   CI (99.9%): [10222.348, 10837.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.684 ±(99.9%) 1407.015 MB/sec [Average]
[info]   (min, avg, max) = (1334.947, 1603.684, 2005.737), stdev = 365.397
[info]   CI (99.9%): [196.669, 3010.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10220.369 ±(99.9%) 8800.158 B/op [Average]
[info]   (min, avg, max) = (8426.418, 10220.369, 12806.704), stdev = 2285.373
[info]   CI (99.9%): [1420.211, 19020.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 5.901 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.518), stdev = 1.533
[info]   CI (99.9%): [≈ 0, 6.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.118 ±(99.9%) 38.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.118, 23.076), stdev = 10.060
[info]   CI (99.9%): [≈ 0, 43.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19471.410 ops/s
[info] # Warmup Iteration   2: 65385.607 ops/s
[info] # Warmup Iteration   3: 67946.461 ops/s
[info] # Warmup Iteration   4: 72912.246 ops/s
[info] # Warmup Iteration   5: 71575.974 ops/s
[info] Iteration   1: 72238.680 ops/s
[info]                  ·gc.alloc.rate:                   1581.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              34449.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29215.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 73281.904 ops/s
[info]                  ·gc.alloc.rate:                   1617.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              34729.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43234.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 73477.380 ops/s
[info]                  ·gc.alloc.rate:                   1618.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              34666.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28721.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 73246.744 ops/s
[info]                  ·gc.alloc.rate:               1614.114 MB/sec
[info]                  ·gc.alloc.rate.norm:          34684.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28754.971 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 71703.080 ops/s
[info]                  ·gc.alloc.rate:                   1620.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              35549.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44038.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   72789.558 ±(99.9%) 2987.927 ops/s [Average]
[info]   (min, avg, max) = (71703.080, 72789.558, 73477.380), stdev = 775.955
[info]   CI (99.9%): [69801.631, 75777.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1610.334 ±(99.9%) 62.896 MB/sec [Average]
[info]   (min, avg, max) = (1581.378, 1610.334, 1620.096), stdev = 16.334
[info]   CI (99.9%): [1547.438, 1673.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34815.870 ±(99.9%) 1634.268 B/op [Average]
[info]   (min, avg, max) = (34449.151, 34815.870, 35549.955), stdev = 424.414
[info]   CI (99.9%): [33181.602, 36450.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.182 ±(99.9%) 1413.626 MB/sec [Average]
[info]   (min, avg, max) = (1338.180, 1608.182, 2013.711), stdev = 367.114
[info]   CI (99.9%): [194.556, 3021.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34793.040 ±(99.9%) 31114.636 B/op [Average]
[info]   (min, avg, max) = (28721.660, 34793.040, 44038.525), stdev = 8080.372
[info]   CI (99.9%): [3678.404, 65907.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 5.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.103), stdev = 1.322
[info]   CI (99.9%): [≈ 0, 5.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.555 ±(99.9%) 109.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.555, 66.615), stdev = 28.367
[info]   CI (99.9%): [≈ 0, 125.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29525.922 ops/s
[info] # Warmup Iteration   2: 83998.829 ops/s
[info] # Warmup Iteration   3: 87989.780 ops/s
[info] # Warmup Iteration   4: 89072.345 ops/s
[info] # Warmup Iteration   5: 88919.683 ops/s
[info] Iteration   1: 89273.294 ops/s
[info]                  ·gc.alloc.rate:                   1152.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              20315.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11772.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 89171.152 ops/s
[info]                  ·gc.alloc.rate:                   1165.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              20576.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23579.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 88606.603 ops/s
[info]                  ·gc.alloc.rate:               1154.786 MB/sec
[info]                  ·gc.alloc.rate.norm:          20511.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23747.371 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 89378.014 ops/s
[info]                  ·gc.alloc.rate:               1148.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          20228.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11777.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 88944.090 ops/s
[info]                  ·gc.alloc.rate:                   1157.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              20470.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23681.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   89074.631 ±(99.9%) 1182.021 ops/s [Average]
[info]   (min, avg, max) = (88606.603, 89074.631, 89378.014), stdev = 306.967
[info]   CI (99.9%): [87892.609, 90256.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1155.847 ±(99.9%) 24.736 MB/sec [Average]
[info]   (min, avg, max) = (1148.929, 1155.847, 1165.982), stdev = 6.424
[info]   CI (99.9%): [1131.111, 1180.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20420.672 ±(99.9%) 554.097 B/op [Average]
[info]   (min, avg, max) = (20228.874, 20420.672, 20576.890), stdev = 143.897
[info]   CI (99.9%): [19866.575, 20974.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.687 ±(99.9%) 1410.740 MB/sec [Average]
[info]   (min, avg, max) = (667.820, 1069.687, 1338.629), stdev = 366.365
[info]   CI (99.9%): [≈ 0, 2480.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18911.633 ±(99.9%) 25087.355 B/op [Average]
[info]   (min, avg, max) = (11772.978, 18911.633, 23747.371), stdev = 6515.106
[info]   CI (99.9%): [≈ 0, 43998.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 7.503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.373), stdev = 1.949
[info]   CI (99.9%): [≈ 0, 8.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.692 ±(99.9%) 132.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.692, 77.357), stdev = 34.473
[info]   CI (99.9%): [≈ 0, 148.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42014.861 ops/s
[info] # Warmup Iteration   2: 83858.911 ops/s
[info] # Warmup Iteration   3: 86649.461 ops/s
[info] # Warmup Iteration   4: 89455.663 ops/s
[info] # Warmup Iteration   5: 89704.741 ops/s
[info] Iteration   1: 89321.897 ops/s
[info]                  ·gc.alloc.rate:                   1110.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              19573.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23650.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 89395.372 ops/s
[info]                  ·gc.alloc.rate:               1102.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          19398.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11821.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 89556.382 ops/s
[info]                  ·gc.alloc.rate:                   1117.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              19632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23607.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 89319.928 ops/s
[info]                  ·gc.alloc.rate:                   1101.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              19398.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23687.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 89686.251 ops/s
[info]                  ·gc.alloc.rate:                   1091.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              19153.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11806.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   89455.966 ±(99.9%) 618.707 ops/s [Average]
[info]   (min, avg, max) = (89319.928, 89455.966, 89686.251), stdev = 160.676
[info]   CI (99.9%): [88837.259, 90074.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1104.560 ±(99.9%) 37.923 MB/sec [Average]
[info]   (min, avg, max) = (1091.451, 1104.560, 1117.170), stdev = 9.849
[info]   CI (99.9%): [1066.636, 1142.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19431.319 ±(99.9%) 720.019 B/op [Average]
[info]   (min, avg, max) = (19153.371, 19431.319, 19632.013), stdev = 186.987
[info]   CI (99.9%): [18711.300, 20151.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1074.948 ±(99.9%) 1415.745 MB/sec [Average]
[info]   (min, avg, max) = (671.598, 1074.948, 1344.683), stdev = 367.664
[info]   CI (99.9%): [≈ 0, 2490.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18914.716 ±(99.9%) 24960.039 B/op [Average]
[info]   (min, avg, max) = (11806.445, 18914.716, 23687.216), stdev = 6482.043
[info]   CI (99.9%): [≈ 0, 43874.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.545 ±(99.9%) 4.473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.623), stdev = 1.162
[info]   CI (99.9%): [≈ 0, 5.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.572 ±(99.9%) 78.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.572, 46.028), stdev = 20.383
[info]   CI (99.9%): [≈ 0, 88.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6154.260 ops/s
[info] # Warmup Iteration   2: 40320.925 ops/s
[info] # Warmup Iteration   3: 44488.264 ops/s
[info] # Warmup Iteration   4: 43589.380 ops/s
[info] # Warmup Iteration   5: 44173.737 ops/s
[info] Iteration   1: 44840.257 ops/s
[info]                  ·gc.alloc.rate:                   2088.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              73292.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70495.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 44901.425 ops/s
[info]                  ·gc.alloc.rate:                   2103.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              73704.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70166.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 44985.038 ops/s
[info]                  ·gc.alloc.rate:               2105.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          73659.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69940.802 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 44901.259 ops/s
[info]                  ·gc.alloc.rate:                   2116.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              74176.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70105.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 45131.810 ops/s
[info]                  ·gc.alloc.rate:               2126.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          74165.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69862.479 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   44951.958 ±(99.9%) 434.978 ops/s [Average]
[info]   (min, avg, max) = (44840.257, 44951.958, 45131.810), stdev = 112.962
[info]   CI (99.9%): [44516.980, 45386.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2108.037 ±(99.9%) 56.083 MB/sec [Average]
[info]   (min, avg, max) = (2088.108, 2108.037, 2126.890), stdev = 14.565
[info]   CI (99.9%): [2051.954, 2164.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73799.793 ±(99.9%) 1443.156 B/op [Average]
[info]   (min, avg, max) = (73292.831, 73799.793, 74176.735), stdev = 374.783
[info]   CI (99.9%): [72356.637, 75242.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.735 ±(99.9%) 13.739 MB/sec [Average]
[info]   (min, avg, max) = (1999.466, 2002.735, 2008.422), stdev = 3.568
[info]   CI (99.9%): [1988.995, 2016.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70114.160 ±(99.9%) 946.957 B/op [Average]
[info]   (min, avg, max) = (69862.479, 70114.160, 70495.844), stdev = 245.922
[info]   CI (99.9%): [69167.204, 71061.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 7.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.455), stdev = 1.971
[info]   CI (99.9%): [≈ 0, 8.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   32.732 ±(99.9%) 266.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.732, 156.365), stdev = 69.168
[info]   CI (99.9%): [≈ 0, 299.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45678.805 ops/s
[info] # Warmup Iteration   2: 106757.185 ops/s
[info] # Warmup Iteration   3: 110622.177 ops/s
[info] # Warmup Iteration   4: 113402.405 ops/s
[info] # Warmup Iteration   5: 113095.567 ops/s
[info] Iteration   1: 113160.038 ops/s
[info]                  ·gc.alloc.rate:               1095.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          15234.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18627.124 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 113577.908 ops/s
[info]                  ·gc.alloc.rate:               1075.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          14908.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9281.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 112128.351 ops/s
[info]                  ·gc.alloc.rate:                   1076.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              15098.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18812.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 113120.733 ops/s
[info]                  ·gc.alloc.rate:               1068.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          14872.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9333.157 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 112483.882 ops/s
[info]                  ·gc.alloc.rate:                   1077.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              15070.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18776.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   112894.182 ±(99.9%) 2232.318 ops/s [Average]
[info]   (min, avg, max) = (112128.351, 112894.182, 113577.908), stdev = 579.726
[info]   CI (99.9%): [110661.864, 115126.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1078.689 ±(99.9%) 37.963 MB/sec [Average]
[info]   (min, avg, max) = (1068.955, 1078.689, 1095.345), stdev = 9.859
[info]   CI (99.9%): [1040.726, 1116.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15036.717 ±(99.9%) 569.949 B/op [Average]
[info]   (min, avg, max) = (14872.171, 15036.717, 15234.421), stdev = 148.014
[info]   CI (99.9%): [14466.768, 15606.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1072.541 ±(99.9%) 1413.809 MB/sec [Average]
[info]   (min, avg, max) = (669.842, 1072.541, 1341.908), stdev = 367.162
[info]   CI (99.9%): [≈ 0, 2486.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14966.041 ±(99.9%) 19893.931 B/op [Average]
[info]   (min, avg, max) = (9281.026, 14966.041, 18812.563), stdev = 5166.391
[info]   CI (99.9%): [≈ 0, 34859.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 3.164), stdev = 1.413
[info]   CI (99.9%): [≈ 0, 6.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.913 ±(99.9%) 76.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.913, 44.273), stdev = 19.767
[info]   CI (99.9%): [≈ 0, 85.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159102.646 ops/s
[info] # Warmup Iteration   2: 318680.877 ops/s
[info] # Warmup Iteration   3: 340016.449 ops/s
[info] # Warmup Iteration   4: 338349.048 ops/s
[info] # Warmup Iteration   5: 343126.275 ops/s
[info] Iteration   1: 339851.928 ops/s
[info]                  ·gc.alloc.rate:               515.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          2389.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2369.210 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 336959.346 ops/s
[info]                  ·gc.alloc.rate:               523.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          2447.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3112.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 336712.525 ops/s
[info]                  ·gc.alloc.rate:                   517.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              2420.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3115.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 338799.066 ops/s
[info]                  ·gc.alloc.rate:               523.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          2431.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3100.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 339545.611 ops/s
[info]                  ·gc.alloc.rate:      503.952 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   338373.695 ±(99.9%) 5613.021 ops/s [Average]
[info]   (min, avg, max) = (336712.525, 338373.695, 339851.928), stdev = 1457.684
[info]   CI (99.9%): [332760.674, 343986.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   517.095 ±(99.9%) 31.344 MB/sec [Average]
[info]   (min, avg, max) = (503.952, 517.095, 523.920), stdev = 8.140
[info]   CI (99.9%): [485.752, 548.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2405.004 ±(99.9%) 169.246 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2405.004, 2447.026), stdev = 43.953
[info]   CI (99.9%): [2235.758, 2574.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.477 ±(99.9%) 1112.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.477, 667.815), stdev = 288.838
[info]   CI (99.9%): [≈ 0, 1614.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2339.625 ±(99.9%) 5185.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2339.625, 3115.257), stdev = 1346.626
[info]   CI (99.9%): [≈ 0, 7525.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441733.877 ops/s
[info] # Warmup Iteration   2: 646914.734 ops/s
[info] # Warmup Iteration   3: 663003.713 ops/s
[info] # Warmup Iteration   4: 659810.363 ops/s
[info] # Warmup Iteration   5: 665240.838 ops/s
[info] Iteration   1: 656345.030 ops/s
[info]                  ·gc.alloc.rate:               838.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          2010.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1609.309 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 664323.231 ops/s
[info]                  ·gc.alloc.rate:               849.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          2011.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1590.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 662901.900 ops/s
[info]                  ·gc.alloc.rate:                   837.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              1988.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1594.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 645590.718 ops/s
[info]                  ·gc.alloc.rate:               832.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          2028.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3274.714 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 662975.141 ops/s
[info]                  ·gc.alloc.rate:               836.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          1986.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1594.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   658427.204 ±(99.9%) 30110.250 ops/s [Average]
[info]   (min, avg, max) = (645590.718, 658427.204, 664323.231), stdev = 7819.536
[info]   CI (99.9%): [628316.954, 688537.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   838.790 ±(99.9%) 24.264 MB/sec [Average]
[info]   (min, avg, max) = (832.104, 838.790, 849.194), stdev = 6.301
[info]   CI (99.9%): [814.527, 863.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2005.080 ±(99.9%) 67.916 B/op [Average]
[info]   (min, avg, max) = (1986.346, 2005.080, 2028.567), stdev = 17.638
[info]   CI (99.9%): [1937.164, 2072.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.770 ±(99.9%) 1156.999 MB/sec [Average]
[info]   (min, avg, max) = (671.118, 805.770, 1343.265), stdev = 300.469
[info]   CI (99.9%): [≈ 0, 1962.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1932.597 ±(99.9%) 2889.145 B/op [Average]
[info]   (min, avg, max) = (1590.012, 1932.597, 3274.714), stdev = 750.302
[info]   CI (99.9%): [≈ 0, 4821.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 528033.674 ops/s
[info] # Warmup Iteration   2: 751039.641 ops/s
[info] # Warmup Iteration   3: 778506.291 ops/s
[info] # Warmup Iteration   4: 782142.747 ops/s
[info] # Warmup Iteration   5: 780939.625 ops/s
[info] Iteration   1: 777816.931 ops/s
[info]                  ·gc.alloc.rate:      0.997 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 779784.120 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 783975.735 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 782584.319 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 779655.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   780763.264 ±(99.9%) 9530.555 ops/s [Average]
[info]   (min, avg, max) = (777816.931, 780763.264, 783975.735), stdev = 2475.055
[info]   CI (99.9%): [771232.708, 790293.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.200 ±(99.9%) 1.716 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.200, 0.997), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 1.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.404 ±(99.9%) 3.472 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.404, 2.017), stdev = 0.902
[info]   CI (99.9%): [≈ 0, 3.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79934.149 ops/s
[info] # Warmup Iteration   2: 223421.131 ops/s
[info] # Warmup Iteration   3: 231097.159 ops/s
[info] # Warmup Iteration   4: 237841.749 ops/s
[info] # Warmup Iteration   5: 240338.835 ops/s
[info] Iteration   1: 240612.080 ops/s
[info]                  ·gc.alloc.rate:               784.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          5128.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4365.926 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 234956.871 ops/s
[info]                  ·gc.alloc.rate:               776.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          5200.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4475.393 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 238483.927 ops/s
[info]                  ·gc.alloc.rate:                   803.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              5302.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8822.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 237731.167 ops/s
[info]                  ·gc.alloc.rate:               777.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4427.721 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 236608.061 ops/s
[info]                  ·gc.alloc.rate:               773.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          5147.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4453.276 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   237678.421 ±(99.9%) 8125.333 ops/s [Average]
[info]   (min, avg, max) = (234956.871, 237678.421, 240612.080), stdev = 2110.123
[info]   CI (99.9%): [229553.089, 245803.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   783.185 ±(99.9%) 46.876 MB/sec [Average]
[info]   (min, avg, max) = (773.889, 783.185, 803.893), stdev = 12.174
[info]   CI (99.9%): [736.308, 830.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5184.764 ±(99.9%) 274.304 B/op [Average]
[info]   (min, avg, max) = (5128.670, 5184.764, 5302.677), stdev = 71.236
[info]   CI (99.9%): [4910.460, 5459.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.403 ±(99.9%) 1151.990 MB/sec [Average]
[info]   (min, avg, max) = (667.501, 802.403, 1337.570), stdev = 299.168
[info]   CI (99.9%): [≈ 0, 1954.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5309.051 ±(99.9%) 7565.557 B/op [Average]
[info]   (min, avg, max) = (4365.926, 5309.051, 8822.941), stdev = 1964.751
[info]   CI (99.9%): [≈ 0, 12874.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:46:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31426.361 ops/s
[info] # Warmup Iteration   2: 112592.840 ops/s
[info] # Warmup Iteration   3: 120360.837 ops/s
[info] # Warmup Iteration   4: 124802.207 ops/s
[info] # Warmup Iteration   5: 121393.168 ops/s
[info] Iteration   1: 124407.703 ops/s
[info]                  ·gc.alloc.rate:               1728.293 MB/sec
[info]                  ·gc.alloc.rate.norm:          21864.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16968.245 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 124425.180 ops/s
[info]                  ·gc.alloc.rate:                   1767.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              22359.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25463.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 124378.741 ops/s
[info]                  ·gc.alloc.rate:                   1739.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              22014.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16942.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 124273.392 ops/s
[info]                  ·gc.alloc.rate:                   1763.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              22331.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25402.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.846 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 125617.552 ops/s
[info]                  ·gc.alloc.rate:               1756.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          22011.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16750.442 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   124620.514 ±(99.9%) 2158.144 ops/s [Average]
[info]   (min, avg, max) = (124273.392, 124620.514, 125617.552), stdev = 560.463
[info]   CI (99.9%): [122462.369, 126778.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1751.266 ±(99.9%) 64.181 MB/sec [Average]
[info]   (min, avg, max) = (1728.293, 1751.266, 1767.979), stdev = 16.668
[info]   CI (99.9%): [1687.085, 1815.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22116.442 ±(99.9%) 840.098 B/op [Average]
[info]   (min, avg, max) = (21864.818, 22116.442, 22359.848), stdev = 218.171
[info]   CI (99.9%): [21276.344, 22956.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1607.281 ±(99.9%) 1414.280 MB/sec [Average]
[info]   (min, avg, max) = (1336.915, 1607.281, 2013.394), stdev = 367.284
[info]   CI (99.9%): [193.002, 3021.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20305.454 ±(99.9%) 18027.900 B/op [Average]
[info]   (min, avg, max) = (16750.442, 20305.454, 25463.636), stdev = 4681.788
[info]   CI (99.9%): [2277.554, 38333.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.706), stdev = 1.631
[info]   CI (99.9%): [≈ 0, 7.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.007 ±(99.9%) 79.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.007, 46.870), stdev = 20.623
[info]   CI (99.9%): [≈ 0, 89.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35245.465 ops/s
[info] # Warmup Iteration   2: 178244.665 ops/s
[info] # Warmup Iteration   3: 179535.999 ops/s
[info] # Warmup Iteration   4: 185740.554 ops/s
[info] # Warmup Iteration   5: 184907.637 ops/s
[info] Iteration   1: 184977.773 ops/s
[info]                  ·gc.alloc.rate:                   1135.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              9662.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11366.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 184982.587 ops/s
[info]                  ·gc.alloc.rate:               1112.537 MB/sec
[info]                  ·gc.alloc.rate.norm:          9465.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5684.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 184269.132 ops/s
[info]                  ·gc.alloc.rate:                   1122.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              9588.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11424.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 185243.139 ops/s
[info]                  ·gc.alloc.rate:               1137.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          9661.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11376.156 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 185646.551 ops/s
[info]                  ·gc.alloc.rate:                   1114.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              9449.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5678.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   185023.837 ±(99.9%) 1934.224 ops/s [Average]
[info]   (min, avg, max) = (184269.132, 185023.837, 185646.551), stdev = 502.312
[info]   CI (99.9%): [183089.612, 186958.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1124.514 ±(99.9%) 44.273 MB/sec [Average]
[info]   (min, avg, max) = (1112.537, 1124.514, 1137.091), stdev = 11.498
[info]   CI (99.9%): [1080.241, 1168.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9565.305 ±(99.9%) 396.517 B/op [Average]
[info]   (min, avg, max) = (9449.707, 9565.305, 9662.054), stdev = 102.974
[info]   CI (99.9%): [9168.788, 9961.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.118 ±(99.9%) 1410.136 MB/sec [Average]
[info]   (min, avg, max) = (668.124, 1070.118, 1338.927), stdev = 366.208
[info]   CI (99.9%): [≈ 0, 2480.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9106.099 ±(99.9%) 12038.377 B/op [Average]
[info]   (min, avg, max) = (5678.525, 9106.099, 11424.467), stdev = 3126.328
[info]   CI (99.9%): [≈ 0, 21144.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.569 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.830), stdev = 1.706
[info]   CI (99.9%): [≈ 0, 7.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.601 ±(99.9%) 55.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.601, 32.473), stdev = 14.464
[info]   CI (99.9%): [≈ 0, 62.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246496.481 ops/s
[info] # Warmup Iteration   2: 479184.664 ops/s
[info] # Warmup Iteration   3: 507821.896 ops/s
[info] # Warmup Iteration   4: 523789.572 ops/s
[info] # Warmup Iteration   5: 522541.478 ops/s
[info] Iteration   1: 520731.927 ops/s
[info]                  ·gc.alloc.rate:               353.403 MB/sec
[info]                  ·gc.alloc.rate.norm:          1068.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1546.210 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 522178.694 ops/s
[info]                  ·gc.alloc.rate:      339.778 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 520598.075 ops/s
[info]                  ·gc.alloc.rate:               351.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          1063.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1546.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 524175.045 ops/s
[info]                  ·gc.alloc.rate:      341.176 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 502660.133 ops/s
[info]                  ·gc.alloc.rate:                   343.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1074.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2100.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   518068.775 ±(99.9%) 33629.480 ops/s [Average]
[info]   (min, avg, max) = (502660.133, 518068.775, 524175.045), stdev = 8733.469
[info]   CI (99.9%): [484439.294, 551698.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   345.865 ±(99.9%) 24.199 MB/sec [Average]
[info]   (min, avg, max) = (339.778, 345.865, 353.403), stdev = 6.284
[info]   CI (99.9%): [321.666, 370.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1050.815 ±(99.9%) 95.461 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1050.815, 1074.525), stdev = 24.791
[info]   CI (99.9%): [955.354, 1146.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.808 ±(99.9%) 1216.974 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.808, 670.822), stdev = 316.044
[info]   CI (99.9%): [≈ 0, 1555.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1038.644 ±(99.9%) 3753.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1038.644, 2100.335), stdev = 974.739
[info]   CI (99.9%): [≈ 0, 4792.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5440.211 ops/s
[info] # Warmup Iteration   2: 57175.982 ops/s
[info] # Warmup Iteration   3: 66712.958 ops/s
[info] # Warmup Iteration   4: 64630.981 ops/s
[info] # Warmup Iteration   5: 68732.903 ops/s
[info] Iteration   1: 69253.875 ops/s
[info]                  ·gc.alloc.rate:                   2758.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              62696.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60706.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 69403.226 ops/s
[info]                  ·gc.alloc.rate:                   2778.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              62999.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60817.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.944 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68642.264 ops/s
[info]                  ·gc.alloc.rate:                   2776.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              63655.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61735.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.955 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 69600.927 ops/s
[info]                  ·gc.alloc.rate:               2814.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          63637.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61064.256 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 68708.590 ops/s
[info]                  ·gc.alloc.rate:               2780.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          63687.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62011.247 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   69121.776 ±(99.9%) 1641.504 ops/s [Average]
[info]   (min, avg, max) = (68642.264, 69121.776, 69600.927), stdev = 426.294
[info]   CI (99.9%): [67480.272, 70763.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2781.599 ±(99.9%) 77.687 MB/sec [Average]
[info]   (min, avg, max) = (2758.735, 2781.599, 2814.231), stdev = 20.175
[info]   CI (99.9%): [2703.913, 2859.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63335.487 ±(99.9%) 1762.573 B/op [Average]
[info]   (min, avg, max) = (62696.913, 63335.487, 63687.645), stdev = 457.735
[info]   CI (99.9%): [61572.914, 65098.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2690.692 ±(99.9%) 55.512 MB/sec [Average]
[info]   (min, avg, max) = (2671.164, 2690.692, 2707.295), stdev = 14.416
[info]   CI (99.9%): [2635.179, 2746.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61267.038 ±(99.9%) 2221.182 B/op [Average]
[info]   (min, avg, max) = (60706.713, 61267.038, 62011.247), stdev = 576.834
[info]   CI (99.9%): [59045.856, 63488.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.853 ±(99.9%) 3.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 2.365), stdev = 0.970
[info]   CI (99.9%): [≈ 0, 4.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68243.112 ops/s
[info] # Warmup Iteration   2: 178002.483 ops/s
[info] # Warmup Iteration   3: 175482.911 ops/s
[info] # Warmup Iteration   4: 176984.996 ops/s
[info] # Warmup Iteration   5: 173917.115 ops/s
[info] Iteration   1: 181256.607 ops/s
[info]                  ·gc.alloc.rate:               1184.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          10284.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11643.068 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 182108.439 ops/s
[info]                  ·gc.alloc.rate:               1186.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          10251.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11594.490 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 182028.118 ops/s
[info]                  ·gc.alloc.rate:                   1194.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              10327.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11604.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 184543.719 ops/s
[info]                  ·gc.alloc.rate:               1195.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          10195.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5726.664 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 184202.070 ops/s
[info]                  ·gc.alloc.rate:                   1208.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              10322.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11480.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   182827.791 ±(99.9%) 5599.548 ops/s [Average]
[info]   (min, avg, max) = (181256.607, 182827.791, 184543.719), stdev = 1454.185
[info]   CI (99.9%): [177228.242, 188427.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1193.759 ±(99.9%) 36.195 MB/sec [Average]
[info]   (min, avg, max) = (1184.420, 1193.759, 1208.057), stdev = 9.400
[info]   CI (99.9%): [1157.565, 1229.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10276.106 ±(99.9%) 210.406 B/op [Average]
[info]   (min, avg, max) = (10195.494, 10276.106, 10327.263), stdev = 54.642
[info]   CI (99.9%): [10065.700, 10486.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.984 ±(99.9%) 1154.619 MB/sec [Average]
[info]   (min, avg, max) = (671.597, 1207.984, 1343.557), stdev = 299.851
[info]   CI (99.9%): [53.364, 2362.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10409.855 ±(99.9%) 10083.636 B/op [Average]
[info]   (min, avg, max) = (5726.664, 10409.855, 11643.068), stdev = 2618.688
[info]   CI (99.9%): [326.219, 20493.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.798 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.372), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.799 ±(99.9%) 49.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.799, 28.814), stdev = 12.866
[info]   CI (99.9%): [≈ 0, 55.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244299.612 ops/s
[info] # Warmup Iteration   2: 526870.189 ops/s
[info] # Warmup Iteration   3: 532994.271 ops/s
[info] # Warmup Iteration   4: 539148.519 ops/s
[info] # Warmup Iteration   5: 526139.706 ops/s
[info] Iteration   1: 532206.804 ops/s
[info]                  ·gc.alloc.rate:      524.991 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 536627.271 ops/s
[info]                  ·gc.alloc.rate:               551.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          1618.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1957.607 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 540207.557 ops/s
[info]                  ·gc.alloc.rate:                   556.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1621.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1944.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 540317.122 ops/s
[info]                  ·gc.alloc.rate:               554.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          1615.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1946.191 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 530306.425 ops/s
[info]                  ·gc.alloc.rate:               555.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1982.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   535933.036 ±(99.9%) 17595.090 ops/s [Average]
[info]   (min, avg, max) = (530306.425, 535933.036, 540317.122), stdev = 4569.389
[info]   CI (99.9%): [518337.946, 553528.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   548.689 ±(99.9%) 51.469 MB/sec [Average]
[info]   (min, avg, max) = (524.991, 548.689, 556.710), stdev = 13.366
[info]   CI (99.9%): [497.220, 600.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1611.175 ±(99.9%) 136.452 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1611.175, 1647.670), stdev = 35.436
[info]   CI (99.9%): [1474.723, 1747.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.248 ±(99.9%) 1150.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.248, 668.145), stdev = 298.654
[info]   CI (99.9%): [≈ 0, 1684.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1566.273 ±(99.9%) 3372.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1566.273, 1982.948), stdev = 875.707
[info]   CI (99.9%): [≈ 0, 4938.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 737329.974 ops/s
[info] # Warmup Iteration   2: 1101131.188 ops/s
[info] # Warmup Iteration   3: 1136525.028 ops/s
[info] # Warmup Iteration   4: 1153638.442 ops/s
[info] # Warmup Iteration   5: 1169144.057 ops/s
[info] Iteration   1: 1166196.383 ops/s
[info]                  ·gc.alloc.rate:               888.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          1199.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 906.155 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1162177.684 ops/s
[info]                  ·gc.alloc.rate:                   898.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              1217.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1819.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1165668.196 ops/s
[info]                  ·gc.alloc.rate:               881.597 MB/sec
[info]                  ·gc.alloc.rate.norm:          1189.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 906.307 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1127704.850 ops/s
[info]                  ·gc.alloc.rate:               875.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          1221.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 938.072 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1167278.812 ops/s
[info]                  ·gc.alloc.rate:                   892.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1203.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     906.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1157805.185 ±(99.9%) 65209.541 ops/s [Average]
[info]   (min, avg, max) = (1127704.850, 1157805.185, 1167278.812), stdev = 16934.711
[info]   CI (99.9%): [1092595.644, 1223014.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   887.388 ±(99.9%) 35.817 MB/sec [Average]
[info]   (min, avg, max) = (875.174, 887.388, 898.979), stdev = 9.302
[info]   CI (99.9%): [851.571, 923.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1206.051 ±(99.9%) 50.551 B/op [Average]
[info]   (min, avg, max) = (1189.453, 1206.051, 1221.134), stdev = 13.128
[info]   CI (99.9%): [1155.500, 1256.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.306 ±(99.9%) 1156.607 MB/sec [Average]
[info]   (min, avg, max) = (671.460, 806.306, 1343.619), stdev = 300.367
[info]   CI (99.9%): [≈ 0, 1962.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1095.280 ±(99.9%) 1560.026 B/op [Average]
[info]   (min, avg, max) = (906.155, 1095.280, 1819.586), stdev = 405.134
[info]   CI (99.9%): [≈ 0, 2655.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 801598.472 ops/s
[info] # Warmup Iteration   2: 1226555.963 ops/s
[info] # Warmup Iteration   3: 1287090.831 ops/s
[info] # Warmup Iteration   4: 1285241.687 ops/s
[info] # Warmup Iteration   5: 1286303.438 ops/s
[info] Iteration   1: 1285913.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1286308.102 ops/s
[info]                  ·gc.alloc.rate:      0.097 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.119 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1265863.421 ops/s
[info]                  ·gc.alloc.rate:      7.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 9.181 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1286841.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1286435.417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1282272.302 ±(99.9%) 35344.360 ops/s [Average]
[info]   (min, avg, max) = (1265863.421, 1282272.302, 1286841.215), stdev = 9178.818
[info]   CI (99.9%): [1246927.942, 1317616.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.497 ±(99.9%) 12.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.497, 7.385), stdev = 3.292
[info]   CI (99.9%): [≈ 0, 14.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.860 ±(99.9%) 15.761 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.860, 9.181), stdev = 4.093
[info]   CI (99.9%): [≈ 0, 17.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95990.365 ops/s
[info] # Warmup Iteration   2: 348359.768 ops/s
[info] # Warmup Iteration   3: 333371.290 ops/s
[info] # Warmup Iteration   4: 360903.557 ops/s
[info] # Warmup Iteration   5: 358203.385 ops/s
[info] Iteration   1: 360756.042 ops/s
[info]                  ·gc.alloc.rate:                   1020.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              4450.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5794.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 361094.981 ops/s
[info]                  ·gc.alloc.rate:               999.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          4357.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2894.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 361853.167 ops/s
[info]                  ·gc.alloc.rate:                   1012.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              4403.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5780.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 362469.371 ops/s
[info]                  ·gc.alloc.rate:               1012.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          4394.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2888.165 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 363069.657 ops/s
[info]                  ·gc.alloc.rate:               1001.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          4340.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2883.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   361848.644 ±(99.9%) 3672.261 ops/s [Average]
[info]   (min, avg, max) = (360756.042, 361848.644, 363069.657), stdev = 953.675
[info]   CI (99.9%): [358176.382, 365520.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1009.130 ±(99.9%) 32.918 MB/sec [Average]
[info]   (min, avg, max) = (999.749, 1009.130, 1020.170), stdev = 8.549
[info]   CI (99.9%): [976.212, 1042.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4389.122 ±(99.9%) 165.137 B/op [Average]
[info]   (min, avg, max) = (4340.027, 4389.122, 4450.125), stdev = 42.885
[info]   CI (99.9%): [4223.986, 4554.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   930.384 ±(99.9%) 1400.243 MB/sec [Average]
[info]   (min, avg, max) = (664.142, 930.384, 1328.994), stdev = 363.639
[info]   CI (99.9%): [≈ 0, 2330.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4048.273 ±(99.9%) 6113.910 B/op [Average]
[info]   (min, avg, max) = (2883.321, 4048.273, 5794.956), stdev = 1587.763
[info]   CI (99.9%): [≈ 0, 10162.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.187), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.182 ±(99.9%) 1.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.817), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 1.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171.496 ops/s
[info] # Warmup Iteration   2: 502.300 ops/s
[info] # Warmup Iteration   3: 605.052 ops/s
[info] # Warmup Iteration   4: 604.996 ops/s
[info] # Warmup Iteration   5: 605.090 ops/s
[info] Iteration   1: 604.370 ops/s
[info]                  ·gc.alloc.rate:               1291.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          3363338.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3483698.777 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 605.184 ops/s
[info]                  ·gc.alloc.rate:               1287.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          3346394.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3477950.099 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 607.150 ops/s
[info]                  ·gc.alloc.rate:                   1289.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              3341131.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3466509.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 602.274 ops/s
[info]                  ·gc.alloc.rate:                   1291.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              3373197.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3495253.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14128.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 595.791 ops/s
[info]                  ·gc.alloc.rate:                   1289.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              3407179.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3522230.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 384.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   602.954 ±(99.9%) 16.824 ops/s [Average]
[info]   (min, avg, max) = (595.791, 602.954, 607.150), stdev = 4.369
[info]   CI (99.9%): [586.130, 619.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1290.031 ±(99.9%) 6.715 MB/sec [Average]
[info]   (min, avg, max) = (1287.481, 1290.031, 1291.908), stdev = 1.744
[info]   CI (99.9%): [1283.316, 1296.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3366248.418 ±(99.9%) 101096.405 B/op [Average]
[info]   (min, avg, max) = (3341131.474, 3366248.418, 3407179.960), stdev = 26254.415
[info]   CI (99.9%): [3265152.013, 3467344.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.135 ±(99.9%) 8.014 MB/sec [Average]
[info]   (min, avg, max) = (1333.415, 1337.135, 1338.140), stdev = 2.081
[info]   CI (99.9%): [1329.120, 1345.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3489128.361 ±(99.9%) 81668.376 B/op [Average]
[info]   (min, avg, max) = (3466509.474, 3489128.361, 3522230.121), stdev = 21209.018
[info]   CI (99.9%): [3407459.984, 3570796.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.119 ±(99.9%) 9.237 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.119, 5.409), stdev = 2.399
[info]   CI (99.9%): [≈ 0, 10.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2924.294 ±(99.9%) 24126.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2924.294, 14128.823), stdev = 6265.498
[info]   CI (99.9%): [≈ 0, 27050.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170.686 ops/s
[info] # Warmup Iteration   2: 474.316 ops/s
[info] # Warmup Iteration   3: 589.047 ops/s
[info] # Warmup Iteration   4: 592.325 ops/s
[info] # Warmup Iteration   5: 596.460 ops/s
[info] Iteration   1: 598.076 ops/s
[info]                  ·gc.alloc.rate:                   1270.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              3341511.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3504589.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 596.069 ops/s
[info]                  ·gc.alloc.rate:               1262.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          3331717.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3516330.238 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 602.135 ops/s
[info]                  ·gc.alloc.rate:                   1257.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284876.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1742409.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 599.879 ops/s
[info]                  ·gc.alloc.rate:                   1265.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              3321055.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3502243.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13926.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 590.310 ops/s
[info]                  ·gc.alloc.rate:                   1276.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              3401173.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3548480.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1497.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   597.294 ±(99.9%) 17.329 ops/s [Average]
[info]   (min, avg, max) = (590.310, 597.294, 602.135), stdev = 4.500
[info]   CI (99.9%): [579.965, 614.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1266.446 ±(99.9%) 27.803 MB/sec [Average]
[info]   (min, avg, max) = (1257.335, 1266.446, 1276.154), stdev = 7.220
[info]   CI (99.9%): [1238.643, 1294.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3336066.980 ±(99.9%) 162609.496 B/op [Average]
[info]   (min, avg, max) = (3284876.896, 3336066.980, 3401173.726), stdev = 42229.170
[info]   CI (99.9%): [3173457.484, 3498676.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1199.623 ±(99.9%) 1146.667 MB/sec [Average]
[info]   (min, avg, max) = (666.933, 1199.623, 1334.956), stdev = 297.786
[info]   CI (99.9%): [52.956, 2346.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3162810.812 ±(99.9%) 3058344.371 B/op [Average]
[info]   (min, avg, max) = (1742409.871, 3162810.812, 3548480.541), stdev = 794242.321
[info]   CI (99.9%): [104466.440, 6221155.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.191 ±(99.9%) 8.909 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.191, 5.308), stdev = 2.314
[info]   CI (99.9%): [≈ 0, 10.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3128.301 ±(99.9%) 23365.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3128.301, 13926.400), stdev = 6067.909
[info]   CI (99.9%): [≈ 0, 26493.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 9.000), stdev = 2.881
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18942.594 ops/s
[info] # Warmup Iteration   2: 41425.690 ops/s
[info] # Warmup Iteration   3: 42055.546 ops/s
[info] # Warmup Iteration   4: 42157.856 ops/s
[info] # Warmup Iteration   5: 42633.567 ops/s
[info] Iteration   1: 43221.574 ops/s
[info]                  ·gc.alloc.rate:                   724.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              26394.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24402.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 42505.735 ops/s
[info]                  ·gc.alloc.rate:               720.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          26680.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24813.988 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 42594.772 ops/s
[info]                  ·gc.alloc.rate:                   718.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              26533.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24760.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.769 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42296.275 ops/s
[info]                  ·gc.alloc.rate:               712.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          26505.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24935.996 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 42304.452 ops/s
[info]                  ·gc.alloc.rate:                   709.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              26388.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24931.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   42584.562 ±(99.9%) 1458.263 ops/s [Average]
[info]   (min, avg, max) = (42296.275, 42584.562, 43221.574), stdev = 378.706
[info]   CI (99.9%): [41126.298, 44042.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   717.050 ±(99.9%) 24.154 MB/sec [Average]
[info]   (min, avg, max) = (709.264, 717.050, 724.848), stdev = 6.273
[info]   CI (99.9%): [692.896, 741.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26500.435 ±(99.9%) 460.802 B/op [Average]
[info]   (min, avg, max) = (26388.077, 26500.435, 26680.350), stdev = 119.669
[info]   CI (99.9%): [26039.633, 26961.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.166 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (670.108, 670.166, 670.240), stdev = 0.048
[info]   CI (99.9%): [669.981, 670.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24769.045 ±(99.9%) 839.857 B/op [Average]
[info]   (min, avg, max) = (24402.976, 24769.045, 24935.996), stdev = 218.108
[info]   CI (99.9%): [23929.189, 25608.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.460 ±(99.9%) 1.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 0.774), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 2.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151.670 ops/s
[info] # Warmup Iteration   2: 420.284 ops/s
[info] # Warmup Iteration   3: 580.302 ops/s
[info] # Warmup Iteration   4: 590.658 ops/s
[info] # Warmup Iteration   5: 595.096 ops/s
[info] Iteration   1: 587.066 ops/s
[info]                  ·gc.alloc.rate:               1300.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          3484382.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3571934.912 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 595.587 ops/s
[info]                  ·gc.alloc.rate:                   1298.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              3430287.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3525748.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 597.006 ops/s
[info]                  ·gc.alloc.rate:               1298.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          3421304.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3517463.973 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 594.891 ops/s
[info]                  ·gc.alloc.rate:                   1293.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              3420629.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3529267.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14459.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 594.037 ops/s
[info]                  ·gc.alloc.rate:                   1299.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              3440243.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1760550.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 660.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   593.718 ±(99.9%) 14.917 ops/s [Average]
[info]   (min, avg, max) = (587.066, 593.718, 597.006), stdev = 3.874
[info]   CI (99.9%): [578.801, 608.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1298.071 ±(99.9%) 9.763 MB/sec [Average]
[info]   (min, avg, max) = (1293.797, 1298.071, 1300.517), stdev = 2.535
[info]   CI (99.9%): [1288.308, 1307.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3439369.606 ±(99.9%) 101641.524 B/op [Average]
[info]   (min, avg, max) = (3420629.557, 3439369.606, 3484382.952), stdev = 26395.981
[info]   CI (99.9%): [3337728.082, 3541011.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1200.488 ±(99.9%) 1153.022 MB/sec [Average]
[info]   (min, avg, max) = (664.843, 1200.488, 1335.028), stdev = 299.436
[info]   CI (99.9%): [47.467, 2353.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3180993.111 ±(99.9%) 3058692.248 B/op [Average]
[info]   (min, avg, max) = (1760550.292, 3180993.111, 3571934.912), stdev = 794332.663
[info]   CI (99.9%): [122300.863, 6239685.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.156 ±(99.9%) 9.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.156, 5.469), stdev = 2.413
[info]   CI (99.9%): [≈ 0, 10.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3057.102 ±(99.9%) 24567.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3057.102, 14459.705), stdev = 6380.001
[info]   CI (99.9%): [≈ 0, 27624.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 9.000), stdev = 2.775
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3231.843 ops/s
[info] # Warmup Iteration   2: 14260.011 ops/s
[info] # Warmup Iteration   3: 14452.100 ops/s
[info] # Warmup Iteration   4: 14755.196 ops/s
[info] # Warmup Iteration   5: 14949.810 ops/s
[info] Iteration   1: 14716.976 ops/s
[info]                  ·gc.alloc.rate:                   1185.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              126798.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142657.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 14865.274 ops/s
[info]                  ·gc.alloc.rate:                   1186.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              125660.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141288.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 14661.199 ops/s
[info]                  ·gc.alloc.rate:               1178.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          126555.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143325.646 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 14881.920 ops/s
[info]                  ·gc.alloc.rate:               1181.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          124958.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70621.259 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 14926.998 ops/s
[info]                  ·gc.alloc.rate:                   1199.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              126435.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140887.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14810.473 ±(99.9%) 442.031 ops/s [Average]
[info]   (min, avg, max) = (14661.199, 14810.473, 14926.998), stdev = 114.794
[info]   CI (99.9%): [14368.443, 15252.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1186.522 ±(99.9%) 30.420 MB/sec [Average]
[info]   (min, avg, max) = (1178.934, 1186.522, 1199.451), stdev = 7.900
[info]   CI (99.9%): [1156.102, 1216.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126081.435 ±(99.9%) 2921.236 B/op [Average]
[info]   (min, avg, max) = (124958.219, 126081.435, 126798.363), stdev = 758.636
[info]   CI (99.9%): [123160.199, 129002.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1201.606 ±(99.9%) 1149.049 MB/sec [Average]
[info]   (min, avg, max) = (667.807, 1201.606, 1336.553), stdev = 298.404
[info]   CI (99.9%): [52.557, 2350.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127756.001 ±(99.9%) 123046.018 B/op [Average]
[info]   (min, avg, max) = (70621.259, 127756.001, 143325.646), stdev = 31954.660
[info]   CI (99.9%): [4709.983, 250802.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.166 ±(99.9%) 9.905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.166, 5.767), stdev = 2.572
[info]   CI (99.9%): [≈ 0, 11.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   122.922 ±(99.9%) 1044.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.922, 607.953), stdev = 271.147
[info]   CI (99.9%): [≈ 0, 1167.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4577.854 ops/s
[info] # Warmup Iteration   2: 15903.869 ops/s
[info] # Warmup Iteration   3: 17827.257 ops/s
[info] # Warmup Iteration   4: 18336.246 ops/s
[info] # Warmup Iteration   5: 18323.595 ops/s
[info] Iteration   1: 18298.907 ops/s
[info]                  ·gc.alloc.rate:                   1124.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              96702.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114636.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18325.914 ops/s
[info]                  ·gc.alloc.rate:               1108.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          95232.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57262.661 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 18335.800 ops/s
[info]                  ·gc.alloc.rate:                   1126.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              96691.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114520.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17752.457 ops/s
[info]                  ·gc.alloc.rate:                   1065.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              94392.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59176.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.846 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18369.754 ops/s
[info]                  ·gc.alloc.rate:                   1126.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              96462.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114428.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 401.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18216.566 ±(99.9%) 1003.789 ops/s [Average]
[info]   (min, avg, max) = (17752.457, 18216.566, 18369.754), stdev = 260.681
[info]   CI (99.9%): [17212.777, 19220.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1110.206 ±(99.9%) 100.979 MB/sec [Average]
[info]   (min, avg, max) = (1065.135, 1110.206, 1126.516), stdev = 26.224
[info]   CI (99.9%): [1009.228, 1211.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   95896.445 ±(99.9%) 3993.957 B/op [Average]
[info]   (min, avg, max) = (94392.843, 95896.445, 96702.749), stdev = 1037.218
[info]   CI (99.9%): [91902.488, 99890.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.492 ±(99.9%) 1406.822 MB/sec [Average]
[info]   (min, avg, max) = (666.804, 1067.492, 1335.756), stdev = 365.347
[info]   CI (99.9%): [≈ 0, 2474.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92004.875 ±(99.9%) 118789.535 B/op [Average]
[info]   (min, avg, max) = (57262.661, 92004.875, 114636.976), stdev = 30849.265
[info]   CI (99.9%): [≈ 0, 210794.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.684), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81.699 ±(99.9%) 687.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.699, 401.284), stdev = 178.658
[info]   CI (99.9%): [≈ 0, 769.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:42:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123759.038 ops/s
[info] # Warmup Iteration   2: 202960.215 ops/s
[info] # Warmup Iteration   3: 208396.710 ops/s
[info] # Warmup Iteration   4: 209660.763 ops/s
[info] # Warmup Iteration   5: 210464.603 ops/s
[info] Iteration   1: 211144.559 ops/s
[info]                  ·gc.alloc.rate:                   779.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              5809.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4995.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 212785.043 ops/s
[info]                  ·gc.alloc.rate:                   812.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9913.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 212062.062 ops/s
[info]                  ·gc.alloc.rate:               784.637 MB/sec
[info]                  ·gc.alloc.rate.norm:          5823.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4973.725 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 212069.112 ops/s
[info]                  ·gc.alloc.rate:               784.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          5822.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4973.350 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 209509.102 ops/s
[info]                  ·gc.alloc.rate:                   775.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              5822.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5039.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   211513.976 ±(99.9%) 4863.172 ops/s [Average]
[info]   (min, avg, max) = (209509.102, 211513.976, 212785.043), stdev = 1262.950
[info]   CI (99.9%): [206650.803, 216377.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   787.220 ±(99.9%) 56.442 MB/sec [Average]
[info]   (min, avg, max) = (775.127, 787.220, 812.465), stdev = 14.658
[info]   CI (99.9%): [730.778, 843.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5857.286 ±(99.9%) 325.803 B/op [Average]
[info]   (min, avg, max) = (5809.479, 5857.286, 6008.282), stdev = 84.610
[info]   CI (99.9%): [5531.483, 6183.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.341 ±(99.9%) 1154.197 MB/sec [Average]
[info]   (min, avg, max) = (670.108, 804.341, 1340.535), stdev = 299.741
[info]   CI (99.9%): [≈ 0, 1958.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5978.954 ±(99.9%) 8469.867 B/op [Average]
[info]   (min, avg, max) = (4973.350, 5978.954, 9913.422), stdev = 2199.598
[info]   CI (99.9%): [≈ 0, 14448.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.155 ±(99.9%) 0.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.313), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120182.085 ops/s
[info] # Warmup Iteration   2: 216742.539 ops/s
[info] # Warmup Iteration   3: 230163.012 ops/s
[info] # Warmup Iteration   4: 228593.112 ops/s
[info] # Warmup Iteration   5: 229810.473 ops/s
[info] Iteration   1: 230734.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 229300.522 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 229621.729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 229426.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 230249.309 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   229866.470 ±(99.9%) 2337.365 ops/s [Average]
[info]   (min, avg, max) = (229300.522, 229866.470, 230734.436), stdev = 607.006
[info]   CI (99.9%): [227529.105, 232203.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3405.888 ops/s
[info] # Warmup Iteration   2: 15982.983 ops/s
[info] # Warmup Iteration   3: 16905.991 ops/s
[info] # Warmup Iteration   4: 17141.634 ops/s
[info] # Warmup Iteration   5: 17081.914 ops/s
[info] Iteration   1: 17151.280 ops/s
[info]                  ·gc.alloc.rate:                   1119.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              102696.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122186.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 17177.203 ops/s
[info]                  ·gc.alloc.rate:               1100.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          100806.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61031.139 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 17061.926 ops/s
[info]                  ·gc.alloc.rate:                   1125.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              103787.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122953.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17209.072 ops/s
[info]                  ·gc.alloc.rate:               1106.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          101150.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60982.139 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17189.269 ops/s
[info]                  ·gc.alloc.rate:                   1108.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              101504.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122160.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 503.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   17157.750 ±(99.9%) 221.452 ops/s [Average]
[info]   (min, avg, max) = (17061.926, 17157.750, 17209.072), stdev = 57.510
[info]   CI (99.9%): [16936.298, 17379.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1111.835 ±(99.9%) 38.982 MB/sec [Average]
[info]   (min, avg, max) = (1100.198, 1111.835, 1125.102), stdev = 10.124
[info]   CI (99.9%): [1072.853, 1150.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   101989.204 ±(99.9%) 4743.451 B/op [Average]
[info]   (min, avg, max) = (100806.323, 101989.204, 103787.055), stdev = 1231.859
[info]   CI (99.9%): [97245.753, 106732.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1066.323 ±(99.9%) 1405.621 MB/sec [Average]
[info]   (min, avg, max) = (666.092, 1066.323, 1334.229), stdev = 365.035
[info]   CI (99.9%): [≈ 0, 2471.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   97862.585 ±(99.9%) 129559.673 B/op [Average]
[info]   (min, avg, max) = (60982.139, 97862.585, 122953.447), stdev = 33646.236
[info]   CI (99.9%): [≈ 0, 227422.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.107 ±(99.9%) 9.446 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.107, 5.495), stdev = 2.453
[info]   CI (99.9%): [≈ 0, 10.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   101.397 ±(99.9%) 864.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.397, 503.155), stdev = 224.592
[info]   CI (99.9%): [≈ 0, 966.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964256.100 ops/s
[info] # Warmup Iteration   2: 1462564.259 ops/s
[info] # Warmup Iteration   3: 1558580.052 ops/s
[info] # Warmup Iteration   4: 1556329.529 ops/s
[info] # Warmup Iteration   5: 1559297.359 ops/s
[info] Iteration   1: 1514677.041 ops/s
[info]                  ·gc.alloc.rate:               75.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          78.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 531.606 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1556844.437 ops/s
[info]                  ·gc.alloc.rate:      64.869 MB/sec
[info]                  ·gc.alloc.rate.norm: 65.578 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1559253.961 ops/s
[info]                  ·gc.alloc.rate:      63.408 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1560018.061 ops/s
[info]                  ·gc.alloc.rate:      63.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1541960.077 ops/s
[info]                  ·gc.alloc.rate:      62.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1546550.715 ±(99.9%) 74211.301 ops/s [Average]
[info]   (min, avg, max) = (1514677.041, 1546550.715, 1560018.061), stdev = 19272.439
[info]   CI (99.9%): [1472339.415, 1620762.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   66.033 ±(99.9%) 21.135 MB/sec [Average]
[info]   (min, avg, max) = (62.702, 66.033, 75.750), stdev = 5.489
[info]   CI (99.9%): [44.898, 87.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   67.257 ±(99.9%) 24.786 B/op [Average]
[info]   (min, avg, max) = (64.000, 67.257, 78.706), stdev = 6.437
[info]   CI (99.9%): [42.471, 92.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.328 ±(99.9%) 881.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.328, 511.638), stdev = 228.812
[info]   CI (99.9%): [≈ 0, 983.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   106.321 ±(99.9%) 915.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.321, 531.606), stdev = 237.741
[info]   CI (99.9%): [≈ 0, 1021.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8304.821 ops/s
[info] # Warmup Iteration   2: 64736.306 ops/s
[info] # Warmup Iteration   3: 77825.236 ops/s
[info] # Warmup Iteration   4: 78473.841 ops/s
[info] # Warmup Iteration   5: 78100.224 ops/s
[info] Iteration   1: 78412.910 ops/s
[info]                  ·gc.alloc.rate:               3323.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          66695.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67459.646 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 77487.102 ops/s
[info]                  ·gc.alloc.rate:                   3327.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              67564.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68523.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 77545.473 ops/s
[info]                  ·gc.alloc.rate:               3301.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          67008.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54942.019 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 78156.139 ops/s
[info]                  ·gc.alloc.rate:               3355.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          67567.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3390.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68277.496 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 77615.694 ops/s
[info]                  ·gc.alloc.rate:                   3332.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              67578.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68864.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.844 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   77843.464 ±(99.9%) 1598.952 ops/s [Average]
[info]   (min, avg, max) = (77487.102, 77843.464, 78412.910), stdev = 415.243
[info]   CI (99.9%): [76244.511, 79442.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3328.083 ±(99.9%) 73.892 MB/sec [Average]
[info]   (min, avg, max) = (3301.788, 3328.083, 3355.289), stdev = 19.190
[info]   CI (99.9%): [3254.191, 3401.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67283.074 ±(99.9%) 1574.833 B/op [Average]
[info]   (min, avg, max) = (66695.065, 67283.074, 67578.839), stdev = 408.979
[info]   CI (99.9%): [65708.241, 68857.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3245.955 ±(99.9%) 1160.847 MB/sec [Average]
[info]   (min, avg, max) = (2707.215, 3245.955, 3395.986), stdev = 301.468
[info]   CI (99.9%): [2085.108, 4406.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65613.368 ±(99.9%) 23057.334 B/op [Average]
[info]   (min, avg, max) = (54942.019, 65613.368, 68864.046), stdev = 5987.916
[info]   CI (99.9%): [42556.034, 88670.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.253 ±(99.9%) 1.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.253, 0.844), stdev = 0.378
[info]   CI (99.9%): [≈ 0, 1.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571642.688 ops/s
[info] # Warmup Iteration   2: 1794120.338 ops/s
[info] # Warmup Iteration   3: 1874697.218 ops/s
[info] # Warmup Iteration   4: 1867712.166 ops/s
[info] # Warmup Iteration   5: 1863343.251 ops/s
[info] Iteration   1: 1843238.286 ops/s
[info]                  ·gc.alloc.rate:                   1004.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1139.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1810701.908 ops/s
[info]                  ·gc.alloc.rate:               973.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          846.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 580.755 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1866591.963 ops/s
[info]                  ·gc.alloc.rate:                   1008.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              850.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1127.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1873180.143 ops/s
[info]                  ·gc.alloc.rate:                   994.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              835.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1862011.026 ops/s
[info]                  ·gc.alloc.rate:               1028.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          868.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1131.746 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1851144.665 ±(99.9%) 97040.554 ops/s [Average]
[info]   (min, avg, max) = (1810701.908, 1851144.665, 1873180.143), stdev = 25201.124
[info]   CI (99.9%): [1754104.111, 1948185.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1001.818 ±(99.9%) 76.441 MB/sec [Average]
[info]   (min, avg, max) = (973.685, 1001.818, 1028.016), stdev = 19.852
[info]   CI (99.9%): [925.377, 1078.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   851.667 ±(99.9%) 47.428 B/op [Average]
[info]   (min, avg, max) = (835.859, 851.667, 868.944), stdev = 12.317
[info]   CI (99.9%): [804.239, 899.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.700 ±(99.9%) 1410.297 MB/sec [Average]
[info]   (min, avg, max) = (668.188, 1069.700, 1338.928), stdev = 366.250
[info]   CI (99.9%): [≈ 0, 2479.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   908.322 ±(99.9%) 1184.935 B/op [Average]
[info]   (min, avg, max) = (561.930, 908.322, 1139.890), stdev = 307.724
[info]   CI (99.9%): [≈ 0, 2093.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.036), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1083679.683 ops/s
[info] # Warmup Iteration   2: 2158184.157 ops/s
[info] # Warmup Iteration   3: 2182384.582 ops/s
[info] # Warmup Iteration   4: 2149060.106 ops/s
[info] # Warmup Iteration   5: 2131837.591 ops/s
[info] Iteration   1: 2254193.775 ops/s
[info]                  ·gc.alloc.rate:               643.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          449.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.124 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2255792.016 ops/s
[info]                  ·gc.alloc.rate:               650.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          453.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.792 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2253346.885 ops/s
[info]                  ·gc.alloc.rate:                   644.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2248744.613 ops/s
[info]                  ·gc.alloc.rate:               651.103 MB/sec
[info]                  ·gc.alloc.rate.norm:          455.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.717 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2254431.773 ops/s
[info]                  ·gc.alloc.rate:               646.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          450.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2253301.812 ±(99.9%) 10375.971 ops/s [Average]
[info]   (min, avg, max) = (2248744.613, 2253301.812, 2255792.016), stdev = 2694.607
[info]   CI (99.9%): [2242925.842, 2263677.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   646.990 ±(99.9%) 13.468 MB/sec [Average]
[info]   (min, avg, max) = (643.502, 646.990, 651.103), stdev = 3.498
[info]   CI (99.9%): [633.522, 660.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   451.874 ±(99.9%) 10.524 B/op [Average]
[info]   (min, avg, max) = (449.291, 451.874, 455.701), stdev = 2.733
[info]   CI (99.9%): [441.350, 462.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.047 ±(99.9%) 2.281 MB/sec [Average]
[info]   (min, avg, max) = (670.470, 671.047, 671.872), stdev = 0.592
[info]   CI (99.9%): [668.766, 673.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   468.675 ±(99.9%) 2.905 B/op [Average]
[info]   (min, avg, max) = (467.792, 468.675, 469.717), stdev = 0.754
[info]   CI (99.9%): [465.770, 471.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1083900.207 ops/s
[info] # Warmup Iteration   2: 2285716.988 ops/s
[info] # Warmup Iteration   3: 2393196.869 ops/s
[info] # Warmup Iteration   4: 2393669.419 ops/s
[info] # Warmup Iteration   5: 2389198.905 ops/s
[info] Iteration   1: 2392476.368 ops/s
[info]                  ·gc.alloc.rate:      24.329 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2391532.653 ops/s
[info]                  ·gc.alloc.rate:      24.630 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.205 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2393153.249 ops/s
[info]                  ·gc.alloc.rate:      24.330 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2395780.953 ops/s
[info]                  ·gc.alloc.rate:      24.356 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2394130.376 ops/s
[info]                  ·gc.alloc.rate:      24.338 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2393414.720 ±(99.9%) 6269.066 ops/s [Average]
[info]   (min, avg, max) = (2391532.653, 2393414.720, 2395780.953), stdev = 1628.057
[info]   CI (99.9%): [2387145.653, 2399683.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   24.397 ±(99.9%) 0.504 MB/sec [Average]
[info]   (min, avg, max) = (24.329, 24.397, 24.630), stdev = 0.131
[info]   CI (99.9%): [23.893, 24.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.041 ±(99.9%) 0.353 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.041, 16.205), stdev = 0.092
[info]   CI (99.9%): [15.688, 16.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7697.736 ops/s
[info] # Warmup Iteration   2: 48881.139 ops/s
[info] # Warmup Iteration   3: 50844.202 ops/s
[info] # Warmup Iteration   4: 50634.754 ops/s
[info] # Warmup Iteration   5: 51475.465 ops/s
[info] Iteration   1: 51598.958 ops/s
[info]                  ·gc.alloc.rate:                   2238.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              68278.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61266.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 51484.934 ops/s
[info]                  ·gc.alloc.rate:                   2245.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              68654.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82105.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.636 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 51657.571 ops/s
[info]                  ·gc.alloc.rate:                   2215.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              67467.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61527.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 51878.001 ops/s
[info]                  ·gc.alloc.rate:               2251.208 MB/sec
[info]                  ·gc.alloc.rate.norm:          68285.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61386.713 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 51724.252 ops/s
[info]                  ·gc.alloc.rate:               2244.471 MB/sec
[info]                  ·gc.alloc.rate.norm:          68295.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61668.422 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   51668.743 ±(99.9%) 563.467 ops/s [Average]
[info]   (min, avg, max) = (51484.934, 51668.743, 51878.001), stdev = 146.331
[info]   CI (99.9%): [51105.276, 52232.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2239.014 ±(99.9%) 54.468 MB/sec [Average]
[info]   (min, avg, max) = (2215.026, 2239.014, 2251.208), stdev = 14.145
[info]   CI (99.9%): [2184.545, 2293.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68196.215 ±(99.9%) 1684.890 B/op [Average]
[info]   (min, avg, max) = (67467.133, 68196.215, 68654.037), stdev = 437.561
[info]   CI (99.9%): [66511.325, 69881.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2152.993 ±(99.9%) 1147.298 MB/sec [Average]
[info]   (min, avg, max) = (2008.653, 2152.993, 2685.841), stdev = 297.950
[info]   CI (99.9%): [1005.695, 3300.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65590.997 ±(99.9%) 35553.435 B/op [Average]
[info]   (min, avg, max) = (61266.827, 65590.997, 82105.498), stdev = 9233.114
[info]   CI (99.9%): [30037.562, 101144.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.826 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.500), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.682 ±(99.9%) 25.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.682, 15.238), stdev = 6.543
[info]   CI (99.9%): [≈ 0, 28.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91652.242 ops/s
[info] # Warmup Iteration   2: 608026.335 ops/s
[info] # Warmup Iteration   3: 754107.629 ops/s
[info] # Warmup Iteration   4: 773243.091 ops/s
[info] # Warmup Iteration   5: 763265.763 ops/s
[info] Iteration   1: 776445.687 ops/s
[info]                  ·gc.alloc.rate:                   2507.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              5083.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5438.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 782519.693 ops/s
[info]                  ·gc.alloc.rate:                   2525.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              5077.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5380.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 781565.254 ops/s
[info]                  ·gc.alloc.rate:               2522.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          5080.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4041.864 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 778998.410 ops/s
[info]                  ·gc.alloc.rate:               2541.912 MB/sec
[info]                  ·gc.alloc.rate.norm:          5135.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5417.552 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 781178.253 ops/s
[info]                  ·gc.alloc.rate:               2549.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          5135.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5416.896 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   780141.459 ±(99.9%) 9377.607 ops/s [Average]
[info]   (min, avg, max) = (776445.687, 780141.459, 782519.693), stdev = 2435.335
[info]   CI (99.9%): [770763.852, 789519.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2529.423 ±(99.9%) 63.279 MB/sec [Average]
[info]   (min, avg, max) = (2507.929, 2529.423, 2549.409), stdev = 16.433
[info]   CI (99.9%): [2466.144, 2592.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5102.405 ±(99.9%) 116.459 B/op [Average]
[info]   (min, avg, max) = (5077.376, 5102.405, 5135.668), stdev = 30.244
[info]   CI (99.9%): [4985.947, 5218.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2547.368 ±(99.9%) 1162.974 MB/sec [Average]
[info]   (min, avg, max) = (2007.165, 2547.368, 2689.242), stdev = 302.021
[info]   CI (99.9%): [1384.393, 3710.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5139.120 ±(99.9%) 2363.307 B/op [Average]
[info]   (min, avg, max) = (4041.864, 5139.120, 5438.822), stdev = 613.743
[info]   CI (99.9%): [2775.813, 7502.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.872), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 7.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.578 ±(99.9%) 13.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.578, 7.848), stdev = 3.505
[info]   CI (99.9%): [≈ 0, 15.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.624 ops/s
[info] # Warmup Iteration   2: 4555987.592 ops/s
[info] # Warmup Iteration   3: 5114046.874 ops/s
[info] # Warmup Iteration   4: 5042920.542 ops/s
[info] # Warmup Iteration   5: 4800624.365 ops/s
[info] Iteration   1: 5173566.260 ops/s
[info]                  ·gc.alloc.rate:      315.570 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5149698.747 ops/s
[info]                  ·gc.alloc.rate:               331.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          101.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5175414.701 ops/s
[info]                  ·gc.alloc.rate:      323.461 MB/sec
[info]                  ·gc.alloc.rate.norm: 98.358 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5157034.931 ops/s
[info]                  ·gc.alloc.rate:               337.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          103.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 203.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5177984.061 ops/s
[info]                  ·gc.alloc.rate:      315.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5166739.740 ±(99.9%) 48435.140 ops/s [Average]
[info]   (min, avg, max) = (5149698.747, 5166739.740, 5177984.061), stdev = 12578.452
[info]   CI (99.9%): [5118304.600, 5215174.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   324.838 ±(99.9%) 37.609 MB/sec [Average]
[info]   (min, avg, max) = (315.570, 324.838, 337.872), stdev = 9.767
[info]   CI (99.9%): [287.228, 362.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.942 ±(99.9%) 12.218 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.942, 103.096), stdev = 3.173
[info]   CI (99.9%): [86.724, 111.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.473 ±(99.9%) 1259.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.473, 665.596), stdev = 326.989
[info]   CI (99.9%): [≈ 0, 1494.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   71.891 ±(99.9%) 384.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.891, 203.096), stdev = 99.818
[info]   CI (99.9%): [≈ 0, 456.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43011.205 ops/s
[info] # Warmup Iteration   2: 838042.109 ops/s
[info] # Warmup Iteration   3: 999580.722 ops/s
[info] # Warmup Iteration   4: 1003513.640 ops/s
[info] # Warmup Iteration   5: 1007377.747 ops/s
[info] Iteration   1: 1007631.356 ops/s
[info]                  ·gc.alloc.rate:                   1193.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              1864.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2084.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1012788.464 ops/s
[info]                  ·gc.alloc.rate:               1183.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          1839.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1037.250 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1009420.522 ops/s
[info]                  ·gc.alloc.rate:                   1184.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1846.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2083.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1009040.509 ops/s
[info]                  ·gc.alloc.rate:                   1181.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1843.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2086.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1010085.943 ops/s
[info]                  ·gc.alloc.rate:                   1194.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              1861.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2085.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1009793.359 ±(99.9%) 7315.288 ops/s [Average]
[info]   (min, avg, max) = (1007631.356, 1009793.359, 1012788.464), stdev = 1899.757
[info]   CI (99.9%): [1002478.071, 1017108.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1187.742 ±(99.9%) 22.795 MB/sec [Average]
[info]   (min, avg, max) = (1181.995, 1187.742, 1194.489), stdev = 5.920
[info]   CI (99.9%): [1164.947, 1210.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1850.970 ±(99.9%) 43.356 B/op [Average]
[info]   (min, avg, max) = (1839.353, 1850.970, 1864.668), stdev = 11.259
[info]   CI (99.9%): [1807.614, 1894.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.024 ±(99.9%) 1152.646 MB/sec [Average]
[info]   (min, avg, max) = (667.557, 1203.024, 1338.344), stdev = 299.339
[info]   CI (99.9%): [50.378, 2355.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1875.392 ±(99.9%) 1804.169 B/op [Average]
[info]   (min, avg, max) = (1037.250, 1875.392, 2086.323), stdev = 468.537
[info]   CI (99.9%): [71.224, 3679.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.876 ±(99.9%) 7.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.876, 4.288), stdev = 1.908
[info]   CI (99.9%): [≈ 0, 8.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.366 ±(99.9%) 11.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.366, 6.682), stdev = 2.972
[info]   CI (99.9%): [≈ 0, 12.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3048215.904 ops/s
[info] # Warmup Iteration   2: 8487075.817 ops/s
[info] # Warmup Iteration   3: 9167699.173 ops/s
[info] # Warmup Iteration   4: 9181672.540 ops/s
[info] # Warmup Iteration   5: 9217257.670 ops/s
[info] Iteration   1: 9199556.687 ops/s
[info]                  ·gc.alloc.rate:                   436.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9179638.778 ops/s
[info]                  ·gc.alloc.rate:               435.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87.717 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9109892.616 ops/s
[info]                  ·gc.alloc.rate:                   434.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9212093.978 ops/s
[info]                  ·gc.alloc.rate:      421.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9192711.914 ops/s
[info]                  ·gc.alloc.rate:               435.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9178778.795 ±(99.9%) 155006.943 ops/s [Average]
[info]   (min, avg, max) = (9109892.616, 9178778.795, 9212093.978), stdev = 40254.811
[info]   CI (99.9%): [9023771.851, 9333785.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   432.725 ±(99.9%) 24.401 MB/sec [Average]
[info]   (min, avg, max) = (421.444, 432.725, 436.521), stdev = 6.337
[info]   CI (99.9%): [408.324, 457.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.193 ±(99.9%) 4.791 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.193, 75.091), stdev = 1.244
[info]   CI (99.9%): [69.402, 78.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.436 ±(99.9%) 1064.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.436, 672.084), stdev = 276.538
[info]   CI (99.9%): [≈ 0, 1538.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81.266 ±(99.9%) 183.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.266, 116.063), stdev = 47.527
[info]   CI (99.9%): [≈ 0, 264.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8181.825 ops/s
[info] # Warmup Iteration   2: 290389.939 ops/s
[info] # Warmup Iteration   3: 427929.001 ops/s
[info] # Warmup Iteration   4: 451918.584 ops/s
[info] # Warmup Iteration   5: 450763.866 ops/s
[info] Iteration   1: 453862.099 ops/s
[info]                  ·gc.alloc.rate:                   2116.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              7338.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6958.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 451777.863 ops/s
[info]                  ·gc.alloc.rate:                   2097.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              7307.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7007.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 454479.731 ops/s
[info]                  ·gc.alloc.rate:                   2121.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              7347.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6971.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 452304.717 ops/s
[info]                  ·gc.alloc.rate:               2112.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          7350.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7016.607 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 453849.377 ops/s
[info]                  ·gc.alloc.rate:                   2131.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              7390.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7005.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   453254.757 ±(99.9%) 4435.262 ops/s [Average]
[info]   (min, avg, max) = (451777.863, 453254.757, 454479.731), stdev = 1151.824
[info]   CI (99.9%): [448819.495, 457690.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2115.941 ±(99.9%) 48.163 MB/sec [Average]
[info]   (min, avg, max) = (2097.488, 2115.941, 2131.380), stdev = 12.508
[info]   CI (99.9%): [2067.778, 2164.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7346.946 ±(99.9%) 115.290 B/op [Average]
[info]   (min, avg, max) = (7307.031, 7346.946, 7390.638), stdev = 29.941
[info]   CI (99.9%): [7231.656, 7462.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.642 ±(99.9%) 19.770 MB/sec [Average]
[info]   (min, avg, max) = (2006.694, 2013.642, 2020.210), stdev = 5.134
[info]   CI (99.9%): [1993.873, 2033.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6991.814 ±(99.9%) 97.079 B/op [Average]
[info]   (min, avg, max) = (6958.645, 6991.814, 7016.607), stdev = 25.211
[info]   CI (99.9%): [6894.735, 7088.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.311), stdev = 0.580
[info]   CI (99.9%): [≈ 0, 2.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.957 ±(99.9%) 7.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.957, 4.569), stdev = 2.019
[info]   CI (99.9%): [≈ 0, 8.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491.711 ops/s
[info] # Warmup Iteration   2: 3844.518 ops/s
[info] # Warmup Iteration   3: 3746.038 ops/s
[info] # Warmup Iteration   4: 4350.462 ops/s
[info] # Warmup Iteration   5: 4427.969 ops/s
[info] Iteration   1: 4438.645 ops/s
[info]                  ·gc.alloc.rate:                   2205.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              781879.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711567.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1498.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 4444.715 ops/s
[info]                  ·gc.alloc.rate:                   2232.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              790303.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708484.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4450.082 ops/s
[info]                  ·gc.alloc.rate:                   2221.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              785458.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     706587.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122.927 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4439.781 ops/s
[info]                  ·gc.alloc.rate:                   2229.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              790411.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     944922.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4446.308 ops/s
[info]                  ·gc.alloc.rate:                   2246.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              795067.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709226.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4443.906 ±(99.9%) 18.190 ops/s [Average]
[info]   (min, avg, max) = (4438.645, 4443.906, 4450.082), stdev = 4.724
[info]   CI (99.9%): [4425.716, 4462.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2227.006 ±(99.9%) 58.825 MB/sec [Average]
[info]   (min, avg, max) = (2205.240, 2227.006, 2246.804), stdev = 15.277
[info]   CI (99.9%): [2168.181, 2285.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   788624.063 ±(99.9%) 19544.450 B/op [Average]
[info]   (min, avg, max) = (781879.031, 788624.063, 795067.219), stdev = 5075.632
[info]   CI (99.9%): [769079.613, 808168.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2135.183 ±(99.9%) 1142.042 MB/sec [Average]
[info]   (min, avg, max) = (1998.098, 2135.183, 2665.696), stdev = 296.585
[info]   CI (99.9%): [993.141, 3277.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   756157.799 ±(99.9%) 406388.446 B/op [Average]
[info]   (min, avg, max) = (706587.601, 756157.799, 944922.574), stdev = 105537.789
[info]   CI (99.9%): [349769.354, 1162546.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.010 ±(99.9%) 6.928 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 1.010, 4.226), stdev = 1.799
[info]   CI (99.9%): [≈ 0, 7.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   358.132 ±(99.9%) 2456.557 B/op [Average]
[info]   (min, avg, max) = (51.592, 358.132, 1498.177), stdev = 637.960
[info]   CI (99.9%): [≈ 0, 2814.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 335.830 ops/s
[info] # Warmup Iteration   2: 5536.148 ops/s
[info] # Warmup Iteration   3: 6565.134 ops/s
[info] # Warmup Iteration   4: 6793.095 ops/s
[info] # Warmup Iteration   5: 6762.113 ops/s
[info] Iteration   1: 6777.842 ops/s
[info]                  ·gc.alloc.rate:                   2304.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              535189.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     466291.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.655 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6811.645 ops/s
[info]                  ·gc.alloc.rate:                   2313.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              534533.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464802.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.764 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6808.399 ops/s
[info]                  ·gc.alloc.rate:               2314.060 MB/sec
[info]                  ·gc.alloc.rate.norm:          534873.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 621292.828 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 6820.252 ops/s
[info]                  ·gc.alloc.rate:               2331.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          537960.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 466187.483 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6811.188 ops/s
[info]                  ·gc.alloc.rate:               2328.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          538056.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467572.859 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6805.865 ±(99.9%) 62.696 ops/s [Average]
[info]   (min, avg, max) = (6777.842, 6805.865, 6820.252), stdev = 16.282
[info]   CI (99.9%): [6743.169, 6868.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2318.483 ±(99.9%) 42.839 MB/sec [Average]
[info]   (min, avg, max) = (2304.915, 2318.483, 2331.367), stdev = 11.125
[info]   CI (99.9%): [2275.644, 2361.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   536122.549 ±(99.9%) 6689.399 B/op [Average]
[info]   (min, avg, max) = (534533.568, 536122.549, 538056.107), stdev = 1737.216
[info]   CI (99.9%): [529433.150, 542811.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2150.339 ±(99.9%) 1157.484 MB/sec [Average]
[info]   (min, avg, max) = (2008.189, 2150.339, 2687.945), stdev = 300.595
[info]   CI (99.9%): [992.855, 3307.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   497229.445 ±(99.9%) 267082.475 B/op [Average]
[info]   (min, avg, max) = (464802.513, 497229.445, 621292.828), stdev = 69360.470
[info]   CI (99.9%): [230146.970, 764311.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.229 ±(99.9%) 1.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.791), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 1.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.084 ±(99.9%) 312.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.084, 183.655), stdev = 81.125
[info]   CI (99.9%): [≈ 0, 365.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26361.129 ops/s
[info] # Warmup Iteration   2: 44131.195 ops/s
[info] # Warmup Iteration   3: 45822.712 ops/s
[info] # Warmup Iteration   4: 46397.582 ops/s
[info] # Warmup Iteration   5: 46591.957 ops/s
[info] Iteration   1: 46572.087 ops/s
[info]                  ·gc.alloc.rate:                   768.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              25955.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22680.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 46488.536 ops/s
[info]                  ·gc.alloc.rate:               772.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          26149.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22732.866 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 46433.667 ops/s
[info]                  ·gc.alloc.rate:                   786.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              26643.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45539.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 46597.895 ops/s
[info]                  ·gc.alloc.rate:                   767.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              25927.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22702.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46591.525 ops/s
[info]                  ·gc.alloc.rate:               766.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          25890.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22704.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   46536.742 ±(99.9%) 278.596 ops/s [Average]
[info]   (min, avg, max) = (46433.667, 46536.742, 46597.895), stdev = 72.350
[info]   CI (99.9%): [46258.146, 46815.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   772.216 ±(99.9%) 31.935 MB/sec [Average]
[info]   (min, avg, max) = (766.434, 772.216, 786.468), stdev = 8.293
[info]   CI (99.9%): [740.282, 804.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26113.377 ±(99.9%) 1204.988 B/op [Average]
[info]   (min, avg, max) = (25890.833, 26113.377, 26643.837), stdev = 312.932
[info]   CI (99.9%): [24908.389, 27318.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.235 ±(99.9%) 1158.052 MB/sec [Average]
[info]   (min, avg, max) = (671.124, 806.235, 1344.219), stdev = 300.742
[info]   CI (99.9%): [≈ 0, 1964.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27271.808 ±(99.9%) 39322.039 B/op [Average]
[info]   (min, avg, max) = (22680.127, 27271.808, 45539.216), stdev = 10211.809
[info]   CI (99.9%): [≈ 0, 66593.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.986 ±(99.9%) 3.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.986, 2.117), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1487.449 ops/s
[info] # Warmup Iteration   2: 3750.619 ops/s
[info] # Warmup Iteration   3: 4365.475 ops/s
[info] # Warmup Iteration   4: 4592.795 ops/s
[info] # Warmup Iteration   5: 4469.234 ops/s
[info] Iteration   1: 4604.538 ops/s
[info]                  ·gc.alloc.rate:                   1016.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              347464.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457129.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4615.812 ops/s
[info]                  ·gc.alloc.rate:                   1004.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              342511.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228133.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4614.388 ops/s
[info]                  ·gc.alloc.rate:                   1019.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              347581.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456480.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 4629.362 ops/s
[info]                  ·gc.alloc.rate:                   999.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              339860.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227557.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4614.218 ops/s
[info]                  ·gc.alloc.rate:               1011.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          345115.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 456920.116 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4615.664 ±(99.9%) 34.180 ops/s [Average]
[info]   (min, avg, max) = (4604.538, 4615.664, 4629.362), stdev = 8.876
[info]   CI (99.9%): [4581.484, 4649.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1010.470 ±(99.9%) 31.909 MB/sec [Average]
[info]   (min, avg, max) = (999.739, 1010.470, 1019.667), stdev = 8.287
[info]   CI (99.9%): [978.561, 1042.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   344506.817 ±(99.9%) 12791.869 B/op [Average]
[info]   (min, avg, max) = (339860.476, 344506.817, 347581.442), stdev = 3322.008
[info]   CI (99.9%): [331714.948, 357298.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1070.934 ±(99.9%) 1412.053 MB/sec [Average]
[info]   (min, avg, max) = (669.070, 1070.934, 1339.613), stdev = 366.706
[info]   CI (99.9%): [≈ 0, 2482.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   365244.394 ±(99.9%) 482977.070 B/op [Average]
[info]   (min, avg, max) = (227557.521, 365244.394, 457129.963), stdev = 125427.611
[info]   CI (99.9%): [≈ 0, 848221.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.512 ±(99.9%) 22.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.512, 14.198), stdev = 5.927
[info]   CI (99.9%): [≈ 0, 31.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1164.480 ops/s
[info] # Warmup Iteration   2: 4574.420 ops/s
[info] # Warmup Iteration   3: 4925.351 ops/s
[info] # Warmup Iteration   4: 4904.765 ops/s
[info] # Warmup Iteration   5: 5112.203 ops/s
[info] Iteration   1: 5119.976 ops/s
[info]                  ·gc.alloc.rate:                   639.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              196420.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203326.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5108.621 ops/s
[info]                  ·gc.alloc.rate:               647.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          199425.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 203764.377 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5117.433 ops/s
[info]                  ·gc.alloc.rate:                   644.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              198201.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203918.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5100.782 ops/s
[info]                  ·gc.alloc.rate:               649.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          200527.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204597.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 5118.844 ops/s
[info]                  ·gc.alloc.rate:               645.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          198347.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204492.800 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5113.131 ±(99.9%) 31.686 ops/s [Average]
[info]   (min, avg, max) = (5100.782, 5113.131, 5119.976), stdev = 8.229
[info]   CI (99.9%): [5081.445, 5144.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   645.179 ±(99.9%) 15.605 MB/sec [Average]
[info]   (min, avg, max) = (639.007, 645.179, 649.923), stdev = 4.053
[info]   CI (99.9%): [629.573, 660.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   198584.704 ±(99.9%) 5893.209 B/op [Average]
[info]   (min, avg, max) = (196420.726, 198584.704, 200527.909), stdev = 1530.448
[info]   CI (99.9%): [192691.495, 204477.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.842 ±(99.9%) 5.842 MB/sec [Average]
[info]   (min, avg, max) = (661.416, 662.842, 665.114), stdev = 1.517
[info]   CI (99.9%): [657.001, 668.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   204019.956 ±(99.9%) 2031.782 B/op [Average]
[info]   (min, avg, max) = (203326.688, 204019.956, 204597.689), stdev = 527.647
[info]   CI (99.9%): [201988.175, 206051.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.840 ±(99.9%) 22.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.840, 12.798), stdev = 5.723
[info]   CI (99.9%): [≈ 0, 25.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3689.698 ops/s
[info] # Warmup Iteration   2: 6253.295 ops/s
[info] # Warmup Iteration   3: 6523.005 ops/s
[info] # Warmup Iteration   4: 6558.126 ops/s
[info] # Warmup Iteration   5: 6320.224 ops/s
[info] Iteration   1: 6529.490 ops/s
[info]                  ·gc.alloc.rate:               337.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          81226.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123305.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6543.698 ops/s
[info]                  ·gc.alloc.rate:      319.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 76888.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6525.797 ops/s
[info]                  ·gc.alloc.rate:               333.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          80478.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123380.783 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6546.351 ops/s
[info]                  ·gc.alloc.rate:      319.799 MB/sec
[info]                  ·gc.alloc.rate.norm: 76888.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6527.831 ops/s
[info]                  ·gc.alloc.rate:               342.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          82525.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161646.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6534.633 ±(99.9%) 37.049 ops/s [Average]
[info]   (min, avg, max) = (6525.797, 6534.633, 6546.351), stdev = 9.622
[info]   CI (99.9%): [6497.584, 6571.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   330.535 ±(99.9%) 39.672 MB/sec [Average]
[info]   (min, avg, max) = (319.702, 330.535, 342.286), stdev = 10.303
[info]   CI (99.9%): [290.863, 370.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79601.434 ±(99.9%) 9946.192 B/op [Average]
[info]   (min, avg, max) = (76888.066, 79601.434, 82525.938), stdev = 2582.994
[info]   CI (99.9%): [69655.242, 89547.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.782 ±(99.9%) 1216.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.782, 670.448), stdev = 315.979
[info]   CI (99.9%): [≈ 0, 1555.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81666.553 ±(99.9%) 293316.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81666.553, 161646.767), stdev = 76173.391
[info]   CI (99.9%): [≈ 0, 374983.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4036.224 ops/s
[info] # Warmup Iteration   2: 6432.615 ops/s
[info] # Warmup Iteration   3: 6697.053 ops/s
[info] # Warmup Iteration   4: 6734.251 ops/s
[info] # Warmup Iteration   5: 6683.366 ops/s
[info] Iteration   1: 6740.759 ops/s
[info]                  ·gc.alloc.rate:      168.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 39369.412 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6737.113 ops/s
[info]                  ·gc.alloc.rate:      168.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 39282.100 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6716.786 ops/s
[info]                  ·gc.alloc.rate:               179.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          42031.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119855.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6725.258 ops/s
[info]                  ·gc.alloc.rate:      167.802 MB/sec
[info]                  ·gc.alloc.rate.norm: 39266.421 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6641.194 ops/s
[info]                  ·gc.alloc.rate:      174.624 MB/sec
[info]                  ·gc.alloc.rate.norm: 41379.594 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6712.222 ±(99.9%) 157.238 ops/s [Average]
[info]   (min, avg, max) = (6641.194, 6712.222, 6740.759), stdev = 40.834
[info]   CI (99.9%): [6554.984, 6869.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   171.720 ±(99.9%) 19.747 MB/sec [Average]
[info]   (min, avg, max) = (167.802, 171.720, 179.405), stdev = 5.128
[info]   CI (99.9%): [151.972, 191.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   40265.773 ±(99.9%) 5140.139 B/op [Average]
[info]   (min, avg, max) = (39266.421, 40265.773, 42031.338), stdev = 1334.878
[info]   CI (99.9%): [35125.634, 45405.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.317 ±(99.9%) 880.978 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.317, 511.584), stdev = 228.787
[info]   CI (99.9%): [≈ 0, 983.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   23971.019 ±(99.9%) 206397.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23971.019, 119855.093), stdev = 53600.827
[info]   CI (99.9%): [≈ 0, 230368.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1245.366 ops/s
[info] # Warmup Iteration   2: 6580.995 ops/s
[info] # Warmup Iteration   3: 7640.510 ops/s
[info] # Warmup Iteration   4: 7961.714 ops/s
[info] # Warmup Iteration   5: 8019.778 ops/s
[info] Iteration   1: 7954.788 ops/s
[info]                  ·gc.alloc.rate:               1689.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          334208.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 397713.003 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 8008.759 ops/s
[info]                  ·gc.alloc.rate:                   1690.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              332109.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263485.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 696.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7974.632 ops/s
[info]                  ·gc.alloc.rate:                   1683.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              332270.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264378.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7853.436 ops/s
[info]                  ·gc.alloc.rate:                   1700.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              340708.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     401809.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7788.923 ops/s
[info]                  ·gc.alloc.rate:                   1654.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              334253.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269714.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7916.108 ±(99.9%) 352.965 ops/s [Average]
[info]   (min, avg, max) = (7788.923, 7916.108, 8008.759), stdev = 91.664
[info]   CI (99.9%): [7563.143, 8269.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1683.464 ±(99.9%) 66.978 MB/sec [Average]
[info]   (min, avg, max) = (1654.237, 1683.464, 1700.169), stdev = 17.394
[info]   CI (99.9%): [1616.486, 1750.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   334709.954 ±(99.9%) 13498.829 B/op [Average]
[info]   (min, avg, max) = (332109.180, 334709.954, 340708.380), stdev = 3505.603
[info]   CI (99.9%): [321211.125, 348208.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.118 ±(99.9%) 1411.556 MB/sec [Average]
[info]   (min, avg, max) = (1334.832, 1606.118, 2010.269), stdev = 366.577
[info]   CI (99.9%): [194.562, 3017.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   319420.335 ±(99.9%) 282613.573 B/op [Average]
[info]   (min, avg, max) = (263485.643, 319420.335, 401809.518), stdev = 73393.847
[info]   CI (99.9%): [36806.762, 602033.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.864 ±(99.9%) 5.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.864, 3.545), stdev = 1.509
[info]   CI (99.9%): [≈ 0, 6.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   170.140 ±(99.9%) 1141.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 170.140, 696.653), stdev = 296.432
[info]   CI (99.9%): [≈ 0, 1311.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.834
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.701 ops/s
[info] # Warmup Iteration   2: 17290.616 ops/s
[info] # Warmup Iteration   3: 18964.915 ops/s
[info] # Warmup Iteration   4: 19016.295 ops/s
[info] # Warmup Iteration   5: 19030.669 ops/s
[info] Iteration   1: 19091.142 ops/s
[info]                  ·gc.alloc.rate:               490.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          40467.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54803.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 19066.693 ops/s
[info]                  ·gc.alloc.rate:      475.418 MB/sec
[info]                  ·gc.alloc.rate.norm: 39242.363 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19050.286 ops/s
[info]                  ·gc.alloc.rate:                   483.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              39924.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54918.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.720 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19033.022 ops/s
[info]                  ·gc.alloc.rate:               492.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          40680.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55028.757 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 19156.856 ops/s
[info]                  ·gc.alloc.rate:      472.648 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   19079.600 ±(99.9%) 185.643 ops/s [Average]
[info]   (min, avg, max) = (19033.022, 19079.600, 19156.856), stdev = 48.211
[info]   CI (99.9%): [18893.957, 19265.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   482.860 ±(99.9%) 33.829 MB/sec [Average]
[info]   (min, avg, max) = (472.648, 482.860, 492.040), stdev = 8.785
[info]   CI (99.9%): [449.031, 516.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   39829.573 ±(99.9%) 3032.582 B/op [Average]
[info]   (min, avg, max) = (38832.023, 39829.573, 40680.819), stdev = 787.552
[info]   CI (99.9%): [36796.991, 42862.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.037 ±(99.9%) 1402.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.037, 665.581), stdev = 364.269
[info]   CI (99.9%): [≈ 0, 1801.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   32950.286 ±(99.9%) 115825.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32950.286, 55028.757), stdev = 30079.463
[info]   CI (99.9%): [≈ 0, 148775.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.344 ±(99.9%) 2.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 1.720), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 3.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4474.364 ops/s
[info] # Warmup Iteration   2: 14356.491 ops/s
[info] # Warmup Iteration   3: 15915.631 ops/s
[info] # Warmup Iteration   4: 15939.324 ops/s
[info] # Warmup Iteration   5: 15931.953 ops/s
[info] Iteration   1: 15988.056 ops/s
[info]                  ·gc.alloc.rate:      425.153 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15961.671 ops/s
[info]                  ·gc.alloc.rate:               440.790 MB/sec
[info]                  ·gc.alloc.rate.norm:          43461.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64825.839 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 15874.356 ops/s
[info]                  ·gc.alloc.rate:               451.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          44794.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65185.143 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 16027.980 ops/s
[info]                  ·gc.alloc.rate:      426.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15883.463 ops/s
[info]                  ·gc.alloc.rate:               443.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          43922.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65309.118 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15947.105 ±(99.9%) 256.673 ops/s [Average]
[info]   (min, avg, max) = (15874.356, 15947.105, 16027.980), stdev = 66.657
[info]   CI (99.9%): [15690.432, 16203.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   437.448 ±(99.9%) 44.503 MB/sec [Average]
[info]   (min, avg, max) = (425.153, 437.448, 451.909), stdev = 11.557
[info]   CI (99.9%): [392.945, 481.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43168.474 ±(99.9%) 5046.831 B/op [Average]
[info]   (min, avg, max) = (41832.027, 43168.474, 44794.795), stdev = 1310.646
[info]   CI (99.9%): [38121.643, 48215.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   394.844 ±(99.9%) 1387.935 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 394.844, 659.130), stdev = 360.442
[info]   CI (99.9%): [≈ 0, 1782.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39064.020 ±(99.9%) 137317.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39064.020, 65309.118), stdev = 35660.850
[info]   CI (99.9%): [≈ 0, 176381.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12969.891 ops/s
[info] # Warmup Iteration   2: 22898.803 ops/s
[info] # Warmup Iteration   3: 23452.905 ops/s
[info] # Warmup Iteration   4: 23412.021 ops/s
[info] # Warmup Iteration   5: 23389.218 ops/s
[info] Iteration   1: 23400.034 ops/s
[info]                  ·gc.alloc.rate:               446.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          30040.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34410.390 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 23636.492 ops/s
[info]                  ·gc.alloc.rate:      434.490 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23440.031 ops/s
[info]                  ·gc.alloc.rate:               457.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          30714.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44995.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 23489.949 ops/s
[info]                  ·gc.alloc.rate:                   456.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              30607.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44899.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.395 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23440.766 ops/s
[info]                  ·gc.alloc.rate:      431.398 MB/sec
[info]                  ·gc.alloc.rate.norm: 28966.704 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23481.455 ±(99.9%) 355.583 ops/s [Average]
[info]   (min, avg, max) = (23400.034, 23481.455, 23636.492), stdev = 92.344
[info]   CI (99.9%): [23125.872, 23837.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   445.391 ±(99.9%) 47.005 MB/sec [Average]
[info]   (min, avg, max) = (431.398, 445.391, 457.446), stdev = 12.207
[info]   CI (99.9%): [398.386, 492.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29851.469 ±(99.9%) 3327.882 B/op [Average]
[info]   (min, avg, max) = (28928.018, 29851.469, 30714.005), stdev = 864.240
[info]   CI (99.9%): [26523.587, 33179.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.423 ±(99.9%) 1325.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.423, 670.366), stdev = 344.296
[info]   CI (99.9%): [≈ 0, 1696.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24861.006 ±(99.9%) 88946.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24861.006, 44995.199), stdev = 23098.997
[info]   CI (99.9%): [≈ 0, 113807.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 2.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.395), stdev = 0.624
[info]   CI (99.9%): [≈ 0, 2.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101.858 ops/s
[info] # Warmup Iteration   2: 2920.369 ops/s
[info] # Warmup Iteration   3: 3892.844 ops/s
[info] # Warmup Iteration   4: 4061.618 ops/s
[info] # Warmup Iteration   5: 4054.232 ops/s
[info] Iteration   1: 4082.167 ops/s
[info]                  ·gc.alloc.rate:                   2357.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              908931.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     774811.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 613.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4079.673 ops/s
[info]                  ·gc.alloc.rate:                   2384.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              919405.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1034829.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.088 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4092.530 ops/s
[info]                  ·gc.alloc.rate:                   2377.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              914232.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     774650.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4084.663 ops/s
[info]                  ·gc.alloc.rate:               2413.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          930023.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1036771.180 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 4067.443 ops/s
[info]                  ·gc.alloc.rate:                   2377.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              919824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     782244.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4081.295 ±(99.9%) 35.125 ops/s [Average]
[info]   (min, avg, max) = (4067.443, 4081.295, 4092.530), stdev = 9.122
[info]   CI (99.9%): [4046.170, 4116.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2382.118 ±(99.9%) 78.365 MB/sec [Average]
[info]   (min, avg, max) = (2357.568, 2382.118, 2413.845), stdev = 20.351
[info]   CI (99.9%): [2303.753, 2460.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   918483.335 ±(99.9%) 30145.182 B/op [Average]
[info]   (min, avg, max) = (908931.157, 918483.335, 930023.843), stdev = 7828.608
[info]   CI (99.9%): [888338.153, 948628.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2284.100 ±(99.9%) 1417.144 MB/sec [Average]
[info]   (min, avg, max) = (2009.690, 2284.100, 2690.904), stdev = 368.028
[info]   CI (99.9%): [866.955, 3701.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   880661.320 ±(99.9%) 545470.145 B/op [Average]
[info]   (min, avg, max) = (774650.247, 880661.320, 1036771.180), stdev = 141656.864
[info]   CI (99.9%): [335191.175, 1426131.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.385 ±(99.9%) 2.627 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.592), stdev = 0.682
[info]   CI (99.9%): [≈ 0, 3.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   148.428 ±(99.9%) 1012.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 148.428, 613.952), stdev = 262.989
[info]   CI (99.9%): [≈ 0, 1161.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:35:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3029.579 ops/s
[info] # Warmup Iteration   2: 8953.708 ops/s
[info] # Warmup Iteration   3: 10247.932 ops/s
[info] # Warmup Iteration   4: 10228.240 ops/s
[info] # Warmup Iteration   5: 10098.288 ops/s
[info] Iteration   1: 10390.138 ops/s
[info]                  ·gc.alloc.rate:                   2202.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              333679.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304321.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567.971 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10477.425 ops/s
[info]                  ·gc.alloc.rate:                   2245.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              337351.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301165.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10440.565 ops/s
[info]                  ·gc.alloc.rate:               2226.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          335677.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 301931.249 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 10456.608 ops/s
[info]                  ·gc.alloc.rate:               2257.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          339486.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 401759.008 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 10473.722 ops/s
[info]                  ·gc.alloc.rate:               2234.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          335744.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 302081.173 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10447.692 ±(99.9%) 136.200 ops/s [Average]
[info]   (min, avg, max) = (10390.138, 10447.692, 10477.425), stdev = 35.371
[info]   CI (99.9%): [10311.492, 10583.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2233.395 ±(99.9%) 79.037 MB/sec [Average]
[info]   (min, avg, max) = (2202.972, 2233.395, 2257.051), stdev = 20.526
[info]   CI (99.9%): [2154.358, 2312.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   336387.868 ±(99.9%) 8344.718 B/op [Average]
[info]   (min, avg, max) = (333679.676, 336387.868, 339486.885), stdev = 2167.097
[info]   CI (99.9%): [328043.149, 344732.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2139.675 ±(99.9%) 1143.910 MB/sec [Average]
[info]   (min, avg, max) = (2002.880, 2139.675, 2671.062), stdev = 297.070
[info]   CI (99.9%): [995.765, 3283.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   322251.600 ±(99.9%) 171205.608 B/op [Average]
[info]   (min, avg, max) = (301165.435, 322251.600, 401759.008), stdev = 44461.553
[info]   CI (99.9%): [151045.992, 493457.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.392 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.750), stdev = 1.660
[info]   CI (99.9%): [≈ 0, 7.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   118.597 ±(99.9%) 968.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.597, 567.971), stdev = 251.441
[info]   CI (99.9%): [≈ 0, 1086.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.839 ops/s
[info] # Warmup Iteration   2: 52254.724 ops/s
[info] # Warmup Iteration   3: 56756.021 ops/s
[info] # Warmup Iteration   4: 57220.154 ops/s
[info] # Warmup Iteration   5: 57319.878 ops/s
[info] Iteration   1: 57468.378 ops/s
[info]                  ·gc.alloc.rate:               553.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          15161.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18225.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 57618.726 ops/s
[info]                  ·gc.alloc.rate:               554.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          15148.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18176.773 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 57539.561 ops/s
[info]                  ·gc.alloc.rate:                   553.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              15124.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18175.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.549 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57696.816 ops/s
[info]                  ·gc.alloc.rate:      539.447 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57309.152 ops/s
[info]                  ·gc.alloc.rate:                   556.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              15287.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18294.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.572 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   57526.527 ±(99.9%) 572.122 ops/s [Average]
[info]   (min, avg, max) = (57309.152, 57526.527, 57696.816), stdev = 148.578
[info]   CI (99.9%): [56954.404, 58098.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   551.598 ±(99.9%) 26.629 MB/sec [Average]
[info]   (min, avg, max) = (539.447, 551.598, 556.762), stdev = 6.915
[info]   CI (99.9%): [524.969, 578.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15087.037 ±(99.9%) 842.924 B/op [Average]
[info]   (min, avg, max) = (14712.007, 15087.037, 15287.440), stdev = 218.905
[info]   CI (99.9%): [14244.113, 15929.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.479 ±(99.9%) 1146.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.479, 666.260), stdev = 297.665
[info]   CI (99.9%): [≈ 0, 1678.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14574.334 ±(99.9%) 31372.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14574.334, 18294.009), stdev = 8147.444
[info]   CI (99.9%): [≈ 0, 45947.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.224 ±(99.9%) 1.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.224, 0.572), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16813.081 ops/s
[info] # Warmup Iteration   2: 43764.736 ops/s
[info] # Warmup Iteration   3: 44955.775 ops/s
[info] # Warmup Iteration   4: 46341.394 ops/s
[info] # Warmup Iteration   5: 46162.919 ops/s
[info] Iteration   1: 46316.494 ops/s
[info]                  ·gc.alloc.rate:               690.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          23449.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22477.247 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 45803.185 ops/s
[info]                  ·gc.alloc.rate:               682.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          23465.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22798.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 46272.024 ops/s
[info]                  ·gc.alloc.rate:                   683.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              23232.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22567.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 46269.790 ops/s
[info]                  ·gc.alloc.rate:               682.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          23206.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22624.209 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 46085.948 ops/s
[info]                  ·gc.alloc.rate:               680.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          23219.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22714.028 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   46149.488 ±(99.9%) 819.885 ops/s [Average]
[info]   (min, avg, max) = (45803.185, 46149.488, 46316.494), stdev = 212.921
[info]   CI (99.9%): [45329.603, 46969.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   683.690 ±(99.9%) 14.436 MB/sec [Average]
[info]   (min, avg, max) = (680.177, 683.690, 690.074), stdev = 3.749
[info]   CI (99.9%): [669.254, 698.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23314.636 ±(99.9%) 503.792 B/op [Average]
[info]   (min, avg, max) = (23206.025, 23314.636, 23465.112), stdev = 130.833
[info]   CI (99.9%): [22810.844, 23818.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.787 ±(99.9%) 6.071 MB/sec [Average]
[info]   (min, avg, max) = (661.454, 663.787, 665.366), stdev = 1.577
[info]   CI (99.9%): [657.717, 669.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22636.135 ±(99.9%) 481.185 B/op [Average]
[info]   (min, avg, max) = (22477.247, 22636.135, 22798.116), stdev = 124.962
[info]   CI (99.9%): [22154.950, 23117.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.142 ±(99.9%) 1.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.708), stdev = 0.317
[info]   CI (99.9%): [≈ 0, 1.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39242.538 ops/s
[info] # Warmup Iteration   2: 86850.550 ops/s
[info] # Warmup Iteration   3: 88709.063 ops/s
[info] # Warmup Iteration   4: 89543.428 ops/s
[info] # Warmup Iteration   5: 90093.951 ops/s
[info] Iteration   1: 90339.532 ops/s
[info]                  ·gc.alloc.rate:               694.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          12097.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11680.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 89847.688 ops/s
[info]                  ·gc.alloc.rate:               699.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          12254.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11756.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 89783.363 ops/s
[info]                  ·gc.alloc.rate:                   696.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              12202.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11764.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 90342.356 ops/s
[info]                  ·gc.alloc.rate:                   698.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              12162.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11697.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 89617.834 ops/s
[info]                  ·gc.alloc.rate:               690.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          12130.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11792.532 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   89986.155 ±(99.9%) 1288.258 ops/s [Average]
[info]   (min, avg, max) = (89617.834, 89986.155, 90342.356), stdev = 334.557
[info]   CI (99.9%): [88697.897, 91274.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   695.873 ±(99.9%) 13.453 MB/sec [Average]
[info]   (min, avg, max) = (690.711, 695.873, 699.586), stdev = 3.494
[info]   CI (99.9%): [682.420, 709.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12169.418 ±(99.9%) 235.594 B/op [Average]
[info]   (min, avg, max) = (12097.703, 12169.418, 12254.124), stdev = 61.183
[info]   CI (99.9%): [11933.823, 12405.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.222 ±(99.9%) 1.695 MB/sec [Average]
[info]   (min, avg, max) = (670.573, 671.222, 671.759), stdev = 0.440
[info]   CI (99.9%): [669.526, 672.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11738.392 ±(99.9%) 182.152 B/op [Average]
[info]   (min, avg, max) = (11680.502, 11738.392, 11792.532), stdev = 47.304
[info]   CI (99.9%): [11556.240, 11920.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.218 ±(99.9%) 1.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.218, 0.730), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 1.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31636.273 ops/s
[info] # Warmup Iteration   2: 101617.701 ops/s
[info] # Warmup Iteration   3: 101272.043 ops/s
[info] # Warmup Iteration   4: 103359.539 ops/s
[info] # Warmup Iteration   5: 104455.540 ops/s
[info] Iteration   1: 103912.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 103613.077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 104320.671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 104775.031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 104492.473 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   104222.656 ±(99.9%) 1780.898 ops/s [Average]
[info]   (min, avg, max) = (103613.077, 104222.656, 104775.031), stdev = 462.493
[info]   CI (99.9%): [102441.759, 106003.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 785.489 ops/s
[info] # Warmup Iteration   2: 7108.887 ops/s
[info] # Warmup Iteration   3: 7823.646 ops/s
[info] # Warmup Iteration   4: 7775.411 ops/s
[info] # Warmup Iteration   5: 7828.391 ops/s
[info] Iteration   1: 7738.788 ops/s
[info]                  ·gc.alloc.rate:                   2325.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              472912.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408268.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.924 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7839.963 ops/s
[info]                  ·gc.alloc.rate:                   2353.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              472500.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538663.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.895 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7856.790 ops/s
[info]                  ·gc.alloc.rate:                   2360.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              472904.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404206.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7775.129 ops/s
[info]                  ·gc.alloc.rate:               2377.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          481195.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 545793.448 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 7825.797 ops/s
[info]                  ·gc.alloc.rate:                   2364.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              475591.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407600.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7807.293 ±(99.9%) 188.515 ops/s [Average]
[info]   (min, avg, max) = (7738.788, 7807.293, 7856.790), stdev = 48.957
[info]   CI (99.9%): [7618.778, 7995.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2356.454 ±(99.9%) 74.254 MB/sec [Average]
[info]   (min, avg, max) = (2325.503, 2356.454, 2377.220), stdev = 19.284
[info]   CI (99.9%): [2282.200, 2430.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   475020.925 ±(99.9%) 14112.532 B/op [Average]
[info]   (min, avg, max) = (472500.364, 475020.925, 481195.442), stdev = 3664.980
[info]   CI (99.9%): [460908.393, 489133.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2286.413 ±(99.9%) 1418.508 MB/sec [Average]
[info]   (min, avg, max) = (2007.622, 2286.413, 2696.350), stdev = 368.382
[info]   CI (99.9%): [867.905, 3704.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   460906.763 ±(99.9%) 286084.299 B/op [Average]
[info]   (min, avg, max) = (404206.768, 460906.763, 545793.448), stdev = 74295.184
[info]   CI (99.9%): [174822.464, 746991.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.171 ±(99.9%) 1.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.708), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.635 ±(99.9%) 237.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.635, 143.924), stdev = 61.619
[info]   CI (99.9%): [≈ 0, 271.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 712554.374 ops/s
[info] # Warmup Iteration   2: 7701684.656 ops/s
[info] # Warmup Iteration   3: 8389865.109 ops/s
[info] # Warmup Iteration   4: 8486175.900 ops/s
[info] # Warmup Iteration   5: 8572890.604 ops/s
[info] Iteration   1: 8579924.466 ops/s
[info]                  ·gc.alloc.rate:                   4721.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              866.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4709.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     863.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8361229.147 ops/s
[info]                  ·gc.alloc.rate:                   4580.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4053.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8555691.713 ops/s
[info]                  ·gc.alloc.rate:               4711.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          866.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4744.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 872.732 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 8548578.784 ops/s
[info]                  ·gc.alloc.rate:                   4709.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              867.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4754.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     875.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8454579.459 ops/s
[info]                  ·gc.alloc.rate:                   4621.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              860.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4081.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   8500000.714 ±(99.9%) 350650.558 ops/s [Average]
[info]   (min, avg, max) = (8361229.147, 8500000.714, 8579924.466), stdev = 91062.836
[info]   CI (99.9%): [8149350.156, 8850651.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4668.724 ±(99.9%) 245.838 MB/sec [Average]
[info]   (min, avg, max) = (4580.445, 4668.724, 4721.636), stdev = 63.843
[info]   CI (99.9%): [4422.886, 4914.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   864.413 ±(99.9%) 11.896 B/op [Average]
[info]   (min, avg, max) = (860.106, 864.413, 867.031), stdev = 3.089
[info]   CI (99.9%): [852.517, 876.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4468.568 ±(99.9%) 1411.896 MB/sec [Average]
[info]   (min, avg, max) = (4053.503, 4468.568, 4754.164), stdev = 366.665
[info]   CI (99.9%): [3056.672, 5880.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   826.911 ±(99.9%) 231.158 B/op [Average]
[info]   (min, avg, max) = (759.657, 826.911, 875.296), stdev = 60.031
[info]   CI (99.9%): [595.754, 1058.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.583 ops/s
[info] # Warmup Iteration   2: 36869582.219 ops/s
[info] # Warmup Iteration   3: 36752931.953 ops/s
[info] # Warmup Iteration   4: 38040386.461 ops/s
[info] # Warmup Iteration   5: 38047322.783 ops/s
[info] Iteration   1: 38044868.075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38122216.953 ops/s
[info]                  ·gc.alloc.rate:      0.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38029705.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38052161.851 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38038842.684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38057558.997 ±(99.9%) 142746.260 ops/s [Average]
[info]   (min, avg, max) = (38029705.420, 38057558.997, 38122216.953), stdev = 37070.750
[info]   CI (99.9%): [37914812.737, 38200305.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.036 ±(99.9%) 0.306 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.036, 0.178), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 483882.679 ops/s
[info] # Warmup Iteration   2: 9901143.286 ops/s
[info] # Warmup Iteration   3: 10465577.028 ops/s
[info] # Warmup Iteration   4: 10690627.084 ops/s
[info] # Warmup Iteration   5: 10798630.295 ops/s
[info] Iteration   1: 10797969.430 ops/s
[info]                  ·gc.alloc.rate:                   3726.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              543.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4013.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     584.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 10764760.704 ops/s
[info]                  ·gc.alloc.rate:                   3688.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3356.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     490.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10766245.985 ops/s
[info]                  ·gc.alloc.rate:                   3690.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10794434.962 ops/s
[info]                  ·gc.alloc.rate:               3700.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          539.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 492.709 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 10674405.224 ops/s
[info]                  ·gc.alloc.rate:                   3694.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     599.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10759563.261 ±(99.9%) 192673.008 ops/s [Average]
[info]   (min, avg, max) = (10674405.224, 10759563.261, 10797969.430), stdev = 50036.568
[info]   CI (99.9%): [10566890.252, 10952236.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3700.097 ±(99.9%) 58.453 MB/sec [Average]
[info]   (min, avg, max) = (3688.570, 3700.097, 3726.045), stdev = 15.180
[info]   CI (99.9%): [3641.644, 3758.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   541.230 ±(99.9%) 9.690 B/op [Average]
[info]   (min, avg, max) = (539.247, 541.230, 544.723), stdev = 2.516
[info]   CI (99.9%): [531.541, 550.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3636.669 ±(99.9%) 1418.812 MB/sec [Average]
[info]   (min, avg, max) = (3356.033, 3636.669, 4066.126), stdev = 368.461
[info]   CI (99.9%): [2217.857, 5055.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   532.051 ±(99.9%) 212.526 B/op [Average]
[info]   (min, avg, max) = (490.632, 532.051, 599.525), stdev = 55.192
[info]   CI (99.9%): [319.526, 744.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13349448.304 ops/s
[info] # Warmup Iteration   2: 45602230.857 ops/s
[info] # Warmup Iteration   3: 45576126.958 ops/s
[info] # Warmup Iteration   4: 45723650.964 ops/s
[info] # Warmup Iteration   5: 45689699.547 ops/s
[info] Iteration   1: 45674517.029 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 45614378.659 ops/s
[info]                  ·gc.alloc.rate:      1.507 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.052 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 45677386.417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45684864.342 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45659663.016 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   45662161.893 ±(99.9%) 108730.732 ops/s [Average]
[info]   (min, avg, max) = (45614378.659, 45662161.893, 45684864.342), stdev = 28237.026
[info]   CI (99.9%): [45553431.160, 45770892.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.302 ±(99.9%) 2.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.302, 1.507), stdev = 0.674
[info]   CI (99.9%): [≈ 0, 2.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.010 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8384542.601 ops/s
[info] # Warmup Iteration   2: 30969057.489 ops/s
[info] # Warmup Iteration   3: 31428671.388 ops/s
[info] # Warmup Iteration   4: 31700237.042 ops/s
[info] # Warmup Iteration   5: 31819901.075 ops/s
[info] Iteration   1: 31543680.622 ops/s
[info]                  ·gc.alloc.rate:                   850.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              42.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30266428.780 ops/s
[info]                  ·gc.alloc.rate:               794.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34.952 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 31626780.025 ops/s
[info]                  ·gc.alloc.rate:                   821.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31697503.449 ops/s
[info]                  ·gc.alloc.rate:               827.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.390 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31704277.395 ops/s
[info]                  ·gc.alloc.rate:               820.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31367734.054 ±(99.9%) 2383782.317 ops/s [Average]
[info]   (min, avg, max) = (30266428.780, 31367734.054, 31704277.395), stdev = 619060.698
[info]   CI (99.9%): [28983951.737, 33751516.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   823.087 ±(99.9%) 76.692 MB/sec [Average]
[info]   (min, avg, max) = (794.871, 823.087, 850.731), stdev = 19.917
[info]   CI (99.9%): [746.396, 899.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.292 ±(99.9%) 2.591 B/op [Average]
[info]   (min, avg, max) = (40.740, 41.292, 42.427), stdev = 0.673
[info]   CI (99.9%): [38.701, 43.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.885 ±(99.9%) 1156.784 MB/sec [Average]
[info]   (min, avg, max) = (672.168, 806.885, 1344.280), stdev = 300.413
[info]   CI (99.9%): [≈ 0, 1963.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.449 ±(99.9%) 57.298 B/op [Average]
[info]   (min, avg, max) = (33.390, 40.449, 67.041), stdev = 14.880
[info]   CI (99.9%): [≈ 0, 97.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 926348.014 ops/s
[info] # Warmup Iteration   2: 8733247.048 ops/s
[info] # Warmup Iteration   3: 9058725.750 ops/s
[info] # Warmup Iteration   4: 9162169.740 ops/s
[info] # Warmup Iteration   5: 9170818.852 ops/s
[info] Iteration   1: 9141996.728 ops/s
[info]                  ·gc.alloc.rate:                   3845.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              662.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     576.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 9117541.565 ops/s
[info]                  ·gc.alloc.rate:               3866.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          667.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4033.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 696.262 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 9150696.724 ops/s
[info]                  ·gc.alloc.rate:               3855.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          663.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 580.459 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 9105573.632 ops/s
[info]                  ·gc.alloc.rate:               3864.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          667.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4063.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 702.114 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 9258580.829 ops/s
[info]                  ·gc.alloc.rate:                   3901.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              663.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     576.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9154877.896 ±(99.9%) 233929.526 ops/s [Average]
[info]   (min, avg, max) = (9105573.632, 9154877.896, 9258580.829), stdev = 60750.755
[info]   CI (99.9%): [8920948.369, 9388807.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3866.659 ±(99.9%) 81.788 MB/sec [Average]
[info]   (min, avg, max) = (3845.494, 3866.659, 3901.656), stdev = 21.240
[info]   CI (99.9%): [3784.870, 3948.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   664.663 ±(99.9%) 10.406 B/op [Average]
[info]   (min, avg, max) = (662.077, 664.663, 667.801), stdev = 2.702
[info]   CI (99.9%): [654.257, 675.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3642.753 ±(99.9%) 1427.625 MB/sec [Average]
[info]   (min, avg, max) = (3348.449, 3642.753, 4063.176), stdev = 370.750
[info]   CI (99.9%): [2215.128, 5070.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   626.399 ±(99.9%) 256.061 B/op [Average]
[info]   (min, avg, max) = (576.501, 626.399, 702.114), stdev = 66.498
[info]   CI (99.9%): [370.338, 882.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3307324.257 ops/s
[info] # Warmup Iteration   2: 12822271.687 ops/s
[info] # Warmup Iteration   3: 13693972.509 ops/s
[info] # Warmup Iteration   4: 13321057.821 ops/s
[info] # Warmup Iteration   5: 13668177.077 ops/s
[info] Iteration   1: 13634225.021 ops/s
[info]                  ·gc.alloc.rate:                   1647.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              190.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 13739815.311 ops/s
[info]                  ·gc.alloc.rate:                   1644.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13788659.853 ops/s
[info]                  ·gc.alloc.rate:                   1651.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13633229.413 ops/s
[info]                  ·gc.alloc.rate:               1672.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          193.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232.169 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13546765.498 ops/s
[info]                  ·gc.alloc.rate:                   1623.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   13668539.019 ±(99.9%) 369151.724 ops/s [Average]
[info]   (min, avg, max) = (13546765.498, 13668539.019, 13788659.853), stdev = 95867.531
[info]   CI (99.9%): [13299387.295, 14037690.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1647.984 ±(99.9%) 67.636 MB/sec [Average]
[info]   (min, avg, max) = (1623.556, 1647.984, 1672.669), stdev = 17.565
[info]   CI (99.9%): [1580.348, 1715.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   189.767 ±(99.9%) 7.683 B/op [Average]
[info]   (min, avg, max) = (188.395, 189.767, 193.111), stdev = 1.995
[info]   CI (99.9%): [182.084, 197.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1610.558 ±(99.9%) 1414.185 MB/sec [Average]
[info]   (min, avg, max) = (1340.227, 1610.558, 2014.751), stdev = 367.259
[info]   CI (99.9%): [196.372, 3024.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   185.539 ±(99.9%) 164.669 B/op [Average]
[info]   (min, avg, max) = (153.283, 185.539, 232.579), stdev = 42.764
[info]   CI (99.9%): [20.870, 350.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 4.580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 2.789), stdev = 1.189
[info]   CI (99.9%): [≈ 0, 5.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.320), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.615 ops/s
[info] # Warmup Iteration   2: 37768813.311 ops/s
[info] # Warmup Iteration   3: 42057890.619 ops/s
[info] # Warmup Iteration   4: 40209625.414 ops/s
[info] # Warmup Iteration   5: 41966196.125 ops/s
[info] Iteration   1: 41951036.017 ops/s
[info]                  ·gc.alloc.rate:                   872.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42027103.319 ops/s
[info]                  ·gc.alloc.rate:                   883.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 42155564.534 ops/s
[info]                  ·gc.alloc.rate:               876.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.894 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 42167868.018 ops/s
[info]                  ·gc.alloc.rate:               872.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 42192723.657 ops/s
[info]                  ·gc.alloc.rate:               872.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.898 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42098859.109 ±(99.9%) 402888.736 ops/s [Average]
[info]   (min, avg, max) = (41951036.017, 42098859.109, 42192723.657), stdev = 104628.925
[info]   CI (99.9%): [41695970.373, 42501747.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   875.579 ±(99.9%) 18.794 MB/sec [Average]
[info]   (min, avg, max) = (872.282, 875.579, 883.643), stdev = 4.881
[info]   CI (99.9%): [856.786, 894.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.731 ±(99.9%) 0.825 B/op [Average]
[info]   (min, avg, max) = (32.539, 32.731, 33.082), stdev = 0.214
[info]   CI (99.9%): [31.906, 33.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.370 ±(99.9%) 1147.849 MB/sec [Average]
[info]   (min, avg, max) = (666.468, 800.370, 1333.614), stdev = 298.093
[info]   CI (99.9%): [≈ 0, 1948.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   29.927 ±(99.9%) 43.053 B/op [Average]
[info]   (min, avg, max) = (24.894, 29.927, 49.928), stdev = 11.181
[info]   CI (99.9%): [≈ 0, 72.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1136595.674 ops/s
[info] # Warmup Iteration   2: 11986351.137 ops/s
[info] # Warmup Iteration   3: 13165832.852 ops/s
[info] # Warmup Iteration   4: 13177757.354 ops/s
[info] # Warmup Iteration   5: 13165941.753 ops/s
[info] Iteration   1: 13236350.679 ops/s
[info]                  ·gc.alloc.rate:               2714.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 317.789 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 13336752.910 ops/s
[info]                  ·gc.alloc.rate:                   2734.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13230665.643 ops/s
[info]                  ·gc.alloc.rate:               2729.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318.553 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 13328216.297 ops/s
[info]                  ·gc.alloc.rate:               2749.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 317.162 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 13318081.580 ops/s
[info]                  ·gc.alloc.rate:               2747.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318.365 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13290013.422 ±(99.9%) 200397.345 ops/s [Average]
[info]   (min, avg, max) = (13230665.643, 13290013.422, 13336752.910), stdev = 52042.554
[info]   CI (99.9%): [13089616.077, 13490410.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2735.107 ±(99.9%) 54.280 MB/sec [Average]
[info]   (min, avg, max) = (2714.970, 2735.107, 2749.282), stdev = 14.096
[info]   CI (99.9%): [2680.828, 2789.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   323.850 ±(99.9%) 4.076 B/op [Average]
[info]   (min, avg, max) = (322.685, 323.850, 324.658), stdev = 1.059
[info]   CI (99.9%): [319.774, 327.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2680.927 ±(99.9%) 35.672 MB/sec [Average]
[info]   (min, avg, max) = (2672.330, 2680.927, 2694.183), stdev = 9.264
[info]   CI (99.9%): [2645.255, 2716.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   317.438 ±(99.9%) 5.017 B/op [Average]
[info]   (min, avg, max) = (315.319, 317.438, 318.553), stdev = 1.303
[info]   CI (99.9%): [312.420, 322.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15937825.487 ops/s
[info] # Warmup Iteration   2: 47468997.260 ops/s
[info] # Warmup Iteration   3: 49613581.240 ops/s
[info] # Warmup Iteration   4: 49897543.415 ops/s
[info] # Warmup Iteration   5: 49828368.245 ops/s
[info] Iteration   1: 49983111.840 ops/s
[info]                  ·gc.alloc.rate:               1032.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.133 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 47888913.182 ops/s
[info]                  ·gc.alloc.rate:                   1015.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 50085513.635 ops/s
[info]                  ·gc.alloc.rate:               1033.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.122 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 49662388.951 ops/s
[info]                  ·gc.alloc.rate:               1038.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42.624 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 48766666.466 ops/s
[info]                  ·gc.alloc.rate:               1005.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.714 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   49277318.815 ±(99.9%) 3595786.934 ops/s [Average]
[info]   (min, avg, max) = (47888913.182, 49277318.815, 50085513.635), stdev = 933814.448
[info]   CI (99.9%): [45681531.880, 52873105.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1024.941 ±(99.9%) 54.139 MB/sec [Average]
[info]   (min, avg, max) = (1005.143, 1024.941, 1038.486), stdev = 14.060
[info]   CI (99.9%): [970.802, 1079.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.735 ±(99.9%) 1.548 B/op [Average]
[info]   (min, avg, max) = (32.440, 32.735, 33.371), stdev = 0.402
[info]   CI (99.9%): [31.187, 34.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.113 ±(99.9%) 1418.310 MB/sec [Average]
[info]   (min, avg, max) = (671.318, 941.113, 1345.517), stdev = 368.331
[info]   CI (99.9%): [≈ 0, 2359.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.150 ±(99.9%) 46.600 B/op [Average]
[info]   (min, avg, max) = (21.122, 30.150, 44.159), stdev = 12.102
[info]   CI (99.9%): [≈ 0, 76.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.817
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15884866.713 ops/s
[info] # Warmup Iteration   2: 57683165.007 ops/s
[info] # Warmup Iteration   3: 62599096.524 ops/s
[info] # Warmup Iteration   4: 62634695.737 ops/s
[info] # Warmup Iteration   5: 62637517.458 ops/s
[info] Iteration   1: 62764479.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62445126.525 ops/s
[info]                  ·gc.alloc.rate:      3.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.100 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 62648400.100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 62643246.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 62646525.203 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   62629555.508 ±(99.9%) 443447.061 ops/s [Average]
[info]   (min, avg, max) = (62445126.525, 62629555.508, 62764479.074), stdev = 115161.794
[info]   CI (99.9%): [62186108.447, 63073002.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.791 ±(99.9%) 6.807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.791, 3.953), stdev = 1.768
[info]   CI (99.9%): [≈ 0, 7.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.020 ±(99.9%) 0.172 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5821015.911 ops/s
[info] # Warmup Iteration   2: 17085141.864 ops/s
[info] # Warmup Iteration   3: 17942557.692 ops/s
[info] # Warmup Iteration   4: 17796782.995 ops/s
[info] # Warmup Iteration   5: 17950473.785 ops/s
[info] Iteration   1: 17968980.463 ops/s
[info]                  ·gc.alloc.rate:                   1684.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              147.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17872648.264 ops/s
[info]                  ·gc.alloc.rate:                   1700.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              149.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17948231.615 ops/s
[info]                  ·gc.alloc.rate:               1681.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          147.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.938 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 17857201.330 ops/s
[info]                  ·gc.alloc.rate:                   1699.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              149.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17995653.317 ops/s
[info]                  ·gc.alloc.rate:               1700.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          148.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.033 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17928542.998 ±(99.9%) 233754.068 ops/s [Average]
[info]   (min, avg, max) = (17857201.330, 17928542.998, 17995653.317), stdev = 60705.189
[info]   CI (99.9%): [17694788.929, 18162297.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1693.354 ±(99.9%) 37.528 MB/sec [Average]
[info]   (min, avg, max) = (1681.204, 1693.354, 1700.878), stdev = 9.746
[info]   CI (99.9%): [1655.826, 1730.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   148.649 ±(99.9%) 4.472 B/op [Average]
[info]   (min, avg, max) = (147.422, 148.649, 149.817), stdev = 1.161
[info]   CI (99.9%): [144.177, 153.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1613.908 ±(99.9%) 1418.498 MB/sec [Average]
[info]   (min, avg, max) = (1339.908, 1613.908, 2021.400), stdev = 368.380
[info]   CI (99.9%): [195.410, 3032.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   141.758 ±(99.9%) 126.449 B/op [Average]
[info]   (min, avg, max) = (117.363, 141.758, 178.159), stdev = 32.838
[info]   CI (99.9%): [15.309, 268.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400083.534 ops/s
[info] # Warmup Iteration   2: 2457110.975 ops/s
[info] # Warmup Iteration   3: 2754491.983 ops/s
[info] # Warmup Iteration   4: 2729718.345 ops/s
[info] # Warmup Iteration   5: 2744327.616 ops/s
[info] Iteration   1: 2754501.751 ops/s
[info]                  ·gc.alloc.rate:                   2207.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2754308.777 ops/s
[info]                  ·gc.alloc.rate:                   2221.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1269.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1531.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2753945.607 ops/s
[info]                  ·gc.alloc.rate:               2205.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          1260.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1147.868 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2761723.334 ops/s
[info]                  ·gc.alloc.rate:                   2226.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1145.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2760768.115 ops/s
[info]                  ·gc.alloc.rate:                   2227.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1269.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1147.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2757049.517 ±(99.9%) 14827.425 ops/s [Average]
[info]   (min, avg, max) = (2753945.607, 2757049.517, 2761723.334), stdev = 3850.635
[info]   CI (99.9%): [2742222.091, 2771876.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2217.567 ±(99.9%) 40.260 MB/sec [Average]
[info]   (min, avg, max) = (2205.238, 2217.567, 2227.384), stdev = 10.455
[info]   CI (99.9%): [2177.307, 2257.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1265.892 ±(99.9%) 17.914 B/op [Average]
[info]   (min, avg, max) = (1260.221, 1265.892, 1269.771), stdev = 4.652
[info]   CI (99.9%): [1247.978, 1283.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2145.271 ±(99.9%) 1149.570 MB/sec [Average]
[info]   (min, avg, max) = (2008.634, 2145.271, 2679.294), stdev = 298.540
[info]   CI (99.9%): [995.701, 3294.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1224.706 ±(99.9%) 659.467 B/op [Average]
[info]   (min, avg, max) = (1145.362, 1224.706, 1531.044), stdev = 171.262
[info]   CI (99.9%): [565.238, 1884.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.743 ±(99.9%) 6.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.743, 3.653), stdev = 1.627
[info]   CI (99.9%): [≈ 0, 7.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.425 ±(99.9%) 3.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 2.088), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 4.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65926.455 ops/s
[info] # Warmup Iteration   2: 166972.000 ops/s
[info] # Warmup Iteration   3: 170408.336 ops/s
[info] # Warmup Iteration   4: 165503.073 ops/s
[info] # Warmup Iteration   5: 169387.214 ops/s
[info] Iteration   1: 169035.445 ops/s
[info]                  ·gc.alloc.rate:                   3220.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              29982.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31264.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 169415.461 ops/s
[info]                  ·gc.alloc.rate:                   3240.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              30105.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31243.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.741 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 170226.405 ops/s
[info]                  ·gc.alloc.rate:                   3230.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              29865.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24932.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 169112.932 ops/s
[info]                  ·gc.alloc.rate:                   3236.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              30120.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31456.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 169750.155 ops/s
[info]                  ·gc.alloc.rate:               3222.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          29873.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2710.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25120.937 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   169508.080 ±(99.9%) 1889.069 ops/s [Average]
[info]   (min, avg, max) = (169035.445, 169508.080, 170226.405), stdev = 490.585
[info]   CI (99.9%): [167619.011, 171397.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3230.110 ±(99.9%) 33.558 MB/sec [Average]
[info]   (min, avg, max) = (3220.321, 3230.110, 3240.805), stdev = 8.715
[info]   CI (99.9%): [3196.552, 3263.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29989.498 ±(99.9%) 469.088 B/op [Average]
[info]   (min, avg, max) = (29865.598, 29989.498, 30120.430), stdev = 121.821
[info]   CI (99.9%): [29520.410, 30458.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3101.590 ±(99.9%) 1400.431 MB/sec [Average]
[info]   (min, avg, max) = (2696.532, 3101.590, 3379.990), stdev = 363.688
[info]   CI (99.9%): [1701.159, 4502.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28803.390 ±(99.9%) 13282.605 B/op [Average]
[info]   (min, avg, max) = (24932.073, 28803.390, 31456.040), stdev = 3449.450
[info]   CI (99.9%): [15520.785, 42085.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.187), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.503 ±(99.9%) 2.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.503, 1.741), stdev = 0.705
[info]   CI (99.9%): [≈ 0, 3.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2140.082 ops/s
[info] # Warmup Iteration   2: 27401.943 ops/s
[info] # Warmup Iteration   3: 33407.943 ops/s
[info] # Warmup Iteration   4: 33894.411 ops/s
[info] # Warmup Iteration   5: 33950.925 ops/s
[info] Iteration   1: 33915.893 ops/s
[info]                  ·gc.alloc.rate:                   2578.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              119619.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124294.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.809 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34145.192 ops/s
[info]                  ·gc.alloc.rate:                   2568.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              118406.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123802.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.960 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34262.044 ops/s
[info]                  ·gc.alloc.rate:                   2604.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              119636.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123712.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.956 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 34305.519 ops/s
[info]                  ·gc.alloc.rate:               2581.540 MB/sec
[info]                  ·gc.alloc.rate.norm:          118432.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92881.819 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 34241.748 ops/s
[info]                  ·gc.alloc.rate:               2604.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          119705.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124309.241 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   34174.079 ±(99.9%) 599.910 ops/s [Average]
[info]   (min, avg, max) = (33915.893, 34174.079, 34305.519), stdev = 155.795
[info]   CI (99.9%): [33574.169, 34773.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2587.729 ±(99.9%) 62.047 MB/sec [Average]
[info]   (min, avg, max) = (2568.972, 2587.729, 2604.707), stdev = 16.113
[info]   CI (99.9%): [2525.682, 2649.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119160.261 ±(99.9%) 2606.137 B/op [Average]
[info]   (min, avg, max) = (118406.998, 119160.261, 119705.593), stdev = 676.805
[info]   CI (99.9%): [116554.125, 121766.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2557.694 ±(99.9%) 1148.097 MB/sec [Average]
[info]   (min, avg, max) = (2024.597, 2557.694, 2704.879), stdev = 298.157
[info]   CI (99.9%): [1409.596, 3705.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117800.240 ±(99.9%) 53649.156 B/op [Average]
[info]   (min, avg, max) = (92881.819, 117800.240, 124309.241), stdev = 13932.515
[info]   CI (99.9%): [64151.084, 171449.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 1.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.729), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.145 ±(99.9%) 57.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.145, 33.809), stdev = 14.913
[info]   CI (99.9%): [≈ 0, 64.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36376.544 ops/s
[info] # Warmup Iteration   2: 134604.385 ops/s
[info] # Warmup Iteration   3: 144512.923 ops/s
[info] # Warmup Iteration   4: 146218.982 ops/s
[info] # Warmup Iteration   5: 146535.751 ops/s
[info] Iteration   1: 146588.796 ops/s
[info]                  ·gc.alloc.rate:               1270.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          13637.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14339.660 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 146226.961 ops/s
[info]                  ·gc.alloc.rate:               1261.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          13576.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14382.519 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 146502.587 ops/s
[info]                  ·gc.alloc.rate:                   1247.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              13407.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7184.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.447 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 145742.346 ops/s
[info]                  ·gc.alloc.rate:                   1267.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              13687.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14451.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 146417.766 ops/s
[info]                  ·gc.alloc.rate:                   1272.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              13680.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14370.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   146295.691 ±(99.9%) 1298.035 ops/s [Average]
[info]   (min, avg, max) = (145742.346, 146295.691, 146588.796), stdev = 337.095
[info]   CI (99.9%): [144997.657, 147593.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1263.997 ±(99.9%) 38.196 MB/sec [Average]
[info]   (min, avg, max) = (1247.974, 1263.997, 1272.784), stdev = 9.919
[info]   CI (99.9%): [1225.801, 1302.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13597.842 ±(99.9%) 444.061 B/op [Average]
[info]   (min, avg, max) = (13407.302, 13597.842, 13687.704), stdev = 115.321
[info]   CI (99.9%): [13153.781, 14041.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.223 ±(99.9%) 1150.424 MB/sec [Average]
[info]   (min, avg, max) = (668.784, 1203.223, 1338.243), stdev = 298.761
[info]   CI (99.9%): [52.799, 2353.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12945.975 ±(99.9%) 12402.112 B/op [Average]
[info]   (min, avg, max) = (7184.919, 12945.975, 14451.856), stdev = 3220.789
[info]   CI (99.9%): [543.863, 25348.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 6.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 3.768), stdev = 1.645
[info]   CI (99.9%): [≈ 0, 7.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.077 ±(99.9%) 68.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.077, 40.689), stdev = 17.761
[info]   CI (99.9%): [≈ 0, 77.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232773.838 ops/s
[info] # Warmup Iteration   2: 435355.757 ops/s
[info] # Warmup Iteration   3: 436139.346 ops/s
[info] # Warmup Iteration   4: 446046.242 ops/s
[info] # Warmup Iteration   5: 442256.366 ops/s
[info] Iteration   1: 443902.600 ops/s
[info]                  ·gc.alloc.rate:                   1774.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              6292.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4770.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 445487.953 ops/s
[info]                  ·gc.alloc.rate:                   1796.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              6347.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7128.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 447567.003 ops/s
[info]                  ·gc.alloc.rate:               1777.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          6249.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4720.023 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 444823.888 ops/s
[info]                  ·gc.alloc.rate:               1806.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          6392.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7120.199 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 445249.941 ops/s
[info]                  ·gc.alloc.rate:                   1808.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              6393.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7115.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   445406.277 ±(99.9%) 5201.958 ops/s [Average]
[info]   (min, avg, max) = (443902.600, 445406.277, 447567.003), stdev = 1350.932
[info]   CI (99.9%): [440204.319, 450608.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1792.850 ±(99.9%) 62.082 MB/sec [Average]
[info]   (min, avg, max) = (1774.709, 1792.850, 1808.714), stdev = 16.122
[info]   CI (99.9%): [1730.768, 1854.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6335.248 ±(99.9%) 244.718 B/op [Average]
[info]   (min, avg, max) = (6249.153, 6335.248, 6393.805), stdev = 63.553
[info]   CI (99.9%): [6090.530, 6579.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746.210 ±(99.9%) 1414.118 MB/sec [Average]
[info]   (min, avg, max) = (1342.295, 1746.210, 2017.746), stdev = 367.242
[info]   CI (99.9%): [332.092, 3160.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6171.116 ±(99.9%) 5011.974 B/op [Average]
[info]   (min, avg, max) = (4720.023, 6171.116, 7128.543), stdev = 1301.594
[info]   CI (99.9%): [1159.142, 11183.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.539 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.227), stdev = 1.438
[info]   CI (99.9%): [≈ 0, 6.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.309 ±(99.9%) 19.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.309, 11.399), stdev = 5.082
[info]   CI (99.9%): [≈ 0, 21.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175843.991 ops/s
[info] # Warmup Iteration   2: 474164.562 ops/s
[info] # Warmup Iteration   3: 477250.073 ops/s
[info] # Warmup Iteration   4: 482411.361 ops/s
[info] # Warmup Iteration   5: 483970.882 ops/s
[info] Iteration   1: 483106.191 ops/s
[info]                  ·gc.alloc.rate:                   1391.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              4531.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4378.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 481180.521 ops/s
[info]                  ·gc.alloc.rate:                   1395.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              4563.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4398.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 476984.876 ops/s
[info]                  ·gc.alloc.rate:                   1384.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              4568.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4438.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 486360.483 ops/s
[info]                  ·gc.alloc.rate:                   1410.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4564.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4350.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 485497.553 ops/s
[info]                  ·gc.alloc.rate:               1408.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          4564.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4351.475 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   482625.925 ±(99.9%) 14450.750 ops/s [Average]
[info]   (min, avg, max) = (476984.876, 482625.925, 486360.483), stdev = 3752.814
[info]   CI (99.9%): [468175.175, 497076.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1397.898 ±(99.9%) 42.964 MB/sec [Average]
[info]   (min, avg, max) = (1384.609, 1397.898, 1410.650), stdev = 11.158
[info]   CI (99.9%): [1354.934, 1440.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4558.516 ±(99.9%) 58.927 B/op [Average]
[info]   (min, avg, max) = (4531.382, 4558.516, 4568.684), stdev = 15.303
[info]   CI (99.9%): [4499.589, 4617.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1344.125 ±(99.9%) 4.161 MB/sec [Average]
[info]   (min, avg, max) = (1342.376, 1344.125, 1345.264), stdev = 1.081
[info]   CI (99.9%): [1339.964, 1348.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4383.379 ±(99.9%) 141.890 B/op [Average]
[info]   (min, avg, max) = (4350.294, 4383.379, 4438.862), stdev = 36.848
[info]   CI (99.9%): [4241.489, 4525.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.665), stdev = 1.153
[info]   CI (99.9%): [≈ 0, 5.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2.028 ±(99.9%) 14.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.028, 8.792), stdev = 3.805
[info]   CI (99.9%): [≈ 0, 16.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5361.233 ops/s
[info] # Warmup Iteration   2: 53643.153 ops/s
[info] # Warmup Iteration   3: 62731.197 ops/s
[info] # Warmup Iteration   4: 63698.944 ops/s
[info] # Warmup Iteration   5: 64236.505 ops/s
[info] Iteration   1: 63640.983 ops/s
[info]                  ·gc.alloc.rate:                   1512.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              37412.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32964.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 64072.930 ops/s
[info]                  ·gc.alloc.rate:                   1534.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              37679.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49229.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 64195.259 ops/s
[info]                  ·gc.alloc.rate:                   1532.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              37571.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32844.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 64189.358 ops/s
[info]                  ·gc.alloc.rate:                   1533.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              37591.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32893.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 64254.807 ops/s
[info]                  ·gc.alloc.rate:               1521.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          37278.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32910.771 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   64070.667 ±(99.9%) 959.096 ops/s [Average]
[info]   (min, avg, max) = (63640.983, 64070.667, 64254.807), stdev = 249.074
[info]   CI (99.9%): [63111.571, 65029.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1526.944 ±(99.9%) 35.827 MB/sec [Average]
[info]   (min, avg, max) = (1512.863, 1526.944, 1534.051), stdev = 9.304
[info]   CI (99.9%): [1491.117, 1562.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37506.615 ±(99.9%) 615.088 B/op [Average]
[info]   (min, avg, max) = (37278.556, 37506.615, 37679.135), stdev = 159.736
[info]   CI (99.9%): [36891.527, 38121.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.470 ±(99.9%) 1144.941 MB/sec [Average]
[info]   (min, avg, max) = (1333.006, 1472.470, 2004.316), stdev = 297.338
[info]   CI (99.9%): [327.529, 2617.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36168.552 ±(99.9%) 28115.653 B/op [Average]
[info]   (min, avg, max) = (32844.047, 36168.552, 49229.727), stdev = 7301.546
[info]   CI (99.9%): [8052.899, 64284.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.192 ±(99.9%) 1.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.750), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.697 ±(99.9%) 29.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.697, 18.374), stdev = 7.734
[info]   CI (99.9%): [≈ 0, 34.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60626.326 ops/s
[info] # Warmup Iteration   2: 268939.088 ops/s
[info] # Warmup Iteration   3: 298278.670 ops/s
[info] # Warmup Iteration   4: 311105.607 ops/s
[info] # Warmup Iteration   5: 313532.862 ops/s
[info] Iteration   1: 314990.162 ops/s
[info]                  ·gc.alloc.rate:                   2353.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              11760.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10068.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 315922.144 ops/s
[info]                  ·gc.alloc.rate:                   2360.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              11757.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13347.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 316723.190 ops/s
[info]                  ·gc.alloc.rate:               2353.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          11695.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9980.543 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 316538.373 ops/s
[info]                  ·gc.alloc.rate:               2366.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          11764.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9998.866 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 315859.865 ops/s
[info]                  ·gc.alloc.rate:               2388.067 MB/sec
[info]                  ·gc.alloc.rate.norm:          11899.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13388.132 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   316006.747 ±(99.9%) 2624.442 ops/s [Average]
[info]   (min, avg, max) = (314990.162, 316006.747, 316723.190), stdev = 681.559
[info]   CI (99.9%): [313382.304, 318631.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2364.368 ±(99.9%) 54.733 MB/sec [Average]
[info]   (min, avg, max) = (2353.684, 2364.368, 2388.067), stdev = 14.214
[info]   CI (99.9%): [2309.635, 2419.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11775.662 ±(99.9%) 288.206 B/op [Average]
[info]   (min, avg, max) = (11695.790, 11775.662, 11899.567), stdev = 74.846
[info]   CI (99.9%): [11487.456, 12063.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2280.146 ±(99.9%) 1416.493 MB/sec [Average]
[info]   (min, avg, max) = (2008.504, 2280.146, 2686.799), stdev = 367.859
[info]   CI (99.9%): [863.653, 3696.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11356.707 ±(99.9%) 7071.202 B/op [Average]
[info]   (min, avg, max) = (9980.543, 11356.707, 13388.132), stdev = 1836.369
[info]   CI (99.9%): [4285.504, 18427.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.705), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.765 ±(99.9%) 31.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.765, 18.514), stdev = 8.246
[info]   CI (99.9%): [≈ 0, 35.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91602.805 ops/s
[info] # Warmup Iteration   2: 447850.489 ops/s
[info] # Warmup Iteration   3: 484491.665 ops/s
[info] # Warmup Iteration   4: 484802.589 ops/s
[info] # Warmup Iteration   5: 483426.004 ops/s
[info] Iteration   1: 484126.625 ops/s
[info]                  ·gc.alloc.rate:                   1274.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              4143.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4339.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 475768.549 ops/s
[info]                  ·gc.alloc.rate:                   1259.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              4165.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4420.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 485736.190 ops/s
[info]                  ·gc.alloc.rate:                   1273.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              4123.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4327.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 488244.463 ops/s
[info]                  ·gc.alloc.rate:                   1276.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              4116.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2156.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 487893.883 ops/s
[info]                  ·gc.alloc.rate:                   1288.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              4155.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4309.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   484353.942 ±(99.9%) 19571.974 ops/s [Average]
[info]   (min, avg, max) = (475768.549, 484353.942, 488244.463), stdev = 5082.780
[info]   CI (99.9%): [464781.968, 503925.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1274.483 ±(99.9%) 40.308 MB/sec [Average]
[info]   (min, avg, max) = (1259.213, 1274.483, 1288.521), stdev = 10.468
[info]   CI (99.9%): [1234.176, 1314.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4140.891 ±(99.9%) 80.582 B/op [Average]
[info]   (min, avg, max) = (4116.311, 4140.891, 4165.495), stdev = 20.927
[info]   CI (99.9%): [4060.309, 4221.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.528 ±(99.9%) 1148.211 MB/sec [Average]
[info]   (min, avg, max) = (669.117, 1202.528, 1336.306), stdev = 298.187
[info]   CI (99.9%): [54.317, 2350.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3910.772 ±(99.9%) 3778.760 B/op [Average]
[info]   (min, avg, max) = (2156.958, 3910.772, 4420.522), stdev = 981.332
[info]   CI (99.9%): [132.012, 7689.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 6.919 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.920, 4.122), stdev = 1.797
[info]   CI (99.9%): [≈ 0, 7.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.967 ±(99.9%) 22.302 B/op [Average]
[info]   (min, avg, max) = (0.067, 2.967, 13.286), stdev = 5.792
[info]   CI (99.9%): [≈ 0, 25.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484819.574 ops/s
[info] # Warmup Iteration   2: 1290611.976 ops/s
[info] # Warmup Iteration   3: 1316761.954 ops/s
[info] # Warmup Iteration   4: 1335335.947 ops/s
[info] # Warmup Iteration   5: 1341584.546 ops/s
[info] Iteration   1: 1343671.189 ops/s
[info]                  ·gc.alloc.rate:                   2702.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              3164.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3146.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1323905.719 ops/s
[info]                  ·gc.alloc.rate:                   2689.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              3196.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3193.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1347583.636 ops/s
[info]                  ·gc.alloc.rate:                   2737.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              3196.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3143.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1336229.902 ops/s
[info]                  ·gc.alloc.rate:                   2689.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              3167.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2381.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1331929.011 ops/s
[info]                  ·gc.alloc.rate:                   2719.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              3213.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3192.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1336663.891 ±(99.9%) 36210.462 ops/s [Average]
[info]   (min, avg, max) = (1323905.719, 1336663.891, 1347583.636), stdev = 9403.742
[info]   CI (99.9%): [1300453.429, 1372874.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2707.685 ±(99.9%) 79.550 MB/sec [Average]
[info]   (min, avg, max) = (2689.178, 2707.685, 2737.308), stdev = 20.659
[info]   CI (99.9%): [2628.135, 2787.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3187.625 ±(99.9%) 81.783 B/op [Average]
[info]   (min, avg, max) = (3164.205, 3187.625, 3213.555), stdev = 21.239
[info]   CI (99.9%): [3105.842, 3269.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2558.052 ±(99.9%) 1153.181 MB/sec [Average]
[info]   (min, avg, max) = (2022.438, 2558.052, 2701.972), stdev = 299.477
[info]   CI (99.9%): [1404.871, 3711.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3011.530 ±(99.9%) 1359.877 B/op [Average]
[info]   (min, avg, max) = (2381.271, 3011.530, 3193.788), stdev = 353.156
[info]   CI (99.9%): [1651.653, 4371.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.044, 0.074), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16877.231 ops/s
[info] # Warmup Iteration   2: 94119.292 ops/s
[info] # Warmup Iteration   3: 106076.466 ops/s
[info] # Warmup Iteration   4: 107561.876 ops/s
[info] # Warmup Iteration   5: 107644.707 ops/s
[info] Iteration   1: 108534.557 ops/s
[info]                  ·gc.alloc.rate:                   3647.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              52898.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4008.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58128.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 108734.266 ops/s
[info]                  ·gc.alloc.rate:                   3643.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              52728.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48512.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 108940.018 ops/s
[info]                  ·gc.alloc.rate:               3650.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          52733.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48625.385 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 108419.920 ops/s
[info]                  ·gc.alloc.rate:               3633.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          52747.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3376.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49022.511 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 107672.969 ops/s
[info]                  ·gc.alloc.rate:                   3623.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              52971.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49503.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.609 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   108460.346 ±(99.9%) 1858.929 ops/s [Average]
[info]   (min, avg, max) = (107672.969, 108460.346, 108940.018), stdev = 482.758
[info]   CI (99.9%): [106601.417, 110319.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3639.632 ±(99.9%) 41.889 MB/sec [Average]
[info]   (min, avg, max) = (3623.771, 3639.632, 3650.084), stdev = 10.878
[info]   CI (99.9%): [3597.743, 3681.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52816.032 ±(99.9%) 431.469 B/op [Average]
[info]   (min, avg, max) = (52728.514, 52816.032, 52971.987), stdev = 112.051
[info]   CI (99.9%): [52384.562, 53247.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3497.851 ±(99.9%) 1099.960 MB/sec [Average]
[info]   (min, avg, max) = (3351.747, 3497.851, 4008.323), stdev = 285.656
[info]   CI (99.9%): [2397.892, 4597.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50758.433 ±(99.9%) 15935.300 B/op [Average]
[info]   (min, avg, max) = (48512.332, 50758.433, 58128.643), stdev = 4138.347
[info]   CI (99.9%): [34823.134, 66693.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.242 ±(99.9%) 0.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.242, 0.609), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121174.557 ops/s
[info] # Warmup Iteration   2: 340388.663 ops/s
[info] # Warmup Iteration   3: 344218.443 ops/s
[info] # Warmup Iteration   4: 352036.030 ops/s
[info] # Warmup Iteration   5: 351184.355 ops/s
[info] Iteration   1: 351143.552 ops/s
[info]                  ·gc.alloc.rate:               1195.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          5356.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3005.162 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 347707.043 ops/s
[info]                  ·gc.alloc.rate:                   1210.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              5477.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6071.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 351903.312 ops/s
[info]                  ·gc.alloc.rate:                   1209.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              5410.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6003.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 351708.848 ops/s
[info]                  ·gc.alloc.rate:                   1207.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              5403.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6011.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 353050.846 ops/s
[info]                  ·gc.alloc.rate:                   1224.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              5458.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5982.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   351102.720 ±(99.9%) 7781.690 ops/s [Average]
[info]   (min, avg, max) = (347707.043, 351102.720, 353050.846), stdev = 2020.880
[info]   CI (99.9%): [343321.031, 358884.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1209.447 ±(99.9%) 39.451 MB/sec [Average]
[info]   (min, avg, max) = (1195.502, 1209.447, 1224.332), stdev = 10.245
[info]   CI (99.9%): [1169.996, 1248.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5421.196 ±(99.9%) 183.341 B/op [Average]
[info]   (min, avg, max) = (5356.593, 5421.196, 5477.030), stdev = 47.613
[info]   CI (99.9%): [5237.854, 5604.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.912 ±(99.9%) 1156.388 MB/sec [Average]
[info]   (min, avg, max) = (670.702, 1207.912, 1343.265), stdev = 300.310
[info]   CI (99.9%): [51.524, 2364.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5414.610 ±(99.9%) 5188.075 B/op [Average]
[info]   (min, avg, max) = (3005.162, 5414.610, 6071.181), stdev = 1347.327
[info]   CI (99.9%): [226.534, 10602.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.392 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.185), stdev = 1.400
[info]   CI (99.9%): [≈ 0, 6.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.055 ±(99.9%) 24.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.055, 14.253), stdev = 6.266
[info]   CI (99.9%): [≈ 0, 27.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275593.476 ops/s
[info] # Warmup Iteration   2: 837060.800 ops/s
[info] # Warmup Iteration   3: 858089.915 ops/s
[info] # Warmup Iteration   4: 850859.042 ops/s
[info] # Warmup Iteration   5: 830012.160 ops/s
[info] Iteration   1: 857514.853 ops/s
[info]                  ·gc.alloc.rate:               634.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          1164.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1223.229 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 858123.675 ops/s
[info]                  ·gc.alloc.rate:               632.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1222.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 858316.409 ops/s
[info]                  ·gc.alloc.rate:                   641.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              1175.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1223.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 854298.863 ops/s
[info]                  ·gc.alloc.rate:               635.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          1171.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1229.679 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 850082.530 ops/s
[info]                  ·gc.alloc.rate:                   631.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1236.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   855667.266 ±(99.9%) 13549.572 ops/s [Average]
[info]   (min, avg, max) = (850082.530, 855667.266, 858316.409), stdev = 3518.781
[info]   CI (99.9%): [842117.694, 869216.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   635.133 ±(99.9%) 14.423 MB/sec [Average]
[info]   (min, avg, max) = (631.357, 635.133, 641.127), stdev = 3.746
[info]   CI (99.9%): [620.710, 649.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168.183 ±(99.9%) 22.744 B/op [Average]
[info]   (min, avg, max) = (1160.602, 1168.183, 1175.608), stdev = 5.907
[info]   CI (99.9%): [1145.439, 1190.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.234 ±(99.9%) 2.603 MB/sec [Average]
[info]   (min, avg, max) = (666.470, 667.234, 668.117), stdev = 0.676
[info]   CI (99.9%): [664.631, 669.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1227.242 ±(99.9%) 23.709 B/op [Average]
[info]   (min, avg, max) = (1222.371, 1227.242, 1236.988), stdev = 6.157
[info]   CI (99.9%): [1203.532, 1250.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.077), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 928095.812 ops/s
[info] # Warmup Iteration   2: 2022837.657 ops/s
[info] # Warmup Iteration   3: 2126480.982 ops/s
[info] # Warmup Iteration   4: 2129684.029 ops/s
[info] # Warmup Iteration   5: 2120115.420 ops/s
[info] Iteration   1: 2132582.723 ops/s
[info]                  ·gc.alloc.rate:               1001.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          739.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 495.542 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2073004.153 ops/s
[info]                  ·gc.alloc.rate:               1004.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          762.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 510.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2123035.644 ops/s
[info]                  ·gc.alloc.rate:                   1018.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              755.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2131624.591 ops/s
[info]                  ·gc.alloc.rate:               1000.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          738.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 496.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2116707.659 ops/s
[info]                  ·gc.alloc.rate:                   1020.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1000.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2115390.954 ±(99.9%) 94633.125 ops/s [Average]
[info]   (min, avg, max) = (2073004.153, 2115390.954, 2132582.723), stdev = 24575.922
[info]   CI (99.9%): [2020757.829, 2210024.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1009.193 ±(99.9%) 36.728 MB/sec [Average]
[info]   (min, avg, max) = (1000.194, 1009.193, 1020.152), stdev = 9.538
[info]   CI (99.9%): [972.464, 1045.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750.842 ±(99.9%) 43.500 B/op [Average]
[info]   (min, avg, max) = (738.219, 750.842, 762.768), stdev = 11.297
[info]   CI (99.9%): [707.342, 794.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.344 ±(99.9%) 1419.292 MB/sec [Average]
[info]   (min, avg, max) = (671.436, 941.344, 1345.603), stdev = 368.586
[info]   CI (99.9%): [≈ 0, 2360.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   699.945 ±(99.9%) 1050.324 B/op [Average]
[info]   (min, avg, max) = (495.542, 699.945, 1000.543), stdev = 272.766
[info]   CI (99.9%): [≈ 0, 1750.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1448468.419 ops/s
[info] # Warmup Iteration   2: 2213564.502 ops/s
[info] # Warmup Iteration   3: 2352137.290 ops/s
[info] # Warmup Iteration   4: 2352549.509 ops/s
[info] # Warmup Iteration   5: 2351562.048 ops/s
[info] Iteration   1: 2351912.832 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2331613.958 ops/s
[info]                  ·gc.alloc.rate:      10.061 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.791 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2353569.409 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2354309.219 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2354007.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2349082.574 ±(99.9%) 37771.012 ops/s [Average]
[info]   (min, avg, max) = (2331613.958, 2349082.574, 2354309.219), stdev = 9809.012
[info]   CI (99.9%): [2311311.562, 2386853.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.012 ±(99.9%) 17.325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.012, 10.061), stdev = 4.499
[info]   CI (99.9%): [≈ 0, 19.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.358 ±(99.9%) 11.695 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.358, 6.791), stdev = 3.037
[info]   CI (99.9%): [≈ 0, 13.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136458.846 ops/s
[info] # Warmup Iteration   2: 433593.908 ops/s
[info] # Warmup Iteration   3: 469123.561 ops/s
[info] # Warmup Iteration   4: 465101.645 ops/s
[info] # Warmup Iteration   5: 477116.925 ops/s
[info] Iteration   1: 479361.115 ops/s
[info]                  ·gc.alloc.rate:               711.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          2335.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2194.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 489000.154 ops/s
[info]                  ·gc.alloc.rate:               722.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          2324.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2152.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 485808.239 ops/s
[info]                  ·gc.alloc.rate:               720.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          2333.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2166.725 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 477890.700 ops/s
[info]                  ·gc.alloc.rate:               709.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2204.822 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 480635.741 ops/s
[info]                  ·gc.alloc.rate:               710.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          2326.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2192.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   482539.190 ±(99.9%) 18036.730 ops/s [Average]
[info]   (min, avg, max) = (477890.700, 482539.190, 489000.154), stdev = 4684.081
[info]   CI (99.9%): [464502.460, 500575.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   714.927 ±(99.9%) 23.244 MB/sec [Average]
[info]   (min, avg, max) = (709.585, 714.927, 722.312), stdev = 6.037
[info]   CI (99.9%): [691.682, 738.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2331.474 ±(99.9%) 21.435 B/op [Average]
[info]   (min, avg, max) = (2324.438, 2331.474, 2336.832), stdev = 5.566
[info]   CI (99.9%): [2310.040, 2352.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   669.120 ±(99.9%) 1.489 MB/sec [Average]
[info]   (min, avg, max) = (668.616, 669.120, 669.511), stdev = 0.387
[info]   CI (99.9%): [667.631, 670.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2182.237 ±(99.9%) 83.645 B/op [Average]
[info]   (min, avg, max) = (2152.592, 2182.237, 2204.822), stdev = 21.722
[info]   CI (99.9%): [2098.592, 2265.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9300.590 ops/s
[info] # Warmup Iteration   2: 55877.127 ops/s
[info] # Warmup Iteration   3: 56842.429 ops/s
[info] # Warmup Iteration   4: 59268.180 ops/s
[info] # Warmup Iteration   5: 59065.439 ops/s
[info] Iteration   1: 59069.177 ops/s
[info]                  ·gc.alloc.rate:                   2068.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              55123.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53689.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 59746.310 ops/s
[info]                  ·gc.alloc.rate:                   2077.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              54721.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53013.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 59497.661 ops/s
[info]                  ·gc.alloc.rate:                   2110.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              55795.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70669.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.298 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 59656.743 ops/s
[info]                  ·gc.alloc.rate:               2087.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          55082.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52994.686 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 59779.782 ops/s
[info]                  ·gc.alloc.rate:               2105.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          55439.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52937.392 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59549.934 ±(99.9%) 1117.121 ops/s [Average]
[info]   (min, avg, max) = (59069.177, 59549.934, 59779.782), stdev = 290.113
[info]   CI (99.9%): [58432.814, 60667.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2090.080 ±(99.9%) 68.978 MB/sec [Average]
[info]   (min, avg, max) = (2068.846, 2090.080, 2110.615), stdev = 17.913
[info]   CI (99.9%): [2021.102, 2159.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55232.364 ±(99.9%) 1558.377 B/op [Average]
[info]   (min, avg, max) = (54721.248, 55232.364, 55795.231), stdev = 404.705
[info]   CI (99.9%): [53673.987, 56790.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2144.049 ±(99.9%) 1139.242 MB/sec [Average]
[info]   (min, avg, max) = (2008.756, 2144.049, 2673.279), stdev = 295.858
[info]   CI (99.9%): [1004.807, 3283.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   56660.930 ±(99.9%) 30177.949 B/op [Average]
[info]   (min, avg, max) = (52937.392, 56660.930, 70669.569), stdev = 7837.118
[info]   CI (99.9%): [26482.980, 86838.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.445 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.268), stdev = 1.414
[info]   CI (99.9%): [≈ 0, 6.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.050 ±(99.9%) 145.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.050, 87.080), stdev = 37.687
[info]   CI (99.9%): [≈ 0, 165.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18814.094 ops/s
[info] # Warmup Iteration   2: 87164.299 ops/s
[info] # Warmup Iteration   3: 94698.192 ops/s
[info] # Warmup Iteration   4: 94059.722 ops/s
[info] # Warmup Iteration   5: 94385.075 ops/s
[info] Iteration   1: 95411.903 ops/s
[info]                  ·gc.alloc.rate:               1747.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          28822.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22058.224 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 94062.597 ops/s
[info]                  ·gc.alloc.rate:                   1735.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              29045.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33592.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.884 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 95872.714 ops/s
[info]                  ·gc.alloc.rate:                   1755.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              28812.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21914.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.709 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 95921.545 ops/s
[info]                  ·gc.alloc.rate:                   1780.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              29216.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32789.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.732 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 96119.298 ops/s
[info]                  ·gc.alloc.rate:               1770.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          28997.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32721.985 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   95477.611 ±(99.9%) 3205.259 ops/s [Average]
[info]   (min, avg, max) = (94062.597, 95477.611, 96119.298), stdev = 832.396
[info]   CI (99.9%): [92272.353, 98682.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1758.121 ±(99.9%) 68.847 MB/sec [Average]
[info]   (min, avg, max) = (1735.931, 1758.121, 1780.663), stdev = 17.879
[info]   CI (99.9%): [1689.274, 1826.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28978.781 ±(99.9%) 648.302 B/op [Average]
[info]   (min, avg, max) = (28812.655, 28978.781, 29216.575), stdev = 168.362
[info]   CI (99.9%): [28330.480, 29627.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1735.444 ±(99.9%) 1402.974 MB/sec [Average]
[info]   (min, avg, max) = (1335.073, 1735.444, 2007.733), stdev = 364.348
[info]   CI (99.9%): [332.471, 3138.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28615.418 ±(99.9%) 23340.028 B/op [Average]
[info]   (min, avg, max) = (21914.591, 28615.418, 33592.773), stdev = 6061.331
[info]   CI (99.9%): [5275.390, 51955.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.949 ±(99.9%) 7.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 4.476), stdev = 1.973
[info]   CI (99.9%): [≈ 0, 8.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.865 ±(99.9%) 127.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.865, 74.884), stdev = 33.013
[info]   CI (99.9%): [≈ 0, 142.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62897.378 ops/s
[info] # Warmup Iteration   2: 160625.690 ops/s
[info] # Warmup Iteration   3: 165073.523 ops/s
[info] # Warmup Iteration   4: 166642.540 ops/s
[info] # Warmup Iteration   5: 166841.752 ops/s
[info] Iteration   1: 163760.674 ops/s
[info]                  ·gc.alloc.rate:                   2575.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              24746.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19348.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 165143.322 ops/s
[info]                  ·gc.alloc.rate:                   2623.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              25003.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25573.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.587 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 167643.587 ops/s
[info]                  ·gc.alloc.rate:               2676.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          25127.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25228.765 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 167713.961 ops/s
[info]                  ·gc.alloc.rate:                   2675.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              25111.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25267.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 167111.822 ops/s
[info]                  ·gc.alloc.rate:               2668.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          25130.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25421.849 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   166274.673 ±(99.9%) 6737.648 ops/s [Average]
[info]   (min, avg, max) = (163760.674, 166274.673, 167713.961), stdev = 1749.746
[info]   CI (99.9%): [159537.025, 173012.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2643.950 ±(99.9%) 169.743 MB/sec [Average]
[info]   (min, avg, max) = (2575.445, 2643.950, 2676.577), stdev = 44.082
[info]   CI (99.9%): [2474.208, 2813.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25023.850 ±(99.9%) 629.512 B/op [Average]
[info]   (min, avg, max) = (24746.832, 25023.850, 25130.388), stdev = 163.482
[info]   CI (99.9%): [24394.338, 25653.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2555.232 ±(99.9%) 1166.112 MB/sec [Average]
[info]   (min, avg, max) = (2013.604, 2555.232, 2699.142), stdev = 302.836
[info]   CI (99.9%): [1389.119, 3721.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24168.024 ±(99.9%) 10388.224 B/op [Average]
[info]   (min, avg, max) = (19348.240, 24168.024, 25573.321), stdev = 2697.789
[info]   CI (99.9%): [13779.800, 34556.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.437 ±(99.9%) 2.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.437, 1.587), stdev = 0.664
[info]   CI (99.9%): [≈ 0, 2.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1888.264 ops/s
[info] # Warmup Iteration   2: 26515.540 ops/s
[info] # Warmup Iteration   3: 34523.752 ops/s
[info] # Warmup Iteration   4: 34699.056 ops/s
[info] # Warmup Iteration   5: 34246.808 ops/s
[info] Iteration   1: 34614.242 ops/s
[info]                  ·gc.alloc.rate:                   2311.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              105078.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121834.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.111 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 34807.070 ops/s
[info]                  ·gc.alloc.rate:                   2322.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              105015.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91053.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.941 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34864.694 ops/s
[info]                  ·gc.alloc.rate:                   2323.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              104876.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121426.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 34823.908 ops/s
[info]                  ·gc.alloc.rate:                   2336.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              105601.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91382.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.941 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34827.815 ops/s
[info]                  ·gc.alloc.rate:               2336.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          105594.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91495.285 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   34787.546 ±(99.9%) 381.733 ops/s [Average]
[info]   (min, avg, max) = (34614.242, 34787.546, 34864.694), stdev = 99.135
[info]   CI (99.9%): [34405.812, 35169.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2326.128 ±(99.9%) 41.488 MB/sec [Average]
[info]   (min, avg, max) = (2311.301, 2326.128, 2336.777), stdev = 10.774
[info]   CI (99.9%): [2284.640, 2367.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105233.213 ±(99.9%) 1312.865 B/op [Average]
[info]   (min, avg, max) = (104876.473, 105233.213, 105601.676), stdev = 340.947
[info]   CI (99.9%): [103920.348, 106546.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2286.084 ±(99.9%) 1402.090 MB/sec [Average]
[info]   (min, avg, max) = (2013.801, 2286.084, 2689.965), stdev = 364.118
[info]   CI (99.9%): [883.994, 3688.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   103438.472 ±(99.9%) 63952.714 B/op [Average]
[info]   (min, avg, max) = (91053.493, 103438.472, 121834.112), stdev = 16608.317
[info]   CI (99.9%): [39485.758, 167391.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.237 ±(99.9%) 1.909 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 1.124), stdev = 0.496
[info]   CI (99.9%): [≈ 0, 2.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.787 ±(99.9%) 86.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.787, 51.111), stdev = 22.546
[info]   CI (99.9%): [≈ 0, 97.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42594.790 ops/s
[info] # Warmup Iteration   2: 150563.908 ops/s
[info] # Warmup Iteration   3: 161075.502 ops/s
[info] # Warmup Iteration   4: 162626.093 ops/s
[info] # Warmup Iteration   5: 162628.769 ops/s
[info] Iteration   1: 157702.363 ops/s
[info]                  ·gc.alloc.rate:                   1048.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              10467.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6655.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 162372.003 ops/s
[info]                  ·gc.alloc.rate:               1089.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          10562.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12939.564 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 159457.820 ops/s
[info]                  ·gc.alloc.rate:                   1069.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              10556.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13188.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 162612.130 ops/s
[info]                  ·gc.alloc.rate:                   1074.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              10395.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6473.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.604 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 162245.841 ops/s
[info]                  ·gc.alloc.rate:                   1085.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              10533.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12978.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   160878.031 ±(99.9%) 8438.935 ops/s [Average]
[info]   (min, avg, max) = (157702.363, 160878.031, 162612.130), stdev = 2191.565
[info]   CI (99.9%): [152439.096, 169316.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1073.708 ±(99.9%) 62.253 MB/sec [Average]
[info]   (min, avg, max) = (1048.885, 1073.708, 1089.987), stdev = 16.167
[info]   CI (99.9%): [1011.455, 1135.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10502.818 ±(99.9%) 273.176 B/op [Average]
[info]   (min, avg, max) = (10395.165, 10502.818, 10562.079), stdev = 70.943
[info]   CI (99.9%): [10229.642, 10775.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.083 ±(99.9%) 1410.244 MB/sec [Average]
[info]   (min, avg, max) = (666.871, 1069.083, 1337.935), stdev = 366.236
[info]   CI (99.9%): [≈ 0, 2479.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10447.020 ±(99.9%) 13656.132 B/op [Average]
[info]   (min, avg, max) = (6473.129, 10447.020, 13188.726), stdev = 3546.454
[info]   CI (99.9%): [≈ 0, 24103.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.893), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 7.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.756 ±(99.9%) 64.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.756, 37.761), stdev = 16.775
[info]   CI (99.9%): [≈ 0, 72.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234981.079 ops/s
[info] # Warmup Iteration   2: 449107.932 ops/s
[info] # Warmup Iteration   3: 461919.564 ops/s
[info] # Warmup Iteration   4: 452746.888 ops/s
[info] # Warmup Iteration   5: 462440.749 ops/s
[info] Iteration   1: 463585.651 ops/s
[info]                  ·gc.alloc.rate:               527.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          1789.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1736.922 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 459612.168 ops/s
[info]                  ·gc.alloc.rate:               536.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          1837.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2296.047 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 462594.104 ops/s
[info]                  ·gc.alloc.rate:                   532.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              1811.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2281.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 461661.669 ops/s
[info]                  ·gc.alloc.rate:               528.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          1803.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2287.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 462407.833 ops/s
[info]                  ·gc.alloc.rate:      510.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   461972.285 ±(99.9%) 5726.319 ops/s [Average]
[info]   (min, avg, max) = (459612.168, 461972.285, 463585.651), stdev = 1487.107
[info]   CI (99.9%): [456245.966, 467698.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   526.996 ±(99.9%) 39.105 MB/sec [Average]
[info]   (min, avg, max) = (510.014, 526.996, 536.557), stdev = 10.156
[info]   CI (99.9%): [487.891, 566.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1795.400 ±(99.9%) 144.288 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1795.400, 1837.084), stdev = 37.471
[info]   CI (99.9%): [1651.112, 1939.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.777 ±(99.9%) 1118.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.777, 671.116), stdev = 290.467
[info]   CI (99.9%): [≈ 0, 1623.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1720.442 ±(99.9%) 3815.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1720.442, 2296.047), stdev = 990.976
[info]   CI (99.9%): [≈ 0, 5536.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.142), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243573.034 ops/s
[info] # Warmup Iteration   2: 505158.802 ops/s
[info] # Warmup Iteration   3: 509623.003 ops/s
[info] # Warmup Iteration   4: 512082.442 ops/s
[info] # Warmup Iteration   5: 510917.171 ops/s
[info] Iteration   1: 510993.933 ops/s
[info]                  ·gc.alloc.rate:      5.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.258 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 512770.581 ops/s
[info]                  ·gc.alloc.rate:      5.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 512242.548 ops/s
[info]                  ·gc.alloc.rate:      5.208 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 512883.898 ops/s
[info]                  ·gc.alloc.rate:      5.214 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 512952.526 ops/s
[info]                  ·gc.alloc.rate:      5.215 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   512368.697 ±(99.9%) 3148.174 ops/s [Average]
[info]   (min, avg, max) = (510993.933, 512368.697, 512952.526), stdev = 817.571
[info]   CI (99.9%): [509220.524, 515516.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.226 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (5.208, 5.226, 5.278), stdev = 0.030
[info]   CI (99.9%): [5.112, 5.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.052 ±(99.9%) 0.442 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.052, 16.258), stdev = 0.115
[info]   CI (99.9%): [15.610, 16.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12883.917 ops/s
[info] # Warmup Iteration   2: 62193.408 ops/s
[info] # Warmup Iteration   3: 64816.646 ops/s
[info] # Warmup Iteration   4: 65680.228 ops/s
[info] # Warmup Iteration   5: 65936.595 ops/s
[info] Iteration   1: 65699.414 ops/s
[info]                  ·gc.alloc.rate:               1368.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          32781.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31995.052 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 64617.834 ops/s
[info]                  ·gc.alloc.rate:               1352.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          32940.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32555.553 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 65637.030 ops/s
[info]                  ·gc.alloc.rate:                   1361.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              32635.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32065.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 65945.321 ops/s
[info]                  ·gc.alloc.rate:                   1380.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              32933.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31892.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 65984.254 ops/s
[info]                  ·gc.alloc.rate:               1392.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          33210.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31809.697 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   65576.771 ±(99.9%) 2144.038 ops/s [Average]
[info]   (min, avg, max) = (64617.834, 65576.771, 65984.254), stdev = 556.800
[info]   CI (99.9%): [63432.733, 67720.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1371.066 ±(99.9%) 59.916 MB/sec [Average]
[info]   (min, avg, max) = (1352.630, 1371.066, 1392.317), stdev = 15.560
[info]   CI (99.9%): [1311.150, 1430.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32900.406 ±(99.9%) 823.240 B/op [Average]
[info]   (min, avg, max) = (32635.867, 32900.406, 33210.357), stdev = 213.793
[info]   CI (99.9%): [32077.167, 33723.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1336.109 ±(99.9%) 6.213 MB/sec [Average]
[info]   (min, avg, max) = (1333.596, 1336.109, 1337.905), stdev = 1.613
[info]   CI (99.9%): [1329.896, 1342.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32063.715 ±(99.9%) 1123.363 B/op [Average]
[info]   (min, avg, max) = (31809.697, 32063.715, 32555.553), stdev = 291.734
[info]   CI (99.9%): [30940.352, 33187.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 6.306 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 3.770), stdev = 1.638
[info]   CI (99.9%): [≈ 0, 7.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.150 ±(99.9%) 151.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.150, 90.347), stdev = 39.253
[info]   CI (99.9%): [≈ 0, 172.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223483.306 ops/s
[info] # Warmup Iteration   2: 2548534.864 ops/s
[info] # Warmup Iteration   3: 2767749.163 ops/s
[info] # Warmup Iteration   4: 2783535.240 ops/s
[info] # Warmup Iteration   5: 2786297.994 ops/s
[info] Iteration   1: 2853389.520 ops/s
[info]                  ·gc.alloc.rate:                   3955.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              2181.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1847.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2851775.469 ops/s
[info]                  ·gc.alloc.rate:                   3987.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              2200.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4035.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2226.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2834760.534 ops/s
[info]                  ·gc.alloc.rate:                   3964.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              2200.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4051.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2249.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2835932.755 ops/s
[info]                  ·gc.alloc.rate:                   3940.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              2186.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1879.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2832294.233 ops/s
[info]                  ·gc.alloc.rate:                   3962.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              2202.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4071.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2262.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2841630.502 ±(99.9%) 38890.625 ops/s [Average]
[info]   (min, avg, max) = (2832294.233, 2841630.502, 2853389.520), stdev = 10099.772
[info]   CI (99.9%): [2802739.877, 2880521.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3962.254 ±(99.9%) 66.358 MB/sec [Average]
[info]   (min, avg, max) = (3940.120, 3962.254, 3987.709), stdev = 17.233
[info]   CI (99.9%): [3895.896, 4028.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2194.349 ±(99.9%) 36.353 B/op [Average]
[info]   (min, avg, max) = (2181.788, 2194.349, 2202.155), stdev = 9.441
[info]   CI (99.9%): [2157.996, 2230.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3779.105 ±(99.9%) 1445.713 MB/sec [Average]
[info]   (min, avg, max) = (3350.105, 3779.105, 4071.576), stdev = 375.447
[info]   CI (99.9%): [2333.393, 5224.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2093.109 ±(99.9%) 809.474 B/op [Average]
[info]   (min, avg, max) = (1847.772, 2093.109, 2262.518), stdev = 210.218
[info]   CI (99.9%): [1283.635, 2902.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.021, 0.046), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.711 ops/s
[info] # Warmup Iteration   2: 799086.987 ops/s
[info] # Warmup Iteration   3: 785930.097 ops/s
[info] # Warmup Iteration   4: 828813.347 ops/s
[info] # Warmup Iteration   5: 815213.679 ops/s
[info] Iteration   1: 832779.733 ops/s
[info]                  ·gc.alloc.rate:      494.714 MB/sec
[info]                  ·gc.alloc.rate.norm: 934.947 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 831631.410 ops/s
[info]                  ·gc.alloc.rate:               485.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          919.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1260.679 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 816685.365 ops/s
[info]                  ·gc.alloc.rate:                   485.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1283.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 818181.001 ops/s
[info]                  ·gc.alloc.rate:               482.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          928.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1282.688 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 809424.843 ops/s
[info]                  ·gc.alloc.rate:      469.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   821740.470 ±(99.9%) 38965.521 ops/s [Average]
[info]   (min, avg, max) = (809424.843, 821740.470, 832779.733), stdev = 10119.222
[info]   CI (99.9%): [782774.949, 860705.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   483.681 ±(99.9%) 35.786 MB/sec [Average]
[info]   (min, avg, max) = (469.073, 483.681, 494.714), stdev = 9.294
[info]   CI (99.9%): [447.895, 519.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   926.321 ±(99.9%) 39.852 B/op [Average]
[info]   (min, avg, max) = (912.001, 926.321, 936.196), stdev = 10.350
[info]   CI (99.9%): [886.469, 966.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.829 ±(99.9%) 1405.457 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.829, 666.800), stdev = 364.993
[info]   CI (99.9%): [≈ 0, 1805.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   765.425 ±(99.9%) 2690.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 765.425, 1283.756), stdev = 698.795
[info]   CI (99.9%): [≈ 0, 3456.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20378.300 ops/s
[info] # Warmup Iteration   2: 210357.870 ops/s
[info] # Warmup Iteration   3: 323560.406 ops/s
[info] # Warmup Iteration   4: 333157.065 ops/s
[info] # Warmup Iteration   5: 336356.760 ops/s
[info] Iteration   1: 336666.305 ops/s
[info]                  ·gc.alloc.rate:                   786.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              3677.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3115.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 328548.928 ops/s
[info]                  ·gc.alloc.rate:               783.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          3751.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3194.144 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 329921.724 ops/s
[info]                  ·gc.alloc.rate:               774.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          3694.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3180.864 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 328541.324 ops/s
[info]                  ·gc.alloc.rate:               781.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          3743.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3197.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 329666.661 ops/s
[info]                  ·gc.alloc.rate:                   767.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              3663.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3186.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   330668.988 ±(99.9%) 13136.353 ops/s [Average]
[info]   (min, avg, max) = (328541.324, 330668.988, 336666.305), stdev = 3411.469
[info]   CI (99.9%): [317532.635, 343805.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   778.698 ±(99.9%) 29.373 MB/sec [Average]
[info]   (min, avg, max) = (767.525, 778.698, 786.690), stdev = 7.628
[info]   CI (99.9%): [749.325, 808.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3705.856 ±(99.9%) 152.110 B/op [Average]
[info]   (min, avg, max) = (3663.251, 3705.856, 3751.484), stdev = 39.502
[info]   CI (99.9%): [3553.746, 3857.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.113 ±(99.9%) 1.740 MB/sec [Average]
[info]   (min, avg, max) = (666.530, 667.113, 667.633), stdev = 0.452
[info]   CI (99.9%): [665.373, 668.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3174.939 ±(99.9%) 130.034 B/op [Average]
[info]   (min, avg, max) = (3115.664, 3174.939, 3197.540), stdev = 33.769
[info]   CI (99.9%): [3044.905, 3304.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 350970.186 ops/s
[info] # Warmup Iteration   2: 658037.729 ops/s
[info] # Warmup Iteration   3: 770792.281 ops/s
[info] # Warmup Iteration   4: 770117.937 ops/s
[info] # Warmup Iteration   5: 767380.626 ops/s
[info] Iteration   1: 769063.359 ops/s
[info]                  ·gc.alloc.rate:               690.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          1413.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1374.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 770451.440 ops/s
[info]                  ·gc.alloc.rate:               702.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          1434.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1371.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 752702.126 ops/s
[info]                  ·gc.alloc.rate:               708.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          1479.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2803.928 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 754096.500 ops/s
[info]                  ·gc.alloc.rate:                   692.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              1445.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 756568.514 ops/s
[info]                  ·gc.alloc.rate:               694.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          1444.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1399.624 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   760576.388 ±(99.9%) 32764.508 ops/s [Average]
[info]   (min, avg, max) = (752702.126, 760576.388, 770451.440), stdev = 8508.839
[info]   CI (99.9%): [727811.880, 793340.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   697.629 ±(99.9%) 28.848 MB/sec [Average]
[info]   (min, avg, max) = (690.632, 697.629, 708.439), stdev = 7.492
[info]   CI (99.9%): [668.781, 726.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1443.362 ±(99.9%) 92.068 B/op [Average]
[info]   (min, avg, max) = (1413.388, 1443.362, 1479.462), stdev = 23.910
[info]   CI (99.9%): [1351.295, 1535.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.276 ±(99.9%) 1154.606 MB/sec [Average]
[info]   (min, avg, max) = (671.475, 806.276, 1342.658), stdev = 299.847
[info]   CI (99.9%): [≈ 0, 1960.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1670.736 ±(99.9%) 2439.929 B/op [Average]
[info]   (min, avg, max) = (1371.710, 1670.736, 2803.928), stdev = 633.642
[info]   CI (99.9%): [≈ 0, 4110.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 866157.342 ops/s
[info] # Warmup Iteration   2: 2223925.467 ops/s
[info] # Warmup Iteration   3: 3069364.743 ops/s
[info] # Warmup Iteration   4: 3074527.026 ops/s
[info] # Warmup Iteration   5: 3019382.322 ops/s
[info] Iteration   1: 3083087.700 ops/s
[info]                  ·gc.alloc.rate:                   1842.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              940.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     687.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3055514.889 ops/s
[info]                  ·gc.alloc.rate:                   1842.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              948.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1041.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3064802.274 ops/s
[info]                  ·gc.alloc.rate:                   1842.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1037.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3035406.447 ops/s
[info]                  ·gc.alloc.rate:               1811.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          938.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 697.667 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3089855.106 ops/s
[info]                  ·gc.alloc.rate:               1885.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          960.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1028.097 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3065733.283 ±(99.9%) 84100.158 ops/s [Average]
[info]   (min, avg, max) = (3035406.447, 3065733.283, 3089855.106), stdev = 21840.544
[info]   CI (99.9%): [2981633.125, 3149833.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1844.965 ±(99.9%) 102.469 MB/sec [Average]
[info]   (min, avg, max) = (1811.012, 1844.965, 1885.759), stdev = 26.611
[info]   CI (99.9%): [1742.496, 1947.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   946.946 ±(99.9%) 32.897 B/op [Average]
[info]   (min, avg, max) = (938.961, 946.946, 960.546), stdev = 8.543
[info]   CI (99.9%): [914.049, 979.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   1751.131 ±(99.9%) 1421.811 MB/sec [Average]
[info]   (min, avg, max) = (1345.618, 1751.131, 2023.410), stdev = 369.240
[info]   CI (99.9%): [329.320, 3172.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   898.532 ±(99.9%) 723.494 B/op [Average]
[info]   (min, avg, max) = (687.962, 898.532, 1041.751), stdev = 187.889
[info]   CI (99.9%): [175.038, 1622.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.525 ±(99.9%) 4.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.525, 2.562), stdev = 1.139
[info]   CI (99.9%): [≈ 0, 4.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.270 ±(99.9%) 2.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 1.319), stdev = 0.586
[info]   CI (99.9%): [≈ 0, 2.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1934844.933 ops/s
[info] # Warmup Iteration   2: 4652233.126 ops/s
[info] # Warmup Iteration   3: 8147926.311 ops/s
[info] # Warmup Iteration   4: 8137495.403 ops/s
[info] # Warmup Iteration   5: 8125307.178 ops/s
[info] Iteration   1: 8163146.512 ops/s
[info]                  ·gc.alloc.rate:               894.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          172.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 8128508.699 ops/s
[info]                  ·gc.alloc.rate:               904.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          175.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 260.281 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 8136124.328 ops/s
[info]                  ·gc.alloc.rate:                   890.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              172.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8145894.141 ops/s
[info]                  ·gc.alloc.rate:               884.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          170.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129.991 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8098156.687 ops/s
[info]                  ·gc.alloc.rate:                   878.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              170.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8134366.073 ±(99.9%) 92530.299 ops/s [Average]
[info]   (min, avg, max) = (8098156.687, 8134366.073, 8163146.512), stdev = 24029.825
[info]   CI (99.9%): [8041835.774, 8226896.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   890.586 ±(99.9%) 37.160 MB/sec [Average]
[info]   (min, avg, max) = (878.658, 890.586, 904.209), stdev = 9.650
[info]   CI (99.9%): [853.425, 927.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   172.305 ±(99.9%) 6.652 B/op [Average]
[info]   (min, avg, max) = (170.727, 172.305, 175.076), stdev = 1.728
[info]   CI (99.9%): [165.652, 178.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   806.932 ±(99.9%) 1156.657 MB/sec [Average]
[info]   (min, avg, max) = (671.464, 806.932, 1344.267), stdev = 300.380
[info]   CI (99.9%): [≈ 0, 1963.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   156.142 ±(99.9%) 224.176 B/op [Average]
[info]   (min, avg, max) = (129.460, 156.142, 260.281), stdev = 58.218
[info]   CI (99.9%): [≈ 0, 380.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548.721 ops/s
[info] # Warmup Iteration   2: 42343.249 ops/s
[info] # Warmup Iteration   3: 213043.652 ops/s
[info] # Warmup Iteration   4: 233626.704 ops/s
[info] # Warmup Iteration   5: 246751.988 ops/s
[info] Iteration   1: 248287.930 ops/s
[info]                  ·gc.alloc.rate:               2171.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          13767.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12730.817 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 247381.022 ops/s
[info]                  ·gc.alloc.rate:                   2169.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              13802.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12807.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 247969.671 ops/s
[info]                  ·gc.alloc.rate:                   2171.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              13781.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12785.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.925 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 246241.770 ops/s
[info]                  ·gc.alloc.rate:                   2171.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              13878.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17175.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 246641.642 ops/s
[info]                  ·gc.alloc.rate:               2175.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          13882.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12884.088 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   247304.407 ±(99.9%) 3325.973 ops/s [Average]
[info]   (min, avg, max) = (246241.770, 247304.407, 248287.930), stdev = 863.745
[info]   CI (99.9%): [243978.434, 250630.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2171.998 ±(99.9%) 8.747 MB/sec [Average]
[info]   (min, avg, max) = (2169.526, 2171.998, 2175.722), stdev = 2.271
[info]   CI (99.9%): [2163.251, 2180.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13822.479 ±(99.9%) 209.560 B/op [Average]
[info]   (min, avg, max) = (13767.327, 13822.479, 13882.266), stdev = 54.422
[info]   CI (99.9%): [13612.919, 14032.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2148.467 ±(99.9%) 1159.718 MB/sec [Average]
[info]   (min, avg, max) = (2008.365, 2148.467, 2687.180), stdev = 301.175
[info]   CI (99.9%): [988.749, 3308.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13676.487 ±(99.9%) 7534.639 B/op [Average]
[info]   (min, avg, max) = (12730.817, 13676.487, 17175.392), stdev = 1956.722
[info]   CI (99.9%): [6141.848, 21211.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.358, 1.603), stdev = 0.698
[info]   CI (99.9%): [≈ 0, 3.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.278 ±(99.9%) 17.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.278, 10.198), stdev = 4.443
[info]   CI (99.9%): [≈ 0, 19.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 994630.177 ops/s
[info] # Warmup Iteration   2: 1514529.881 ops/s
[info] # Warmup Iteration   3: 1582059.760 ops/s
[info] # Warmup Iteration   4: 1570387.280 ops/s
[info] # Warmup Iteration   5: 1583436.001 ops/s
[info] Iteration   1: 1582780.795 ops/s
[info]                  ·gc.alloc.rate:      88.498 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1583779.312 ops/s
[info]                  ·gc.alloc.rate:      88.611 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1583973.419 ops/s
[info]                  ·gc.alloc.rate:      88.570 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1582598.259 ops/s
[info]                  ·gc.alloc.rate:      88.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1575946.457 ops/s
[info]                  ·gc.alloc.rate:                   98.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              98.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     510.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1581815.648 ±(99.9%) 12843.983 ops/s [Average]
[info]   (min, avg, max) = (1575946.457, 1581815.648, 1583973.419), stdev = 3335.541
[info]   CI (99.9%): [1568971.666, 1594659.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   90.539 ±(99.9%) 17.201 MB/sec [Average]
[info]   (min, avg, max) = (88.486, 90.539, 98.530), stdev = 4.467
[info]   CI (99.9%): [73.338, 107.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   90.092 ±(99.9%) 17.894 B/op [Average]
[info]   (min, avg, max) = (88.000, 90.092, 98.405), stdev = 4.647
[info]   CI (99.9%): [72.199, 107.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.313 ±(99.9%) 880.944 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.313, 511.564), stdev = 228.778
[info]   CI (99.9%): [≈ 0, 983.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   102.184 ±(99.9%) 879.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.184, 510.918), stdev = 228.489
[info]   CI (99.9%): [≈ 0, 982.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.160 ±(99.9%) 1.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.160, 0.799), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.160 ±(99.9%) 1.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.160, 0.798), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6159.859 ops/s
[info] # Warmup Iteration   2: 60019.469 ops/s
[info] # Warmup Iteration   3: 74511.765 ops/s
[info] # Warmup Iteration   4: 76467.807 ops/s
[info] # Warmup Iteration   5: 76806.924 ops/s
[info] Iteration   1: 76723.486 ops/s
[info]                  ·gc.alloc.rate:                   3343.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              68569.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68960.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.562 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 76902.456 ops/s
[info]                  ·gc.alloc.rate:                   3404.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              69675.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69026.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.278 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 77121.761 ops/s
[info]                  ·gc.alloc.rate:               3414.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          69667.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69005.118 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 76698.432 ops/s
[info]                  ·gc.alloc.rate:               3397.444 MB/sec
[info]                  ·gc.alloc.rate.norm:          69714.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3389.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69558.312 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 76791.489 ops/s
[info]                  ·gc.alloc.rate:               3400.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          69701.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3394.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69581.495 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   76847.525 ±(99.9%) 664.103 ops/s [Average]
[info]   (min, avg, max) = (76698.432, 76847.525, 77121.761), stdev = 172.466
[info]   CI (99.9%): [76183.422, 77511.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3392.065 ±(99.9%) 107.311 MB/sec [Average]
[info]   (min, avg, max) = (3343.522, 3392.065, 3414.336), stdev = 27.868
[info]   CI (99.9%): [3284.754, 3499.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69465.808 ±(99.9%) 1930.333 B/op [Average]
[info]   (min, avg, max) = (68569.693, 69465.808, 69714.360), stdev = 501.301
[info]   CI (99.9%): [67535.475, 71396.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3380.344 ±(99.9%) 50.035 MB/sec [Average]
[info]   (min, avg, max) = (3362.593, 3380.344, 3394.782), stdev = 12.994
[info]   CI (99.9%): [3330.310, 3430.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69226.380 ±(99.9%) 1211.357 B/op [Average]
[info]   (min, avg, max) = (68960.810, 69226.380, 69581.495), stdev = 314.586
[info]   CI (99.9%): [68015.022, 70437.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.768 ±(99.9%) 4.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.768, 2.562), stdev = 1.146
[info]   CI (99.9%): [≈ 0, 5.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547490.302 ops/s
[info] # Warmup Iteration   2: 1531542.467 ops/s
[info] # Warmup Iteration   3: 1570850.318 ops/s
[info] # Warmup Iteration   4: 1609390.935 ops/s
[info] # Warmup Iteration   5: 1568876.569 ops/s
[info] Iteration   1: 1611054.788 ops/s
[info]                  ·gc.alloc.rate:               859.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          839.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 652.393 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1604877.699 ops/s
[info]                  ·gc.alloc.rate:               860.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          843.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 654.905 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1590208.590 ops/s
[info]                  ·gc.alloc.rate:               850.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          841.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 661.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1599880.909 ops/s
[info]                  ·gc.alloc.rate:               866.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          852.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1315.205 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1602908.490 ops/s
[info]                  ·gc.alloc.rate:                   853.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              837.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1601786.095 ±(99.9%) 29476.599 ops/s [Average]
[info]   (min, avg, max) = (1590208.590, 1601786.095, 1611054.788), stdev = 7654.979
[info]   CI (99.9%): [1572309.497, 1631262.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   857.999 ±(99.9%) 24.447 MB/sec [Average]
[info]   (min, avg, max) = (850.421, 857.999, 866.748), stdev = 6.349
[info]   CI (99.9%): [833.553, 882.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   843.026 ±(99.9%) 22.174 B/op [Average]
[info]   (min, avg, max) = (837.942, 843.026, 852.653), stdev = 5.759
[info]   CI (99.9%): [820.852, 865.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   801.920 ±(99.9%) 1151.687 MB/sec [Average]
[info]   (min, avg, max) = (667.847, 801.920, 1336.947), stdev = 299.089
[info]   CI (99.9%): [≈ 0, 1953.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   788.093 ±(99.9%) 1134.716 B/op [Average]
[info]   (min, avg, max) = (652.393, 788.093, 1315.205), stdev = 294.682
[info]   CI (99.9%): [≈ 0, 1922.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1037563.352 ops/s
[info] # Warmup Iteration   2: 1867171.661 ops/s
[info] # Warmup Iteration   3: 1838919.712 ops/s
[info] # Warmup Iteration   4: 1902161.181 ops/s
[info] # Warmup Iteration   5: 1925227.590 ops/s
[info] Iteration   1: 1937672.487 ops/s
[info]                  ·gc.alloc.rate:      522.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1933460.462 ops/s
[info]                  ·gc.alloc.rate:               539.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 545.779 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1938515.771 ops/s
[info]                  ·gc.alloc.rate:               536.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 544.353 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1933271.473 ops/s
[info]                  ·gc.alloc.rate:                   544.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              443.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1945201.310 ops/s
[info]                  ·gc.alloc.rate:      524.233 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1937624.301 ±(99.9%) 18715.553 ops/s [Average]
[info]   (min, avg, max) = (1933271.473, 1937624.301, 1945201.310), stdev = 4860.370
[info]   CI (99.9%): [1918908.748, 1956339.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   533.336 ±(99.9%) 37.606 MB/sec [Average]
[info]   (min, avg, max) = (522.026, 533.336, 544.525), stdev = 9.766
[info]   CI (99.9%): [495.730, 570.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   433.132 ±(99.9%) 33.709 B/op [Average]
[info]   (min, avg, max) = (424.000, 433.132, 443.214), stdev = 8.754
[info]   CI (99.9%): [399.423, 466.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   402.507 ±(99.9%) 1414.869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.507, 671.257), stdev = 367.437
[info]   CI (99.9%): [≈ 0, 1817.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   327.300 ±(99.9%) 1150.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 327.300, 546.366), stdev = 298.783
[info]   CI (99.9%): [≈ 0, 1477.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 885043.779 ops/s
[info] # Warmup Iteration   2: 1734446.957 ops/s
[info] # Warmup Iteration   3: 1806128.154 ops/s
[info] # Warmup Iteration   4: 1806342.649 ops/s
[info] # Warmup Iteration   5: 1805926.335 ops/s
[info] Iteration   1: 1806197.504 ops/s
[info]                  ·gc.alloc.rate:      18.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1806521.623 ops/s
[info]                  ·gc.alloc.rate:      18.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1807403.178 ops/s
[info]                  ·gc.alloc.rate:      18.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1812366.633 ops/s
[info]                  ·gc.alloc.rate:      18.427 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1811058.784 ops/s
[info]                  ·gc.alloc.rate:      18.413 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1808709.545 ±(99.9%) 10839.608 ops/s [Average]
[info]   (min, avg, max) = (1806197.504, 1808709.545, 1812366.633), stdev = 2815.012
[info]   CI (99.9%): [1797869.937, 1819549.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.389 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (18.362, 18.389, 18.427), stdev = 0.029
[info]   CI (99.9%): [18.276, 18.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5346.751 ops/s
[info] # Warmup Iteration   2: 46951.657 ops/s
[info] # Warmup Iteration   3: 51061.736 ops/s
[info] # Warmup Iteration   4: 49577.450 ops/s
[info] # Warmup Iteration   5: 52084.241 ops/s
[info] Iteration   1: 52156.817 ops/s
[info]                  ·gc.alloc.rate:               2247.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          67800.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60169.304 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 51115.121 ops/s
[info]                  ·gc.alloc.rate:                   2214.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              68196.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61483.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.641 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 51909.455 ops/s
[info]                  ·gc.alloc.rate:                   2250.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              68198.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80993.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.631 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 51982.196 ops/s
[info]                  ·gc.alloc.rate:               2254.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          68252.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60878.357 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 51883.402 ops/s
[info]                  ·gc.alloc.rate:               2250.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          68273.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61157.335 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   51809.398 ±(99.9%) 1549.935 ops/s [Average]
[info]   (min, avg, max) = (51115.121, 51809.398, 52156.817), stdev = 402.513
[info]   CI (99.9%): [50259.463, 53359.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2243.463 ±(99.9%) 62.028 MB/sec [Average]
[info]   (min, avg, max) = (2214.981, 2243.463, 2254.175), stdev = 16.108
[info]   CI (99.9%): [2181.435, 2305.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68144.259 ±(99.9%) 752.002 B/op [Average]
[info]   (min, avg, max) = (67800.054, 68144.259, 68273.576), stdev = 195.293
[info]   CI (99.9%): [67392.257, 68896.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.080 ±(99.9%) 1150.704 MB/sec [Average]
[info]   (min, avg, max) = (1994.354, 2138.080, 2672.402), stdev = 298.834
[info]   CI (99.9%): [987.376, 3288.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64936.480 ±(99.9%) 34614.784 B/op [Average]
[info]   (min, avg, max) = (60169.304, 64936.480, 80993.735), stdev = 8989.350
[info]   CI (99.9%): [30321.695, 99551.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.254 ±(99.9%) 1.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.254, 0.641), stdev = 0.348
[info]   CI (99.9%): [≈ 0, 1.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149424.571 ops/s
[info] # Warmup Iteration   2: 246496.110 ops/s
[info] # Warmup Iteration   3: 263377.832 ops/s
[info] # Warmup Iteration   4: 273635.996 ops/s
[info] # Warmup Iteration   5: 274670.200 ops/s
[info] Iteration   1: 273766.730 ops/s
[info]                  ·gc.alloc.rate:               1107.008 MB/sec
[info]                  ·gc.alloc.rate.norm:          6363.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7724.366 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 274999.363 ops/s
[info]                  ·gc.alloc.rate:                   1089.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              6237.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3846.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 272656.629 ops/s
[info]                  ·gc.alloc.rate:                   1108.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              6396.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7763.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 273405.246 ops/s
[info]                  ·gc.alloc.rate:               1109.065 MB/sec
[info]                  ·gc.alloc.rate.norm:          6382.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7746.209 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 275115.129 ops/s
[info]                  ·gc.alloc.rate:                   1103.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              6310.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3850.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   273988.619 ±(99.9%) 4063.472 ops/s [Average]
[info]   (min, avg, max) = (272656.629, 273988.619, 275115.129), stdev = 1055.271
[info]   CI (99.9%): [269925.147, 278052.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1103.454 ±(99.9%) 30.638 MB/sec [Average]
[info]   (min, avg, max) = (1089.791, 1103.454, 1109.065), stdev = 7.957
[info]   CI (99.9%): [1072.815, 1134.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6338.220 ±(99.9%) 251.773 B/op [Average]
[info]   (min, avg, max) = (6237.029, 6338.220, 6396.918), stdev = 65.385
[info]   CI (99.9%): [6086.447, 6589.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.991 ±(99.9%) 1417.673 MB/sec [Average]
[info]   (min, avg, max) = (672.151, 1075.991, 1345.984), stdev = 368.165
[info]   CI (99.9%): [≈ 0, 2493.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6186.375 ±(99.9%) 8216.929 B/op [Average]
[info]   (min, avg, max) = (3846.817, 6186.375, 7763.612), stdev = 2133.910
[info]   CI (99.9%): [≈ 0, 14403.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.545 ±(99.9%) 4.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.686), stdev = 1.196
[info]   CI (99.9%): [≈ 0, 5.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.120 ±(99.9%) 26.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.120, 15.363), stdev = 6.844
[info]   CI (99.9%): [≈ 0, 29.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2241.229 ops/s
[info] # Warmup Iteration   2: 33414.769 ops/s
[info] # Warmup Iteration   3: 39936.039 ops/s
[info] # Warmup Iteration   4: 39063.706 ops/s
[info] # Warmup Iteration   5: 40015.066 ops/s
[info] Iteration   1: 40170.885 ops/s
[info]                  ·gc.alloc.rate:               2053.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          80442.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78361.984 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 40171.527 ops/s
[info]                  ·gc.alloc.rate:                   2075.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              81302.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78673.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40111.882 ops/s
[info]                  ·gc.alloc.rate:               2061.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          80892.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79028.081 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 40187.072 ops/s
[info]                  ·gc.alloc.rate:               2066.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          80916.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79109.509 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 39385.750 ops/s
[info]                  ·gc.alloc.rate:               2039.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          81492.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80883.912 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   40005.423 ±(99.9%) 1338.469 ops/s [Average]
[info]   (min, avg, max) = (39385.750, 40005.423, 40187.072), stdev = 347.596
[info]   CI (99.9%): [38666.954, 41343.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2059.188 ±(99.9%) 52.162 MB/sec [Average]
[info]   (min, avg, max) = (2039.473, 2059.188, 2075.238), stdev = 13.546
[info]   CI (99.9%): [2007.025, 2111.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81009.050 ±(99.9%) 1567.681 B/op [Average]
[info]   (min, avg, max) = (80442.167, 81009.050, 81492.204), stdev = 407.122
[info]   CI (99.9%): [79441.370, 82576.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.372 ±(99.9%) 36.571 MB/sec [Average]
[info]   (min, avg, max) = (2000.320, 2013.372, 2024.250), stdev = 9.497
[info]   CI (99.9%): [1976.801, 2049.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79211.340 ±(99.9%) 3778.950 B/op [Average]
[info]   (min, avg, max) = (78361.984, 79211.340, 80883.912), stdev = 981.381
[info]   CI (99.9%): [75432.390, 82990.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.163 ±(99.9%) 1.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.163, 0.816), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41416.497 ops/s
[info] # Warmup Iteration   2: 107419.537 ops/s
[info] # Warmup Iteration   3: 112764.025 ops/s
[info] # Warmup Iteration   4: 114462.601 ops/s
[info] # Warmup Iteration   5: 114873.215 ops/s
[info] Iteration   1: 114131.403 ops/s
[info]                  ·gc.alloc.rate:                   1151.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              15880.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18399.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 113694.977 ops/s
[info]                  ·gc.alloc.rate:               1153.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          15969.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18489.257 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 114765.158 ops/s
[info]                  ·gc.alloc.rate:                   1147.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              15736.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9162.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 114277.444 ops/s
[info]                  ·gc.alloc.rate:               1157.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          15934.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18421.984 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 114557.283 ops/s
[info]                  ·gc.alloc.rate:                   1159.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              15929.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18386.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   114285.253 ±(99.9%) 1583.531 ops/s [Average]
[info]   (min, avg, max) = (113694.977, 114285.253, 114765.158), stdev = 411.238
[info]   CI (99.9%): [112701.722, 115868.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1153.872 ±(99.9%) 18.000 MB/sec [Average]
[info]   (min, avg, max) = (1147.495, 1153.872, 1159.454), stdev = 4.674
[info]   CI (99.9%): [1135.873, 1171.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15890.333 ±(99.9%) 353.303 B/op [Average]
[info]   (min, avg, max) = (15736.238, 15890.333, 15969.620), stdev = 91.752
[info]   CI (99.9%): [15537.030, 16243.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.812 ±(99.9%) 1150.920 MB/sec [Average]
[info]   (min, avg, max) = (668.149, 1202.812, 1338.223), stdev = 298.890
[info]   CI (99.9%): [51.893, 2353.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16571.966 ±(99.9%) 15949.742 B/op [Average]
[info]   (min, avg, max) = (9162.696, 16571.966, 18489.257), stdev = 4142.097
[info]   CI (99.9%): [622.224, 32521.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.828 ±(99.9%) 6.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.828, 4.080), stdev = 1.818
[info]   CI (99.9%): [≈ 0, 7.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.383 ±(99.9%) 96.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.383, 56.055), stdev = 24.974
[info]   CI (99.9%): [≈ 0, 107.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176382.846 ops/s
[info] # Warmup Iteration   2: 317635.124 ops/s
[info] # Warmup Iteration   3: 334663.878 ops/s
[info] # Warmup Iteration   4: 337113.278 ops/s
[info] # Warmup Iteration   5: 332348.093 ops/s
[info] Iteration   1: 333531.554 ops/s
[info]                  ·gc.alloc.rate:               460.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          2172.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2414.118 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 336195.874 ops/s
[info]                  ·gc.alloc.rate:               470.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          2200.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3140.336 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 335808.669 ops/s
[info]                  ·gc.alloc.rate:      452.336 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 334874.347 ops/s
[info]                  ·gc.alloc.rate:                   476.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              2239.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3152.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 336456.292 ops/s
[info]                  ·gc.alloc.rate:               471.664 MB/sec
[info]                  ·gc.alloc.rate.norm:          2206.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3139.589 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   335373.347 ±(99.9%) 4588.583 ops/s [Average]
[info]   (min, avg, max) = (333531.554, 335373.347, 336456.292), stdev = 1191.641
[info]   CI (99.9%): [330784.764, 339961.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   466.196 ±(99.9%) 37.371 MB/sec [Average]
[info]   (min, avg, max) = (452.336, 466.196, 476.459), stdev = 9.705
[info]   CI (99.9%): [428.825, 503.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2187.694 ±(99.9%) 171.874 B/op [Average]
[info]   (min, avg, max) = (2120.001, 2187.694, 2239.054), stdev = 44.635
[info]   CI (99.9%): [2015.819, 2359.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.910 ±(99.9%) 1118.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.910, 671.163), stdev = 290.569
[info]   CI (99.9%): [≈ 0, 1623.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2369.355 ±(99.9%) 5243.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2369.355, 3152.732), stdev = 1361.727
[info]   CI (99.9%): [≈ 0, 7612.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209594.476 ops/s
[info] # Warmup Iteration   2: 349533.941 ops/s
[info] # Warmup Iteration   3: 366195.690 ops/s
[info] # Warmup Iteration   4: 367069.156 ops/s
[info] # Warmup Iteration   5: 366932.721 ops/s
[info] Iteration   1: 366830.813 ops/s
[info]                  ·gc.alloc.rate:      3.730 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 367302.005 ops/s
[info]                  ·gc.alloc.rate:      3.735 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 366258.159 ops/s
[info]                  ·gc.alloc.rate:      4.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 20.865 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 367267.379 ops/s
[info]                  ·gc.alloc.rate:      3.734 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 367174.969 ops/s
[info]                  ·gc.alloc.rate:      3.733 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   366966.665 ±(99.9%) 1685.849 ops/s [Average]
[info]   (min, avg, max) = (366258.159, 366966.665, 367302.005), stdev = 437.810
[info]   CI (99.9%): [365280.816, 368652.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.958 ±(99.9%) 1.935 MB/sec [Average]
[info]   (min, avg, max) = (3.730, 3.958, 4.856), stdev = 0.502
[info]   CI (99.9%): [2.023, 5.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.974 ±(99.9%) 8.375 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.974, 20.865), stdev = 2.175
[info]   CI (99.9%): [8.599, 25.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4423.598 ops/s
[info] # Warmup Iteration   2: 46995.075 ops/s
[info] # Warmup Iteration   3: 52474.071 ops/s
[info] # Warmup Iteration   4: 52581.673 ops/s
[info] # Warmup Iteration   5: 50638.081 ops/s
[info] Iteration   1: 52567.336 ops/s
[info]                  ·gc.alloc.rate:               1398.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          41878.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39917.926 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 52745.956 ops/s
[info]                  ·gc.alloc.rate:                   1395.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              41637.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39882.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 52823.843 ops/s
[info]                  ·gc.alloc.rate:                   1408.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              41949.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39913.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 52960.398 ops/s
[info]                  ·gc.alloc.rate:                   1397.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              41533.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39869.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 52851.890 ops/s
[info]                  ·gc.alloc.rate:                   1420.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              42312.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40001.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   52789.885 ±(99.9%) 563.072 ops/s [Average]
[info]   (min, avg, max) = (52567.336, 52789.885, 52960.398), stdev = 146.228
[info]   CI (99.9%): [52226.813, 53352.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1404.241 ±(99.9%) 40.347 MB/sec [Average]
[info]   (min, avg, max) = (1395.747, 1404.241, 1420.968), stdev = 10.478
[info]   CI (99.9%): [1363.894, 1444.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41862.482 ±(99.9%) 1170.574 B/op [Average]
[info]   (min, avg, max) = (41533.078, 41862.482, 42312.705), stdev = 303.994
[info]   CI (99.9%): [40691.908, 43033.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1338.986 ±(99.9%) 15.417 MB/sec [Average]
[info]   (min, avg, max) = (1333.260, 1338.986, 1343.360), stdev = 4.004
[info]   CI (99.9%): [1323.569, 1354.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39917.066 ±(99.9%) 198.811 B/op [Average]
[info]   (min, avg, max) = (39869.208, 39917.066, 40001.769), stdev = 51.631
[info]   CI (99.9%): [39718.255, 40115.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.687), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.951 ±(99.9%) 33.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.951, 20.415), stdev = 8.693
[info]   CI (99.9%): [≈ 0, 38.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7026.702 ops/s
[info] # Warmup Iteration   2: 65772.115 ops/s
[info] # Warmup Iteration   3: 72409.466 ops/s
[info] # Warmup Iteration   4: 75117.500 ops/s
[info] # Warmup Iteration   5: 74938.122 ops/s
[info] Iteration   1: 75029.274 ops/s
[info]                  ·gc.alloc.rate:               1608.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          33733.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28143.126 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 74936.467 ops/s
[info]                  ·gc.alloc.rate:                   1618.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              33976.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28177.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 75001.910 ops/s
[info]                  ·gc.alloc.rate:                   1632.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              34256.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42228.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 75515.967 ops/s
[info]                  ·gc.alloc.rate:                   1628.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              33947.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27890.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 75525.986 ops/s
[info]                  ·gc.alloc.rate:               1616.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          33683.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27873.188 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   75201.921 ±(99.9%) 1129.099 ops/s [Average]
[info]   (min, avg, max) = (74936.467, 75201.921, 75525.986), stdev = 293.224
[info]   CI (99.9%): [74072.821, 76331.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1620.837 ±(99.9%) 37.993 MB/sec [Average]
[info]   (min, avg, max) = (1608.155, 1620.837, 1632.519), stdev = 9.867
[info]   CI (99.9%): [1582.843, 1658.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33919.706 ±(99.9%) 878.531 B/op [Average]
[info]   (min, avg, max) = (33683.845, 33919.706, 34256.972), stdev = 228.152
[info]   CI (99.9%): [33041.175, 34798.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1474.378 ±(99.9%) 1158.192 MB/sec [Average]
[info]   (min, avg, max) = (1337.590, 1474.378, 2012.416), stdev = 300.779
[info]   CI (99.9%): [316.185, 2632.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30862.552 ±(99.9%) 24472.543 B/op [Average]
[info]   (min, avg, max) = (27873.188, 30862.552, 42228.759), stdev = 6355.442
[info]   CI (99.9%): [6390.009, 55335.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.705), stdev = 1.640
[info]   CI (99.9%): [≈ 0, 7.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.246 ±(99.9%) 132.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.246, 77.755), stdev = 34.408
[info]   CI (99.9%): [≈ 0, 148.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25860.390 ops/s
[info] # Warmup Iteration   2: 122946.455 ops/s
[info] # Warmup Iteration   3: 128993.337 ops/s
[info] # Warmup Iteration   4: 136345.695 ops/s
[info] # Warmup Iteration   5: 136206.047 ops/s
[info] Iteration   1: 136436.961 ops/s
[info]                  ·gc.alloc.rate:               681.505 MB/sec
[info]                  ·gc.alloc.rate.norm:          7861.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7676.331 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 136274.018 ops/s
[info]                  ·gc.alloc.rate:               691.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          7986.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7685.454 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 136293.004 ops/s
[info]                  ·gc.alloc.rate:                   684.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              7898.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7696.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 136393.680 ops/s
[info]                  ·gc.alloc.rate:               688.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          7949.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7690.731 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 136440.210 ops/s
[info]                  ·gc.alloc.rate:                   688.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              7942.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7695.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   136367.575 ±(99.9%) 304.940 ops/s [Average]
[info]   (min, avg, max) = (136274.018, 136367.575, 136440.210), stdev = 79.192
[info]   CI (99.9%): [136062.635, 136672.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   686.908 ±(99.9%) 15.597 MB/sec [Average]
[info]   (min, avg, max) = (681.505, 686.908, 691.548), stdev = 4.051
[info]   CI (99.9%): [671.311, 702.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7927.729 ±(99.9%) 186.026 B/op [Average]
[info]   (min, avg, max) = (7861.652, 7927.729, 7986.416), stdev = 48.310
[info]   CI (99.9%): [7741.703, 8113.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.213 ±(99.9%) 2.819 MB/sec [Average]
[info]   (min, avg, max) = (665.440, 666.213, 667.137), stdev = 0.732
[info]   CI (99.9%): [663.394, 669.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7688.875 ±(99.9%) 31.763 B/op [Average]
[info]   (min, avg, max) = (7676.331, 7688.875, 7696.204), stdev = 8.249
[info]   CI (99.9%): [7657.112, 7720.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.240), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87473.289 ops/s
[info] # Warmup Iteration   2: 254861.178 ops/s
[info] # Warmup Iteration   3: 255183.797 ops/s
[info] # Warmup Iteration   4: 263084.627 ops/s
[info] # Warmup Iteration   5: 258576.641 ops/s
[info] Iteration   1: 262286.223 ops/s
[info]                  ·gc.alloc.rate:                   1122.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              6733.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8057.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 263589.566 ops/s
[info]                  ·gc.alloc.rate:               1101.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          6576.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4011.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 260013.095 ops/s
[info]                  ·gc.alloc.rate:                   1114.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              6746.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8136.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 262902.510 ops/s
[info]                  ·gc.alloc.rate:               1109.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          6640.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4027.632 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 249806.626 ops/s
[info]                  ·gc.alloc.rate:                   1080.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              6809.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8477.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.230 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   259719.604 ±(99.9%) 21956.126 ops/s [Average]
[info]   (min, avg, max) = (249806.626, 259719.604, 263589.566), stdev = 5701.936
[info]   CI (99.9%): [237763.478, 281675.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1105.653 ±(99.9%) 60.919 MB/sec [Average]
[info]   (min, avg, max) = (1080.785, 1105.653, 1122.196), stdev = 15.820
[info]   CI (99.9%): [1044.734, 1166.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6701.388 ±(99.9%) 354.669 B/op [Average]
[info]   (min, avg, max) = (6576.750, 6701.388, 6809.625), stdev = 92.107
[info]   CI (99.9%): [6346.718, 7056.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.452 ±(99.9%) 1417.187 MB/sec [Average]
[info]   (min, avg, max) = (671.797, 1075.452, 1345.525), stdev = 368.039
[info]   CI (99.9%): [≈ 0, 2492.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6542.228 ±(99.9%) 8888.846 B/op [Average]
[info]   (min, avg, max) = (4011.201, 6542.228, 8477.648), stdev = 2308.405
[info]   CI (99.9%): [≈ 0, 15431.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 4.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.893), stdev = 1.287
[info]   CI (99.9%): [≈ 0, 5.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.721 ±(99.9%) 31.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.721, 18.230), stdev = 8.111
[info]   CI (99.9%): [≈ 0, 34.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1173.361 ops/s
[info] # Warmup Iteration   2: 18925.667 ops/s
[info] # Warmup Iteration   3: 27209.136 ops/s
[info] # Warmup Iteration   4: 27020.502 ops/s
[info] # Warmup Iteration   5: 27237.423 ops/s
[info] Iteration   1: 26576.285 ops/s
[info]                  ·gc.alloc.rate:                   1430.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              84730.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79015.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27384.392 ops/s
[info]                  ·gc.alloc.rate:                   1470.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              84487.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76798.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27428.099 ops/s
[info]                  ·gc.alloc.rate:                   1481.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              84980.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76790.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27441.752 ops/s
[info]                  ·gc.alloc.rate:                   1493.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              85677.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76882.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27639.062 ops/s
[info]                  ·gc.alloc.rate:                   1514.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              86213.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114590.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   27293.918 ±(99.9%) 1590.188 ops/s [Average]
[info]   (min, avg, max) = (26576.285, 27293.918, 27639.062), stdev = 412.967
[info]   CI (99.9%): [25703.730, 28884.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1478.137 ±(99.9%) 120.192 MB/sec [Average]
[info]   (min, avg, max) = (1430.792, 1478.137, 1514.649), stdev = 31.214
[info]   CI (99.9%): [1357.945, 1598.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85217.767 ±(99.9%) 2743.827 B/op [Average]
[info]   (min, avg, max) = (84487.099, 85217.767, 86213.773), stdev = 712.563
[info]   CI (99.9%): [82473.940, 87961.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.566 ±(99.9%) 1163.772 MB/sec [Average]
[info]   (min, avg, max) = (1334.277, 1472.566, 2013.191), stdev = 302.228
[info]   CI (99.9%): [308.793, 2636.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84815.410 ±(99.9%) 64197.975 B/op [Average]
[info]   (min, avg, max) = (76790.332, 84815.410, 114590.801), stdev = 16672.010
[info]   CI (99.9%): [20617.435, 149013.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.349 ±(99.9%) 2.518 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.349, 1.517), stdev = 0.654
[info]   CI (99.9%): [≈ 0, 2.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.067 ±(99.9%) 144.334 B/op [Average]
[info]   (min, avg, max) = (1.196, 20.067, 86.982), stdev = 37.483
[info]   CI (99.9%): [≈ 0, 164.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49696.323 ops/s
[info] # Warmup Iteration   2: 175712.836 ops/s
[info] # Warmup Iteration   3: 179106.994 ops/s
[info] # Warmup Iteration   4: 181371.384 ops/s
[info] # Warmup Iteration   5: 179768.899 ops/s
[info] Iteration   1: 180086.199 ops/s
[info]                  ·gc.alloc.rate:               1016.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          8885.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5830.500 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 179724.539 ops/s
[info]                  ·gc.alloc.rate:                   1029.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              9019.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11695.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 180560.452 ops/s
[info]                  ·gc.alloc.rate:                   1013.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              8834.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5826.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 179554.807 ops/s
[info]                  ·gc.alloc.rate:               1020.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          8947.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11721.821 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 177366.226 ops/s
[info]                  ·gc.alloc.rate:               1006.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          8932.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5934.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   179458.444 ±(99.9%) 4741.911 ops/s [Average]
[info]   (min, avg, max) = (177366.226, 179458.444, 180560.452), stdev = 1231.459
[info]   CI (99.9%): [174716.533, 184200.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1017.492 ±(99.9%) 33.341 MB/sec [Average]
[info]   (min, avg, max) = (1006.628, 1017.492, 1029.921), stdev = 8.659
[info]   CI (99.9%): [984.151, 1050.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8923.948 ±(99.9%) 267.125 B/op [Average]
[info]   (min, avg, max) = (8834.340, 8923.948, 9019.233), stdev = 69.371
[info]   CI (99.9%): [8656.823, 9191.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.424 ±(99.9%) 1409.444 MB/sec [Average]
[info]   (min, avg, max) = (667.118, 935.424, 1337.216), stdev = 366.028
[info]   CI (99.9%): [≈ 0, 2344.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8201.920 ±(99.9%) 12328.323 B/op [Average]
[info]   (min, avg, max) = (5826.809, 8201.920, 11721.821), stdev = 3201.626
[info]   CI (99.9%): [≈ 0, 20530.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.182), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220757.800 ops/s
[info] # Warmup Iteration   2: 455577.608 ops/s
[info] # Warmup Iteration   3: 482061.723 ops/s
[info] # Warmup Iteration   4: 483734.333 ops/s
[info] # Warmup Iteration   5: 480604.938 ops/s
[info] Iteration   1: 481769.348 ops/s
[info]                  ·gc.alloc.rate:               1463.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          4779.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4365.440 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 475687.303 ops/s
[info]                  ·gc.alloc.rate:                   1442.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              4773.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4423.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 482830.278 ops/s
[info]                  ·gc.alloc.rate:               1453.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          4738.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4362.362 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 481375.234 ops/s
[info]                  ·gc.alloc.rate:                   1474.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              4822.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6574.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 485232.393 ops/s
[info]                  ·gc.alloc.rate:               1472.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          4774.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4357.048 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   481378.911 ±(99.9%) 13546.204 ops/s [Average]
[info]   (min, avg, max) = (475687.303, 481378.911, 485232.393), stdev = 3517.906
[info]   CI (99.9%): [467832.708, 494925.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1461.337 ±(99.9%) 51.091 MB/sec [Average]
[info]   (min, avg, max) = (1442.776, 1461.337, 1474.895), stdev = 13.268
[info]   CI (99.9%): [1410.246, 1512.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4777.738 ±(99.9%) 114.432 B/op [Average]
[info]   (min, avg, max) = (4738.725, 4777.738, 4822.247), stdev = 29.718
[info]   CI (99.9%): [4663.307, 4892.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1473.154 ±(99.9%) 1157.298 MB/sec [Average]
[info]   (min, avg, max) = (1336.488, 1473.154, 2010.766), stdev = 300.547
[info]   CI (99.9%): [315.855, 2630.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4816.523 ±(99.9%) 3785.180 B/op [Average]
[info]   (min, avg, max) = (4357.048, 4816.523, 6574.305), stdev = 982.999
[info]   CI (99.9%): [1031.343, 8601.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.069), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284239.272 ops/s
[info] # Warmup Iteration   2: 523766.274 ops/s
[info] # Warmup Iteration   3: 526869.169 ops/s
[info] # Warmup Iteration   4: 532390.510 ops/s
[info] # Warmup Iteration   5: 520727.304 ops/s
[info] Iteration   1: 529339.187 ops/s
[info]                  ·gc.alloc.rate:               987.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          2936.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1996.544 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 527366.747 ops/s
[info]                  ·gc.alloc.rate:                   1000.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              2986.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4011.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 528985.593 ops/s
[info]                  ·gc.alloc.rate:                   998.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              2970.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2000.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 526314.072 ops/s
[info]                  ·gc.alloc.rate:               993.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          2969.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2010.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 531302.271 ops/s
[info]                  ·gc.alloc.rate:               1015.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          3007.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3985.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   528661.574 ±(99.9%) 7388.012 ops/s [Average]
[info]   (min, avg, max) = (526314.072, 528661.574, 531302.271), stdev = 1918.643
[info]   CI (99.9%): [521273.562, 536049.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   999.008 ±(99.9%) 39.824 MB/sec [Average]
[info]   (min, avg, max) = (987.707, 999.008, 1015.177), stdev = 10.342
[info]   CI (99.9%): [959.184, 1038.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2974.122 ±(99.9%) 100.219 B/op [Average]
[info]   (min, avg, max) = (2936.619, 2974.122, 3007.501), stdev = 26.026
[info]   CI (99.9%): [2873.903, 3074.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   941.249 ±(99.9%) 1418.879 MB/sec [Average]
[info]   (min, avg, max) = (671.521, 941.249, 1345.465), stdev = 368.478
[info]   CI (99.9%): [≈ 0, 2360.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2801.228 ±(99.9%) 4210.442 B/op [Average]
[info]   (min, avg, max) = (1996.544, 2801.228, 4011.957), stdev = 1093.438
[info]   CI (99.9%): [≈ 0, 7011.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3959.830 ops/s
[info] # Warmup Iteration   2: 54024.642 ops/s
[info] # Warmup Iteration   3: 67370.112 ops/s
[info] # Warmup Iteration   4: 66668.502 ops/s
[info] # Warmup Iteration   5: 68418.811 ops/s
[info] Iteration   1: 68376.677 ops/s
[info]                  ·gc.alloc.rate:                   1513.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              34836.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30695.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 69012.949 ops/s
[info]                  ·gc.alloc.rate:               1535.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          35001.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30489.280 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 68065.685 ops/s
[info]                  ·gc.alloc.rate:                   1527.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              35308.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46479.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.515 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 68411.378 ops/s
[info]                  ·gc.alloc.rate:               1533.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          35282.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30894.558 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 68730.843 ops/s
[info]                  ·gc.alloc.rate:               1527.444 MB/sec
[info]                  ·gc.alloc.rate.norm:          34976.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30796.953 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   68519.506 ±(99.9%) 1396.615 ops/s [Average]
[info]   (min, avg, max) = (68065.685, 68519.506, 69012.949), stdev = 362.697
[info]   CI (99.9%): [67122.891, 69916.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1527.458 ±(99.9%) 33.460 MB/sec [Average]
[info]   (min, avg, max) = (1513.456, 1527.458, 1535.526), stdev = 8.690
[info]   CI (99.9%): [1493.998, 1560.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35081.153 ±(99.9%) 792.980 B/op [Average]
[info]   (min, avg, max) = (34836.220, 35081.153, 35308.556), stdev = 205.934
[info]   CI (99.9%): [34288.172, 35874.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1473.856 ±(99.9%) 1154.589 MB/sec [Average]
[info]   (min, avg, max) = (1333.552, 1473.856, 2010.171), stdev = 299.843
[info]   CI (99.9%): [319.267, 2628.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33871.207 ±(99.9%) 27147.494 B/op [Average]
[info]   (min, avg, max) = (30489.280, 33871.207, 46479.979), stdev = 7050.118
[info]   CI (99.9%): [6723.713, 61018.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.541), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.599 ±(99.9%) 21.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.599, 12.515), stdev = 5.547
[info]   CI (99.9%): [≈ 0, 23.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29546.343 ops/s
[info] # Warmup Iteration   2: 88361.665 ops/s
[info] # Warmup Iteration   3: 94606.581 ops/s
[info] # Warmup Iteration   4: 97037.746 ops/s
[info] # Warmup Iteration   5: 100125.269 ops/s
[info] Iteration   1: 99830.855 ops/s
[info]                  ·gc.alloc.rate:               1622.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          25576.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21172.745 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 99891.982 ops/s
[info]                  ·gc.alloc.rate:                   1625.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              25669.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31770.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.279 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 100170.599 ops/s
[info]                  ·gc.alloc.rate:                   1626.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              25560.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21100.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 98807.127 ops/s
[info]                  ·gc.alloc.rate:               1617.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          25757.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32012.647 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 100127.054 ops/s
[info]                  ·gc.alloc.rate:               1650.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          25939.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21045.861 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   99765.523 ±(99.9%) 2138.385 ops/s [Average]
[info]   (min, avg, max) = (98807.127, 99765.523, 100170.599), stdev = 555.332
[info]   CI (99.9%): [97627.139, 101903.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1628.411 ±(99.9%) 49.173 MB/sec [Average]
[info]   (min, avg, max) = (1617.020, 1628.411, 1650.222), stdev = 12.770
[info]   CI (99.9%): [1579.237, 1677.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25700.562 ±(99.9%) 596.417 B/op [Average]
[info]   (min, avg, max) = (25560.662, 25700.562, 25939.052), stdev = 154.888
[info]   CI (99.9%): [25104.144, 26296.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.326 ±(99.9%) 1411.321 MB/sec [Average]
[info]   (min, avg, max) = (1338.921, 1609.326, 2011.894), stdev = 366.516
[info]   CI (99.9%): [198.005, 3020.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25420.565 ±(99.9%) 22750.241 B/op [Average]
[info]   (min, avg, max) = (21045.861, 25420.565, 32012.647), stdev = 5908.165
[info]   CI (99.9%): [2670.324, 48170.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.756 ±(99.9%) 4.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 2.804), stdev = 1.220
[info]   CI (99.9%): [≈ 0, 5.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.930 ±(99.9%) 74.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.930, 44.279), stdev = 19.270
[info]   CI (99.9%): [≈ 0, 86.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 3.194
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34570.606 ops/s
[info] # Warmup Iteration   2: 162634.353 ops/s
[info] # Warmup Iteration   3: 174419.121 ops/s
[info] # Warmup Iteration   4: 177218.608 ops/s
[info] # Warmup Iteration   5: 178799.369 ops/s
[info] Iteration   1: 179117.794 ops/s
[info]                  ·gc.alloc.rate:               768.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          6752.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5850.331 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 178918.455 ops/s
[info]                  ·gc.alloc.rate:               758.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          6675.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5862.697 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 178595.885 ops/s
[info]                  ·gc.alloc.rate:                   764.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              6733.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5873.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 178153.279 ops/s
[info]                  ·gc.alloc.rate:               762.217 MB/sec
[info]                  ·gc.alloc.rate.norm:          6733.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5893.786 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 179156.120 ops/s
[info]                  ·gc.alloc.rate:               764.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          6713.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5860.794 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   178788.307 ±(99.9%) 1612.074 ops/s [Average]
[info]   (min, avg, max) = (178153.279, 178788.307, 179156.120), stdev = 418.651
[info]   CI (99.9%): [177176.232, 180400.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   763.651 ±(99.9%) 13.682 MB/sec [Average]
[info]   (min, avg, max) = (758.928, 763.651, 768.703), stdev = 3.553
[info]   CI (99.9%): [749.968, 777.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6721.494 ±(99.9%) 112.999 B/op [Average]
[info]   (min, avg, max) = (6675.250, 6721.494, 6752.423), stdev = 29.345
[info]   CI (99.9%): [6608.495, 6834.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.697 ±(99.9%) 1.830 MB/sec [Average]
[info]   (min, avg, max) = (666.008, 666.697, 667.167), stdev = 0.475
[info]   CI (99.9%): [664.867, 668.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5868.155 ±(99.9%) 63.381 B/op [Average]
[info]   (min, avg, max) = (5850.331, 5868.155, 5893.786), stdev = 16.460
[info]   CI (99.9%): [5804.774, 5931.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85544.627 ops/s
[info] # Warmup Iteration   2: 255478.042 ops/s
[info] # Warmup Iteration   3: 277511.071 ops/s
[info] # Warmup Iteration   4: 264682.595 ops/s
[info] # Warmup Iteration   5: 277424.427 ops/s
[info] Iteration   1: 277361.659 ops/s
[info]                  ·gc.alloc.rate:               1030.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          5848.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7616.400 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 279046.654 ops/s
[info]                  ·gc.alloc.rate:               1020.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          5755.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3787.291 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 277599.482 ops/s
[info]                  ·gc.alloc.rate:                   1021.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              5791.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7617.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 279073.545 ops/s
[info]                  ·gc.alloc.rate:               1007.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          5683.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3790.681 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 278313.458 ops/s
[info]                  ·gc.alloc.rate:                   1032.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              5837.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7605.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   278278.960 ±(99.9%) 3059.409 ops/s [Average]
[info]   (min, avg, max) = (277361.659, 278278.960, 279073.545), stdev = 794.519
[info]   CI (99.9%): [275219.551, 281338.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1022.535 ±(99.9%) 37.636 MB/sec [Average]
[info]   (min, avg, max) = (1007.867, 1022.535, 1032.305), stdev = 9.774
[info]   CI (99.9%): [984.899, 1060.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5783.306 ±(99.9%) 257.613 B/op [Average]
[info]   (min, avg, max) = (5683.985, 5783.306, 5848.240), stdev = 66.901
[info]   CI (99.9%): [5525.693, 6040.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1074.883 ±(99.9%) 1416.848 MB/sec [Average]
[info]   (min, avg, max) = (671.477, 1074.883, 1344.921), stdev = 367.951
[info]   CI (99.9%): [≈ 0, 2491.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6083.547 ±(99.9%) 8065.727 B/op [Average]
[info]   (min, avg, max) = (3787.291, 6083.547, 7617.616), stdev = 2094.644
[info]   CI (99.9%): [≈ 0, 14149.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.236), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5115.066 ops/s
[info] # Warmup Iteration   2: 62520.766 ops/s
[info] # Warmup Iteration   3: 67040.227 ops/s
[info] # Warmup Iteration   4: 69087.136 ops/s
[info] # Warmup Iteration   5: 69726.655 ops/s
[info] Iteration   1: 67691.085 ops/s
[info]                  ·gc.alloc.rate:                   2557.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              59430.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62153.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.940 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 69894.092 ops/s
[info]                  ·gc.alloc.rate:                   2622.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              59056.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60067.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.344 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 70116.837 ops/s
[info]                  ·gc.alloc.rate:               2671.812 MB/sec
[info]                  ·gc.alloc.rate.norm:          59954.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59958.786 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 70128.508 ops/s
[info]                  ·gc.alloc.rate:               2672.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          59967.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60127.925 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 69190.075 ops/s
[info]                  ·gc.alloc.rate:               2611.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          59403.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45829.079 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   69404.119 ±(99.9%) 3970.591 ops/s [Average]
[info]   (min, avg, max) = (67691.085, 69404.119, 70128.508), stdev = 1031.150
[info]   CI (99.9%): [65433.528, 73374.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2626.977 ±(99.9%) 184.655 MB/sec [Average]
[info]   (min, avg, max) = (2557.051, 2626.977, 2672.074), stdev = 47.954
[info]   CI (99.9%): [2442.322, 2811.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   59562.319 ±(99.9%) 1511.906 B/op [Average]
[info]   (min, avg, max) = (59056.311, 59562.319, 59967.456), stdev = 392.637
[info]   CI (99.9%): [58050.413, 61074.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2541.525 ±(99.9%) 1134.410 MB/sec [Average]
[info]   (min, avg, max) = (2014.577, 2541.525, 2679.224), stdev = 294.603
[info]   CI (99.9%): [1407.115, 3675.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57627.426 ±(99.9%) 25638.673 B/op [Average]
[info]   (min, avg, max) = (45829.079, 57627.426, 62153.784), stdev = 6658.282
[info]   CI (99.9%): [31988.753, 83266.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.729), stdev = 0.318
[info]   CI (99.9%): [≈ 0, 1.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.857 ±(99.9%) 28.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.857, 16.940), stdev = 7.384
[info]   CI (99.9%): [≈ 0, 32.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65597.377 ops/s
[info] # Warmup Iteration   2: 194150.092 ops/s
[info] # Warmup Iteration   3: 197383.890 ops/s
[info] # Warmup Iteration   4: 203726.307 ops/s
[info] # Warmup Iteration   5: 202793.633 ops/s
[info] Iteration   1: 203277.454 ops/s
[info]                  ·gc.alloc.rate:               1411.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          10931.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10387.251 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 203911.166 ops/s
[info]                  ·gc.alloc.rate:                   1423.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              10983.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10359.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 203589.049 ops/s
[info]                  ·gc.alloc.rate:                   1435.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              11097.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10381.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 205022.988 ops/s
[info]                  ·gc.alloc.rate:                   1432.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              10993.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10299.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 204723.781 ops/s
[info]                  ·gc.alloc.rate:                   1444.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              11108.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10298.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   204104.888 ±(99.9%) 2864.916 ops/s [Average]
[info]   (min, avg, max) = (203277.454, 204104.888, 205022.988), stdev = 744.010
[info]   CI (99.9%): [201239.972, 206969.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1429.538 ±(99.9%) 48.434 MB/sec [Average]
[info]   (min, avg, max) = (1411.771, 1429.538, 1444.902), stdev = 12.578
[info]   CI (99.9%): [1381.104, 1477.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11022.844 ±(99.9%) 296.152 B/op [Average]
[info]   (min, avg, max) = (10931.033, 11022.844, 11108.304), stdev = 76.910
[info]   CI (99.9%): [10726.691, 11318.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.627 ±(99.9%) 4.971 MB/sec [Average]
[info]   (min, avg, max) = (1339.559, 1341.627, 1342.907), stdev = 1.291
[info]   CI (99.9%): [1336.656, 1346.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10345.173 ±(99.9%) 167.904 B/op [Average]
[info]   (min, avg, max) = (10298.432, 10345.173, 10387.251), stdev = 43.604
[info]   CI (99.9%): [10177.270, 10513.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.965 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.018), stdev = 1.289
[info]   CI (99.9%): [≈ 0, 5.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.722 ±(99.9%) 38.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.722, 23.334), stdev = 9.970
[info]   CI (99.9%): [≈ 0, 44.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154919.753 ops/s
[info] # Warmup Iteration   2: 488717.113 ops/s
[info] # Warmup Iteration   3: 512973.361 ops/s
[info] # Warmup Iteration   4: 513883.800 ops/s
[info] # Warmup Iteration   5: 517649.872 ops/s
[info] Iteration   1: 512330.207 ops/s
[info]                  ·gc.alloc.rate:               417.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          1283.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1571.556 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 509594.179 ops/s
[info]                  ·gc.alloc.rate:               418.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          1292.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1580.058 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 506015.915 ops/s
[info]                  ·gc.alloc.rate:                   417.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              1298.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2072.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 512014.854 ops/s
[info]                  ·gc.alloc.rate:      403.558 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 511386.306 ops/s
[info]                  ·gc.alloc.rate:               427.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          1314.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2051.183 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   510268.292 ±(99.9%) 10020.753 ops/s [Average]
[info]   (min, avg, max) = (506015.915, 510268.292, 512330.207), stdev = 2602.358
[info]   CI (99.9%): [500247.539, 520289.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   416.888 ±(99.9%) 32.608 MB/sec [Average]
[info]   (min, avg, max) = (403.558, 416.888, 427.161), stdev = 8.468
[info]   CI (99.9%): [384.280, 449.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1285.711 ±(99.9%) 107.529 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1285.711, 1314.471), stdev = 27.925
[info]   CI (99.9%): [1178.182, 1393.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.270 ±(99.9%) 1057.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.270, 666.600), stdev = 274.610
[info]   CI (99.9%): [≈ 0, 1528.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1455.156 ±(99.9%) 3269.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1455.156, 2072.985), stdev = 849.057
[info]   CI (99.9%): [≈ 0, 4724.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344423.493 ops/s
[info] # Warmup Iteration   2: 634398.097 ops/s
[info] # Warmup Iteration   3: 633163.461 ops/s
[info] # Warmup Iteration   4: 641623.444 ops/s
[info] # Warmup Iteration   5: 646444.211 ops/s
[info] Iteration   1: 644173.185 ops/s
[info]                  ·gc.alloc.rate:                   366.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1249.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 648172.535 ops/s
[info]                  ·gc.alloc.rate:      349.232 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 642339.298 ops/s
[info]                  ·gc.alloc.rate:               358.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          877.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1253.424 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 644207.184 ops/s
[info]                  ·gc.alloc.rate:               367.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          898.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1638.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 646065.060 ops/s
[info]                  ·gc.alloc.rate:      348.071 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   644991.452 ±(99.9%) 8521.693 ops/s [Average]
[info]   (min, avg, max) = (642339.298, 644991.452, 648172.535), stdev = 2213.056
[info]   CI (99.9%): [636469.760, 653513.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357.969 ±(99.9%) 35.671 MB/sec [Average]
[info]   (min, avg, max) = (348.071, 357.969, 367.696), stdev = 9.264
[info]   CI (99.9%): [322.298, 393.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   873.407 ±(99.9%) 94.289 B/op [Average]
[info]   (min, avg, max) = (848.001, 873.407, 898.020), stdev = 24.487
[info]   CI (99.9%): [779.118, 967.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.887 ±(99.9%) 1217.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.887, 671.014), stdev = 316.122
[info]   CI (99.9%): [≈ 0, 1556.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   828.441 ±(99.9%) 2974.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 828.441, 1638.809), stdev = 772.597
[info]   CI (99.9%): [≈ 0, 3803.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298332.349 ops/s
[info] # Warmup Iteration   2: 679569.580 ops/s
[info] # Warmup Iteration   3: 690917.953 ops/s
[info] # Warmup Iteration   4: 691801.144 ops/s
[info] # Warmup Iteration   5: 690732.337 ops/s
[info] Iteration   1: 690953.708 ops/s
[info]                  ·gc.alloc.rate:      7.025 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 691676.381 ops/s
[info]                  ·gc.alloc.rate:      7.032 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 692011.146 ops/s
[info]                  ·gc.alloc.rate:      7.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 691723.967 ops/s
[info]                  ·gc.alloc.rate:      7.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 691827.074 ops/s
[info]                  ·gc.alloc.rate:      7.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   691638.455 ±(99.9%) 1554.755 ops/s [Average]
[info]   (min, avg, max) = (690953.708, 691638.455, 692011.146), stdev = 403.765
[info]   CI (99.9%): [690083.700, 693193.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.032 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (7.025, 7.032, 7.036), stdev = 0.004
[info]   CI (99.9%): [7.016, 7.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12865.998 ops/s
[info] # Warmup Iteration   2: 33904.353 ops/s
[info] # Warmup Iteration   3: 34839.903 ops/s
[info] # Warmup Iteration   4: 35372.993 ops/s
[info] # Warmup Iteration   5: 35455.087 ops/s
[info] Iteration   1: 35372.176 ops/s
[info]                  ·gc.alloc.rate:                   1920.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              85436.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89569.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35716.683 ops/s
[info]                  ·gc.alloc.rate:                   1937.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              85345.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88592.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35684.193 ops/s
[info]                  ·gc.alloc.rate:               1961.975 MB/sec
[info]                  ·gc.alloc.rate.norm:          86520.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88465.979 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 35814.944 ops/s
[info]                  ·gc.alloc.rate:               1955.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          85920.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88137.523 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 35584.810 ops/s
[info]                  ·gc.alloc.rate:               1930.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          85365.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59185.491 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35634.561 ±(99.9%) 647.397 ops/s [Average]
[info]   (min, avg, max) = (35372.176, 35634.561, 35814.944), stdev = 168.127
[info]   CI (99.9%): [34987.164, 36281.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1941.016 ±(99.9%) 67.183 MB/sec [Average]
[info]   (min, avg, max) = (1920.251, 1941.016, 1961.975), stdev = 17.447
[info]   CI (99.9%): [1873.833, 2008.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85717.446 ±(99.9%) 1951.213 B/op [Average]
[info]   (min, avg, max) = (85345.086, 85717.446, 86520.213), stdev = 506.724
[info]   CI (99.9%): [83766.233, 87668.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.867 ±(99.9%) 1155.275 MB/sec [Average]
[info]   (min, avg, max) = (1338.201, 1874.867, 2013.143), stdev = 300.021
[info]   CI (99.9%): [719.592, 3030.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82790.180 ±(99.9%) 50852.397 B/op [Average]
[info]   (min, avg, max) = (59185.491, 82790.180, 89569.695), stdev = 13206.206
[info]   CI (99.9%): [31937.783, 133642.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 5.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.019), stdev = 1.308
[info]   CI (99.9%): [≈ 0, 5.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.566 ±(99.9%) 224.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.566, 134.303), stdev = 58.197
[info]   CI (99.9%): [≈ 0, 258.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.864
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61230.381 ops/s
[info] # Warmup Iteration   2: 741692.969 ops/s
[info] # Warmup Iteration   3: 843810.042 ops/s
[info] # Warmup Iteration   4: 866693.027 ops/s
[info] # Warmup Iteration   5: 869344.407 ops/s
[info] Iteration   1: 875365.927 ops/s
[info]                  ·gc.alloc.rate:                   2333.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              4196.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3618.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 876935.837 ops/s
[info]                  ·gc.alloc.rate:                   2350.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              4217.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3599.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 863500.457 ops/s
[info]                  ·gc.alloc.rate:               2318.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          4224.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4872.405 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 878600.891 ops/s
[info]                  ·gc.alloc.rate:               2357.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          4222.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3597.135 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 864590.775 ops/s
[info]                  ·gc.alloc.rate:               2320.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          4224.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3661.482 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   871798.777 ±(99.9%) 27646.987 ops/s [Average]
[info]   (min, avg, max) = (863500.457, 871798.777, 878600.891), stdev = 7179.835
[info]   CI (99.9%): [844151.790, 899445.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2336.200 ±(99.9%) 66.787 MB/sec [Average]
[info]   (min, avg, max) = (2318.472, 2336.200, 2357.326), stdev = 17.344
[info]   CI (99.9%): [2269.413, 2402.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4217.180 ±(99.9%) 46.350 B/op [Average]
[info]   (min, avg, max) = (4196.261, 4217.180, 4224.856), stdev = 12.037
[info]   CI (99.9%): [4170.830, 4263.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2142.449 ±(99.9%) 1143.876 MB/sec [Average]
[info]   (min, avg, max) = (2006.166, 2142.449, 2673.828), stdev = 297.061
[info]   CI (99.9%): [998.573, 3286.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3869.884 ±(99.9%) 2160.273 B/op [Average]
[info]   (min, avg, max) = (3597.135, 3869.884, 4872.405), stdev = 561.016
[info]   CI (99.9%): [1709.611, 6030.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.833 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.997), stdev = 1.774
[info]   CI (99.9%): [≈ 0, 7.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.482 ±(99.9%) 12.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.482, 7.187), stdev = 3.190
[info]   CI (99.9%): [≈ 0, 13.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52464.457 ops/s
[info] # Warmup Iteration   2: 1813371.929 ops/s
[info] # Warmup Iteration   3: 1846070.056 ops/s
[info] # Warmup Iteration   4: 1882535.545 ops/s
[info] # Warmup Iteration   5: 1837940.842 ops/s
[info] Iteration   1: 1852020.706 ops/s
[info]                  ·gc.alloc.rate:               1186.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          1008.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1133.902 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1864979.154 ops/s
[info]                  ·gc.alloc.rate:                   1186.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1001.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1881435.512 ops/s
[info]                  ·gc.alloc.rate:               1180.798 MB/sec
[info]                  ·gc.alloc.rate.norm:          987.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 558.636 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1862944.064 ops/s
[info]                  ·gc.alloc.rate:                   1196.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              1010.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1129.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1871854.654 ops/s
[info]                  ·gc.alloc.rate:                   1197.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1007.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1124.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1866646.818 ±(99.9%) 42016.227 ops/s [Average]
[info]   (min, avg, max) = (1852020.706, 1866646.818, 1881435.512), stdev = 10911.481
[info]   CI (99.9%): [1824630.591, 1908663.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1189.709 ±(99.9%) 27.882 MB/sec [Average]
[info]   (min, avg, max) = (1180.798, 1189.709, 1197.731), stdev = 7.241
[info]   CI (99.9%): [1161.827, 1217.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1003.064 ±(99.9%) 35.366 B/op [Average]
[info]   (min, avg, max) = (987.799, 1003.064, 1010.858), stdev = 9.185
[info]   CI (99.9%): [967.698, 1038.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.499 ±(99.9%) 1151.023 MB/sec [Average]
[info]   (min, avg, max) = (667.784, 1202.499, 1337.564), stdev = 298.917
[info]   CI (99.9%): [51.475, 2353.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1014.716 ±(99.9%) 981.836 B/op [Average]
[info]   (min, avg, max) = (558.636, 1014.716, 1133.902), stdev = 254.980
[info]   CI (99.9%): [32.880, 1996.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.876 ±(99.9%) 7.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.876, 4.340), stdev = 1.936
[info]   CI (99.9%): [≈ 0, 8.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.737 ±(99.9%) 6.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.649), stdev = 1.628
[info]   CI (99.9%): [≈ 0, 7.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2413910.326 ops/s
[info] # Warmup Iteration   2: 8000811.767 ops/s
[info] # Warmup Iteration   3: 7816644.643 ops/s
[info] # Warmup Iteration   4: 8390082.799 ops/s
[info] # Warmup Iteration   5: 8474278.964 ops/s
[info] Iteration   1: 8447904.857 ops/s
[info]                  ·gc.alloc.rate:                   274.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8475817.814 ops/s
[info]                  ·gc.alloc.rate:      258.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8454227.915 ops/s
[info]                  ·gc.alloc.rate:               270.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95.240 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8475764.410 ops/s
[info]                  ·gc.alloc.rate:      258.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8420051.537 ops/s
[info]                  ·gc.alloc.rate:               267.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8454753.307 ±(99.9%) 88994.248 ops/s [Average]
[info]   (min, avg, max) = (8420051.537, 8454753.307, 8475817.814), stdev = 23111.524
[info]   CI (99.9%): [8365759.059, 8543747.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   265.838 ±(99.9%) 27.818 MB/sec [Average]
[info]   (min, avg, max) = (258.492, 265.838, 274.874), stdev = 7.224
[info]   CI (99.9%): [238.020, 293.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.488 ±(99.9%) 5.515 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.488, 51.209), stdev = 1.432
[info]   CI (99.9%): [43.974, 55.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.955 ±(99.9%) 1078.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.955, 511.600), stdev = 280.211
[info]   CI (99.9%): [≈ 0, 1385.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   57.235 ±(99.9%) 201.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.235, 95.626), stdev = 52.249
[info]   CI (99.9%): [≈ 0, 258.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4187.458 ops/s
[info] # Warmup Iteration   2: 255294.237 ops/s
[info] # Warmup Iteration   3: 390569.956 ops/s
[info] # Warmup Iteration   4: 392223.928 ops/s
[info] # Warmup Iteration   5: 393859.817 ops/s
[info] Iteration   1: 393882.144 ops/s
[info]                  ·gc.alloc.rate:                   2602.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              10399.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8037.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 394115.609 ops/s
[info]                  ·gc.alloc.rate:                   2607.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              10413.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10720.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 393090.390 ops/s
[info]                  ·gc.alloc.rate:                   2600.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              10409.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10770.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 394472.709 ops/s
[info]                  ·gc.alloc.rate:               2636.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          10520.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10758.660 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 395897.931 ops/s
[info]                  ·gc.alloc.rate:               2619.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          10413.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8056.211 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   394291.757 ±(99.9%) 3971.315 ops/s [Average]
[info]   (min, avg, max) = (393090.390, 394291.757, 395897.931), stdev = 1031.338
[info]   CI (99.9%): [390320.441, 398263.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2613.591 ±(99.9%) 57.561 MB/sec [Average]
[info]   (min, avg, max) = (2600.950, 2613.591, 2636.909), stdev = 14.948
[info]   CI (99.9%): [2556.030, 2671.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10431.483 ±(99.9%) 192.404 B/op [Average]
[info]   (min, avg, max) = (10399.971, 10431.483, 10520.300), stdev = 49.967
[info]   CI (99.9%): [10239.079, 10623.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2422.044 ±(99.9%) 1417.009 MB/sec [Average]
[info]   (min, avg, max) = (2011.384, 2422.044, 2696.654), stdev = 367.993
[info]   CI (99.9%): [1005.035, 3839.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9668.543 ±(99.9%) 5701.554 B/op [Average]
[info]   (min, avg, max) = (8037.161, 9668.543, 10770.136), stdev = 1480.675
[info]   CI (99.9%): [3966.989, 15370.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.316 ±(99.9%) 2.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.316, 1.540), stdev = 0.684
[info]   CI (99.9%): [≈ 0, 2.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.264 ±(99.9%) 10.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.264, 6.155), stdev = 2.734
[info]   CI (99.9%): [≈ 0, 11.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70016.210 ops/s
[info] # Warmup Iteration   2: 1054622.021 ops/s
[info] # Warmup Iteration   3: 1104312.912 ops/s
[info] # Warmup Iteration   4: 1122994.809 ops/s
[info] # Warmup Iteration   5: 1123656.012 ops/s
[info] Iteration   1: 1120276.751 ops/s
[info]                  ·gc.alloc.rate:                   1831.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              2572.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2824.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1134833.214 ops/s
[info]                  ·gc.alloc.rate:                   1838.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              2549.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1860.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1136110.036 ops/s
[info]                  ·gc.alloc.rate:               1854.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          2568.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2778.595 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1127441.833 ops/s
[info]                  ·gc.alloc.rate:                   1854.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              2588.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2798.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1134520.851 ops/s
[info]                  ·gc.alloc.rate:               1852.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          2569.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1854.619 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1130636.537 ±(99.9%) 25844.569 ops/s [Average]
[info]   (min, avg, max) = (1120276.751, 1130636.537, 1136110.036), stdev = 6711.752
[info]   CI (99.9%): [1104791.968, 1156481.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1846.097 ±(99.9%) 41.130 MB/sec [Average]
[info]   (min, avg, max) = (1831.007, 1846.097, 1854.718), stdev = 10.681
[info]   CI (99.9%): [1804.967, 1887.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2569.570 ±(99.9%) 52.839 B/op [Average]
[info]   (min, avg, max) = (2549.566, 2569.570, 2588.092), stdev = 13.722
[info]   CI (99.9%): [2516.731, 2622.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1739.946 ±(99.9%) 1408.162 MB/sec [Average]
[info]   (min, avg, max) = (1336.872, 1739.946, 2010.047), stdev = 365.695
[info]   CI (99.9%): [331.784, 3148.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2423.186 ±(99.9%) 1988.933 B/op [Average]
[info]   (min, avg, max) = (1854.619, 2423.186, 2824.008), stdev = 516.520
[info]   CI (99.9%): [434.253, 4412.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.789), stdev = 1.688
[info]   CI (99.9%): [≈ 0, 7.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.068 ±(99.9%) 9.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.068, 5.255), stdev = 2.340
[info]   CI (99.9%): [≈ 0, 10.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90387.138 ops/s
[info] # Warmup Iteration   2: 2568902.507 ops/s
[info] # Warmup Iteration   3: 2712722.583 ops/s
[info] # Warmup Iteration   4: 2768241.556 ops/s
[info] # Warmup Iteration   5: 2732137.912 ops/s
[info] Iteration   1: 2767749.116 ops/s
[info]                  ·gc.alloc.rate:                   1217.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              692.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2743208.508 ops/s
[info]                  ·gc.alloc.rate:                   1202.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              689.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2763481.183 ops/s
[info]                  ·gc.alloc.rate:                   1193.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              680.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     380.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2765311.788 ops/s
[info]                  ·gc.alloc.rate:                   1221.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2761136.424 ops/s
[info]                  ·gc.alloc.rate:                   1218.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              694.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2760177.404 ±(99.9%) 37702.446 ops/s [Average]
[info]   (min, avg, max) = (2743208.508, 2760177.404, 2767749.116), stdev = 9791.206
[info]   CI (99.9%): [2722474.958, 2797879.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1210.898 ±(99.9%) 46.339 MB/sec [Average]
[info]   (min, avg, max) = (1193.919, 1210.898, 1221.323), stdev = 12.034
[info]   CI (99.9%): [1164.559, 1257.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   690.433 ±(99.9%) 23.823 B/op [Average]
[info]   (min, avg, max) = (680.000, 690.433, 695.144), stdev = 6.187
[info]   CI (99.9%): [666.610, 714.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.047 ±(99.9%) 1152.258 MB/sec [Average]
[info]   (min, avg, max) = (668.762, 1204.047, 1339.850), stdev = 299.238
[info]   CI (99.9%): [51.789, 2356.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   686.621 ±(99.9%) 658.182 B/op [Average]
[info]   (min, avg, max) = (380.895, 686.621, 767.075), stdev = 170.928
[info]   CI (99.9%): [28.439, 1344.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.777 ±(99.9%) 6.530 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.777, 3.810), stdev = 1.696
[info]   CI (99.9%): [≈ 0, 7.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.443 ±(99.9%) 3.721 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.443, 2.171), stdev = 0.966
[info]   CI (99.9%): [≈ 0, 4.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1215559.264 ops/s
[info] # Warmup Iteration   2: 5794948.286 ops/s
[info] # Warmup Iteration   3: 6341779.267 ops/s
[info] # Warmup Iteration   4: 6298895.095 ops/s
[info] # Warmup Iteration   5: 6398115.121 ops/s
[info] Iteration   1: 6347163.007 ops/s
[info]                  ·gc.alloc.rate:                   743.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     332.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6392814.566 ops/s
[info]                  ·gc.alloc.rate:               733.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.231 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6380067.537 ops/s
[info]                  ·gc.alloc.rate:                   729.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              180.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6393107.409 ops/s
[info]                  ·gc.alloc.rate:                   730.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              179.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6289779.183 ops/s
[info]                  ·gc.alloc.rate:               719.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168.101 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6360586.340 ±(99.9%) 168612.866 ops/s [Average]
[info]   (min, avg, max) = (6289779.183, 6360586.340, 6393107.409), stdev = 43788.226
[info]   CI (99.9%): [6191973.474, 6529199.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   731.366 ±(99.9%) 33.141 MB/sec [Average]
[info]   (min, avg, max) = (719.596, 731.366, 743.676), stdev = 8.607
[info]   CI (99.9%): [698.225, 764.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   180.961 ±(99.9%) 7.488 B/op [Average]
[info]   (min, avg, max) = (179.818, 180.961, 184.410), stdev = 1.945
[info]   CI (99.9%): [173.472, 188.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.403 ±(99.9%) 1152.728 MB/sec [Average]
[info]   (min, avg, max) = (671.145, 805.403, 1340.914), stdev = 299.360
[info]   CI (99.9%): [≈ 0, 1958.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   199.357 ±(99.9%) 286.653 B/op [Average]
[info]   (min, avg, max) = (165.231, 199.357, 332.508), stdev = 74.443
[info]   CI (99.9%): [≈ 0, 486.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1465499.461 ops/s
[info] # Warmup Iteration   2: 6554916.115 ops/s
[info] # Warmup Iteration   3: 6829640.646 ops/s
[info] # Warmup Iteration   4: 6835484.423 ops/s
[info] # Warmup Iteration   5: 6862898.220 ops/s
[info] Iteration   1: 6833078.747 ops/s
[info]                  ·gc.alloc.rate:                   433.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              99.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6834463.526 ops/s
[info]                  ·gc.alloc.rate:               434.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.813 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6841222.089 ops/s
[info]                  ·gc.alloc.rate:               440.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          101.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.242 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 6862066.288 ops/s
[info]                  ·gc.alloc.rate:      418.681 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6835065.767 ops/s
[info]                  ·gc.alloc.rate:               430.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.381 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6841179.283 ±(99.9%) 46542.004 ops/s [Average]
[info]   (min, avg, max) = (6833078.747, 6841179.283, 6862066.288), stdev = 12086.811
[info]   CI (99.9%): [6794637.279, 6887721.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   431.699 ±(99.9%) 30.866 MB/sec [Average]
[info]   (min, avg, max) = (418.681, 431.699, 440.230), stdev = 8.016
[info]   CI (99.9%): [400.833, 462.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   99.311 ±(99.9%) 7.661 B/op [Average]
[info]   (min, avg, max) = (96.000, 99.311, 101.265), stdev = 1.990
[info]   CI (99.9%): [91.650, 106.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.833 ±(99.9%) 1062.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.833, 670.538), stdev = 276.003
[info]   CI (99.9%): [≈ 0, 1535.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   108.855 ±(99.9%) 244.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108.855, 154.381), stdev = 63.527
[info]   CI (99.9%): [≈ 0, 353.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16168.098 ops/s
[info] # Warmup Iteration   2: 140366.839 ops/s
[info] # Warmup Iteration   3: 351013.644 ops/s
[info] # Warmup Iteration   4: 388773.624 ops/s
[info] # Warmup Iteration   5: 383512.918 ops/s
[info] Iteration   1: 386558.477 ops/s
[info]                  ·gc.alloc.rate:                   2427.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              9884.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10869.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.798 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 389004.801 ops/s
[info]                  ·gc.alloc.rate:                   2437.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              9863.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8080.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 390154.297 ops/s
[info]                  ·gc.alloc.rate:                   2446.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              9866.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10732.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 392629.459 ops/s
[info]                  ·gc.alloc.rate:               2447.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          9810.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8014.721 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 391333.067 ops/s
[info]                  ·gc.alloc.rate:                   2493.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              10027.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10754.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   389936.020 ±(99.9%) 8933.362 ops/s [Average]
[info]   (min, avg, max) = (386558.477, 389936.020, 392629.459), stdev = 2319.966
[info]   CI (99.9%): [381002.659, 398869.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2450.490 ±(99.9%) 96.794 MB/sec [Average]
[info]   (min, avg, max) = (2427.792, 2450.490, 2493.230), stdev = 25.137
[info]   CI (99.9%): [2353.696, 2547.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9890.612 ±(99.9%) 313.147 B/op [Average]
[info]   (min, avg, max) = (9810.489, 9890.612, 10027.388), stdev = 81.323
[info]   CI (99.9%): [9577.465, 10203.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2400.186 ±(99.9%) 1412.740 MB/sec [Average]
[info]   (min, avg, max) = (1997.205, 2400.186, 2673.942), stdev = 366.884
[info]   CI (99.9%): [987.446, 3812.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9690.305 ±(99.9%) 5778.947 B/op [Average]
[info]   (min, avg, max) = (8014.721, 9690.305, 10869.726), stdev = 1500.774
[info]   CI (99.9%): [3911.358, 15469.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.949 ±(99.9%) 7.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 4.371), stdev = 1.918
[info]   CI (99.9%): [≈ 0, 8.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.863 ±(99.9%) 30.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.863, 17.798), stdev = 7.810
[info]   CI (99.9%): [≈ 0, 33.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 12.000), stdev = 3.050
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18026.162 ops/s
[info] # Warmup Iteration   2: 68548.041 ops/s
[info] # Warmup Iteration   3: 76200.099 ops/s
[info] # Warmup Iteration   4: 77699.032 ops/s
[info] # Warmup Iteration   5: 78883.522 ops/s
[info] Iteration   1: 77720.796 ops/s
[info]                  ·gc.alloc.rate:                   2170.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              43948.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40831.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 77542.580 ops/s
[info]                  ·gc.alloc.rate:                   2192.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              44473.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54302.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.639 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 79495.041 ops/s
[info]                  ·gc.alloc.rate:                   2204.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              43636.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39763.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 77322.172 ops/s
[info]                  ·gc.alloc.rate:               2171.619 MB/sec
[info]                  ·gc.alloc.rate.norm:          44200.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40894.640 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 78337.642 ops/s
[info]                  ·gc.alloc.rate:                   2200.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              44203.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40430.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   78083.646 ±(99.9%) 3368.381 ops/s [Average]
[info]   (min, avg, max) = (77322.172, 78083.646, 79495.041), stdev = 874.758
[info]   CI (99.9%): [74715.265, 81452.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2187.812 ±(99.9%) 61.409 MB/sec [Average]
[info]   (min, avg, max) = (2170.281, 2187.812, 2204.278), stdev = 15.948
[info]   CI (99.9%): [2126.403, 2249.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44092.420 ±(99.9%) 1214.106 B/op [Average]
[info]   (min, avg, max) = (43636.418, 44092.420, 44473.186), stdev = 315.299
[info]   CI (99.9%): [42878.315, 45306.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2144.776 ±(99.9%) 1146.450 MB/sec [Average]
[info]   (min, avg, max) = (2008.626, 2144.776, 2677.343), stdev = 297.729
[info]   CI (99.9%): [998.327, 3291.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   43244.434 ±(99.9%) 23866.482 B/op [Average]
[info]   (min, avg, max) = (39763.249, 43244.434, 54302.534), stdev = 6198.049
[info]   CI (99.9%): [19377.953, 67110.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.778 ±(99.9%) 5.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.778, 3.560), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 6.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.757 ±(99.9%) 121.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.757, 72.082), stdev = 31.538
[info]   CI (99.9%): [≈ 0, 137.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24138.088 ops/s
[info] # Warmup Iteration   2: 101075.367 ops/s
[info] # Warmup Iteration   3: 126059.248 ops/s
[info] # Warmup Iteration   4: 127762.641 ops/s
[info] # Warmup Iteration   5: 128368.031 ops/s
[info] Iteration   1: 128319.812 ops/s
[info]                  ·gc.alloc.rate:                   2007.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              24619.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24613.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.703 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 128981.213 ops/s
[info]                  ·gc.alloc.rate:                   2041.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              24906.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24454.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 127947.967 ops/s
[info]                  ·gc.alloc.rate:               2026.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          24917.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24581.377 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 128099.507 ops/s
[info]                  ·gc.alloc.rate:               2026.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          24901.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24551.832 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 128561.746 ops/s
[info]                  ·gc.alloc.rate:               2048.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          25079.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24501.840 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   128382.049 ±(99.9%) 1568.186 ops/s [Average]
[info]   (min, avg, max) = (127947.967, 128382.049, 128981.213), stdev = 407.253
[info]   CI (99.9%): [126813.863, 129950.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2030.065 ±(99.9%) 61.570 MB/sec [Average]
[info]   (min, avg, max) = (2007.219, 2030.065, 2048.672), stdev = 15.990
[info]   CI (99.9%): [1968.495, 2091.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24884.807 ±(99.9%) 639.064 B/op [Average]
[info]   (min, avg, max) = (24619.435, 24884.807, 25079.638), stdev = 165.963
[info]   CI (99.9%): [24245.743, 25523.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2001.957 ±(99.9%) 13.744 MB/sec [Average]
[info]   (min, avg, max) = (1998.375, 2001.957, 2006.697), stdev = 3.569
[info]   CI (99.9%): [1988.213, 2015.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24540.454 ±(99.9%) 243.542 B/op [Average]
[info]   (min, avg, max) = (24454.201, 24540.454, 24613.022), stdev = 63.247
[info]   CI (99.9%): [24296.912, 24783.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 6.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 3.726), stdev = 1.614
[info]   CI (99.9%): [≈ 0, 7.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.173 ±(99.9%) 76.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.173, 45.703), stdev = 19.798
[info]   CI (99.9%): [≈ 0, 87.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57093.004 ops/s
[info] # Warmup Iteration   2: 170937.706 ops/s
[info] # Warmup Iteration   3: 174782.764 ops/s
[info] # Warmup Iteration   4: 179745.427 ops/s
[info] # Warmup Iteration   5: 180915.553 ops/s
[info] Iteration   1: 179150.561 ops/s
[info]                  ·gc.alloc.rate:                   2710.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              23813.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23577.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 181024.938 ops/s
[info]                  ·gc.alloc.rate:                   2750.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              23915.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23331.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.905 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 180954.152 ops/s
[info]                  ·gc.alloc.rate:                   2765.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              24047.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23372.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 180595.993 ops/s
[info]                  ·gc.alloc.rate:                   2759.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              24050.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23476.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 179622.172 ops/s
[info]                  ·gc.alloc.rate:               2746.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          24064.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23662.667 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   180269.563 ±(99.9%) 3231.497 ops/s [Average]
[info]   (min, avg, max) = (179150.561, 180269.563, 181024.938), stdev = 839.210
[info]   CI (99.9%): [177038.066, 183501.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2746.561 ±(99.9%) 82.432 MB/sec [Average]
[info]   (min, avg, max) = (2710.599, 2746.561, 2765.253), stdev = 21.407
[info]   CI (99.9%): [2664.129, 2828.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23978.217 ±(99.9%) 424.110 B/op [Average]
[info]   (min, avg, max) = (23813.434, 23978.217, 24064.472), stdev = 110.140
[info]   CI (99.9%): [23554.107, 24402.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2689.898 ±(99.9%) 28.198 MB/sec [Average]
[info]   (min, avg, max) = (2683.556, 2689.898, 2700.656), stdev = 7.323
[info]   CI (99.9%): [2661.699, 2718.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23484.158 ±(99.9%) 532.402 B/op [Average]
[info]   (min, avg, max) = (23331.483, 23484.158, 23662.667), stdev = 138.263
[info]   CI (99.9%): [22951.756, 24016.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.229), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.656 ±(99.9%) 3.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.656, 2.012), stdev = 0.834
[info]   CI (99.9%): [≈ 0, 3.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 12.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6828.304 ops/s
[info] # Warmup Iteration   2: 48524.699 ops/s
[info] # Warmup Iteration   3: 60738.516 ops/s
[info] # Warmup Iteration   4: 61126.962 ops/s
[info] # Warmup Iteration   5: 61682.905 ops/s
[info] Iteration   1: 62552.454 ops/s
[info]                  ·gc.alloc.rate:                   3166.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              79665.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83928.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.619 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 62622.815 ops/s
[info]                  ·gc.alloc.rate:                   3156.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              79337.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67134.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.523 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 62575.834 ops/s
[info]                  ·gc.alloc.rate:               3195.536 MB/sec
[info]                  ·gc.alloc.rate.norm:          80371.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3349.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84250.997 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 62293.246 ops/s
[info]                  ·gc.alloc.rate:               3154.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          79707.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67961.701 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 62558.288 ops/s
[info]                  ·gc.alloc.rate:               3196.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          80415.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3373.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84877.222 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   62520.528 ±(99.9%) 500.671 ops/s [Average]
[info]   (min, avg, max) = (62293.246, 62520.528, 62622.815), stdev = 130.023
[info]   CI (99.9%): [62019.857, 63021.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3173.944 ±(99.9%) 79.229 MB/sec [Average]
[info]   (min, avg, max) = (3154.774, 3173.944, 3196.412), stdev = 20.576
[info]   CI (99.9%): [3094.715, 3253.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79899.519 ±(99.9%) 1823.393 B/op [Average]
[info]   (min, avg, max) = (79337.567, 79899.519, 80415.784), stdev = 473.529
[info]   CI (99.9%): [78076.126, 81722.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3084.065 ±(99.9%) 1419.617 MB/sec [Average]
[info]   (min, avg, max) = (2671.218, 3084.065, 3373.747), stdev = 368.670
[info]   CI (99.9%): [1664.448, 4503.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77630.684 ±(99.9%) 35483.275 B/op [Average]
[info]   (min, avg, max) = (67134.847, 77630.684, 84877.222), stdev = 9214.894
[info]   CI (99.9%): [42147.408, 113113.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.628 ±(99.9%) 4.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.628, 2.619), stdev = 1.136
[info]   CI (99.9%): [≈ 0, 5.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54128.895 ops/s
[info] # Warmup Iteration   2: 183205.681 ops/s
[info] # Warmup Iteration   3: 189742.835 ops/s
[info] # Warmup Iteration   4: 192007.402 ops/s
[info] # Warmup Iteration   5: 191941.375 ops/s
[info] Iteration   1: 191858.793 ops/s
[info]                  ·gc.alloc.rate:                   1350.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              11073.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10951.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 190919.597 ops/s
[info]                  ·gc.alloc.rate:                   1350.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              11125.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11016.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 188697.683 ops/s
[info]                  ·gc.alloc.rate:                   1360.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              11347.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11156.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 191116.582 ops/s
[info]                  ·gc.alloc.rate:                   1352.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              11140.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11031.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 191474.727 ops/s
[info]                  ·gc.alloc.rate:               1368.947 MB/sec
[info]                  ·gc.alloc.rate.norm:          11252.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11022.138 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   190813.476 ±(99.9%) 4758.957 ops/s [Average]
[info]   (min, avg, max) = (188697.683, 190813.476, 191858.793), stdev = 1235.886
[info]   CI (99.9%): [186054.520, 195572.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1356.545 ±(99.9%) 31.257 MB/sec [Average]
[info]   (min, avg, max) = (1350.152, 1356.545, 1368.947), stdev = 8.117
[info]   CI (99.9%): [1325.287, 1387.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11187.872 ±(99.9%) 426.158 B/op [Average]
[info]   (min, avg, max) = (11073.093, 11187.872, 11347.629), stdev = 110.672
[info]   CI (99.9%): [10761.714, 11614.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1338.098 ±(99.9%) 8.490 MB/sec [Average]
[info]   (min, avg, max) = (1335.295, 1338.098, 1340.915), stdev = 2.205
[info]   CI (99.9%): [1329.609, 1346.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11035.657 ±(99.9%) 288.258 B/op [Average]
[info]   (min, avg, max) = (10951.242, 11035.657, 11156.955), stdev = 74.860
[info]   CI (99.9%): [10747.399, 11323.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.206 ±(99.9%) 0.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.347), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96845.376 ops/s
[info] # Warmup Iteration   2: 453978.660 ops/s
[info] # Warmup Iteration   3: 457551.793 ops/s
[info] # Warmup Iteration   4: 476769.580 ops/s
[info] # Warmup Iteration   5: 476565.643 ops/s
[info] Iteration   1: 463477.864 ops/s
[info]                  ·gc.alloc.rate:               411.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          1398.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1737.308 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 474900.625 ops/s
[info]                  ·gc.alloc.rate:               424.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          1406.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1695.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 476123.317 ops/s
[info]                  ·gc.alloc.rate:               425.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          1407.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2200.962 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 464763.895 ops/s
[info]                  ·gc.alloc.rate:      403.098 MB/sec
[info]                  ·gc.alloc.rate.norm: 1365.085 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 470854.968 ops/s
[info]                  ·gc.alloc.rate:               426.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          1424.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2225.522 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   470024.134 ±(99.9%) 22136.536 ops/s [Average]
[info]   (min, avg, max) = (463477.864, 470024.134, 476123.317), stdev = 5748.788
[info]   CI (99.9%): [447887.598, 492160.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   418.251 ±(99.9%) 39.955 MB/sec [Average]
[info]   (min, avg, max) = (403.098, 418.251, 426.380), stdev = 10.376
[info]   CI (99.9%): [378.296, 458.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1400.344 ±(99.9%) 84.714 B/op [Average]
[info]   (min, avg, max) = (1365.085, 1400.344, 1424.955), stdev = 22.000
[info]   CI (99.9%): [1315.630, 1485.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   470.992 ±(99.9%) 1056.463 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 470.992, 665.928), stdev = 274.360
[info]   CI (99.9%): [≈ 0, 1527.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1571.857 ±(99.9%) 3516.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1571.857, 2225.522), stdev = 913.297
[info]   CI (99.9%): [≈ 0, 5088.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 324420.401 ops/s
[info] # Warmup Iteration   2: 634174.134 ops/s
[info] # Warmup Iteration   3: 663104.261 ops/s
[info] # Warmup Iteration   4: 663672.467 ops/s
[info] # Warmup Iteration   5: 655275.019 ops/s
[info] Iteration   1: 656030.870 ops/s
[info]                  ·gc.alloc.rate:                   363.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1227.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 661134.051 ops/s
[info]                  ·gc.alloc.rate:      365.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 871.212 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 623125.730 ops/s
[info]                  ·gc.alloc.rate:               343.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          866.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1292.125 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 658214.225 ops/s
[info]                  ·gc.alloc.rate:                   373.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              894.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1603.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 644864.268 ops/s
[info]                  ·gc.alloc.rate:      363.426 MB/sec
[info]                  ·gc.alloc.rate.norm: 886.922 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   648673.829 ±(99.9%) 59890.216 ops/s [Average]
[info]   (min, avg, max) = (623125.730, 648673.829, 661134.051), stdev = 15553.299
[info]   CI (99.9%): [588783.612, 708564.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   362.005 ±(99.9%) 44.049 MB/sec [Average]
[info]   (min, avg, max) = (343.027, 362.005, 373.955), stdev = 11.439
[info]   CI (99.9%): [317.956, 406.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   878.192 ±(99.9%) 45.129 B/op [Average]
[info]   (min, avg, max) = (866.373, 878.192, 894.045), stdev = 11.720
[info]   CI (99.9%): [833.063, 923.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.753 ±(99.9%) 1216.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.753, 670.576), stdev = 315.975
[info]   CI (99.9%): [≈ 0, 1555.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   824.537 ±(99.9%) 2949.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 824.537, 1603.203), stdev = 765.988
[info]   CI (99.9%): [≈ 0, 3774.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369199.511 ops/s
[info] # Warmup Iteration   2: 676784.495 ops/s
[info] # Warmup Iteration   3: 702850.075 ops/s
[info] # Warmup Iteration   4: 708700.190 ops/s
[info] # Warmup Iteration   5: 707658.507 ops/s
[info] Iteration   1: 710901.165 ops/s
[info]                  ·gc.alloc.rate:      7.227 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 711016.267 ops/s
[info]                  ·gc.alloc.rate:      7.229 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 710168.012 ops/s
[info]                  ·gc.alloc.rate:      7.221 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 711019.640 ops/s
[info]                  ·gc.alloc.rate:      7.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 711212.844 ops/s
[info]                  ·gc.alloc.rate:      7.230 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   710863.586 ±(99.9%) 1558.062 ops/s [Average]
[info]   (min, avg, max) = (710168.012, 710863.586, 711212.844), stdev = 404.624
[info]   CI (99.9%): [709305.524, 712421.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.227 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (7.221, 7.227, 7.230), stdev = 0.003
[info]   CI (99.9%): [7.214, 7.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10856.268 ops/s
[info] # Warmup Iteration   2: 33338.121 ops/s
[info] # Warmup Iteration   3: 35036.792 ops/s
[info] # Warmup Iteration   4: 34307.800 ops/s
[info] # Warmup Iteration   5: 35327.008 ops/s
[info] Iteration   1: 35311.881 ops/s
[info]                  ·gc.alloc.rate:                   1929.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              86013.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89694.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 35503.315 ops/s
[info]                  ·gc.alloc.rate:                   1939.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              85959.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89086.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35580.270 ops/s
[info]                  ·gc.alloc.rate:                   1928.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              85314.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59108.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 35716.943 ops/s
[info]                  ·gc.alloc.rate:                   1950.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              85927.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88337.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35800.940 ops/s
[info]                  ·gc.alloc.rate:                   1968.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              86526.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88218.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.915 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   35582.670 ±(99.9%) 733.900 ops/s [Average]
[info]   (min, avg, max) = (35311.881, 35582.670, 35800.940), stdev = 190.592
[info]   CI (99.9%): [34848.769, 36316.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1943.316 ±(99.9%) 63.585 MB/sec [Average]
[info]   (min, avg, max) = (1928.753, 1943.316, 1968.458), stdev = 16.513
[info]   CI (99.9%): [1879.731, 2006.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85948.153 ±(99.9%) 1657.467 B/op [Average]
[info]   (min, avg, max) = (85314.128, 85948.153, 86526.346), stdev = 430.439
[info]   CI (99.9%): [84290.686, 87605.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.096 ±(99.9%) 1157.675 MB/sec [Average]
[info]   (min, avg, max) = (1336.310, 1874.096, 2012.465), stdev = 300.645
[info]   CI (99.9%): [716.421, 3031.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82889.231 ±(99.9%) 51241.056 B/op [Average]
[info]   (min, avg, max) = (59108.735, 82889.231, 89694.711), stdev = 13307.140
[info]   CI (99.9%): [31648.175, 134130.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.014 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.808, 3.039), stdev = 1.302
[info]   CI (99.9%): [≈ 0, 5.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.946 ±(99.9%) 223.464 B/op [Average]
[info]   (min, avg, max) = (0.915, 35.946, 135.462), stdev = 58.033
[info]   CI (99.9%): [≈ 0, 259.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1020661.483 ops/s
[info] # Warmup Iteration   2: 3444309.515 ops/s
[info] # Warmup Iteration   3: 3607596.833 ops/s
[info] # Warmup Iteration   4: 3632492.751 ops/s
[info] # Warmup Iteration   5: 3642330.818 ops/s
[info] Iteration   1: 3640729.807 ops/s
[info]                  ·gc.alloc.rate:               2909.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          1257.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1159.398 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 3646004.481 ops/s
[info]                  ·gc.alloc.rate:                   2968.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3356.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1448.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3639909.342 ops/s
[info]                  ·gc.alloc.rate:               2936.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          1269.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1163.182 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3648712.200 ops/s
[info]                  ·gc.alloc.rate:                   2945.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              1270.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1163.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3649892.214 ops/s
[info]                  ·gc.alloc.rate:                   2945.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              1270.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1165.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3645049.609 ±(99.9%) 17525.741 ops/s [Average]
[info]   (min, avg, max) = (3639909.342, 3645049.609, 3649892.214), stdev = 4551.379
[info]   CI (99.9%): [3627523.868, 3662575.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2941.053 ±(99.9%) 81.758 MB/sec [Average]
[info]   (min, avg, max) = (2909.417, 2941.053, 2968.327), stdev = 21.232
[info]   CI (99.9%): [2859.295, 3022.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1269.781 ±(99.9%) 31.347 B/op [Average]
[info]   (min, avg, max) = (1257.772, 1269.781, 1280.750), stdev = 8.141
[info]   CI (99.9%): [1238.434, 1301.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2825.856 ±(99.9%) 1142.844 MB/sec [Average]
[info]   (min, avg, max) = (2681.861, 2825.856, 3356.583), stdev = 296.793
[info]   CI (99.9%): [1683.012, 3968.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1220.013 ±(99.9%) 491.421 B/op [Average]
[info]   (min, avg, max) = (1159.398, 1220.013, 1448.272), stdev = 127.621
[info]   CI (99.9%): [728.591, 1711.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.790 ops/s
[info] # Warmup Iteration   2: 5765035.678 ops/s
[info] # Warmup Iteration   3: 5936761.914 ops/s
[info] # Warmup Iteration   4: 6043232.708 ops/s
[info] # Warmup Iteration   5: 6047975.413 ops/s
[info] Iteration   1: 6068064.393 ops/s
[info]                  ·gc.alloc.rate:                   1160.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              300.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6024634.723 ops/s
[info]                  ·gc.alloc.rate:                   1177.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5996764.425 ops/s
[info]                  ·gc.alloc.rate:                   1178.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              309.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6059237.883 ops/s
[info]                  ·gc.alloc.rate:               1162.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.552 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6049526.154 ops/s
[info]                  ·gc.alloc.rate:                   1175.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6039645.516 ±(99.9%) 111489.812 ops/s [Average]
[info]   (min, avg, max) = (5996764.425, 6039645.516, 6068064.393), stdev = 28953.550
[info]   CI (99.9%): [5928155.704, 6151135.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1170.973 ±(99.9%) 33.856 MB/sec [Average]
[info]   (min, avg, max) = (1160.303, 1170.973, 1178.953), stdev = 8.792
[info]   CI (99.9%): [1137.117, 1204.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305.149 ±(99.9%) 13.972 B/op [Average]
[info]   (min, avg, max) = (300.918, 305.149, 309.413), stdev = 3.629
[info]   CI (99.9%): [291.176, 319.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1068.785 ±(99.9%) 1409.920 MB/sec [Average]
[info]   (min, avg, max) = (667.211, 1068.785, 1337.618), stdev = 366.152
[info]   CI (99.9%): [≈ 0, 2478.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   278.791 ±(99.9%) 370.852 B/op [Average]
[info]   (min, avg, max) = (173.038, 278.791, 350.625), stdev = 96.309
[info]   CI (99.9%): [≈ 0, 649.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.857 ±(99.9%) 7.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.857, 4.242), stdev = 1.892
[info]   CI (99.9%): [≈ 0, 8.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.223 ±(99.9%) 1.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.223, 1.104), stdev = 0.492
[info]   CI (99.9%): [≈ 0, 2.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 642967.471 ops/s
[info] # Warmup Iteration   2: 3957479.292 ops/s
[info] # Warmup Iteration   3: 4126101.747 ops/s
[info] # Warmup Iteration   4: 4032834.260 ops/s
[info] # Warmup Iteration   5: 4141264.483 ops/s
[info] Iteration   1: 4122194.800 ops/s
[info]                  ·gc.alloc.rate:                   2266.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 4154515.955 ops/s
[info]                  ·gc.alloc.rate:                   2279.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              863.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4170436.744 ops/s
[info]                  ·gc.alloc.rate:               2319.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1008.090 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 4164321.122 ops/s
[info]                  ·gc.alloc.rate:               2301.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 758.696 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4167356.354 ops/s
[info]                  ·gc.alloc.rate:               2305.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 759.408 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4155764.995 ±(99.9%) 75832.888 ops/s [Average]
[info]   (min, avg, max) = (4122194.800, 4155764.995, 4170436.744), stdev = 19693.560
[info]   CI (99.9%): [4079932.107, 4231597.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2294.331 ±(99.9%) 81.653 MB/sec [Average]
[info]   (min, avg, max) = (2266.075, 2294.331, 2319.361), stdev = 21.205
[info]   CI (99.9%): [2212.678, 2375.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   868.719 ±(99.9%) 17.420 B/op [Average]
[info]   (min, avg, max) = (863.684, 868.719, 874.997), stdev = 4.524
[info]   CI (99.9%): [851.299, 886.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2140.918 ±(99.9%) 1143.576 MB/sec [Average]
[info]   (min, avg, max) = (2003.708, 2140.918, 2672.151), stdev = 296.983
[info]   CI (99.9%): [997.342, 3284.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   810.473 ±(99.9%) 425.598 B/op [Average]
[info]   (min, avg, max) = (758.696, 810.473, 1008.090), stdev = 110.526
[info]   CI (99.9%): [384.875, 1236.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.915), stdev = 1.748
[info]   CI (99.9%): [≈ 0, 7.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.300 ±(99.9%) 2.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.494), stdev = 0.667
[info]   CI (99.9%): [≈ 0, 2.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 14.000), stdev = 4.278
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3078931.577 ops/s
[info] # Warmup Iteration   2: 6841172.828 ops/s
[info] # Warmup Iteration   3: 6693929.919 ops/s
[info] # Warmup Iteration   4: 6920584.140 ops/s
[info] # Warmup Iteration   5: 6933957.646 ops/s
[info] Iteration   1: 6961786.777 ops/s
[info]                  ·gc.alloc.rate:                   1339.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6944499.407 ops/s
[info]                  ·gc.alloc.rate:                   1346.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6981519.936 ops/s
[info]                  ·gc.alloc.rate:               1339.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151.668 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 6975570.577 ops/s
[info]                  ·gc.alloc.rate:                   1331.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              300.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6993850.117 ops/s
[info]                  ·gc.alloc.rate:                   1347.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6971445.363 ±(99.9%) 73057.286 ops/s [Average]
[info]   (min, avg, max) = (6944499.407, 6971445.363, 6993850.117), stdev = 18972.745
[info]   CI (99.9%): [6898388.077, 7044502.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1340.981 ±(99.9%) 24.801 MB/sec [Average]
[info]   (min, avg, max) = (1331.615, 1340.981, 1347.253), stdev = 6.441
[info]   CI (99.9%): [1316.180, 1365.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   302.687 ±(99.9%) 6.872 B/op [Average]
[info]   (min, avg, max) = (300.316, 302.687, 305.237), stdev = 1.785
[info]   CI (99.9%): [295.815, 309.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.136 ±(99.9%) 1158.848 MB/sec [Average]
[info]   (min, avg, max) = (672.785, 1211.136, 1347.498), stdev = 300.949
[info]   CI (99.9%): [52.288, 2369.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   273.416 ±(99.9%) 262.094 B/op [Average]
[info]   (min, avg, max) = (151.668, 273.416, 304.954), stdev = 68.065
[info]   CI (99.9%): [11.322, 535.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 4.932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.895), stdev = 1.281
[info]   CI (99.9%): [≈ 0, 5.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.136 ±(99.9%) 1.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.653), stdev = 0.289
[info]   CI (99.9%): [≈ 0, 1.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1100965.370 ops/s
[info] # Warmup Iteration   2: 4063339.006 ops/s
[info] # Warmup Iteration   3: 4266212.090 ops/s
[info] # Warmup Iteration   4: 4139412.721 ops/s
[info] # Warmup Iteration   5: 4270516.833 ops/s
[info] Iteration   1: 4296211.146 ops/s
[info]                  ·gc.alloc.rate:                   2458.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              900.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4325122.887 ops/s
[info]                  ·gc.alloc.rate:                   2462.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     729.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4320116.547 ops/s
[info]                  ·gc.alloc.rate:               2498.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          910.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 974.617 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 4318183.790 ops/s
[info]                  ·gc.alloc.rate:               2472.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          901.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 732.860 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4322213.356 ops/s
[info]                  ·gc.alloc.rate:               2502.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          911.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 978.757 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4316369.545 ±(99.9%) 44510.499 ops/s [Average]
[info]   (min, avg, max) = (4296211.146, 4316369.545, 4325122.887), stdev = 11559.235
[info]   CI (99.9%): [4271859.046, 4360880.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2478.914 ±(99.9%) 77.870 MB/sec [Average]
[info]   (min, avg, max) = (2458.489, 2478.914, 2502.003), stdev = 20.223
[info]   CI (99.9%): [2401.044, 2556.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   903.821 ±(99.9%) 24.944 B/op [Average]
[info]   (min, avg, max) = (896.261, 903.821, 911.099), stdev = 6.478
[info]   CI (99.9%): [878.878, 928.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.389 ±(99.9%) 1419.130 MB/sec [Average]
[info]   (min, avg, max) = (2004.357, 2411.389, 2687.802), stdev = 368.543
[info]   CI (99.9%): [992.259, 3830.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   879.329 ±(99.9%) 521.049 B/op [Average]
[info]   (min, avg, max) = (729.392, 879.329, 981.018), stdev = 135.315
[info]   CI (99.9%): [358.280, 1400.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.791), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 1.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.290), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 760802.753 ops/s
[info] # Warmup Iteration   2: 2150270.056 ops/s
[info] # Warmup Iteration   3: 2162797.337 ops/s
[info] # Warmup Iteration   4: 2193191.450 ops/s
[info] # Warmup Iteration   5: 2187020.935 ops/s
[info] Iteration   1: 2166123.856 ops/s
[info]                  ·gc.alloc.rate:                   1310.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2183001.521 ops/s
[info]                  ·gc.alloc.rate:                   1305.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     968.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2185818.204 ops/s
[info]                  ·gc.alloc.rate:               1320.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          950.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 967.477 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2189791.362 ops/s
[info]                  ·gc.alloc.rate:                   1322.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2194538.370 ops/s
[info]                  ·gc.alloc.rate:                   1322.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              948.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2183854.663 ±(99.9%) 41666.693 ops/s [Average]
[info]   (min, avg, max) = (2166123.856, 2183854.663, 2194538.370), stdev = 10820.708
[info]   CI (99.9%): [2142187.970, 2225521.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1316.220 ±(99.9%) 29.009 MB/sec [Average]
[info]   (min, avg, max) = (1305.701, 1316.220, 1322.397), stdev = 7.534
[info]   CI (99.9%): [1287.211, 1345.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   948.528 ±(99.9%) 16.468 B/op [Average]
[info]   (min, avg, max) = (941.306, 948.528, 952.384), stdev = 4.277
[info]   CI (99.9%): [932.060, 964.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.934 ±(99.9%) 4.674 MB/sec [Average]
[info]   (min, avg, max) = (1341.670, 1342.934, 1344.343), stdev = 1.214
[info]   CI (99.9%): [1338.260, 1347.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   967.793 ±(99.9%) 17.580 B/op [Average]
[info]   (min, avg, max) = (962.219, 967.793, 974.831), stdev = 4.565
[info]   CI (99.9%): [950.213, 985.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.331), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.491 ±(99.9%) 4.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.491, 2.394), stdev = 1.064
[info]   CI (99.9%): [≈ 0, 4.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.769 ops/s
[info] # Warmup Iteration   2: 5661843.035 ops/s
[info] # Warmup Iteration   3: 5787452.745 ops/s
[info] # Warmup Iteration   4: 5972374.370 ops/s
[info] # Warmup Iteration   5: 5892876.376 ops/s
[info] Iteration   1: 5909467.618 ops/s
[info]                  ·gc.alloc.rate:               583.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 5916167.151 ops/s
[info]                  ·gc.alloc.rate:               589.609 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.045 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5886920.754 ops/s
[info]                  ·gc.alloc.rate:                   584.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5901466.033 ops/s
[info]                  ·gc.alloc.rate:               593.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.656 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5893261.685 ops/s
[info]                  ·gc.alloc.rate:                   591.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5901456.648 ±(99.9%) 45521.723 ops/s [Average]
[info]   (min, avg, max) = (5886920.754, 5901456.648, 5916167.151), stdev = 11821.847
[info]   CI (99.9%): [5855934.925, 5946978.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   588.462 ±(99.9%) 16.500 MB/sec [Average]
[info]   (min, avg, max) = (583.333, 588.462, 593.498), stdev = 4.285
[info]   CI (99.9%): [571.962, 604.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   156.927 ±(99.9%) 4.505 B/op [Average]
[info]   (min, avg, max) = (155.351, 156.927, 158.279), stdev = 1.170
[info]   CI (99.9%): [152.422, 161.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.080 ±(99.9%) 2.227 MB/sec [Average]
[info]   (min, avg, max) = (665.547, 666.080, 666.958), stdev = 0.578
[info]   CI (99.9%): [663.853, 668.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   177.626 ±(99.9%) 1.843 B/op [Average]
[info]   (min, avg, max) = (177.045, 177.626, 178.098), stdev = 0.479
[info]   CI (99.9%): [175.783, 179.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.053), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.014), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1895198.024 ops/s
[info] # Warmup Iteration   2: 4331077.388 ops/s
[info] # Warmup Iteration   3: 4633634.955 ops/s
[info] # Warmup Iteration   4: 4685019.579 ops/s
[info] # Warmup Iteration   5: 4706088.419 ops/s
[info] Iteration   1: 4638802.697 ops/s
[info]                  ·gc.alloc.rate:               1267.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          429.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 454.281 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 4708897.444 ops/s
[info]                  ·gc.alloc.rate:                   1274.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              425.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     447.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4691032.917 ops/s
[info]                  ·gc.alloc.rate:               1279.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          429.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449.906 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 4726501.843 ops/s
[info]                  ·gc.alloc.rate:                   1302.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              433.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4749207.113 ops/s
[info]                  ·gc.alloc.rate:               1281.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 221.864 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4702888.403 ±(99.9%) 160930.387 ops/s [Average]
[info]   (min, avg, max) = (4638802.697, 4702888.403, 4749207.113), stdev = 41793.110
[info]   CI (99.9%): [4541958.016, 4863818.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1280.930 ±(99.9%) 51.110 MB/sec [Average]
[info]   (min, avg, max) = (1267.037, 1280.930, 1302.408), stdev = 13.273
[info]   CI (99.9%): [1229.820, 1332.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   428.672 ±(99.9%) 13.543 B/op [Average]
[info]   (min, avg, max) = (424.821, 428.672, 433.680), stdev = 3.517
[info]   CI (99.9%): [415.130, 442.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1206.165 ±(99.9%) 1155.199 MB/sec [Average]
[info]   (min, avg, max) = (669.510, 1206.165, 1341.696), stdev = 300.002
[info]   CI (99.9%): [50.966, 2361.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   404.111 ±(99.9%) 392.460 B/op [Average]
[info]   (min, avg, max) = (221.864, 404.111, 454.281), stdev = 101.921
[info]   CI (99.9%): [11.652, 796.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 6.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.497), stdev = 1.562
[info]   CI (99.9%): [≈ 0, 6.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.234 ±(99.9%) 2.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.234, 1.165), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 6.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3717694.210 ops/s
[info] # Warmup Iteration   2: 5876118.332 ops/s
[info] # Warmup Iteration   3: 6035502.799 ops/s
[info] # Warmup Iteration   4: 6042718.565 ops/s
[info] # Warmup Iteration   5: 6035707.740 ops/s
[info] Iteration   1: 6044153.786 ops/s
[info]                  ·gc.alloc.rate:                   600.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6037085.147 ops/s
[info]                  ·gc.alloc.rate:               607.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.964 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6043120.060 ops/s
[info]                  ·gc.alloc.rate:               601.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.873 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 6042637.936 ops/s
[info]                  ·gc.alloc.rate:               601.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6064246.692 ops/s
[info]                  ·gc.alloc.rate:      585.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   6046248.724 ±(99.9%) 40160.993 ops/s [Average]
[info]   (min, avg, max) = (6037085.147, 6046248.724, 6064246.692), stdev = 10429.682
[info]   CI (99.9%): [6006087.731, 6086409.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   599.456 ±(99.9%) 31.708 MB/sec [Average]
[info]   (min, avg, max) = (585.673, 599.456, 607.891), stdev = 8.235
[info]   CI (99.9%): [567.748, 631.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   156.028 ±(99.9%) 9.230 B/op [Average]
[info]   (min, avg, max) = (152.000, 156.028, 158.446), stdev = 2.397
[info]   CI (99.9%): [146.798, 165.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.118 ±(99.9%) 1156.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.118, 671.576), stdev = 300.258
[info]   CI (99.9%): [≈ 0, 1693.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   139.900 ±(99.9%) 301.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 139.900, 174.964), stdev = 78.206
[info]   CI (99.9%): [≈ 0, 441.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2658829.486 ops/s
[info] # Warmup Iteration   2: 6249453.083 ops/s
[info] # Warmup Iteration   3: 6482487.452 ops/s
[info] # Warmup Iteration   4: 6489414.258 ops/s
[info] # Warmup Iteration   5: 6452636.701 ops/s
[info] Iteration   1: 6153481.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6491960.814 ops/s
[info]                  ·gc.alloc.rate:      0.049 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6485996.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6476120.549 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6470545.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6415621.077 ±(99.9%) 565187.614 ops/s [Average]
[info]   (min, avg, max) = (6153481.649, 6415621.077, 6491960.814), stdev = 146777.429
[info]   CI (99.9%): [5850433.463, 6980808.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1414407.161 ops/s
[info] # Warmup Iteration   2: 4436188.029 ops/s
[info] # Warmup Iteration   3: 4435290.557 ops/s
[info] # Warmup Iteration   4: 4592873.232 ops/s
[info] # Warmup Iteration   5: 4491320.593 ops/s
[info] Iteration   1: 4591754.772 ops/s
[info]                  ·gc.alloc.rate:                   1294.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              443.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4607936.738 ops/s
[info]                  ·gc.alloc.rate:                   1315.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4593448.309 ops/s
[info]                  ·gc.alloc.rate:               1301.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 459.912 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 4681287.341 ops/s
[info]                  ·gc.alloc.rate:                   1337.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4655401.214 ops/s
[info]                  ·gc.alloc.rate:               1331.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          450.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 453.106 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4625965.675 ±(99.9%) 154982.382 ops/s [Average]
[info]   (min, avg, max) = (4591754.772, 4625965.675, 4681287.341), stdev = 40248.432
[info]   CI (99.9%): [4470983.293, 4780948.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1315.921 ±(99.9%) 71.332 MB/sec [Average]
[info]   (min, avg, max) = (1294.524, 1315.921, 1337.463), stdev = 18.525
[info]   CI (99.9%): [1244.589, 1387.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   447.607 ±(99.9%) 11.115 B/op [Average]
[info]   (min, avg, max) = (443.522, 447.607, 450.033), stdev = 2.887
[info]   CI (99.9%): [436.491, 458.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.880 ±(99.9%) 4.248 MB/sec [Average]
[info]   (min, avg, max) = (1340.240, 1341.880, 1342.901), stdev = 1.103
[info]   CI (99.9%): [1337.631, 1346.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   456.478 ±(99.9%) 15.035 B/op [Average]
[info]   (min, avg, max) = (451.501, 456.478, 459.912), stdev = 3.905
[info]   CI (99.9%): [441.443, 471.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.664), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.252 ±(99.9%) 2.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.252, 1.232), stdev = 0.548
[info]   CI (99.9%): [≈ 0, 2.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 1.924
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 324247.132 ops/s
[info] # Warmup Iteration   2: 1468455.025 ops/s
[info] # Warmup Iteration   3: 1591388.453 ops/s
[info] # Warmup Iteration   4: 1600682.357 ops/s
[info] # Warmup Iteration   5: 1603031.630 ops/s
[info] Iteration   1: 1608379.758 ops/s
[info]                  ·gc.alloc.rate:               2166.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          2119.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1966.919 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1574984.541 ops/s
[info]                  ·gc.alloc.rate:                   2123.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              2121.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2012.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1602418.557 ops/s
[info]                  ·gc.alloc.rate:               2159.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          2121.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1982.387 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1598630.474 ops/s
[info]                  ·gc.alloc.rate:                   2169.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              2135.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1991.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1588947.112 ops/s
[info]                  ·gc.alloc.rate:                   2154.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              2133.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2007.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1594672.088 ±(99.9%) 50351.925 ops/s [Average]
[info]   (min, avg, max) = (1574984.541, 1594672.088, 1608379.758), stdev = 13076.235
[info]   CI (99.9%): [1544320.163, 1645024.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2154.580 ±(99.9%) 71.589 MB/sec [Average]
[info]   (min, avg, max) = (2123.079, 2154.580, 2169.588), stdev = 18.591
[info]   CI (99.9%): [2082.992, 2226.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2126.450 ±(99.9%) 29.802 B/op [Average]
[info]   (min, avg, max) = (2119.803, 2126.450, 2135.949), stdev = 7.739
[info]   CI (99.9%): [2096.648, 2156.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2018.274 ±(99.9%) 24.879 MB/sec [Average]
[info]   (min, avg, max) = (2010.130, 2018.274, 2026.403), stdev = 6.461
[info]   CI (99.9%): [1993.395, 2043.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1992.033 ±(99.9%) 71.505 B/op [Average]
[info]   (min, avg, max) = (1966.919, 1992.033, 2012.660), stdev = 18.570
[info]   CI (99.9%): [1920.529, 2063.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.627 ops/s
[info] # Warmup Iteration   2: 2719210.840 ops/s
[info] # Warmup Iteration   3: 2863770.473 ops/s
[info] # Warmup Iteration   4: 2911390.071 ops/s
[info] # Warmup Iteration   5: 2905154.342 ops/s
[info] Iteration   1: 2914614.715 ops/s
[info]                  ·gc.alloc.rate:                   560.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2918679.908 ops/s
[info]                  ·gc.alloc.rate:               565.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 358.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2913519.215 ops/s
[info]                  ·gc.alloc.rate:                   565.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2923399.464 ops/s
[info]                  ·gc.alloc.rate:      550.528 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.392 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2922381.290 ops/s
[info]                  ·gc.alloc.rate:                   568.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2918518.918 ±(99.9%) 17113.005 ops/s [Average]
[info]   (min, avg, max) = (2913519.215, 2918518.918, 2923399.464), stdev = 4444.193
[info]   CI (99.9%): [2901405.914, 2935631.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   562.088 ±(99.9%) 27.382 MB/sec [Average]
[info]   (min, avg, max) = (550.528, 562.088, 568.898), stdev = 7.111
[info]   CI (99.9%): [534.705, 589.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   303.110 ±(99.9%) 15.343 B/op [Average]
[info]   (min, avg, max) = (296.392, 303.110, 306.351), stdev = 3.985
[info]   CI (99.9%): [287.767, 318.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.130 ±(99.9%) 1145.452 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.130, 665.569), stdev = 297.470
[info]   CI (99.9%): [≈ 0, 1677.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   287.070 ±(99.9%) 617.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 287.070, 359.480), stdev = 160.478
[info]   CI (99.9%): [≈ 0, 905.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186186.089 ops/s
[info] # Warmup Iteration   2: 1598917.053 ops/s
[info] # Warmup Iteration   3: 1676217.589 ops/s
[info] # Warmup Iteration   4: 1719157.974 ops/s
[info] # Warmup Iteration   5: 1714786.631 ops/s
[info] Iteration   1: 1718638.519 ops/s
[info]                  ·gc.alloc.rate:                   940.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     611.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1719726.537 ops/s
[info]                  ·gc.alloc.rate:               935.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 611.490 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1712876.976 ops/s
[info]                  ·gc.alloc.rate:                   948.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              871.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1726123.530 ops/s
[info]                  ·gc.alloc.rate:                   938.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              855.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     610.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1710242.609 ops/s
[info]                  ·gc.alloc.rate:               962.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          885.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1231.890 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1717521.634 ±(99.9%) 23943.661 ops/s [Average]
[info]   (min, avg, max) = (1710242.609, 1717521.634, 1726123.530), stdev = 6218.093
[info]   CI (99.9%): [1693577.974, 1741465.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   945.073 ±(99.9%) 41.156 MB/sec [Average]
[info]   (min, avg, max) = (935.729, 945.073, 962.115), stdev = 10.688
[info]   CI (99.9%): [903.917, 986.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   865.903 ±(99.9%) 48.818 B/op [Average]
[info]   (min, avg, max) = (855.038, 865.903, 885.297), stdev = 12.678
[info]   CI (99.9%): [817.085, 914.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.354 ±(99.9%) 1411.443 MB/sec [Average]
[info]   (min, avg, max) = (668.194, 936.354, 1338.782), stdev = 366.547
[info]   CI (99.9%): [≈ 0, 2347.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   858.769 ±(99.9%) 1305.543 B/op [Average]
[info]   (min, avg, max) = (610.130, 858.769, 1231.890), stdev = 339.045
[info]   CI (99.9%): [≈ 0, 2164.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.031), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.029), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1003736.581 ops/s
[info] # Warmup Iteration   2: 2366817.749 ops/s
[info] # Warmup Iteration   3: 2352178.536 ops/s
[info] # Warmup Iteration   4: 2433962.014 ops/s
[info] # Warmup Iteration   5: 2434264.497 ops/s
[info] Iteration   1: 2425903.506 ops/s
[info]                  ·gc.alloc.rate:                   474.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     331.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2443794.133 ops/s
[info]                  ·gc.alloc.rate:      459.803 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2432868.086 ops/s
[info]                  ·gc.alloc.rate:               481.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          311.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 434.590 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2436150.062 ops/s
[info]                  ·gc.alloc.rate:               481.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          310.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 434.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2444641.685 ops/s
[info]                  ·gc.alloc.rate:      459.741 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2436671.494 ±(99.9%) 30132.568 ops/s [Average]
[info]   (min, avg, max) = (2425903.506, 2436671.494, 2444641.685), stdev = 7825.332
[info]   CI (99.9%): [2406538.927, 2466804.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   471.389 ±(99.9%) 42.212 MB/sec [Average]
[info]   (min, avg, max) = (459.741, 471.389, 481.616), stdev = 10.962
[info]   CI (99.9%): [429.177, 513.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.471 ±(99.9%) 30.203 B/op [Average]
[info]   (min, avg, max) = (296.000, 304.471, 311.556), stdev = 7.844
[info]   CI (99.9%): [274.268, 334.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.044 ±(99.9%) 1328.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.044, 671.808), stdev = 344.972
[info]   CI (99.9%): [≈ 0, 1699.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   240.106 ±(99.9%) 859.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 240.106, 434.590), stdev = 223.136
[info]   CI (99.9%): [≈ 0, 1099.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349143.560 ops/s
[info] # Warmup Iteration   2: 1622346.110 ops/s
[info] # Warmup Iteration   3: 1697340.194 ops/s
[info] # Warmup Iteration   4: 1733670.510 ops/s
[info] # Warmup Iteration   5: 1737466.010 ops/s
[info] Iteration   1: 1717381.556 ops/s
[info]                  ·gc.alloc.rate:               1001.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          917.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1224.010 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1733696.115 ops/s
[info]                  ·gc.alloc.rate:               983.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          892.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 606.822 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1732441.444 ops/s
[info]                  ·gc.alloc.rate:                   975.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              886.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     607.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1702057.484 ops/s
[info]                  ·gc.alloc.rate:                   972.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              899.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1729804.891 ops/s
[info]                  ·gc.alloc.rate:                   984.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     609.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1723076.298 ±(99.9%) 51661.131 ops/s [Average]
[info]   (min, avg, max) = (1702057.484, 1723076.298, 1733696.115), stdev = 13416.232
[info]   CI (99.9%): [1671415.167, 1774737.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   983.818 ±(99.9%) 43.425 MB/sec [Average]
[info]   (min, avg, max) = (972.572, 983.818, 1001.661), stdev = 11.277
[info]   CI (99.9%): [940.393, 1027.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   898.496 ±(99.9%) 45.012 B/op [Average]
[info]   (min, avg, max) = (886.549, 898.496, 917.652), stdev = 11.689
[info]   CI (99.9%): [853.484, 943.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   936.242 ±(99.9%) 1409.716 MB/sec [Average]
[info]   (min, avg, max) = (668.476, 936.242, 1338.497), stdev = 366.099
[info]   CI (99.9%): [≈ 0, 2345.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   856.939 ±(99.9%) 1314.101 B/op [Average]
[info]   (min, avg, max) = (606.822, 856.939, 1237.474), stdev = 341.268
[info]   CI (99.9%): [≈ 0, 2171.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283681.685 ops/s
[info] # Warmup Iteration   2: 1809148.196 ops/s
[info] # Warmup Iteration   3: 1861187.608 ops/s
[info] # Warmup Iteration   4: 1887090.851 ops/s
[info] # Warmup Iteration   5: 1879809.811 ops/s
[info] Iteration   1: 1863940.635 ops/s
[info]                  ·gc.alloc.rate:               1434.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          1211.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1132.570 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1883369.754 ops/s
[info]                  ·gc.alloc.rate:               1437.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          1201.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1121.659 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1838457.880 ops/s
[info]                  ·gc.alloc.rate:                   1416.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1149.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1896164.752 ops/s
[info]                  ·gc.alloc.rate:                   1446.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1891542.129 ops/s
[info]                  ·gc.alloc.rate:               1456.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          1211.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1114.652 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1874695.030 ±(99.9%) 91301.940 ops/s [Average]
[info]   (min, avg, max) = (1838457.880, 1874695.030, 1896164.752), stdev = 23710.824
[info]   CI (99.9%): [1783393.090, 1965996.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1438.445 ±(99.9%) 57.035 MB/sec [Average]
[info]   (min, avg, max) = (1416.749, 1438.445, 1456.510), stdev = 14.812
[info]   CI (99.9%): [1381.410, 1495.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1207.674 ±(99.9%) 23.250 B/op [Average]
[info]   (min, avg, max) = (1200.685, 1207.674, 1212.882), stdev = 6.038
[info]   CI (99.9%): [1184.424, 1230.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.668 ±(99.9%) 5.174 MB/sec [Average]
[info]   (min, avg, max) = (1339.614, 1341.668, 1343.248), stdev = 1.344
[info]   CI (99.9%): [1336.494, 1346.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1126.540 ±(99.9%) 58.101 B/op [Average]
[info]   (min, avg, max) = (1113.860, 1126.540, 1149.958), stdev = 15.089
[info]   CI (99.9%): [1068.438, 1184.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.227), stdev = 1.436
[info]   CI (99.9%): [≈ 0, 6.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.563 ±(99.9%) 4.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.563, 2.762), stdev = 1.230
[info]   CI (99.9%): [≈ 0, 5.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.688 ops/s
[info] # Warmup Iteration   2: 2954748.943 ops/s
[info] # Warmup Iteration   3: 3086946.977 ops/s
[info] # Warmup Iteration   4: 3109757.053 ops/s
[info] # Warmup Iteration   5: 3102170.561 ops/s
[info] Iteration   1: 3105658.714 ops/s
[info]                  ·gc.alloc.rate:               819.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 337.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3108994.364 ops/s
[info]                  ·gc.alloc.rate:               826.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 337.545 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3107704.348 ops/s
[info]                  ·gc.alloc.rate:               821.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 337.878 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 3094065.342 ops/s
[info]                  ·gc.alloc.rate:               833.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 678.887 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 3094453.473 ops/s
[info]                  ·gc.alloc.rate:                   816.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              415.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     339.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3102175.248 ±(99.9%) 28204.633 ops/s [Average]
[info]   (min, avg, max) = (3094065.342, 3102175.248, 3108994.364), stdev = 7324.654
[info]   CI (99.9%): [3073970.615, 3130379.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   823.499 ±(99.9%) 26.134 MB/sec [Average]
[info]   (min, avg, max) = (816.681, 823.499, 833.976), stdev = 6.787
[info]   CI (99.9%): [797.365, 849.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   417.743 ±(99.9%) 14.627 B/op [Average]
[info]   (min, avg, max) = (415.298, 417.743, 424.215), stdev = 3.799
[info]   CI (99.9%): [403.116, 432.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.661 ±(99.9%) 1149.438 MB/sec [Average]
[info]   (min, avg, max) = (666.806, 800.661, 1334.644), stdev = 298.506
[info]   CI (99.9%): [≈ 0, 1950.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   406.342 ±(99.9%) 586.680 B/op [Average]
[info]   (min, avg, max) = (337.545, 406.342, 678.887), stdev = 152.359
[info]   CI (99.9%): [≈ 0, 993.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 449275.192 ops/s
[info] # Warmup Iteration   2: 2852279.641 ops/s
[info] # Warmup Iteration   3: 2911751.103 ops/s
[info] # Warmup Iteration   4: 2972034.305 ops/s
[info] # Warmup Iteration   5: 2952445.374 ops/s
[info] Iteration   1: 2939568.679 ops/s
[info]                  ·gc.alloc.rate:                   1289.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              690.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2973380.130 ops/s
[info]                  ·gc.alloc.rate:                   1299.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              687.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2930795.378 ops/s
[info]                  ·gc.alloc.rate:                   1302.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              699.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2977437.928 ops/s
[info]                  ·gc.alloc.rate:                   1322.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              698.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3017976.192 ops/s
[info]                  ·gc.alloc.rate:                   1315.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              685.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2967831.661 ±(99.9%) 133501.640 ops/s [Average]
[info]   (min, avg, max) = (2930795.378, 2967831.661, 3017976.192), stdev = 34669.952
[info]   CI (99.9%): [2834330.021, 3101333.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1305.838 ±(99.9%) 49.793 MB/sec [Average]
[info]   (min, avg, max) = (1289.505, 1305.838, 1322.010), stdev = 12.931
[info]   CI (99.9%): [1256.044, 1355.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   692.391 ±(99.9%) 24.523 B/op [Average]
[info]   (min, avg, max) = (685.878, 692.391, 699.591), stdev = 6.369
[info]   CI (99.9%): [667.868, 716.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.878 ±(99.9%) 1154.482 MB/sec [Average]
[info]   (min, avg, max) = (669.555, 1205.878, 1341.258), stdev = 299.815
[info]   CI (99.9%): [51.396, 2360.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   640.609 ±(99.9%) 627.692 B/op [Average]
[info]   (min, avg, max) = (349.134, 640.609, 719.746), stdev = 163.010
[info]   CI (99.9%): [12.916, 1268.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.689 ±(99.9%) 5.752 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.689, 3.361), stdev = 1.494
[info]   CI (99.9%): [≈ 0, 6.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.364 ±(99.9%) 3.040 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.364, 1.776), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 3.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.800, 6.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1165446.942 ops/s
[info] # Warmup Iteration   2: 3149602.282 ops/s
[info] # Warmup Iteration   3: 3335027.215 ops/s
[info] # Warmup Iteration   4: 3373887.388 ops/s
[info] # Warmup Iteration   5: 3351359.109 ops/s
[info] Iteration   1: 3356207.312 ops/s
[info]                  ·gc.alloc.rate:                   890.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3369763.330 ops/s
[info]                  ·gc.alloc.rate:               898.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313.461 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3358979.092 ops/s
[info]                  ·gc.alloc.rate:                   902.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              422.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     629.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3381067.836 ops/s
[info]                  ·gc.alloc.rate:               891.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3388764.855 ops/s
[info]                  ·gc.alloc.rate:                   905.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3370956.485 ±(99.9%) 53833.226 ops/s [Average]
[info]   (min, avg, max) = (3356207.312, 3370956.485, 3388764.855), stdev = 13980.318
[info]   CI (99.9%): [3317123.259, 3424789.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   897.784 ±(99.9%) 25.469 MB/sec [Average]
[info]   (min, avg, max) = (890.565, 897.784, 905.304), stdev = 6.614
[info]   CI (99.9%): [872.315, 923.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   419.100 ±(99.9%) 11.415 B/op [Average]
[info]   (min, avg, max) = (414.943, 419.100, 422.797), stdev = 2.964
[info]   CI (99.9%): [407.685, 430.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.068 ±(99.9%) 1156.870 MB/sec [Average]
[info]   (min, avg, max) = (671.146, 806.068, 1343.503), stdev = 300.435
[info]   CI (99.9%): [≈ 0, 1962.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   376.494 ±(99.9%) 544.052 B/op [Average]
[info]   (min, avg, max) = (312.164, 376.494, 629.233), stdev = 141.288
[info]   CI (99.9%): [≈ 0, 920.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1335891.488 ops/s
[info] # Warmup Iteration   2: 3539984.057 ops/s
[info] # Warmup Iteration   3: 3630407.752 ops/s
[info] # Warmup Iteration   4: 3630437.683 ops/s
[info] # Warmup Iteration   5: 3643367.720 ops/s
[info] Iteration   1: 3641959.908 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3642517.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3640097.608 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3639201.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3643408.794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3641437.023 ±(99.9%) 6703.423 ops/s [Average]
[info]   (min, avg, max) = (3639201.131, 3641437.023, 3643408.794), stdev = 1740.858
[info]   CI (99.9%): [3634733.600, 3648140.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 729057.330 ops/s
[info] # Warmup Iteration   2: 2579597.064 ops/s
[info] # Warmup Iteration   3: 2806384.034 ops/s
[info] # Warmup Iteration   4: 2810671.606 ops/s
[info] # Warmup Iteration   5: 2792716.178 ops/s
[info] Iteration   1: 2812039.866 ops/s
[info]                  ·gc.alloc.rate:                   1396.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     751.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2804881.524 ops/s
[info]                  ·gc.alloc.rate:                   1404.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              787.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     753.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2797760.252 ops/s
[info]                  ·gc.alloc.rate:                   1390.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              782.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2853971.589 ops/s
[info]                  ·gc.alloc.rate:                   1417.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     740.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2832283.794 ops/s
[info]                  ·gc.alloc.rate:               1408.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          782.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 745.156 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2820187.405 ±(99.9%) 88046.877 ops/s [Average]
[info]   (min, avg, max) = (2797760.252, 2820187.405, 2853971.589), stdev = 22865.494
[info]   CI (99.9%): [2732140.528, 2908234.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1403.420 ±(99.9%) 39.335 MB/sec [Average]
[info]   (min, avg, max) = (1390.857, 1403.420, 1417.078), stdev = 10.215
[info]   CI (99.9%): [1364.085, 1442.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   783.170 ±(99.9%) 9.865 B/op [Average]
[info]   (min, avg, max) = (781.455, 783.170, 787.663), stdev = 2.562
[info]   CI (99.9%): [773.305, 793.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1342.500 ±(99.9%) 4.204 MB/sec [Average]
[info]   (min, avg, max) = (1340.913, 1342.500, 1343.611), stdev = 1.092
[info]   CI (99.9%): [1338.296, 1346.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   749.207 ±(99.9%) 24.078 B/op [Average]
[info]   (min, avg, max) = (740.560, 749.207, 755.863), stdev = 6.253
[info]   CI (99.9%): [725.129, 773.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.689 ±(99.9%) 4.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.689, 2.831), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.386 ±(99.9%) 2.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 1.593), stdev = 0.687
[info]   CI (99.9%): [≈ 0, 3.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2154.010 ops/s
[info] # Warmup Iteration   2: 6590.583 ops/s
[info] # Warmup Iteration   3: 11648.170 ops/s
[info] # Warmup Iteration   4: 12039.315 ops/s
[info] # Warmup Iteration   5: 12047.366 ops/s
[info] Iteration   1: 12045.935 ops/s
[info]                  ·gc.alloc.rate:                   1413.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              184720.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174414.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 12000.521 ops/s
[info]                  ·gc.alloc.rate:               1433.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          187900.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 262799.251 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   3: 12040.126 ops/s
[info]                  ·gc.alloc.rate:                   1404.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              183568.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174762.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 456.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 12117.034 ops/s
[info]                  ·gc.alloc.rate:                   1422.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              184745.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173479.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11944.129 ops/s
[info]                  ·gc.alloc.rate:                   1417.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              186714.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175640.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12029.549 ±(99.9%) 244.851 ops/s [Average]
[info]   (min, avg, max) = (11944.129, 12029.549, 12117.034), stdev = 63.587
[info]   CI (99.9%): [11784.698, 12274.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1418.282 ±(99.9%) 40.842 MB/sec [Average]
[info]   (min, avg, max) = (1404.447, 1418.282, 1433.123), stdev = 10.607
[info]   CI (99.9%): [1377.440, 1459.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   185529.755 ±(99.9%) 6708.146 B/op [Average]
[info]   (min, avg, max) = (183568.347, 185529.755, 187900.233), stdev = 1742.084
[info]   CI (99.9%): [178821.609, 192237.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1469.120 ±(99.9%) 1152.199 MB/sec [Average]
[info]   (min, avg, max) = (1333.451, 1469.120, 2004.380), stdev = 299.222
[info]   CI (99.9%): [316.921, 2621.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   192219.224 ±(99.9%) 151958.066 B/op [Average]
[info]   (min, avg, max) = (173479.238, 192219.224, 262799.251), stdev = 39463.027
[info]   CI (99.9%): [40261.158, 344177.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.907 ±(99.9%) 5.762 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.907, 3.496), stdev = 1.496
[info]   CI (99.9%): [≈ 0, 6.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   118.473 ±(99.9%) 753.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.473, 456.962), stdev = 195.566
[info]   CI (99.9%): [≈ 0, 871.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 13.000), stdev = 4.183
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204.876 ops/s
[info] # Warmup Iteration   2: 15150.106 ops/s
[info] # Warmup Iteration   3: 24017.744 ops/s
[info] # Warmup Iteration   4: 24078.140 ops/s
[info] # Warmup Iteration   5: 24316.132 ops/s
[info] Iteration   1: 23492.688 ops/s
[info]                  ·gc.alloc.rate:               368.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          24673.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34274.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 24302.844 ops/s
[info]                  ·gc.alloc.rate:      366.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 23708.961 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 24399.709 ops/s
[info]                  ·gc.alloc.rate:               361.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          23345.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42535.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 24463.696 ops/s
[info]                  ·gc.alloc.rate:                   374.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              24110.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42426.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24442.298 ops/s
[info]                  ·gc.alloc.rate:      355.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 22855.111 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   24220.247 ±(99.9%) 1584.091 ops/s [Average]
[info]   (min, avg, max) = (23492.688, 24220.247, 24463.696), stdev = 411.384
[info]   CI (99.9%): [22636.156, 25804.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   365.263 ±(99.9%) 28.206 MB/sec [Average]
[info]   (min, avg, max) = (355.110, 365.263, 374.803), stdev = 7.325
[info]   CI (99.9%): [337.058, 393.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   23738.623 ±(99.9%) 2686.342 B/op [Average]
[info]   (min, avg, max) = (22855.111, 23738.623, 24673.030), stdev = 697.634
[info]   CI (99.9%): [21052.281, 26424.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.138 ±(99.9%) 1307.874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.138, 659.555), stdev = 339.651
[info]   CI (99.9%): [≈ 0, 1674.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23847.320 ±(99.9%) 84813.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23847.320, 42535.966), stdev = 22025.884
[info]   CI (99.9%): [≈ 0, 108661.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.804 ±(99.9%) 6.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 4.018), stdev = 1.797
[info]   CI (99.9%): [≈ 0, 7.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11388.218 ops/s
[info] # Warmup Iteration   2: 22008.285 ops/s
[info] # Warmup Iteration   3: 22700.211 ops/s
[info] # Warmup Iteration   4: 22661.682 ops/s
[info] # Warmup Iteration   5: 22621.679 ops/s
[info] Iteration   1: 22633.230 ops/s
[info]                  ·gc.alloc.rate:               264.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          18364.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35574.783 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22809.198 ops/s
[info]                  ·gc.alloc.rate:      247.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22755.444 ops/s
[info]                  ·gc.alloc.rate:               256.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          17744.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35384.084 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22815.954 ops/s
[info]                  ·gc.alloc.rate:      248.062 MB/sec
[info]                  ·gc.alloc.rate.norm: 17110.280 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22714.481 ops/s
[info]                  ·gc.alloc.rate:                   257.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              17825.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35447.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22745.661 ±(99.9%) 289.994 ops/s [Average]
[info]   (min, avg, max) = (22633.230, 22745.661, 22815.954), stdev = 75.311
[info]   CI (99.9%): [22455.667, 23035.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   254.787 ±(99.9%) 26.418 MB/sec [Average]
[info]   (min, avg, max) = (247.927, 254.787, 264.094), stdev = 6.861
[info]   CI (99.9%): [228.368, 281.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17629.698 ±(99.9%) 2053.016 B/op [Average]
[info]   (min, avg, max) = (17104.019, 17629.698, 18364.098), stdev = 533.162
[info]   CI (99.9%): [15576.681, 19682.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.970 ±(99.9%) 1079.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.970, 511.662), stdev = 280.224
[info]   CI (99.9%): [≈ 0, 1386.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21281.362 ±(99.9%) 74807.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21281.362, 35574.783), stdev = 19427.258
[info]   CI (99.9%): [≈ 0, 96088.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.288 ±(99.9%) 2.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.288, 1.442), stdev = 0.645
[info]   CI (99.9%): [≈ 0, 2.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161.919 ops/s
[info] # Warmup Iteration   2: 2102.475 ops/s
[info] # Warmup Iteration   3: 5151.310 ops/s
[info] # Warmup Iteration   4: 6008.353 ops/s
[info] # Warmup Iteration   5: 6055.073 ops/s
[info] Iteration   1: 6072.944 ops/s
[info]                  ·gc.alloc.rate:                   1878.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              486773.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     339138.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 6036.500 ops/s
[info]                  ·gc.alloc.rate:                   1875.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              488868.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     512218.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 407.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 6041.183 ops/s
[info]                  ·gc.alloc.rate:                   1900.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              494947.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     512835.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1294.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 6138.309 ops/s
[info]                  ·gc.alloc.rate:                   1915.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              491111.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1967.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     504563.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6139.102 ops/s
[info]                  ·gc.alloc.rate:               1928.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          494444.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1962.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 503114.995 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   6085.608 ±(99.9%) 194.301 ops/s [Average]
[info]   (min, avg, max) = (6036.500, 6085.608, 6139.102), stdev = 50.459
[info]   CI (99.9%): [5891.307, 6279.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1899.613 ±(99.9%) 89.416 MB/sec [Average]
[info]   (min, avg, max) = (1875.119, 1899.613, 1928.797), stdev = 23.221
[info]   CI (99.9%): [1810.197, 1989.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   491229.206 ±(99.9%) 13559.108 B/op [Average]
[info]   (min, avg, max) = (486773.951, 491229.206, 494947.431), stdev = 3521.257
[info]   CI (99.9%): [477670.098, 504788.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1834.581 ±(99.9%) 1132.137 MB/sec [Average]
[info]   (min, avg, max) = (1308.656, 1834.581, 1968.983), stdev = 294.012
[info]   CI (99.9%): [702.445, 2966.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   474374.175 ±(99.9%) 291592.943 B/op [Average]
[info]   (min, avg, max) = (339138.550, 474374.175, 512835.739), stdev = 75725.761
[info]   CI (99.9%): [182781.233, 765967.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.725 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.725, 4.970), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 9.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   447.594 ±(99.9%) 2036.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 447.594, 1294.507), stdev = 528.897
[info]   CI (99.9%): [≈ 0, 2484.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.200, 16.000), stdev = 5.119
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15848.977 ops/s
[info] # Warmup Iteration   2: 61565.501 ops/s
[info] # Warmup Iteration   3: 63344.259 ops/s
[info] # Warmup Iteration   4: 63769.522 ops/s
[info] # Warmup Iteration   5: 63951.994 ops/s
[info] Iteration   1: 64036.332 ops/s
[info]                  ·gc.alloc.rate:               825.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          20279.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16331.812 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 63323.735 ops/s
[info]                  ·gc.alloc.rate:               820.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          20380.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16515.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 63835.092 ops/s
[info]                  ·gc.alloc.rate:               824.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          20324.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16408.124 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 63320.385 ops/s
[info]                  ·gc.alloc.rate:                   812.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              20198.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16540.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 63355.749 ops/s
[info]                  ·gc.alloc.rate:                   827.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              20550.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33095.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   63574.258 ±(99.9%) 1300.848 ops/s [Average]
[info]   (min, avg, max) = (63320.385, 63574.258, 64036.332), stdev = 337.826
[info]   CI (99.9%): [62273.410, 64875.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   821.911 ±(99.9%) 22.355 MB/sec [Average]
[info]   (min, avg, max) = (812.641, 821.911, 827.260), stdev = 5.805
[info]   CI (99.9%): [799.556, 844.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20346.647 ±(99.9%) 508.118 B/op [Average]
[info]   (min, avg, max) = (20198.091, 20346.647, 20550.259), stdev = 131.957
[info]   CI (99.9%): [19838.529, 20854.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   798.485 ±(99.9%) 1149.056 MB/sec [Average]
[info]   (min, avg, max) = (664.537, 798.485, 1332.289), stdev = 298.406
[info]   CI (99.9%): [≈ 0, 1947.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19778.450 ±(99.9%) 28668.548 B/op [Average]
[info]   (min, avg, max) = (16331.812, 19778.450, 33095.856), stdev = 7445.131
[info]   CI (99.9%): [≈ 0, 48446.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.310 ±(99.9%) 1.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.310, 1.034), stdev = 0.463
[info]   CI (99.9%): [≈ 0, 2.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27732.440 ops/s
[info] # Warmup Iteration   2: 66329.536 ops/s
[info] # Warmup Iteration   3: 69236.464 ops/s
[info] # Warmup Iteration   4: 68706.537 ops/s
[info] # Warmup Iteration   5: 68991.609 ops/s
[info] Iteration   1: 68535.524 ops/s
[info]                  ·gc.alloc.rate:               458.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          10519.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11748.408 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 68621.444 ops/s
[info]                  ·gc.alloc.rate:               468.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          10742.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15270.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 68894.594 ops/s
[info]                  ·gc.alloc.rate:      449.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 10258.979 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 67950.639 ops/s
[info]                  ·gc.alloc.rate:                   464.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15421.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.668 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 68584.142 ops/s
[info]                  ·gc.alloc.rate:               460.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          10570.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15302.211 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   68517.269 ±(99.9%) 1332.653 ops/s [Average]
[info]   (min, avg, max) = (67950.639, 68517.269, 68894.594), stdev = 346.086
[info]   CI (99.9%): [67184.616, 69849.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   460.089 ±(99.9%) 28.057 MB/sec [Average]
[info]   (min, avg, max) = (449.084, 460.089, 468.375), stdev = 7.286
[info]   CI (99.9%): [432.032, 488.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10568.619 ±(99.9%) 775.580 B/op [Average]
[info]   (min, avg, max) = (10258.979, 10568.619, 10752.212), stdev = 201.416
[info]   CI (99.9%): [9793.040, 11344.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   502.032 ±(99.9%) 1110.993 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.032, 666.787), stdev = 288.521
[info]   CI (99.9%): [≈ 0, 1613.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11548.563 ±(99.9%) 25567.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11548.563, 15421.597), stdev = 6639.899
[info]   CI (99.9%): [≈ 0, 37116.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 1.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.668), stdev = 0.299
[info]   CI (99.9%): [≈ 0, 1.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32090.182 ops/s
[info] # Warmup Iteration   2: 74045.252 ops/s
[info] # Warmup Iteration   3: 76197.525 ops/s
[info] # Warmup Iteration   4: 76350.064 ops/s
[info] # Warmup Iteration   5: 75978.792 ops/s
[info] Iteration   1: 76556.008 ops/s
[info]                  ·gc.alloc.rate:      20.625 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 76114.792 ops/s
[info]                  ·gc.alloc.rate:      29.166 MB/sec
[info]                  ·gc.alloc.rate.norm: 603.050 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76446.553 ops/s
[info]                  ·gc.alloc.rate:      20.596 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 76464.843 ops/s
[info]                  ·gc.alloc.rate:      20.600 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 72661.438 ops/s
[info]                  ·gc.alloc.rate:      19.584 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   75648.727 ±(99.9%) 6462.558 ops/s [Average]
[info]   (min, avg, max) = (72661.438, 75648.727, 76556.008), stdev = 1678.306
[info]   CI (99.9%): [69186.169, 82111.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   22.114 ±(99.9%) 15.275 MB/sec [Average]
[info]   (min, avg, max) = (19.584, 22.114, 29.166), stdev = 3.967
[info]   CI (99.9%): [6.839, 37.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   459.815 ±(99.9%) 308.324 B/op [Average]
[info]   (min, avg, max) = (424.006, 459.815, 603.050), stdev = 80.071
[info]   CI (99.9%): [151.491, 768.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64478.999 ops/s
[info] # Warmup Iteration   2: 280434.354 ops/s
[info] # Warmup Iteration   3: 296159.918 ops/s
[info] # Warmup Iteration   4: 305750.011 ops/s
[info] # Warmup Iteration   5: 305840.566 ops/s
[info] Iteration   1: 305096.012 ops/s
[info]                  ·gc.alloc.rate:                   1823.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              9402.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10400.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 304963.270 ops/s
[info]                  ·gc.alloc.rate:                   1808.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              9330.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6937.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 305169.070 ops/s
[info]                  ·gc.alloc.rate:                   1846.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              9520.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10375.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 302722.544 ops/s
[info]                  ·gc.alloc.rate:                   1820.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              9461.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10445.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.758 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 306969.915 ops/s
[info]                  ·gc.alloc.rate:               1832.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          9393.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6868.484 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   304984.162 ±(99.9%) 5809.648 ops/s [Average]
[info]   (min, avg, max) = (302722.544, 304984.162, 306969.915), stdev = 1508.747
[info]   CI (99.9%): [299174.515, 310793.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1826.320 ±(99.9%) 55.181 MB/sec [Average]
[info]   (min, avg, max) = (1808.417, 1826.320, 1846.711), stdev = 14.330
[info]   CI (99.9%): [1771.139, 1881.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9421.379 ±(99.9%) 276.886 B/op [Average]
[info]   (min, avg, max) = (9330.798, 9421.379, 9520.000), stdev = 71.906
[info]   CI (99.9%): [9144.493, 9698.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1744.814 ±(99.9%) 1414.635 MB/sec [Average]
[info]   (min, avg, max) = (1340.192, 1744.814, 2016.681), stdev = 367.376
[info]   CI (99.9%): [330.180, 3159.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9005.405 ±(99.9%) 7391.394 B/op [Average]
[info]   (min, avg, max) = (6868.484, 9005.405, 10445.240), stdev = 1919.521
[info]   CI (99.9%): [1614.012, 16396.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.407 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.227), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.718 ±(99.9%) 27.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.718, 16.652), stdev = 7.244
[info]   CI (99.9%): [≈ 0, 31.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99363.006 ops/s
[info] # Warmup Iteration   2: 469687.377 ops/s
[info] # Warmup Iteration   3: 488357.871 ops/s
[info] # Warmup Iteration   4: 480294.616 ops/s
[info] # Warmup Iteration   5: 484247.789 ops/s
[info] Iteration   1: 484880.012 ops/s
[info]                  ·gc.alloc.rate:      539.942 MB/sec
[info]                  ·gc.alloc.rate.norm: 1752.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 484233.860 ops/s
[info]                  ·gc.alloc.rate:               553.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          1799.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2162.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 481951.004 ops/s
[info]                  ·gc.alloc.rate:               551.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          1800.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2173.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 493214.462 ops/s
[info]                  ·gc.alloc.rate:                   573.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              1831.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2126.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 488867.417 ops/s
[info]                  ·gc.alloc.rate:                   565.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              1821.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2145.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   486629.351 ±(99.9%) 17118.930 ops/s [Average]
[info]   (min, avg, max) = (481951.004, 486629.351, 493214.462), stdev = 4445.732
[info]   CI (99.9%): [469510.421, 503748.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   557.052 ±(99.9%) 50.734 MB/sec [Average]
[info]   (min, avg, max) = (539.942, 557.052, 573.997), stdev = 13.175
[info]   CI (99.9%): [506.318, 607.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1800.989 ±(99.9%) 117.427 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1800.989, 1831.105), stdev = 30.495
[info]   CI (99.9%): [1683.562, 1918.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.916 ±(99.9%) 1147.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.916, 666.648), stdev = 297.909
[info]   CI (99.9%): [≈ 0, 1680.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1721.687 ±(99.9%) 3706.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1721.687, 2173.203), stdev = 962.615
[info]   CI (99.9%): [≈ 0, 5428.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473781.922 ops/s
[info] # Warmup Iteration   2: 1164383.565 ops/s
[info] # Warmup Iteration   3: 1213534.797 ops/s
[info] # Warmup Iteration   4: 1191898.233 ops/s
[info] # Warmup Iteration   5: 1200111.210 ops/s
[info] Iteration   1: 1200298.835 ops/s
[info]                  ·gc.alloc.rate:               653.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 879.605 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1200950.104 ops/s
[info]                  ·gc.alloc.rate:                   654.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              857.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     879.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1209021.696 ops/s
[info]                  ·gc.alloc.rate:               657.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          855.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 874.109 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1185730.049 ops/s
[info]                  ·gc.alloc.rate:                   638.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              846.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     891.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1213657.205 ops/s
[info]                  ·gc.alloc.rate:               653.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          846.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 871.223 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1201931.578 ±(99.9%) 41017.888 ops/s [Average]
[info]   (min, avg, max) = (1185730.049, 1201931.578, 1213657.205), stdev = 10652.215
[info]   CI (99.9%): [1160913.690, 1242949.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   651.437 ±(99.9%) 29.106 MB/sec [Average]
[info]   (min, avg, max) = (638.181, 651.437, 657.086), stdev = 7.559
[info]   CI (99.9%): [622.331, 680.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   852.784 ±(99.9%) 21.063 B/op [Average]
[info]   (min, avg, max) = (846.829, 852.784, 857.972), stdev = 5.470
[info]   CI (99.9%): [831.721, 873.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.470 ±(99.9%) 1.451 MB/sec [Average]
[info]   (min, avg, max) = (671.082, 671.470, 671.985), stdev = 0.377
[info]   CI (99.9%): [670.019, 672.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   879.069 ±(99.9%) 29.591 B/op [Average]
[info]   (min, avg, max) = (871.223, 879.069, 891.307), stdev = 7.685
[info]   CI (99.9%): [849.478, 908.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13264.142 ops/s
[info] # Warmup Iteration   2: 85276.745 ops/s
[info] # Warmup Iteration   3: 104037.788 ops/s
[info] # Warmup Iteration   4: 103923.010 ops/s
[info] # Warmup Iteration   5: 103508.067 ops/s
[info] Iteration   1: 104693.647 ops/s
[info]                  ·gc.alloc.rate:               3182.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          47817.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40137.647 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 103520.302 ops/s
[info]                  ·gc.alloc.rate:                   3189.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              48474.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50810.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.949 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 104605.011 ops/s
[info]                  ·gc.alloc.rate:               3195.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          48068.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40361.070 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 104930.448 ops/s
[info]                  ·gc.alloc.rate:                   3233.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              48479.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50483.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 105157.157 ops/s
[info]                  ·gc.alloc.rate:                   3240.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              48486.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50542.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   104581.313 ±(99.9%) 2429.582 ops/s [Average]
[info]   (min, avg, max) = (103520.302, 104581.313, 105157.157), stdev = 630.955
[info]   CI (99.9%): [102151.731, 107010.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3208.392 ±(99.9%) 103.684 MB/sec [Average]
[info]   (min, avg, max) = (3182.264, 3208.392, 3240.975), stdev = 26.926
[info]   CI (99.9%): [3104.708, 3312.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48265.322 ±(99.9%) 1183.925 B/op [Average]
[info]   (min, avg, max) = (47817.375, 48265.322, 48486.456), stdev = 307.462
[info]   CI (99.9%): [47081.397, 49449.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3088.668 ±(99.9%) 1447.682 MB/sec [Average]
[info]   (min, avg, max) = (2671.175, 3088.668, 3378.439), stdev = 375.958
[info]   CI (99.9%): [1640.986, 4536.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   46467.099 ±(99.9%) 21863.493 B/op [Average]
[info]   (min, avg, max) = (40137.647, 46467.099, 50810.402), stdev = 5677.880
[info]   CI (99.9%): [24603.606, 68330.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.315 ±(99.9%) 1.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.315, 0.949), stdev = 0.388
[info]   CI (99.9%): [≈ 0, 1.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125740.825 ops/s
[info] # Warmup Iteration   2: 319771.549 ops/s
[info] # Warmup Iteration   3: 321506.502 ops/s
[info] # Warmup Iteration   4: 327727.484 ops/s
[info] # Warmup Iteration   5: 322561.594 ops/s
[info] Iteration   1: 324956.461 ops/s
[info]                  ·gc.alloc.rate:                   1142.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              5530.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6494.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 324469.893 ops/s
[info]                  ·gc.alloc.rate:                   1133.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              5496.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6509.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 326654.415 ops/s
[info]                  ·gc.alloc.rate:               1133.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          5459.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3233.631 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 323711.527 ops/s
[info]                  ·gc.alloc.rate:               1126.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          5477.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6529.209 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 313218.454 ops/s
[info]                  ·gc.alloc.rate:                   1103.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              5544.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6754.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   322602.150 ±(99.9%) 20623.115 ops/s [Average]
[info]   (min, avg, max) = (313218.454, 322602.150, 326654.415), stdev = 5355.757
[info]   CI (99.9%): [301979.035, 343225.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1128.048 ±(99.9%) 56.131 MB/sec [Average]
[info]   (min, avg, max) = (1103.867, 1128.048, 1142.282), stdev = 14.577
[info]   CI (99.9%): [1071.917, 1184.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5501.602 ±(99.9%) 136.709 B/op [Average]
[info]   (min, avg, max) = (5459.409, 5501.602, 5544.542), stdev = 35.503
[info]   CI (99.9%): [5364.893, 5638.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.710 ±(99.9%) 1156.586 MB/sec [Average]
[info]   (min, avg, max) = (671.411, 1208.710, 1344.834), stdev = 300.362
[info]   CI (99.9%): [52.124, 2365.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5904.322 ±(99.9%) 5763.416 B/op [Average]
[info]   (min, avg, max) = (3233.631, 5904.322, 6754.878), stdev = 1496.741
[info]   CI (99.9%): [140.906, 11667.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.700 ±(99.9%) 5.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 3.374), stdev = 1.495
[info]   CI (99.9%): [≈ 0, 6.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.510 ±(99.9%) 28.927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.510, 16.946), stdev = 7.512
[info]   CI (99.9%): [≈ 0, 32.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130846.317 ops/s
[info] # Warmup Iteration   2: 682993.190 ops/s
[info] # Warmup Iteration   3: 714382.517 ops/s
[info] # Warmup Iteration   4: 691494.369 ops/s
[info] # Warmup Iteration   5: 680526.388 ops/s
[info] Iteration   1: 681792.044 ops/s
[info]                  ·gc.alloc.rate:               538.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          1243.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1180.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 684414.009 ops/s
[info]                  ·gc.alloc.rate:               542.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1532.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 706370.309 ops/s
[info]                  ·gc.alloc.rate:               561.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          1251.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1484.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 707154.729 ops/s
[info]                  ·gc.alloc.rate:               563.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1484.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 682747.128 ops/s
[info]                  ·gc.alloc.rate:      520.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   692495.644 ±(99.9%) 50291.405 ops/s [Average]
[info]   (min, avg, max) = (681792.044, 692495.644, 707154.729), stdev = 13060.518
[info]   CI (99.9%): [642204.239, 742787.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   545.396 ±(99.9%) 67.715 MB/sec [Average]
[info]   (min, avg, max) = (520.764, 545.396, 563.129), stdev = 17.585
[info]   CI (99.9%): [477.681, 613.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1238.869 ±(99.9%) 84.902 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1238.869, 1252.782), stdev = 22.049
[info]   CI (99.9%): [1153.967, 1323.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.540 ±(99.9%) 1112.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.540, 667.429), stdev = 288.846
[info]   CI (99.9%): [≈ 0, 1614.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1136.683 ±(99.9%) 2505.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1136.683, 1532.641), stdev = 650.634
[info]   CI (99.9%): [≈ 0, 3642.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 693924.159 ops/s
[info] # Warmup Iteration   2: 1412976.291 ops/s
[info] # Warmup Iteration   3: 1532883.575 ops/s
[info] # Warmup Iteration   4: 1536710.523 ops/s
[info] # Warmup Iteration   5: 1545874.123 ops/s
[info] Iteration   1: 1536452.283 ops/s
[info]                  ·gc.alloc.rate:               739.642 MB/sec
[info]                  ·gc.alloc.rate.norm:          757.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 686.816 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1523236.892 ops/s
[info]                  ·gc.alloc.rate:               741.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          766.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 693.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1563583.643 ops/s
[info]                  ·gc.alloc.rate:                   748.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     675.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1536875.036 ops/s
[info]                  ·gc.alloc.rate:               727.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          745.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 687.949 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1522372.685 ops/s
[info]                  ·gc.alloc.rate:                   719.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1536504.108 ±(99.9%) 64120.957 ops/s [Average]
[info]   (min, avg, max) = (1522372.685, 1536504.108, 1563583.643), stdev = 16652.009
[info]   CI (99.9%): [1472383.151, 1600625.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   735.667 ±(99.9%) 44.537 MB/sec [Average]
[info]   (min, avg, max) = (719.996, 735.667, 748.945), stdev = 11.566
[info]   CI (99.9%): [691.130, 780.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   753.340 ±(99.9%) 35.448 B/op [Average]
[info]   (min, avg, max) = (744.182, 753.340, 766.389), stdev = 9.206
[info]   CI (99.9%): [717.893, 788.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.461 ±(99.9%) 2.255 MB/sec [Average]
[info]   (min, avg, max) = (670.637, 671.461, 672.091), stdev = 0.586
[info]   CI (99.9%): [669.205, 673.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   687.652 ±(99.9%) 29.098 B/op [Average]
[info]   (min, avg, max) = (675.530, 687.652, 694.514), stdev = 7.557
[info]   CI (99.9%): [658.553, 716.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.022), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 909962.330 ops/s
[info] # Warmup Iteration   2: 1633043.654 ops/s
[info] # Warmup Iteration   3: 1680040.460 ops/s
[info] # Warmup Iteration   4: 1664017.572 ops/s
[info] # Warmup Iteration   5: 1668877.075 ops/s
[info] Iteration   1: 1697298.841 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1746010.180 ops/s
[info]                  ·gc.alloc.rate:      0.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.216 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1747773.668 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1745774.925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1746592.375 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1736689.998 ±(99.9%) 84844.676 ops/s [Average]
[info]   (min, avg, max) = (1697298.841, 1736689.998, 1747773.668), stdev = 22033.893
[info]   CI (99.9%): [1651845.322, 1821534.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.048 ±(99.9%) 0.412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.048, 0.239), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.043 ±(99.9%) 0.371 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.043, 0.216), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122716.252 ops/s
[info] # Warmup Iteration   2: 429099.689 ops/s
[info] # Warmup Iteration   3: 461954.819 ops/s
[info] # Warmup Iteration   4: 460018.077 ops/s
[info] # Warmup Iteration   5: 461448.842 ops/s
[info] Iteration   1: 459568.762 ops/s
[info]                  ·gc.alloc.rate:                   698.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2286.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 458241.060 ops/s
[info]                  ·gc.alloc.rate:               705.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          2424.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2294.863 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 458561.626 ops/s
[info]                  ·gc.alloc.rate:               698.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          2395.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2293.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 462844.978 ops/s
[info]                  ·gc.alloc.rate:                   704.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              2395.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2274.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 462025.489 ops/s
[info]                  ·gc.alloc.rate:                   702.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              2393.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2278.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   460248.383 ±(99.9%) 7993.400 ops/s [Average]
[info]   (min, avg, max) = (458241.060, 460248.383, 462844.978), stdev = 2075.860
[info]   CI (99.9%): [452254.984, 468241.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   701.903 ±(99.9%) 13.342 MB/sec [Average]
[info]   (min, avg, max) = (698.016, 701.903, 705.926), stdev = 3.465
[info]   CI (99.9%): [688.561, 715.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2400.254 ±(99.9%) 52.536 B/op [Average]
[info]   (min, avg, max) = (2392.751, 2400.254, 2424.554), stdev = 13.643
[info]   CI (99.9%): [2347.719, 2452.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.349 ±(99.9%) 1.714 MB/sec [Average]
[info]   (min, avg, max) = (667.810, 668.349, 668.822), stdev = 0.445
[info]   CI (99.9%): [666.635, 670.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2285.518 ±(99.9%) 34.838 B/op [Average]
[info]   (min, avg, max) = (2274.269, 2285.518, 2294.863), stdev = 9.047
[info]   CI (99.9%): [2250.679, 2320.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.142), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:00
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    831381.800 ±   42348.709   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2419.399 ±     102.064  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4579.316 ±     170.578    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2275.893 ±    1405.191  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4311.832 ±    2786.222    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.808 ±       6.731  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         1.545 ±      12.876    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1941078.475 ±  126441.223   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1292.268 ±      79.462  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1047.787 ±      47.405    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1202.474 ±    1151.671  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       976.582 ±     954.744    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.864 ±       7.237  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.718 ±       6.017    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   6048698.544 ±  390839.752   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       414.476 ±      36.807  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       107.846 ±       9.620    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       473.410 ±    1064.630  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       123.675 ±     278.198    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.001 ±       0.010    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5        10.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    263652.763 ±    6172.331   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2255.550 ±      54.694  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13464.562 ±     342.438    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2149.164 ±    1157.140  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     12828.292 ±    6857.609    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.291 ±       2.112  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         1.753 ±      12.721    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    912340.107 ±   13224.048   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2447.364 ±      93.728  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4221.567 ±     116.726    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2412.420 ±    1409.274  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      4161.944 ±    2448.106    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.779 ±       6.392  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         1.346 ±      11.046    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2881024.580 ±  145123.812   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1234.953 ±      65.477  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       674.576 ±      14.867    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1203.743 ±    1150.286  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       657.428 ±     627.145    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.787 ±       6.574  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.439 ±       3.668    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  14311136.571 ±  653559.712   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       752.622 ±      38.960  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        82.766 ±       5.126    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       805.727 ±    1156.350  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        88.748 ±     129.919    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        16.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  17274255.184 ±  102437.353   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.546 ±       4.702  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.050 ±       0.429    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    681961.104 ±   33729.958   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1970.457 ±      87.339  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4546.832 ±     135.933    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                                         N/A  thrpt    5         0.004 ±       0.034  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                                    N/A  thrpt    5         0.009 ±       0.079    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.Metaspace                                                      N/A  thrpt    5         0.012 ±       0.100  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                                 N/A  thrpt    5         0.027 ±       0.233    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      1863.246 ±    1145.562  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4297.628 ±    2599.368    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Old_Gen                                                     N/A  thrpt    5         0.465 ±       4.008  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm                                                N/A  thrpt    5         1.083 ±       9.329    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.989 ±       7.988  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         2.307 ±      18.638    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        60.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2116108.463 ±   43488.860   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2976.021 ±      92.759  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2213.074 ±      34.060    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2956.455 ±    1427.709  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2198.056 ±    1040.817    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.033 ±       0.146  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.025 ±       0.109    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5   9883102.950 ±  436054.711   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1237.721 ±      50.781  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       197.083 ±       6.782    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1201.756 ±    1148.793  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       191.474 ±     184.532    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.866 ±       7.357  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.139 ±       1.185    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3301727.055 ±  108305.344   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2065.081 ±      94.902  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       984.246 ±      18.188    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2003.285 ±      11.422  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       954.876 ±      36.412    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.851 ±       7.241  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.412 ±       3.502    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13582131.725 ±  880944.650   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1784.139 ±     132.611  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.717 ±       7.005    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1749.874 ±    1416.686  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       202.795 ±     164.822    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.600 ±       4.724  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.071 ±       0.561    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1183645.954 ±   34492.600   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2674.284 ±      82.293  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3555.618 ±      39.736    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2533.768 ±    1140.360  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3369.733 ±    1546.954    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.954 ±       7.024  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.282 ±       9.467    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        41.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2480965.489 ±   53550.289   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2189.898 ±      41.876  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1388.824 ±      28.844    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2143.493 ±    1139.742  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1360.023 ±     748.467    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.725 ±       6.150  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.458 ±       3.884    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  18636401.936 ±  695936.049   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       586.885 ±      11.898  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.558 ±       1.077    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       666.714 ±       1.846  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        56.301 ±       2.222    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.007 ±       0.040  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.003    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6528453.066 ±  169245.351   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1848.652 ±     110.510  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       445.606 ±      20.419    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1737.560 ±    1411.684  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       418.723 ±     337.663    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.783 ±       6.278  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.189 ±       1.512    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  28054550.856 ±  739597.092   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       880.002 ±      28.619  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.363 ±       1.161    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       806.297 ±    1157.703  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        45.188 ±      64.132    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  34935330.548 ±  153201.450   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1840133.271 ±  156810.552   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      2794.233 ±     335.379  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2389.379 ±      91.565    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                                     N/A  thrpt    5         0.004 ±       0.037  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                                N/A  thrpt    5         0.004 ±       0.032    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.Metaspace                                                  N/A  thrpt    5         0.013 ±       0.108  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                             N/A  thrpt    5         0.011 ±       0.096    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2731.300 ±    1505.322  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2332.744 ±    1164.187    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Old_Gen                                                 N/A  thrpt    5         0.426 ±       3.666  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm                                            N/A  thrpt    5         0.379 ±       3.262    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.150 ±       0.585  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.130 ±       0.515    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        60.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    314567.820 ±    6132.709   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1932.008 ±      60.109  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9665.543 ±     199.174    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1877.374 ±    1159.109  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9395.599 ±    5875.943    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.699 ±       5.094  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.525 ±      25.713    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    518447.241 ±    6884.921   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       671.144 ±      11.169  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2037.160 ±      31.041    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.948 ±       3.075  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2021.399 ±      26.696    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.013 ±       0.109    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1321010.296 ±  100332.137   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       908.249 ±      72.599  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1081.934 ±      45.353    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941.162 ±    1418.419  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1124.571 ±    1736.595    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.025 ±       0.096    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    121319.079 ±    2116.578   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3620.084 ±      34.193  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     46959.760 ±     835.528    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3498.026 ±    1193.513  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     45385.125 ±   16010.123    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.216 ±       0.874    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        37.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    347126.804 ±    4658.421   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1200.272 ±      19.913  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5440.695 ±     148.415    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1074.009 ±    1416.194  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4871.993 ±    6464.740    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.704 ±       5.086  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.190 ±      23.064    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    891223.662 ±   25712.495   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       662.012 ±      20.680  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1168.829 ±      22.589    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       667.023 ±       2.479  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1177.723 ±      34.573    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.037 ±       0.200    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2575443.008 ±   30720.496   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1226.754 ±      10.693  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       749.660 ±      15.178    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1210.448 ±    1157.318  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       740.047 ±     711.845    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.608 ±       4.278  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.372 ±       2.620    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2816812.613 ±  571310.752   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    487070.198 ±   12052.458   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       721.455 ±      15.893  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2331.046 ±      61.353    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.537 ±       1.657  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2160.091 ±      53.084    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.040 ±       0.233    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     17478.557 ±     703.717   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1404.643 ±      55.349  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126466.705 ±    3931.776    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1342.976 ±       6.556  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    120922.167 ±    5103.559    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.762 ±       4.638  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        68.122 ±     414.472    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     35935.642 ±    9498.242   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       994.755 ±     244.162  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43577.088 ±    2284.991    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1071.042 ±    1411.703  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     47706.834 ±   70665.381    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.357 ±       5.787    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     41921.176 ±     159.317   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       622.757 ±      14.478  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     23374.721 ±     524.405    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       671.228 ±       1.237  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     25194.057 ±     115.602    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.313 ±       2.693    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     30011.862 ±     519.177   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1521.066 ±      44.133  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79761.280 ±    1721.185    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1471.354 ±    1156.089  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     77202.532 ±   62028.044    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.878 ±       7.519  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        45.979 ±     393.532    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     24992.884 ±     137.372   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1803.768 ±      33.988  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    113584.479 ±    2315.014    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1742.404 ±    1408.491  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    109737.810 ±   89069.346    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.025 ±       0.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.574 ±       2.267    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        20.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     24861.940 ±     144.580   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1589.621 ±      19.134  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    100617.010 ±    1604.616    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1467.456 ±    1146.623  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     92889.618 ±   72737.833    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.263 ±       2.265    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     27638.804 ±     236.546   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1634.252 ±      57.507  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93048.397 ±    3121.746    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1613.280 ±    1416.237  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     91876.293 ±   81129.614    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.700 ±       3.671  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        39.838 ±     209.270    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27719.278 ±     286.654   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1592.558 ±      34.870  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     90398.928 ±    2378.839    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1612.900 ±    1416.719  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     91592.042 ±   81302.393    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.671 ±       4.022  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        38.107 ±     228.926    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7804.773 ±     385.127   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1160.830 ±      81.276  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    234026.651 ±   10172.846    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1073.214 ±    1415.246  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    216390.084 ±  285476.508    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.799 ±       6.658  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       163.240 ±    1360.796    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     17970.729 ±     764.430   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1646.473 ±      78.382  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144180.322 ±    2317.594    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.510 ±    1420.325  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    140975.027 ±  124973.577    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.783 ±       4.500  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        68.510 ±     395.421    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        30.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     42382.748 ±     631.448   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1195.871 ±      35.277  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44404.527 ±    1461.038    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1071.675 ±    1412.480  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     39826.192 ±   52857.368    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.841 ±       5.303  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        31.237 ±     197.278    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     66414.259 ±     779.025   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       759.373 ±      24.920  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     17994.309 ±     645.584    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       805.983 ±    1158.530  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     19106.285 ±   27598.833    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.198 ±       1.703    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     33148.284 ±     428.733   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2189.172 ±      63.946  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    103934.838 ±    2850.870    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2151.698 ±    1167.261  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    102173.364 ±   56122.992    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.225 ±       1.447  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        10.701 ±      68.892    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     27571.938 ±     420.072   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1773.429 ±      23.479  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101218.951 ±    1505.078    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1737.925 ±    1407.959  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     99216.228 ±   80864.494    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.812 ±       6.811  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        46.414 ±     389.400    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34535.989 ±     555.546   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1554.741 ±      43.547  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     70834.583 ±    1369.006    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1613.609 ±    1415.585  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     73535.376 ±   64914.491    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.650 ±       3.734  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        29.719 ±     171.187    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34890.008 ±     219.640   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1506.252 ±      43.491  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     67938.919 ±    1834.549    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1479.761 ±    1153.785  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     66743.665 ±   52021.581    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.662 ±       4.476  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        29.884 ±     202.166    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    337761.245 ±    9154.999   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1910.671 ±      93.868  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8902.106 ±     277.077    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1742.582 ±    1410.605  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8116.832 ±    6519.315    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.737 ±       6.301  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.425 ±      29.280    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1532907.675 ±   19472.978   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       494.650 ±      35.627  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       507.877 ±      42.289    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       399.749 ±    1405.174  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       411.301 ±    1445.782    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.001 ±       0.006  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.001 ±       0.006    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    679695.311 ±    9544.196   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       538.910 ±      35.948  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1247.772 ±      80.738    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       501.990 ±    1110.784  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1163.071 ±    2573.270    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.039 ±       0.332    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1883213.555 ±   19966.645   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       373.416 ±      30.120  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       312.066 ±      28.059    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.769 ±    1216.688  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       283.642 ±    1019.291    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.007 ±       0.037    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    102278.507 ±     205.455   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3444.140 ±      50.179  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52991.861 ±     800.736    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3358.475 ±      74.752  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     51673.841 ±    1195.800    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.064 ±       0.551    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        25.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    367152.914 ±   14070.330   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1268.468 ±      66.631  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5436.288 ±     104.171    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1207.984 ±    1154.150  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5167.695 ±    4818.806    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.708 ±       5.116  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.078 ±      22.315    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1561434.093 ±   15560.885   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       744.986 ±      31.512  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       750.795 ±      30.766    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       800.709 ±    1150.778  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       807.245 ±    1165.350    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.021 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.021 ±       0.073    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1019516.001 ±   61642.531   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       738.374 ±      39.321  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1139.780 ±      22.291    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       668.343 ±       2.045  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1031.838 ±      59.099    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.013 ±       0.068    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2787909.016 ±   96923.603   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1327.205 ±      41.754  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       749.181 ±      10.620    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1341.307 ±       8.074  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       757.188 ±      29.874    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.002 ±       0.020    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3258113.600 ±   61188.494   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    586436.427 ±   13312.548   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       678.050 ±      20.256  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1819.771 ±      60.439    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       668.803 ±       2.397  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1794.961 ±      34.659    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.022 ±       0.192    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        16.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    161187.026 ±    4651.816   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2035.823 ±      76.198  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19875.115 ±     567.287    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1876.755 ±    1151.681  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     18332.250 ±   11476.179    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.836 ±       5.882  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         8.174 ±      57.486    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    454557.450 ±    8261.946   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       375.576 ±      33.050  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1300.309 ±     130.052    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.965 ±    1212.711  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1173.081 ±    4205.796    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.029 ±       0.248    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1258265.990 ±   13069.758   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       251.668 ±      28.906  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       314.778 ±      38.851    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       307.004 ±    1079.161  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       384.652 ±    1352.109    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     87368.451 ±    1895.980   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3509.728 ±     129.078  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63208.594 ±    1245.052    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3493.509 ±    1159.878  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     62913.132 ±   20572.396    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.525 ±       2.193    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        26.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        37.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    306283.551 ±    3164.197   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1728.591 ±      29.338  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8881.002 ±     140.996    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1608.725 ±    1414.930  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8267.415 ±    7320.381    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.716 ±       6.166  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.688 ±      31.752    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1922855.339 ±   36338.334   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1015.515 ±      51.922  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       831.160 ±      36.964    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070.677 ±    1411.498  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       876.040 ±    1151.768    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.010 ±       0.036    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2876729.359 ±   25097.073   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       799.303 ±      48.198  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       437.237 ±      27.593    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806.311 ±    1155.038  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       441.184 ±     634.095    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.009 ±       0.037    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        16.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3116351.813 ±    3200.604   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     47872.229 ±    1209.452   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2167.811 ±      39.934  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71259.092 ±    1986.476    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2140.645 ±    1150.717  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     70415.617 ±   39839.557    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.854 ±       6.553  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        28.039 ±     215.334    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        16.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    244487.612 ±    5240.953   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2686.735 ±      53.383  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17294.476 ±     383.296    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2685.741 ±      27.530  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     17288.377 ±     501.036    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.042 ±       0.160  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.268 ±       1.029    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        20.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        30.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    385512.206 ±    6100.236   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1996.593 ±      42.454  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8151.291 ±     119.559    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2005.406 ±      10.381  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      8187.393 ±     148.993    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.816 ±       5.765  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.346 ±      23.653    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2277583.082 ±   55431.990   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       811.418 ±      50.598  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       560.593 ±      35.732    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.310 ±    1154.651  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       557.378 ±     803.777    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.050    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     84148.913 ±    3086.702   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3329.605 ±      82.745  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62271.320 ±    1363.938    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3245.149 ±    1164.498  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     60710.323 ±   22618.411    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.054 ±       0.292  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1.011 ±       5.452    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        24.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        34.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    262631.836 ±    2682.518   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2124.658 ±      61.661  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12729.594 ±     328.016    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2010.824 ±      11.802  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12047.673 ±     151.021    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.721 ±       5.896  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.325 ±      35.385    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1495131.234 ±   14539.097   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       898.596 ±      27.622  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       945.747 ±      29.513    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.959 ±    1152.498  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       845.419 ±    1219.309    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.022 ±       0.084    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        18.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2838551.674 ±   27220.784   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       991.979 ±      39.603  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       549.956 ±      24.873    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       941.373 ±    1419.626  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       522.252 ±     792.052    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.005 ±       0.040    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        19.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3171338.379 ±   17206.484   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.189 ±       1.621  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.094 ±       0.805    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    401338.814 ±    6415.742   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2593.228 ±      56.299  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10167.691 ±     223.106    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2554.977 ±    1143.288  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10018.495 ±    4510.420    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.082 ±       0.224    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     26047.503 ±     905.695   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1672.856 ±      62.579  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    101067.114 ±    2864.072    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.765 ±    1415.274  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     97408.974 ±   87600.696    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.766 ±       4.316  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        46.244 ±     260.834    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5     99495.625 ±     570.321   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       970.705 ±      25.756  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15354.157 ±     440.025    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1067.074 ±    1406.764  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16883.105 ±   22309.219    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.009 ±       0.049  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.146 ±       0.779    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     69489.095 ±     727.963   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1243.420 ±      24.033  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28161.842 ±     713.232    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1205.085 ±    1152.233  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     27298.914 ±   26168.159    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.824 ±       5.357  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        18.651 ±     121.209    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    135396.889 ±    5452.465   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       942.281 ±      42.332  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10954.118 ±     916.730    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       940.967 ±    1417.543  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10970.400 ±   16936.938    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.094 ±       0.593  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.102 ±       7.007    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        20.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     37730.793 ±     690.566   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1888.911 ±      51.105  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78780.772 ±    1782.386    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1870.827 ±    1141.564  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     78048.353 ±   48129.611    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.908 ±       7.637  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.728 ±     317.356    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     32345.995 ±     374.206   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       531.704 ±      62.010  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25871.064 ±    3185.490    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       401.755 ±    1412.227  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     19579.449 ±   68824.575    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.203 ±       1.749    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     32552.470 ±     388.390   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       407.692 ±      34.765  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19707.622 ±    1776.246    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       369.274 ±    1320.835  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17857.542 ±   63825.575    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.603 ±       3.460    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     34606.351 ±    1822.198   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       356.695 ±      38.157  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     16218.572 ±    1306.514    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.927 ±    1217.495  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     15482.930 ±   55508.926    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.189 ±       1.625    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34959.592 ±     343.402   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       394.511 ±      28.357  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     17758.089 ±    1425.258    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       473.064 ±    1063.494  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     21316.600 ±   47941.358    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.187 ±       1.613    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     15331.618 ±     610.232   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1127.433 ±      34.140  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    115730.677 ±    5582.448    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1073.851 ±    1415.993  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    110326.111 ±  146605.941    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.687 ±       5.871  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        69.903 ±     597.299    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     15240.467 ±     719.376   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       995.831 ±      43.216  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    102828.181 ±    6397.362    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       936.159 ±    1408.083  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     96721.296 ±  146210.692    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.433 ±       3.732    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        25.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    106875.963 ±    2866.363   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       286.966 ±      28.529  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4226.307 ±     530.497    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.637 ±    1078.991  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3026.842 ±   15960.293    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.061 ±       0.527    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13723.264 ±     188.544   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1358.908 ±      43.718  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    155821.769 ±    7135.717    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1332.685 ±       7.778  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    152811.874 ±    2915.826    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.916 ±      12.045    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     45260.517 ±     319.867   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1151.471 ±      48.670  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40041.463 ±    1862.767    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1208.114 ±    1155.892  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42024.998 ±   40378.408    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.708 ±       5.960  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        24.631 ±     207.410    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     63398.789 ±    1610.897   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1115.546 ±      30.074  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27690.979 ±    1210.896    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1071.499 ±    1411.685  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26640.017 ±   35569.954    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.676 ±       5.730  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        16.692 ±     141.489    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    177103.980 ±    2380.464   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       289.949 ±      28.941  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2576.462 ±     288.326    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306.968 ±    1079.036  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2734.042 ±    9610.558    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.074 ±       0.638    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    184689.520 ±    2982.787   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.465 ±       3.998  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         3.989 ±      34.321    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     57394.453 ±    2488.368   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1107.606 ±      60.235  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30368.455 ±     820.529    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1072.460 ±    1413.054  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     29362.655 ±   38193.825    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.654 ±       5.451  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        18.277 ±     152.487    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     96838.712 ±    2018.517   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2151.707 ±     111.349  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     34967.151 ±    1391.421    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2141.408 ±    1146.938  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     34794.623 ±   18380.868    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.812 ±       6.588  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        13.214 ±     107.223    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    127010.049 ±    2746.931   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1798.677 ±      42.679  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22280.914 ±     440.436    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1736.758 ±    1403.711  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21520.704 ±   17531.195    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.874 ±       7.037  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        10.826 ±      87.131    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    168621.292 ±    1968.836   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1584.265 ±      17.160  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14786.666 ±     258.440    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1612.259 ±    1416.234  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     15048.487 ±   13232.619    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.612 ±       4.702  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.721 ±      43.970    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     52003.163 ±     522.280   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2782.257 ±      64.388  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84191.727 ±    1575.911    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2697.638 ±      43.423  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     81631.776 ±    1574.324    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.504 ±       4.338    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        20.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    181130.102 ±    1774.517   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1208.089 ±      45.133  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10496.550 ±     476.611    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.932 ±    1415.987  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9336.623 ±   12374.702    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.683 ±       5.020  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         5.938 ±      43.678    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    535468.359 ±    5807.742   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       558.218 ±      33.335  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1640.569 ±     112.927    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       533.013 ±    1147.353  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1568.182 ±    3375.668    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.037 ±       0.129    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    687377.350 ±    4981.560   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       543.672 ±      33.676  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1244.562 ±      81.630    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       537.051 ±    1156.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1230.127 ±    2647.953    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.019 ±       0.101    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    783040.972 ±    4091.162   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.348 ±       2.878  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.700 ±       5.788    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    335865.621 ±    8878.495   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       957.455 ±      57.229  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4486.187 ±     306.650    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       931.199 ±    1407.355  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4369.238 ±    6680.864    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.020 ±       0.170    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     38322.068 ±     788.169   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1955.997 ±      42.482  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80329.182 ±    2170.801    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.518 ±    1159.453  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     77091.688 ±   47299.962    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.774 ±       4.572  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        31.924 ±     188.677    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    298847.099 ±    3032.599   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       320.155 ±      32.969  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1686.012 ±     190.129    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.916 ±    1212.376  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1782.858 ±    6397.274    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.007 ±       0.038  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.036 ±       0.198    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    115298.364 ±    1156.264   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1381.793 ±      44.918  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18860.987 ±     485.315    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1338.601 ±       5.629  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18271.693 ±     227.260    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.833 ±       5.246  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.372 ±      71.730    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    548269.660 ±    5749.318   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       364.617 ±      26.049  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1046.516 ±      83.183    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.803 ±    1216.913  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       973.540 ±    3496.554    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.012 ±       0.103    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     42575.964 ±     522.179   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2102.934 ±      38.757  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     77726.797 ±    1631.165    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2138.898 ±    1152.009  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     79047.282 ±   42221.782    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.883 ±       5.686  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        32.732 ±     211.115    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     75193.240 ±    1435.348   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       612.616 ±      50.060  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12822.013 ±     882.633    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       535.445 ±    1152.586  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11185.543 ±   24078.095    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.087 ±       0.752    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     88008.030 ±     654.048   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       512.252 ±      33.956  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9159.847 ±     618.486    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       533.243 ±    1147.846  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9538.033 ±   20531.460    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.007 ±       0.050  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.126 ±       0.900    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     77984.630 ±    4629.593   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       474.441 ±      34.909  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9574.487 ±     694.218    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       503.203 ±    1114.192  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10160.722 ±   22356.979    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.084 ±       0.720    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     87040.552 ±    4203.370   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       510.726 ±      36.304  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9235.491 ±     831.599    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.990 ±    1119.102  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9134.666 ±   20139.094    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.152 ±       0.802    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     87822.016 ±    1120.816   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       439.880 ±      28.980  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7882.595 ±     595.274    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.662 ±    1326.742  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6654.522 ±   23810.613    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.150 ±       1.288    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5      9944.720 ±     373.884   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1642.549 ±      52.890  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    259915.970 ±    8268.188    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1608.566 ±    1414.817  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    254641.767 ±  226220.717    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.824 ±       5.115  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       129.887 ±     802.695    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5      9967.461 ±     571.282   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1555.225 ±      70.560  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    245537.943 ±    4443.026    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1604.376 ±    1402.187  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    253238.063 ±  219558.488    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.905 ±       6.667  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       145.934 ±    1080.479    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        33.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    156667.449 ±    2006.156   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       420.696 ±      45.647  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4226.605 ±     502.687    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.768 ±    1327.206  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3732.370 ±   13362.849    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.042 ±       0.360    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5629.121 ±     224.611   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1475.875 ±      36.175  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    412574.410 ±   15483.747    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1469.691 ±    1136.778  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    411489.575 ±  337154.098    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.950 ±       7.073  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       264.379 ±    1967.390    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     20295.947 ±     416.373   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1581.526 ±      22.849  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122623.619 ±    3185.015    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607.915 ±    1409.807  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    124733.896 ±  110796.974    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.762 ±       4.862  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        59.030 ±     376.124    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     23305.646 ±     199.420   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1580.413 ±      49.106  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106723.813 ±    3073.248    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1472.295 ±    1148.382  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     99415.942 ±   77330.375    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.787 ±       6.734  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        53.183 ±     454.900    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    134887.759 ±    1480.935   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       303.495 ±      25.628  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3540.959 ±     333.803    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.679 ±    1079.213  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2394.706 ±   12626.594    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.097 ±       0.839    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    139766.729 ±     247.461   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.003 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     22976.109 ±    2126.089   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1595.302 ±     115.827  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109287.715 ±    3332.851    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1606.906 ±    1412.854  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    110017.191 ±   94801.213    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.816 ±       4.978  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        55.522 ±     338.930    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    125069.730 ±    1971.836   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1774.614 ±      58.427  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22329.957 ±     683.078    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1742.721 ±    1413.376  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     21931.004 ±   17832.650    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.762 ±       6.248  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.600 ±      78.728    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    564600.588 ±    9236.579   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       604.347 ±      20.883  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1684.305 ±      49.293    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       666.273 ±       1.807  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1856.922 ±      30.721    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.006 ±       0.048  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.016 ±       0.134    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    323020.898 ±    3949.267   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       473.480 ±      42.168  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2306.581 ±     178.213    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       502.394 ±    1111.963  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2444.045 ±    5406.499    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.041 ±       0.349    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    766450.341 ±    7755.492   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       514.033 ±      33.689  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1055.512 ±      73.155    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.765 ±    1118.471  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1037.352 ±    2298.774    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.026 ±       0.148    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     76673.075 ±    2536.675   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3166.246 ±     160.417  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     64989.092 ±    1921.370    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3085.393 ±    1403.066  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     63320.753 ±   28326.187    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.071 ±       0.438  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1.459 ±       9.054    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        33.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    202710.993 ±    4914.151   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1486.586 ±      33.166  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11541.392 ±     313.649    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1340.254 ±       7.452  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     10405.349 ±     210.953    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.737 ±       6.033  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5.704 ±      46.681    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    658172.174 ±   10734.173   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       368.614 ±      37.305  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       881.476 ±      94.828    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.662 ±    1318.391  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       883.071 ±    3155.127    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.046  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.020 ±       0.109    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    655094.964 ±    7348.367   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       503.487 ±      43.487  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1209.501 ±      92.281    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       502.993 ±    1113.600  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1207.024 ±    2671.138    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1114523.659 ±    6871.680   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       625.134 ±      21.390  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       882.739 ±      31.399    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.023 ±       2.181  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       947.538 ±       8.622    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.051    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1191499.033 ±   37994.163   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34484.749 ±     670.729   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1958.927 ±      60.887  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     89394.229 ±    1979.193    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1874.720 ±    1155.032  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     85574.612 ±   53240.772    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.824 ±       4.943  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        37.850 ±     227.618    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    133181.158 ±    2023.858   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1711.507 ±      63.978  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     20225.481 ±     654.453    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1740.806 ±    1412.027  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     20578.631 ±   16828.851    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.812 ±       5.290  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.593 ±      62.494    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    203264.915 ±    1893.484   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1239.920 ±      39.952  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9599.679 ±     318.824    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1203.869 ±    1151.001  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9324.427 ±    8961.182    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.845 ±       5.933  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.543 ±      45.918    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    252511.136 ±    5297.780   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1357.326 ±      24.584  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8459.645 ±     141.650    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1344.395 ±       4.115  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8379.177 ±     188.403    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.595 ±       4.182  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.714 ±      26.109    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     70264.505 ±     886.875   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2832.850 ±      79.192  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63444.146 ±    1555.646    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2690.123 ±      53.770  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     60247.782 ±    1055.564    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.037 ±       0.174  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.838 ±       3.886    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    182235.173 ±    7250.610   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1220.483 ±      71.492  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10540.954 ±     531.323    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1068.887 ±    1407.597  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9224.064 ±   12058.889    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.072 ±       0.378    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    715119.810 ±   23209.850   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       742.830 ±      31.140  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1634.673 ±      29.435    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       668.000 ±       1.943  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1470.094 ±      45.338    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.009 ±       0.079    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    707709.475 ±   15494.371   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       558.625 ±      32.756  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1242.260 ±      79.433    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       536.964 ±    1155.856  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1194.360 ±    2571.194    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.009 ±       0.079    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    776017.576 ±     675.827   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    356273.964 ±   10272.572   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1005.050 ±      37.727  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4439.385 ±     198.799    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       930.767 ±    1402.664  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4116.225 ±    6265.544    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.055 ±       0.318    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     11636.287 ±     474.164   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1476.516 ±      42.229  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    199673.767 ±    2609.625    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1475.799 ±    1160.701  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    199546.176 ±  155874.176    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.828 ±       6.300  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       111.809 ±     850.069    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     11184.907 ±     201.435   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1298.274 ±      34.719  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    182676.566 ±    6114.490    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1203.334 ±    1150.651  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    169390.250 ±  162870.904    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.887 ±       6.651  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       124.804 ±     936.157    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    273997.566 ±   11685.992   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1843.594 ±     103.387  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10589.741 ±     325.029    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1747.472 ±    1417.361  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     10033.688 ±    8047.479    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.658 ±       5.178  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.750 ±      29.508    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      8780.512 ±     126.705   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1575.655 ±      55.952  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    282397.488 ±    9315.205    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1469.828 ±    1154.744  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    263439.271 ±  207177.815    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.928 ±       7.551  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       166.470 ±    1353.738    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     26346.335 ±      84.344   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1386.319 ±       3.981  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     82813.236 ±     131.273    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.476 ±       5.699  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     80134.477 ±     443.280    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.783 ±       5.034  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        46.749 ±     300.643    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     29927.084 ±     235.504   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1246.576 ±      43.551  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65550.111 ±    2143.720    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.582 ±    1151.904  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     63398.751 ±   60625.326    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.783 ±       5.249  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        41.159 ±     275.865    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    631562.453 ±   12499.113   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1170.192 ±      30.414  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2916.086 ±      98.601    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1076.670 ±    1420.170  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2684.936 ±    3562.901    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.591 ±       5.001  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.472 ±      12.450    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        20.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    779136.168 ±    2362.403   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.159 ±       1.368  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.322 ±       2.767    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     29813.346 ±    1234.298   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1350.003 ±      62.041  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71261.254 ±    1230.509    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1340.766 ±       4.555  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     70780.371 ±    2916.238    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.812 ±       6.459  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        42.888 ±     341.261    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     34813.988 ±     641.011   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1836.972 ±      34.608  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83039.459 ±    1173.809    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1742.648 ±    1410.943  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     78817.428 ±   64655.551    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.787 ±       6.508  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        35.552 ±     294.047    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     35295.598 ±    2218.188   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1572.476 ±      87.286  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     70116.776 ±    3405.511    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1604.386 ±    1407.277  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     71683.651 ±   65993.642    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.880 ±       7.388  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        38.818 ±     325.884    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    468631.803 ±   11933.336   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1254.778 ±      32.622  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4213.716 ±      71.482    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1210.898 ±    1156.909  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4067.927 ±    3905.517    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.608 ±       4.500  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.035 ±      15.062    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     18534.347 ±     748.267   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1899.226 ±      63.306  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    161269.834 ±    3276.774    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1866.722 ±    1150.361  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    158593.721 ±   99663.797    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.920 ±       7.834  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        79.414 ±     676.186    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     56543.971 ±     803.793   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1745.065 ±      62.611  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48568.822 ±    1716.575    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1742.842 ±    1412.394  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     48514.211 ±   39463.671    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.750 ±       5.834  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        20.863 ±     162.330    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    153944.671 ±    2018.676   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1865.360 ±      60.581  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19069.204 ±     610.061    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1872.308 ±    1152.722  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     19146.452 ±   11930.874    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.785 ±       6.660  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         8.047 ±      68.271    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1175926.142 ±   45696.405   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1299.255 ±      42.791  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1738.919 ±      33.614    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.950 ±    1158.385  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1622.655 ±    1575.157    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.629 ±       5.279  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.844 ±       7.088    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1365497.008 ±   15424.499   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.005 ±       0.044  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.006 ±       0.050    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     69416.751 ±    5063.128   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1751.340 ±     169.281  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39703.026 ±    1449.693    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1606.257 ±    1413.150  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     36389.447 ±   31252.667    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.824 ±       6.785  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        18.609 ±     153.104    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     17683.966 ±     665.170   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1570.989 ±      56.481  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    139789.865 ±    4280.369    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1475.502 ±    1148.755  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    131213.243 ±   99684.057    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.799 ±       6.749  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        71.543 ±     604.172    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     16869.772 ±    1488.655   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1397.140 ±      99.962  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    130325.348 ±    3562.421    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1337.831 ±       5.577  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    124833.157 ±   10873.929    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.922 ±       6.462  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        86.904 ±     612.641    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    684239.565 ±   28627.554   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1840.314 ±      85.110  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4232.746 ±     180.446    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1748.014 ±    1419.156  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4023.487 ±    3328.579    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.562 ±       4.571  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.317 ±      10.724    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     13020.863 ±     157.645   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1781.490 ±      57.550  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    215315.155 ±    6480.688    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1735.445 ±    1403.740  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    209793.582 ±  170564.818    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.953 ±       6.959  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       115.546 ±     844.259    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     44999.537 ±    1367.874   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1750.865 ±      47.620  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61237.809 ±    1314.929    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1741.552 ±    1410.605  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     60936.381 ±   49857.312    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.808 ±       6.820  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        28.633 ±     241.860    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     58981.114 ±    6716.053   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1808.960 ±     186.811  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48273.958 ±    1727.259    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1739.682 ±    1409.606  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     46601.003 ±   41047.200    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.837 ±       6.467  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        23.412 ±     181.712    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1353794.958 ±   31786.011   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1272.685 ±      41.133  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1479.505 ±      33.825    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1345.286 ±       4.420  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1563.951 ±      37.255    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.587 ±       4.877  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.681 ±       5.659    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1562009.815 ±  119645.989   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         3.925 ±      33.789  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         4.100 ±      35.297    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3890.795 ±      70.584   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       530.511 ±      20.519  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    214584.046 ±   11262.522    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       535.425 ±    1152.542  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    216867.462 ±  466837.246    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    124608.440 ±    6171.483   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1970.599 ±     132.044  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     24886.169 ±     826.861    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1878.297 ±    1155.504  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     23702.487 ±   14116.092    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.737 ±       4.575  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         9.238 ±      57.368    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    381027.444 ±   14246.073   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       784.555 ±      14.710  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3240.726 ±     136.535    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       800.693 ±    1147.398  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3317.065 ±    4927.202    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.018 ±       0.066  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.074 ±       0.274    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        18.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    273498.941 ±    2728.077   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       619.043 ±      34.961  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3562.308 ±     231.625    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       534.014 ±    1149.506  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3075.845 ±    6621.012    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.048 ±       0.413    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    517565.995 ±   26195.260   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       669.039 ±      32.131  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2034.479 ±     113.294    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       537.202 ±    1156.370  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1637.351 ±    3525.738    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.038 ±       0.326    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     68317.075 ±     636.757   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2876.618 ±      47.681  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66261.834 ±    1594.176    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2677.497 ±      35.848  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     61674.906 ±    1121.096    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.058 ±       0.351  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1.339 ±       8.063    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        20.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    135801.986 ±    2893.755   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1192.233 ±      60.357  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13816.441 ±     410.858    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.701 ±    1415.479  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12433.970 ±   16287.651    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.699 ±       5.157  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.084 ±      59.607    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    206821.881 ±   14901.344   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       167.266 ±      22.499  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1273.414 ±     216.492    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.647 ±    1079.043  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1580.784 ±    8337.404    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.394 ±       3.394  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.101 ±      26.703    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    424386.121 ±   38998.256   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       428.358 ±      34.534  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1588.857 ±     178.944    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       369.432 ±    1321.573  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1383.076 ±    4967.102    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    469626.962 ±    8882.469   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       379.528 ±      39.992  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1271.833 ±     147.041    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.867 ±    1217.124  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1138.348 ±    4084.513    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    503786.675 ±    2183.129   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.236 ±       1.553  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.739 ±       4.863    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     29034.892 ±    1570.525   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1592.928 ±      51.603  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     86343.582 ±    2606.711    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607.688 ±    1411.266  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     87291.508 ±   79868.387    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.833 ±       4.940  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        45.871 ±     274.279    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8098.613 ±      73.996   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1173.986 ±      59.322  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    228107.224 ±   11329.705    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1068.323 ±    1407.356  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    207535.174 ±  272934.649    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.617 ±       8.525    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8519.242 ±     174.650   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1137.053 ±      44.218  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    210061.410 ±   10215.077    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1070.248 ±    1410.079  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    197942.182 ±  263283.791    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.816 ±       6.896  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       150.446 ±    1270.595    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    190657.921 ±     949.654   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1665.745 ±      54.199  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     13749.513 ±     419.873    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1612.424 ±    1413.078  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     13309.577 ±   11667.128    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.616 ±       4.464  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5.091 ±      36.884    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7778.246 ±      86.693   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1296.568 ±      50.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    262318.675 ±   11093.340    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.471 ±    1151.032  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    243585.949 ±  234221.925    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.920 ±       7.014  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       186.274 ±    1419.983    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     20406.566 ±     421.188   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1161.955 ±      23.938  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89607.654 ±    1839.954    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207.812 ±    1155.973  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     93203.073 ±   89909.113    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.721 ±       6.160  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        55.535 ±     474.710    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     24017.722 ±     316.993   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1061.147 ±      33.689  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69528.622 ±    2186.136    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1071.623 ±    1413.578  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     70238.893 ±   92917.005    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.664 ±       5.669  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        43.726 ±     373.568    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    377157.845 ±    5912.481   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       875.184 ±      35.685  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3652.081 ±     121.805    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       806.416 ±    1157.741  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3365.294 ±    4833.432    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.035 ±       0.299    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        15.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    424628.807 ±    2901.750   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     25086.926 ±    1231.450   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1207.765 ±      70.034  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     75758.425 ±    1922.711    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1073.084 ±    1414.669  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     67188.014 ±   87149.446    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.812 ±       5.605  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        50.834 ±     351.284    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13206.034 ±     387.713   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1290.673 ±      35.897  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    153809.348 ±    3542.780    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1208.190 ±    1158.222  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    144019.413 ±  138557.306    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.795 ±       6.757  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        94.696 ±     804.740    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13800.515 ±     501.344   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1235.795 ±      36.471  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    140931.646 ±    3009.993    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1204.308 ±    1153.342  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    137368.315 ±  131929.780    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.958 ±       5.997  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       110.418 ±     695.803    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    279640.154 ±    4204.104   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1665.533 ±      74.381  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9372.711 ±     403.741    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1613.158 ±    1416.511  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      9081.215 ±    8044.490    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.629 ±       4.795  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.545 ±      27.038    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12396.440 ±     270.731   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1539.618 ±      48.024  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    195463.903 ±    2821.982    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1472.493 ±    1145.699  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    186948.775 ±  145540.188    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.283 ±       1.704  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        35.882 ±     215.947    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     33388.188 ±    1153.625   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1439.640 ±      30.725  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     67861.047 ±    1869.099    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1341.357 ±       5.454  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     63229.367 ±    1975.881    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.737 ±       5.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        34.590 ±     236.451    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     82522.846 ±     597.511   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      2077.517 ±      55.988  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39620.781 ±     869.900    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      2007.756 ±      11.012  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     38290.683 ±     389.306    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.770 ±       6.587  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.711 ±     125.818    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    633855.154 ±    4749.305   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       891.458 ±      33.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2213.567 ±      96.660    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.421 ±    1156.366  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2003.509 ±    2893.058    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.031 ±       0.268    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    729745.625 ±    9147.151   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     73914.351 ±    1256.236   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2138.527 ±      85.025  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45528.530 ±    1100.490    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2019.794 ±      25.973  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     43001.786 ±     359.847    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.083 ±       0.523  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.780 ±      11.164    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     16613.063 ±     718.189   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       880.955 ±      37.551  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     83440.904 ±    5099.515    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       804.759 ±    1150.415  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     76247.416 ±  109458.958    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.394 ±       3.394    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     17364.328 ±     749.431   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       765.052 ±      12.263  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     69342.644 ±    3383.742    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       668.336 ±       2.163  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     60576.005 ±    2582.490    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    129902.497 ±     884.313   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       337.694 ±      37.933  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4091.336 ±     481.334    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       338.723 ±    1216.570  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4108.516 ±   14755.374    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.050 ±       0.435    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     13667.263 ±     506.573   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1060.496 ±      44.720  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    122107.683 ±    4795.393    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1069.664 ±    1408.409  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    123191.162 ±  162499.975    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.484 ±       4.163    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     47029.614 ±    1472.107   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1454.983 ±      63.686  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48687.316 ±    1501.964    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1476.167 ±    1161.567  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     49408.067 ±   39172.540    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.741 ±       5.806  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        24.839 ±     194.709    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     78193.470 ±     790.493   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1663.165 ±      28.250  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33475.938 ±     859.148    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1604.984 ±    1406.631  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     32319.125 ±   28644.711    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.084 ±       0.720    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    299549.860 ±   11651.466   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       590.980 ±      41.406  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3105.115 ±     217.695    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       536.902 ±    1155.724  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2827.028 ±    6086.746    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.088 ±       0.464    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    365041.714 ±    1420.167   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     66575.391 ±    1059.052   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1539.124 ±      54.328  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36382.064 ±     990.045    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1607.474 ±    1406.494  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     38015.200 ±   33635.933    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.804 ±       6.695  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        18.992 ±     158.235    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        29.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    144443.137 ±    2524.735   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1887.904 ±      65.731  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20569.645 ±     640.290    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1743.538 ±    1414.002  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     19008.518 ±   15650.688    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.749 ±       4.509  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.189 ±      49.341    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    849340.181 ±   54198.922   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       480.860 ±      36.656  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       891.093 ±      67.075    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.198 ±    1403.240  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       744.440 ±    2617.843    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.869 ±       7.397  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.659 ±      14.117    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    395557.953 ±    7977.375   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       408.771 ±      38.045  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1626.344 ±     144.587    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471.239 ±    1057.322  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1876.023 ±    4202.614    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.033 ±       0.174    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1127435.074 ±  114056.530   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       402.714 ±      60.125  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       562.026 ±      47.766    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       472.880 ±    1062.776  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       660.613 ±    1469.766    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     82416.617 ±    2267.826   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3335.514 ±     132.682  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63688.069 ±     819.734    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3221.878 ±    1117.735  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     61498.865 ±   20289.626    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.033 ±       0.201  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.638 ±       3.869    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    276141.979 ±    6884.792   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1680.635 ±      63.213  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9577.197 ±     182.840    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1608.192 ±    1417.987  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9162.295 ±    8026.418    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.716 ±       5.684  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.119 ±      32.729    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1246409.694 ±   11720.903   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       438.236 ±      26.627  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       553.350 ±      38.075    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       501.779 ±    1110.279  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       634.134 ±    1402.651    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.011 ±       0.090    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5   1551316.618 ±   29372.681   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       933.037 ±      37.096  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       946.339 ±      37.108    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       936.573 ±    1408.802  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       949.802 ±    1427.116    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.008 ±       0.044    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1898495.987 ±   67577.429   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       665.894 ±      26.575  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       551.939 ±      11.432    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.445 ±       1.899  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       556.577 ±      20.125    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.007 ±       0.036    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2041414.231 ±    5830.644   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         0.061 ±       0.522  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         0.047 ±       0.403    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     42473.637 ±     735.270   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2112.915 ±      69.639  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78290.631 ±    1555.577    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2007.808 ±      12.640  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     74398.122 ±    1438.598    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.820 ±       6.619  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        30.461 ±     245.822    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     14429.816 ±     906.301   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1907.408 ±      98.252  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    208003.176 ±    4098.853    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.484 ±    1156.393  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    204803.400 ±  127615.919    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.778 ±       4.395  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        86.320 ±     491.660    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5    100194.241 ±    2251.120   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1346.434 ±      39.140  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21149.866 ±     362.138    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1337.863 ±       5.339  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21015.824 ±     473.471    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.837 ±       6.762  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13.086 ±     105.749    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    258261.396 ±   13692.337   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       860.865 ±      26.414  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5245.995 ±     153.622    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.284 ±    1158.867  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4933.922 ±    7452.550    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.101 ±       0.633    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     13320.267 ±     344.195   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2137.877 ±      57.428  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    252599.669 ±    6037.076    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2002.794 ±      14.151  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    236645.325 ±    7098.675    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.903 ±       6.877  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       107.509 ±     819.546    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     33088.449 ±    1064.372   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2776.409 ±     124.184  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    132047.528 ±    2390.533    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2685.450 ±      31.717  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    127731.659 ±    4799.729    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.050 ±       0.108  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         2.377 ±       5.139    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    106208.409 ±    2006.874   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1505.769 ±      34.225  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22312.634 ±     357.860    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1473.565 ±    1153.063  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21844.700 ±   17357.357    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.774 ±       5.643  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.501 ±      83.870    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    179341.606 ±    1792.702   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       587.975 ±      33.025  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5159.622 ±     323.378    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       537.096 ±    1156.140  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4717.033 ±   10153.829    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.037 ±       0.314    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    194568.507 ±    1384.061   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     49741.604 ±     668.376   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3514.999 ±     114.127  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111202.810 ±    2321.992    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3365.972 ±      62.436  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    106489.224 ±    1144.112    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.923 ±       4.242    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        35.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     26732.150 ±     485.670   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1436.492 ±      30.564  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     84571.594 ±    1592.034    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1342.378 ±       6.424  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     79031.940 ±    1705.784    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.779 ±       5.068  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        45.801 ±     298.327    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     29811.335 ±     287.807   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1218.366 ±      27.227  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     64320.997 ±    1568.580    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1204.236 ±    1150.503  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     63603.688 ±   61110.084    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.874 ±       6.375  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        46.199 ±     337.113    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    642659.548 ±   26906.463   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1733.482 ±      70.867  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4245.328 ±     228.065    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1747.771 ±    1416.051  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4284.048 ±    3550.180    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.591 ±       4.386  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.443 ±      10.678    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     24308.883 ±     890.465   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1821.765 ±      49.366  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    117940.414 ±    3602.889    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1740.781 ±    1405.535  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    112760.527 ±   92343.111    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.071 ±       4.305    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        18.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     74228.701 ±     907.119   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1973.292 ±      46.003  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41834.901 ±     907.092    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1876.440 ±    1154.633  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     39796.136 ±   24819.730    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.762 ±       4.775  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        16.194 ±     101.510    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    154883.179 ±    5977.397   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1726.354 ±      88.433  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17539.665 ±     423.623    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1606.087 ±    1412.735  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     16313.663 ±   14234.057    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.762 ±       6.250  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.727 ±      63.363    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1520296.404 ±   40321.543   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1297.843 ±      59.487  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1343.279 ±      26.712    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1211.053 ±    1160.032  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1251.859 ±    1179.187    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.587 ±       4.877  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.607 ±       5.039    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        20.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1770532.100 ±   18660.574   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         1.265 ±       8.689  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         1.128 ±       7.762    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    154361.237 ±    4765.084   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      2006.115 ±      78.077  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20451.088 ±     338.740    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2004.758 ±      11.826  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20438.418 ±     615.225    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.850 ±       5.735  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         8.666 ±      58.482    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     44000.962 ±    1550.932   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1621.459 ±      77.084  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     57993.596 ±    1402.767    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1604.533 ±    1408.066  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     57364.752 ±   49763.555    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.874 ±       5.445  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        31.281 ±     195.273    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    793424.567 ±    8308.150   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1597.095 ±      72.175  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3167.848 ±     130.847    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1613.963 ±    1417.808  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3202.059 ±    2828.842    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.625 ±       4.272  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.240 ±       8.484    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     30880.340 ±     669.378   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2263.344 ±     100.530  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    115344.228 ±    3421.421    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2287.780 ±    1419.610  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    116582.518 ±   72007.340    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.196 ±       1.640  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         9.987 ±      83.706    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    316708.402 ±   12778.392   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1544.180 ±      76.877  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      7672.695 ±     286.017    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1472.630 ±    1158.355  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      7319.227 ±    5807.513    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.758 ±       5.460  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3.772 ±      27.193    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1976044.472 ±   34339.922   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1191.038 ±      38.552  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       948.664 ±      39.607    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1210.637 ±    1158.509  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       964.893 ±     930.955    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.616 ±       4.120  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.491 ±       3.280    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2256018.871 ±   25292.599   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    246776.915 ±   15394.243   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1651.141 ±      67.974  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10530.012 ±     307.665    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1603.684 ±    1407.015  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10220.369 ±    8800.158    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.783 ±       5.901  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         5.118 ±      38.737    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     72789.558 ±    2987.927   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1610.334 ±      62.896  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34815.870 ±    1634.268    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1608.182 ±    1413.626  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     34793.040 ±   31114.636    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.770 ±       5.089  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        16.555 ±     109.232    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     89074.631 ±    1182.021   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1155.847 ±      24.736  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20420.672 ±     554.097    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1069.687 ±    1410.740  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     18911.633 ±   25087.355    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.887 ±       7.503  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        15.692 ±     132.744    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     89455.966 ±     618.707   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1104.560 ±      37.923  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19431.319 ±     720.019    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1074.948 ±    1415.745  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18914.716 ±   24960.039    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.545 ±       4.473  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         9.572 ±      78.488    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     44951.958 ±     434.978   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2108.037 ±      56.083  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73799.793 ±    1443.156    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2002.735 ±      13.739  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     70114.160 ±     946.957    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.933 ±       7.588  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        32.732 ±     266.340    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    112894.182 ±    2232.318   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1078.689 ±      37.963  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15036.717 ±     569.949    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1072.541 ±    1413.809  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     14966.041 ±   19893.931    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.637 ±       5.440  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         8.913 ±      76.116    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    338373.695 ±    5613.021   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       517.095 ±      31.344  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2405.004 ±     169.246    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.477 ±    1112.211  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2339.625 ±    5185.377    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.019 ±       0.168    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    658427.204 ±   30110.250   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       838.790 ±      24.264  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2005.080 ±      67.916    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       805.770 ±    1156.999  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1932.597 ±    2889.145    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.010 ±       0.085    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    780763.264 ±    9530.555   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.200 ±       1.716  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.404 ±       3.472    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    237678.421 ±    8125.333   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       783.185 ±      46.876  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5184.764 ±     274.304    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       802.403 ±    1151.990  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      5309.051 ±    7565.557    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.027 ±       0.237    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    124620.514 ±    2158.144   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1751.266 ±      64.181  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22116.442 ±     840.098    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1607.281 ±    1414.280  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     20305.454 ±   18027.900    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.791 ±       6.279  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.007 ±      79.413    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    185023.837 ±    1934.224   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1124.514 ±      44.273  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9565.305 ±     396.517    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1070.118 ±    1410.136  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9106.099 ±   12038.377    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.779 ±       6.569  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.601 ±      55.694    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    518068.775 ±   33629.480   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       345.865 ±      24.199  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1050.815 ±      95.461    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       338.808 ±    1216.974  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1038.644 ±    3753.374    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.013 ±       0.112    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     69121.776 ±    1641.504   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2781.599 ±      77.687  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63335.487 ±    1762.573    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2690.692 ±      55.512  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     61267.038 ±    2221.182    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.853 ±       3.734    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    182827.791 ±    5599.548   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1193.759 ±      36.195  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10276.106 ±     210.406    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207.984 ±    1154.619  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10409.855 ±   10083.636    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.679 ±       5.798  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5.799 ±      49.544    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    535933.036 ±   17595.090   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       548.689 ±      51.469  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1611.175 ±     136.452    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       534.248 ±    1150.010  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1566.273 ±    3372.037    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.012 ±       0.104    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        13.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1157805.185 ±   65209.541   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       887.388 ±      35.817  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1206.051 ±      50.551    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.306 ±    1156.607  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1095.280 ±    1560.026    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.023 ±       0.142    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1282272.302 ±   35344.360   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         1.497 ±      12.676  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         1.860 ±      15.761    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    361848.644 ±    3672.261   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1009.130 ±      32.918  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4389.122 ±     165.137    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       930.384 ±    1400.243  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4048.273 ±    6113.910    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.042 ±       0.316  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.182 ±       1.377    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       602.954 ±      16.824   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1290.031 ±       6.715  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3366248.418 ±  101096.405    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1337.135 ±       8.014  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3489128.361 ±   81668.376    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.119 ±       9.237  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      2924.294 ±   24126.203    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        33.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       597.294 ±      17.329   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1266.446 ±      27.803  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3336066.980 ±  162609.496    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1199.623 ±    1146.667  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3162810.812 ± 3058344.371    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.191 ±       8.909  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3128.301 ±   23365.359    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        33.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     42584.562 ±    1458.263   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       717.050 ±      24.154  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26500.435 ±     460.802    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       670.166 ±       0.184  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24769.045 ±     839.857    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.460 ±       1.618    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        19.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       593.718 ±      14.917   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1298.071 ±       9.763  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3439369.606 ±  101641.524    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1200.488 ±    1153.022  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3180993.111 ± 3058692.248    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.156 ±       9.292  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3057.102 ±   24567.111    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14810.473 ±     442.031   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1186.522 ±      30.420  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    126081.435 ±    2921.236    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1201.606 ±    1149.049  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    127756.001 ±  123046.018    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.166 ±       9.905  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       122.922 ±    1044.090    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     18216.566 ±    1003.789   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1110.206 ±     100.979  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     95896.445 ±    3993.957    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1067.492 ±    1406.822  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     92004.875 ±  118789.535    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.954 ±       8.031  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        81.699 ±     687.948    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        30.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    211513.976 ±    4863.172   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       787.220 ±      56.442  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5857.286 ±     325.803    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       804.341 ±    1154.197  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5978.954 ±    8469.867    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.155 ±       0.598    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    229866.470 ±    2337.365   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     17157.750 ±     221.452   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1111.835 ±      38.982  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    101989.204 ±    4743.451    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1066.323 ±    1405.621  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     97862.585 ±  129559.673    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.107 ±       9.446  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       101.397 ±     864.823    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        33.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1546550.715 ±   74211.301   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        66.033 ±      21.135  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        67.257 ±      24.786    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.328 ±     881.072  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       106.321 ±     915.457    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         3.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     77843.464 ±    1598.952   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3328.083 ±      73.892  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67283.074 ±    1574.833    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3245.955 ±    1160.847  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     65613.368 ±   23057.334    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.253 ±       1.454    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        24.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        33.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1851144.665 ±   97040.554   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1001.818 ±      76.441  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       851.667 ±      47.428    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1069.700 ±    1410.297  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       908.322 ±    1184.935    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.021 ±       0.080  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.018 ±       0.068    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2253301.812 ±   10375.971   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       646.990 ±      13.468  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       451.874 ±      10.524    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.047 ±       2.281  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       468.675 ±       2.905    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.003 ±       0.025    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2393414.720 ±    6269.066   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        24.397 ±       0.504  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.041 ±       0.353    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     51668.743 ±     563.467   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2239.014 ±      54.468  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     68196.215 ±    1684.890    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2152.993 ±    1147.298  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     65590.997 ±   35553.435    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.121 ±       0.826  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         3.682 ±      25.195    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        24.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    780141.459 ±    9377.607   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2529.423 ±      63.279  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5102.405 ±     116.459    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2547.368 ±    1162.974  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      5139.120 ±    2363.307    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.779 ±       6.659  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.578 ±      13.497    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        19.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   5166739.740 ±   48435.140   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       324.838 ±      37.609  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        98.942 ±      12.218    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       235.473 ±    1259.120  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        71.891 ±     384.363    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5   1009793.359 ±    7315.288   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1187.742 ±      22.795  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1850.970 ±      43.356    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1203.024 ±    1152.646  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1875.392 ±    1804.169    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.876 ±       7.345  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.366 ±      11.445    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        31.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   9178778.795 ±  155006.943   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       432.725 ±      24.401  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        74.193 ±       4.791    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       473.436 ±    1064.848  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        81.266 ±     183.009    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.003 ±       0.018    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    453254.757 ±    4435.262   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2115.941 ±      48.163  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      7346.946 ±     115.290    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2013.642 ±      19.770  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      6991.814 ±      97.079    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.275 ±       2.232  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.957 ±       7.775    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        15.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        26.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4443.906 ±      18.190   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2227.006 ±      58.825  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    788624.063 ±   19544.450    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2135.183 ±    1142.042  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    756157.799 ±  406388.446    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         1.010 ±       6.928  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       358.132 ±    2456.557    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        29.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6805.865 ±      62.696   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2318.483 ±      42.839  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    536122.549 ±    6689.399    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2150.339 ±    1157.484  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    497229.445 ±  267082.475    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.229 ±       1.346  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        53.084 ±     312.384    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        26.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     46536.742 ±     278.596   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       772.216 ±      31.935  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26113.377 ±    1204.988    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       806.235 ±    1158.052  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     27271.808 ±   39322.039    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.029 ±       0.108  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.986 ±       3.641    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        18.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4615.664 ±      34.180   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1010.470 ±      31.909  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    344506.817 ±   12791.869    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1070.934 ±    1412.053  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    365244.394 ±  482977.070    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.025 ±       0.067  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         8.512 ±      22.825    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         8.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        29.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      5113.131 ±      31.686   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       645.179 ±      15.605  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    198584.704 ±    5893.209    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       662.842 ±       5.842  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    204019.956 ±    2031.782    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         3.840 ±      22.039    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6534.633 ±      37.049   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       330.535 ±      39.672  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     79601.434 ±    9946.192    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338.782 ±    1216.724  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     81666.553 ±  293316.604    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6712.222 ±     157.238   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       171.720 ±      19.747  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     40265.773 ±    5140.139    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       102.317 ±     880.978  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     23971.019 ±  206397.699    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         3.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      7916.108 ±     352.965   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1683.464 ±      66.978  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    334709.954 ±   13498.829    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1606.118 ±    1411.556  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    319420.335 ±  282613.573    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.864 ±       5.812  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       170.140 ±    1141.454    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     19079.600 ±     185.643   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       482.860 ±      33.829  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     39829.573 ±    3032.582    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       399.037 ±    1402.671  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     32950.286 ±  115825.303    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.344 ±       2.961    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     15947.105 ±     256.673   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       437.448 ±      44.503  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     43168.474 ±    5046.831    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       394.844 ±    1387.935  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     39064.020 ±  137317.235    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         5.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     23481.455 ±     355.583   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       445.391 ±      47.005  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     29851.469 ±    3327.882    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       370.423 ±    1325.760  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     24861.006 ±   88946.011    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.279 ±       2.402    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4081.295 ±      35.125   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2382.118 ±      78.365  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    918483.335 ±   30145.182    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2284.100 ±    1417.144  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    880661.320 ±  545470.145    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.385 ±       2.627  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       148.428 ±    1012.678    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     10447.692 ±     136.200   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2233.395 ±      79.037  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    336387.868 ±    8344.718    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2139.675 ±    1143.910  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    322251.600 ±  171205.608    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.783 ±       6.392  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       118.597 ±     968.210    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     57526.527 ±     572.122   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       551.598 ±      26.629  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15087.037 ±     842.924    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       532.479 ±    1146.203  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     14574.334 ±   31372.906    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.008 ±       0.043  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.224 ±       1.182    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     46149.488 ±     819.885   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       683.690 ±      14.436  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23314.636 ±     503.792    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       663.787 ±       6.071  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     22636.135 ±     481.185    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.142 ±       1.219    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     89986.155 ±    1288.258   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       695.873 ±      13.453  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12169.418 ±     235.594    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       671.222 ±       1.695  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     11738.392 ±     182.152    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.218 ±       1.256    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    104222.656 ±    1780.898   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7807.293 ±     188.515   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2356.454 ±      74.254  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    475020.925 ±   14112.532    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2286.413 ±    1418.508  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    460906.763 ±  286084.299    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.171 ±       1.166  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        34.635 ±     237.273    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   8500000.714 ±  350650.558   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4668.724 ±     245.838  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       864.413 ±      11.896    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4468.568 ±    1411.896  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       826.911 ±     231.158    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.021 ±       0.057  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.004 ±       0.010    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        33.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        46.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38057558.997 ±  142746.260   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5         0.036 ±       0.306  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5         0.001 ±       0.013    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  10759563.261 ±  192673.008   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3700.097 ±      58.453  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       541.230 ±       9.690    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3636.669 ±    1418.812  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       532.051 ±     212.526    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.033 ±       0.156  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.005 ±       0.023    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        38.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  45662161.893 ±  108730.732   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         0.302 ±       2.595  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5         0.010 ±       0.090    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31367734.054 ± 2383782.317   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       823.087 ±      76.692  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41.292 ±       2.591    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.885 ±    1156.784  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        40.449 ±      57.298    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.001 ±       0.005    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   9154877.896 ±  233929.526   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3866.659 ±      81.788  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       664.663 ±      10.406    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3642.753 ±    1427.625  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       626.399 ±     256.061    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.002 ±       0.012    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        37.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  13668539.019 ±  369151.724   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1647.984 ±      67.636  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       189.767 ±       7.683    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1610.558 ±    1414.185  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       185.539 ±     164.669    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.687 ±       4.580  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.079 ±       0.525    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        25.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  42098859.109 ±  402888.736   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       875.579 ±      18.794  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.731 ±       0.825    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       800.370 ±    1147.849  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        29.927 ±      43.053    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.013 ±       0.074  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.001 ±       0.003    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        19.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  13290013.422 ±  200397.345   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2735.107 ±      54.280  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       323.850 ±       4.076    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2680.927 ±      35.672  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       317.438 ±       5.017    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        20.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  49277318.815 ± 3595786.934   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1024.941 ±      54.139  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        32.735 ±       1.548    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       941.113 ±    1418.310  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        30.150 ±      46.600    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        18.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  62629555.508 ±  443447.061   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.791 ±       6.807  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.020 ±       0.172    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17928542.998 ±  233754.068   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1693.354 ±      37.528  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       148.649 ±       4.472    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1613.908 ±    1418.498  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       141.758 ±     126.449    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.001 ±       0.004    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2757049.517 ±   14827.425   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2217.567 ±      40.260  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1265.892 ±      17.914    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2145.271 ±    1149.570  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1224.706 ±     659.467    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.743 ±       6.265  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.425 ±       3.580    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        27.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    169508.080 ±    1889.069   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3230.110 ±      33.558  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     29989.498 ±     469.088    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3101.590 ±    1400.431  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28803.390 ±   13282.605    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.054 ±       0.292  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.503 ±       2.716    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        31.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     34174.079 ±     599.910   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2587.729 ±      62.047  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    119160.261 ±    2606.137    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2557.694 ±    1148.097  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    117800.240 ±   53649.156    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.154 ±       1.238  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         7.145 ±      57.427    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    146295.691 ±    1298.035   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1263.997 ±      38.196  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13597.842 ±     444.061    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.223 ±    1150.424  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     12945.975 ±   12402.112    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.841 ±       6.333  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         9.077 ±      68.392    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        26.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    445406.277 ±    5201.958   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1792.850 ±      62.082  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6335.248 ±     244.718    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1746.210 ±    1414.118  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6171.116 ±    5011.974    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.654 ±       5.539  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.309 ±      19.568    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    482625.925 ±   14450.750   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1397.898 ±      42.964  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4558.516 ±      58.927    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1344.125 ±       4.161  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4383.379 ±     141.890    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.616 ±       4.439  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.028 ±      14.654    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        23.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     64070.667 ±     959.096   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1526.944 ±      35.827  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     37506.615 ±     615.088    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1472.470 ±    1144.941  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     36168.552 ±   28115.653    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.192 ±       1.215  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4.697 ±      29.782    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    316006.747 ±    2624.442   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2364.368 ±      54.733  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11775.662 ±     288.206    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2280.146 ±    1416.493  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11356.707 ±    7071.202    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.754 ±       6.355  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.765 ±      31.752    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        17.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    484353.942 ±   19571.974   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1274.483 ±      40.308  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4140.891 ±      80.582    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1202.528 ±    1148.211  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3910.772 ±    3778.760    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.920 ±       6.919  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.967 ±      22.302    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1336663.891 ±   36210.462   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2707.685 ±      79.550  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3187.625 ±      81.783    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2558.052 ±    1153.181  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3011.530 ±    1359.877    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.037 ±       0.088  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.044 ±       0.104    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    108460.346 ±    1858.929   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3639.632 ±      41.889  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52816.032 ±     431.469    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3497.851 ±    1099.960  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     50758.433 ±   15935.300    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.242 ±       0.979    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        36.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    351102.720 ±    7781.690   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1209.447 ±      39.451  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5421.196 ±     183.341    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1207.912 ±    1156.388  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5414.610 ±    5188.075    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.683 ±       5.392  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.055 ±      24.129    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    855667.266 ±   13549.572   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       635.133 ±      14.423  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1168.183 ±      22.744    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667.234 ±       2.603  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1227.242 ±      23.709    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.031 ±       0.162    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2115390.954 ±   94633.125   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1009.193 ±      36.728  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       750.842 ±      43.500    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941.344 ±    1419.292  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       699.945 ±    1050.324    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.009 ±       0.053    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2349082.574 ±   37771.012   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         2.012 ±      17.325  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         1.358 ±      11.695    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    482539.190 ±   18036.730   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       714.927 ±      23.244  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2331.474 ±      21.435    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       669.120 ±       1.489  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2182.237 ±      83.645    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        17.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     59549.934 ±    1117.121   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2090.080 ±      68.978  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55232.364 ±    1558.377    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2144.049 ±    1139.242  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     56660.930 ±   30177.949    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.754 ±       5.445  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        20.050 ±     145.119    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     95477.611 ±    3205.259   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1758.121 ±      68.847  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     28978.781 ±     648.302    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1735.444 ±    1402.974  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     28615.418 ±   23340.028    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.949 ±       7.596  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.865 ±     127.123    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        29.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    166274.673 ±    6737.648   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2643.950 ±     169.743  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25023.850 ±     629.512    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2555.232 ±    1166.112  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24168.024 ±   10388.224    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.046 ±       0.268  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.437 ±       2.558    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     34787.546 ±     381.733   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2326.128 ±      41.488  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105233.213 ±    1312.865    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2286.084 ±    1402.090  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    103438.472 ±   63952.714    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.237 ±       1.909  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        10.787 ±      86.816    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        17.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    160878.031 ±    8438.935   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1073.708 ±      62.253  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10502.818 ±     273.176    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1069.083 ±    1410.244  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10447.020 ±   13656.132    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.799 ±       6.659  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.756 ±      64.595    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        29.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    461972.285 ±    5726.319   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       526.996 ±      39.105  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1795.400 ±     144.288    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.777 ±    1118.486  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1720.442 ±    3815.895    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.028 ±       0.244    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        11.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    512368.697 ±    3148.174   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         5.226 ±       0.114  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.052 ±       0.442    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     65576.771 ±    2144.038   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1371.066 ±      59.916  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     32900.406 ±     823.240    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1336.109 ±       6.213  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     32063.715 ±    1123.363    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.883 ±       6.306  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        21.150 ±     151.150    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        27.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2841630.502 ±   38890.625   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3962.254 ±      66.358  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2194.349 ±      36.353    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3779.105 ±    1445.713  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      2093.109 ±     809.474    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.037 ±       0.105  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.021 ±       0.058    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        28.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    821740.470 ±   38965.521   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       483.681 ±      35.786  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       926.321 ±      39.852    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       399.829 ±    1405.457  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       765.425 ±    2690.809    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.016 ±       0.138    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    330668.988 ±   13136.353   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       778.698 ±      29.373  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3705.856 ±     152.110    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       667.113 ±       1.740  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3174.939 ±     130.034    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.004 ±       0.022  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.020 ±       0.104    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    760576.388 ±   32764.508   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       697.629 ±      28.848  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1443.362 ±      92.068    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       806.276 ±    1154.606  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1670.736 ±    2439.929    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.009 ±       0.075    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        14.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3065733.283 ±   84100.158   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      1844.965 ±     102.469  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       946.946 ±      32.897    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      1751.131 ±    1421.811  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       898.532 ±     723.494    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.525 ±       4.385  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.270 ±       2.258    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        13.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        21.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   8134366.073 ±   92530.299   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       890.586 ±      37.160  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       172.305 ±       6.652    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       806.932 ±    1156.657  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       156.142 ±     224.176    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.002 ±       0.014    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    247304.407 ±    3325.973   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2171.998 ±       8.747  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13822.479 ±     209.560    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2148.467 ±    1159.718  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     13676.487 ±    7534.639    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.358 ±       2.689  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2.278 ±      17.110    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        16.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        26.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1581815.648 ±   12843.983   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        90.539 ±      17.201  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        90.092 ±      17.894    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.313 ±     880.944  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       102.184 ±     879.831    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.160 ±       1.376  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.160 ±       1.374    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     76847.525 ±     664.103   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3392.065 ±     107.311  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69465.808 ±    1930.333    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3380.344 ±      50.035  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     69226.380 ±    1211.357    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.037 ±       0.215  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.768 ±       4.411    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        35.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1601786.095 ±   29476.599   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       857.999 ±      24.447  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       843.026 ±      22.174    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       801.920 ±    1151.687  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       788.093 ±    1134.716    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.004 ±       0.035    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1937624.301 ±   18715.553   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       533.336 ±      37.606  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       433.132 ±      33.709    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       402.507 ±    1414.869  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       327.300 ±    1150.507    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.003 ±       0.029    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1808709.545 ±   10839.608   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.389 ±       0.113  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     51809.398 ±    1549.935   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2243.463 ±      62.028  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     68144.259 ±     752.002    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2138.080 ±    1150.704  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     64936.480 ±   34614.784    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.254 ±       1.342    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    273988.619 ±    4063.472   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1103.454 ±      30.638  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6338.220 ±     251.773    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1075.991 ±    1417.673  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6186.375 ±    8216.929    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.545 ±       4.607  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.120 ±      26.353    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     40005.423 ±    1338.469   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2059.188 ±      52.162  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     81009.050 ±    1567.681    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2013.372 ±      36.571  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     79211.340 ±    3778.950    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.163 ±       1.404    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        15.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        24.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    114285.253 ±    1583.531   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1153.872 ±      18.000  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15890.333 ±     353.303    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1202.812 ±    1150.920  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     16571.966 ±   15949.742    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.828 ±       6.999  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        11.383 ±      96.165    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        29.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    335373.347 ±    4588.583   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       466.196 ±      37.371  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2187.694 ±     171.874    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       504.910 ±    1118.877  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2369.355 ±    5243.525    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.020 ±       0.168    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        12.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    366966.665 ±    1685.849   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.958 ±       1.935  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.974 ±       8.375    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     52789.885 ±     563.072   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1404.241 ±      40.347  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     41862.482 ±    1170.574    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1338.986 ±      15.417  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     39917.066 ±     198.811    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.167 ±       1.127  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         4.951 ±      33.473    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        15.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     75201.921 ±    1129.099   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1620.837 ±      37.993  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     33919.706 ±     878.531    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1474.378 ±    1158.192  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     30862.552 ±   24472.543    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.774 ±       6.314  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.246 ±     132.492    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        26.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    136367.575 ±     304.940   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       686.908 ±      15.597  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      7927.729 ±     186.026    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       666.213 ±       2.819  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      7688.875 ±      31.763    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.096 ±       0.507    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    259719.604 ±   21956.126   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1105.653 ±      60.919  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6701.388 ±     354.669    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1075.452 ±    1417.187  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6542.228 ±    8888.846    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.591 ±       4.956  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.721 ±      31.234    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        22.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     27293.918 ±    1590.188   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1478.137 ±     120.192  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85217.767 ±    2743.827    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1472.566 ±    1163.772  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     84815.410 ±   64197.975    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.349 ±       2.518  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        20.067 ±     144.334    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        22.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    179458.444 ±    4741.911   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1017.492 ±      33.341  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8923.948 ±     267.125    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       935.424 ±    1409.444  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      8201.920 ±   12328.323    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.073 ±       0.384    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        26.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    481378.911 ±   13546.204   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1461.337 ±      51.091  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4777.738 ±     114.432    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1473.154 ±    1157.298  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4816.523 ±    3785.180    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.027 ±       0.144    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        15.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    528661.574 ±    7388.012   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       999.008 ±      39.824  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2974.122 ±     100.219    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5       941.249 ±    1418.879  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2801.228 ±    4210.442    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.025 ±       0.131    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        20.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     68519.506 ±    1396.615   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1527.458 ±      33.460  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35081.153 ±     792.980    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1473.856 ±    1154.589  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     33871.207 ±   27147.494    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.112 ±       0.924  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         2.599 ±      21.361    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        17.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     99765.523 ±    2138.385   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1628.411 ±      49.173  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25700.562 ±     596.417    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1609.326 ±    1411.321  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25420.565 ±   22750.241    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.756 ±       4.700  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.930 ±      74.201    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    178788.307 ±    1612.074   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       763.651 ±      13.682  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6721.494 ±     112.999    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.697 ±       1.830  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5868.155 ±      63.381    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.037 ±       0.316    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    278278.960 ±    3059.409   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1022.535 ±      37.636  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5783.306 ±     257.613    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1074.883 ±    1416.848  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      6083.547 ±    8065.727    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.071 ±       0.406    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        22.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     69404.119 ±    3970.591   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2626.977 ±     184.655  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     59562.319 ±    1511.906    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2541.525 ±    1134.410  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     57627.426 ±   25638.673    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.167 ±       1.223  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.857 ±      28.433    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    204104.888 ±    2864.916   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1429.538 ±      48.434  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     11022.844 ±     296.152    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.627 ±       4.971  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10345.173 ±     167.904    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.741 ±       4.965  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.722 ±      38.390    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    510268.292 ±   10020.753   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       416.888 ±      32.608  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1285.711 ±     107.529    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       471.270 ±    1057.425  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1455.156 ±    3269.415    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.013 ±       0.112    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    644991.452 ±    8521.693   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       357.969 ±      35.671  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       873.407 ±      94.289    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.887 ±    1217.274  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       828.441 ±    2974.996    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.020 ±       0.175    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    691638.455 ±    1554.755   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7.032 ±       0.015  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35634.561 ±     647.397   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1941.016 ±      67.183  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     85717.446 ±    1951.213    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1874.867 ±    1155.275  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     82790.180 ±   50852.397    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.779 ±       5.037  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        34.566 ±     224.096    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    871798.777 ±   27646.987   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2336.200 ±      66.787  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4217.180 ±      46.350    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2142.449 ±    1143.876  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3869.884 ±    2160.273    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.824 ±       6.833  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.482 ±      12.285    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1866646.818 ±   42016.227   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1189.709 ±      27.882  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5      1003.064 ±      35.366    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1202.499 ±    1151.023  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      1014.716 ±     981.836    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.876 ±       7.456  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.737 ±       6.269    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8454753.307 ±   88994.248   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       265.838 ±      27.818  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.488 ±       5.515    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.955 ±    1078.991  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        57.235 ±     201.191    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.002 ±       0.020    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    394291.757 ±    3971.315   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2613.591 ±      57.561  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10431.483 ±     192.404    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2422.044 ±    1417.009  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      9668.543 ±    5701.554    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.316 ±       2.635  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.264 ±      10.529    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        18.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1130636.537 ±   25844.569   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1846.097 ±      41.130  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2569.570 ±      52.839    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1739.946 ±    1408.162  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2423.186 ±    1988.933    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.770 ±       6.499  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.068 ±       9.011    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2760177.404 ±   37702.446   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1210.898 ±      46.339  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       690.433 ±      23.823    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1204.047 ±    1152.258  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       686.621 ±     658.182    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.777 ±       6.530  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.443 ±       3.721    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6360586.340 ±  168612.866   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       731.366 ±      33.141  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       180.961 ±       7.488    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       805.403 ±    1152.728  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       199.357 ±     286.653    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.004 ±       0.017    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6841179.283 ±   46542.004   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       431.699 ±      30.866  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        99.311 ±       7.661    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       472.833 ±    1062.790  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       108.855 ±     244.621    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.001 ±       0.008    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    389936.020 ±    8933.362   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2450.490 ±      96.794  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      9890.612 ±     313.147    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2400.186 ±    1412.740  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      9690.305 ±    5778.947    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.949 ±       7.386  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         3.863 ±      30.074    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        18.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        33.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     78083.646 ±    3368.381   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2187.812 ±      61.409  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44092.420 ±    1214.106    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2144.776 ±    1146.450  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     43244.434 ±   23866.482    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.778 ±       5.996  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5        15.757 ±     121.443    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    128382.049 ±    1568.186   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      2030.065 ±      61.570  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24884.807 ±     639.064    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2001.957 ±      13.744  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     24540.454 ±     243.542    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.912 ±       6.215  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.173 ±      76.235    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        15.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    180269.563 ±    3231.497   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2746.561 ±      82.432  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23978.217 ±     424.110    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2689.898 ±      28.198  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     23484.158 ±     532.402    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.075 ±       0.366  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.656 ±       3.211    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        20.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        34.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     62520.528 ±     500.671   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3173.944 ±      79.229  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79899.519 ±    1823.393    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      3084.065 ±    1419.617  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     77630.684 ±   35483.275    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.025 ±       0.174  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.628 ±       4.372    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        23.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    190813.476 ±    4758.957   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1356.545 ±      31.257  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11187.872 ±     426.158    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1338.098 ±       8.490  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     11035.657 ±     288.258    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.025 ±       0.067  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         0.206 ±       0.555    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        10.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        13.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    470024.134 ±   22136.536   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       418.251 ±      39.955  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1400.344 ±      84.714    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       470.992 ±    1056.463  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1571.857 ±    3516.781    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        13.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    648673.829 ±   59890.216   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       362.005 ±      44.049  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       878.192 ±      45.129    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       338.753 ±    1216.708  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       824.537 ±    2949.545    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.020 ±       0.105    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    710863.586 ±    1558.062   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.227 ±       0.013  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     35582.670 ±     733.900   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1943.316 ±      63.585  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85948.153 ±    1657.467    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1874.096 ±    1157.675  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     82889.231 ±   51241.056    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.808 ±       5.014  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        35.946 ±     223.464    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3645049.609 ±   17525.741   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2941.053 ±      81.758  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1269.781 ±      31.347    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2825.856 ±    1142.844  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1220.013 ±     491.421    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.005 ±       0.019    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   6039645.516 ±  111489.812   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1170.973 ±      33.856  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       305.149 ±      13.972    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1068.785 ±    1409.920  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       278.791 ±     370.852    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.857 ±       7.287  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.223 ±       1.896    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4155764.995 ±   75832.888   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2294.331 ±      81.653  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       868.719 ±      17.420    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2140.918 ±    1143.576  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       810.473 ±     425.598    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.787 ±       6.732  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.300 ±       2.570    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        32.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6971445.363 ±   73057.286   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1340.981 ±      24.801  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       302.687 ±       6.872    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1211.136 ±    1158.848  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       273.416 ±     262.094    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.604 ±       4.932  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.136 ±       1.112    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4316369.545 ±   44510.499   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2478.914 ±      77.870  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       903.821 ±      24.944    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2411.389 ±    1419.130  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       879.329 ±     521.049    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.167 ±       1.346  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.061 ±       0.493    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2183854.663 ±   41666.693   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1316.220 ±      29.009  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       948.528 ±      16.468    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1342.934 ±       4.674  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       967.793 ±      17.580    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.683 ±       5.700  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.491 ±       4.097    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5901456.648 ±   45521.723   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       588.462 ±      16.500  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       156.927 ±       4.505    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       666.080 ±       2.227  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       177.626 ±       1.843    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.095  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.005 ±       0.025    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        15.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4702888.403 ±  160930.387   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1280.930 ±      51.110  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       428.672 ±      13.543    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1206.165 ±    1155.199  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       404.111 ±     392.460    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.704 ±       6.014  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.234 ±       2.003    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   6046248.724 ±   40160.993   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       599.456 ±      31.708  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       156.028 ±       9.230    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       537.118 ±    1156.186  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       139.900 ±     301.145    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.108  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.003 ±       0.028    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        11.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6415621.077 ±  565187.614   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.010 ±       0.084  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.002 ±       0.020    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4625965.675 ±  154982.382   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1315.921 ±      71.332  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       447.607 ±      11.115    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.880 ±       4.248  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       456.478 ±      15.035    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.749 ±       6.274  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.252 ±       2.109    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1594672.088 ±   50351.925   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2154.580 ±      71.589  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2126.450 ±      29.802    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2018.274 ±      24.879  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1992.033 ±      71.505    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.012 ±       0.044    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2918518.918 ±   17113.005   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       562.088 ±      27.382  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       303.110 ±      15.343    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       532.130 ±    1145.452  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       287.070 ±     617.942    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.007 ±       0.043  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.004 ±       0.023    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1717521.634 ±   23943.661   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       945.073 ±      41.156  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       865.903 ±      48.818    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       936.354 ±    1411.443  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       858.769 ±    1305.543    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.015 ±       0.061  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.013 ±       0.056    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2436671.494 ±   30132.568   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       471.389 ±      42.212  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       304.471 ±      30.203    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       371.044 ±    1328.364  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       240.106 ±     859.219    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±       0.023    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1723076.298 ±   51661.131   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5       983.818 ±      43.425  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       898.496 ±      45.012    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       936.242 ±    1409.716  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       856.939 ±    1314.101    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.010 ±       0.049  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.009 ±       0.045    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1874695.030 ±   91301.940   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1438.445 ±      57.035  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1207.674 ±      23.250    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.668 ±       5.174  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1126.540 ±      58.101    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.658 ±       5.530  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.563 ±       4.735    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   3102175.248 ±   28204.633   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       823.499 ±      26.134  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       417.743 ±      14.627    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       800.661 ±    1149.438  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       406.342 ±     586.680    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.005 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.003 ±       0.022    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        18.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2967831.661 ±  133501.640   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1305.838 ±      49.793  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       692.391 ±      24.523    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.878 ±    1154.482  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       640.609 ±     627.692    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.689 ±       5.752  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.364 ±       3.040    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3370956.485 ±   53833.226   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       897.784 ±      25.469  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       419.100 ±      11.415    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       806.068 ±    1156.870  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       376.494 ±     544.052    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.012 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.006 ±       0.021    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3641437.023 ±    6703.423   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2820187.405 ±   88046.877   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1403.420 ±      39.335  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       783.170 ±       9.865    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1342.500 ±       4.204  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       749.207 ±      24.078    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.689 ±       4.700  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.386 ±       2.645    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     12029.549 ±     244.851   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1418.282 ±      40.842  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    185529.755 ±    6708.146    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1469.120 ±    1152.199  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    192219.224 ±  151958.066    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.907 ±       5.762  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       118.473 ±     753.056    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        35.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     24220.247 ±    1584.091   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       365.263 ±      28.206  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     23738.623 ±    2686.342    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       366.138 ±    1307.874  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     23847.320 ±   84813.837    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.804 ±       6.919    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22745.661 ±     289.994   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       254.787 ±      26.418  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17629.698 ±    2053.016    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.970 ±    1079.043  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21281.362 ±   74807.453    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.288 ±       2.484    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      6085.608 ±     194.301   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1899.613 ±      89.416  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    491229.206 ±   13559.108    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1834.581 ±    1132.137  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    474374.175 ±  291592.943    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         1.725 ±       7.824  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       447.594 ±    2036.594    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        51.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     63574.258 ±    1300.848   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       821.911 ±      22.355  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20346.647 ±     508.118    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       798.485 ±    1149.056  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     19778.450 ±   28668.548    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.310 ±       1.781    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     68517.269 ±    1332.653   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       460.089 ±      28.057  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10568.619 ±     775.580    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       502.032 ±    1110.993  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     11548.563 ±   25567.888    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.006 ±       0.050  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.134 ±       1.151    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     75648.727 ±    6462.558   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        22.114 ±      15.275  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       459.815 ±     308.324    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    304984.162 ±    5809.648   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1826.320 ±      55.181  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9421.379 ±     276.886    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1744.814 ±    1414.635  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9005.405 ±    7391.394    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.720 ±       5.407  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.718 ±      27.894    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    486629.351 ±   17118.930   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       557.052 ±      50.734  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1800.989 ±     117.427    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       532.916 ±    1147.142  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1721.687 ±    3706.688    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.040 ±       0.229    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1201931.578 ±   41017.888   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       651.437 ±      29.106  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       852.784 ±      21.063    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       671.470 ±       1.451  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       879.069 ±      29.591    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.011 ±       0.058    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    104581.313 ±    2429.582   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3208.392 ±     103.684  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     48265.322 ±    1183.925    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3088.668 ±    1447.682  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     46467.099 ±   21863.493    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.021 ±       0.098  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.315 ±       1.493    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        23.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        31.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    322602.150 ±   20623.115   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1128.048 ±      56.131  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5501.602 ±     136.709    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1208.710 ±    1156.586  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5904.322 ±    5763.416    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.700 ±       5.757  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.510 ±      28.927    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    692495.644 ±   50291.405   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       545.396 ±      67.715  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1238.869 ±      84.902    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       502.540 ±    1112.244  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1136.683 ±    2505.358    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1536504.108 ±   64120.957   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       735.667 ±      44.537  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       753.340 ±      35.448    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       671.461 ±       2.255  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       687.652 ±      29.098    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.008 ±       0.045    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1736689.998 ±   84844.676   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.048 ±       0.412  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.043 ±       0.371    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    460248.383 ±    7993.400   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       701.903 ±      13.342  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2400.254 ±      52.536    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       668.349 ±       1.714  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2285.518 ±      34.838    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.067  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.057 ±       0.229    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 7059 s, completed May 19, 2018 12:11:51 AM
